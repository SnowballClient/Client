diff -rc ./advancements/critereon/InventoryChangeTrigger.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/advancements/critereon/InventoryChangeTrigger.java
*** ./advancements/critereon/InventoryChangeTrigger.java	2018-11-18 13:18:39.100360000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/advancements/critereon/InventoryChangeTrigger.java	2018-11-18 13:37:38.695229900 -0800
***************
*** 115,121 ****
                  {
                      ++k;
  
!                     if (itemstack.func_190916_E() >= itemstack.getMaxStackSize())
                      {
                          ++i;
                      }
--- 115,121 ----
                  {
                      ++k;
  
!                     if (itemstack.getCount() >= itemstack.getMaxStackSize())
                      {
                          ++i;
                      }
diff -rc ./advancements/critereon/ItemPredicate.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/advancements/critereon/ItemPredicate.java
*** ./advancements/critereon/ItemPredicate.java	2018-11-18 13:18:39.124361000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/advancements/critereon/ItemPredicate.java	2018-11-18 13:37:38.829255300 -0800
***************
*** 58,64 ****
          {
              return false;
          }
!         else if (!this.field_192498_d.func_192514_a((float)p_192493_1_.func_190916_E()))
          {
              return false;
          }
--- 58,64 ----
          {
              return false;
          }
!         else if (!this.field_192498_d.func_192514_a((float)p_192493_1_.getCount()))
          {
              return false;
          }
diff -rc ./block/BlockAir.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockAir.java
*** ./block/BlockAir.java	2018-11-18 13:18:39.366207000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockAir.java	2017-10-20 21:01:16.114177000 -0700
***************
*** 1,5 ****
--- 1,7 ----
  package net.minecraft.block;
  
+ import java.util.IdentityHashMap;
+ import java.util.Map;
  import javax.annotation.Nullable;
  import net.minecraft.block.material.Material;
  import net.minecraft.block.state.BlockFaceShape;
***************
*** 13,18 ****
--- 15,22 ----
  
  public class BlockAir extends Block
  {
+     private static Map mapOriginalOpacity = new IdentityHashMap();
+ 
      protected BlockAir()
      {
          super(Material.AIR);
***************
*** 66,71 ****
--- 70,94 ----
          return false;
      }
  
+     public static void setLightOpacity(Block p_setLightOpacity_0_, int p_setLightOpacity_1_)
+     {
+         if (!mapOriginalOpacity.containsKey(p_setLightOpacity_0_))
+         {
+             mapOriginalOpacity.put(p_setLightOpacity_0_, Integer.valueOf(p_setLightOpacity_0_.lightOpacity));
+         }
+ 
+         p_setLightOpacity_0_.lightOpacity = p_setLightOpacity_1_;
+     }
+ 
+     public static void restoreLightOpacity(Block p_restoreLightOpacity_0_)
+     {
+         if (mapOriginalOpacity.containsKey(p_restoreLightOpacity_0_))
+         {
+             int i = ((Integer)mapOriginalOpacity.get(p_restoreLightOpacity_0_)).intValue();
+             setLightOpacity(p_restoreLightOpacity_0_, i);
+         }
+     }
+ 
      public BlockFaceShape func_193383_a(IBlockAccess p_193383_1_, IBlockState p_193383_2_, BlockPos p_193383_3_, EnumFacing p_193383_4_)
      {
          return BlockFaceShape.UNDEFINED;
diff -rc ./block/BlockCauldron.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockCauldron.java
*** ./block/BlockCauldron.java	2018-11-18 13:18:39.582083000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockCauldron.java	2018-11-18 13:37:21.634831000 -0800
***************
*** 124,130 ****
                  {
                      if (!playerIn.capabilities.isCreativeMode)
                      {
!                         itemstack.func_190918_g(1);
  
                          if (itemstack.func_190926_b())
                          {
--- 124,130 ----
                  {
                      if (!playerIn.capabilities.isCreativeMode)
                      {
!                         itemstack.shrink(1);
  
                          if (itemstack.func_190926_b())
                          {
***************
*** 151,157 ****
                      {
                          ItemStack itemstack3 = PotionUtils.addPotionToItemStack(new ItemStack(Items.POTIONITEM), PotionTypes.WATER);
                          playerIn.addStat(StatList.CAULDRON_USED);
!                         itemstack.func_190918_g(1);
  
                          if (itemstack.func_190926_b())
                          {
--- 151,157 ----
                      {
                          ItemStack itemstack3 = PotionUtils.addPotionToItemStack(new ItemStack(Items.POTIONITEM), PotionTypes.WATER);
                          playerIn.addStat(StatList.CAULDRON_USED);
!                         itemstack.shrink(1);
  
                          if (itemstack.func_190926_b())
                          {
***************
*** 215,227 ****
                      if (TileEntityBanner.getPatterns(itemstack) > 0 && !worldIn.isRemote)
                      {
                          ItemStack itemstack1 = itemstack.copy();
!                         itemstack1.func_190920_e(1);
                          TileEntityBanner.removeBannerData(itemstack1);
                          playerIn.addStat(StatList.BANNER_CLEANED);
  
                          if (!playerIn.capabilities.isCreativeMode)
                          {
!                             itemstack.func_190918_g(1);
                              this.setWaterLevel(worldIn, pos, state, i - 1);
                          }
  
--- 215,227 ----
                      if (TileEntityBanner.getPatterns(itemstack) > 0 && !worldIn.isRemote)
                      {
                          ItemStack itemstack1 = itemstack.copy();
!                         itemstack1.setCount(1);
                          TileEntityBanner.removeBannerData(itemstack1);
                          playerIn.addStat(StatList.BANNER_CLEANED);
  
                          if (!playerIn.capabilities.isCreativeMode)
                          {
!                             itemstack.shrink(1);
                              this.setWaterLevel(worldIn, pos, state, i - 1);
                          }
  
diff -rc ./block/BlockDropper.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockDropper.java
*** ./block/BlockDropper.java	2018-11-18 13:18:39.868918000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockDropper.java	2018-11-18 13:37:00.542030500 -0800
***************
*** 64,70 ****
                          if (itemstack1.func_190926_b())
                          {
                              itemstack1 = itemstack.copy();
!                             itemstack1.func_190918_g(1);
                          }
                          else
                          {
--- 64,70 ----
                          if (itemstack1.func_190926_b())
                          {
                              itemstack1 = itemstack.copy();
!                             itemstack1.shrink(1);
                          }
                          else
                          {
diff -rc ./block/BlockEndPortal.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockEndPortal.java
*** ./block/BlockEndPortal.java	2018-11-18 13:18:39.931881000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockEndPortal.java	2017-10-20 21:01:16.523744000 -0700
***************
*** 76,82 ****
       */
      public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn)
      {
!         if (!entityIn.isRiding() && !entityIn.isBeingRidden() && entityIn.isNonBoss() && !worldIn.isRemote && entityIn.getEntityBoundingBox().intersectsWith(state.getBoundingBox(worldIn, pos).offset(pos)))
          {
              entityIn.changeDimension(1);
          }
--- 76,82 ----
       */
      public void onEntityCollidedWithBlock(World worldIn, BlockPos pos, IBlockState state, Entity entityIn)
      {
!         if (!worldIn.isRemote && !entityIn.isRiding() && !entityIn.isBeingRidden() && entityIn.isNonBoss() && entityIn.getEntityBoundingBox().intersectsWith(state.getBoundingBox(worldIn, pos).offset(pos)))
          {
              entityIn.changeDimension(1);
          }
diff -rc ./block/BlockFarmland.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockFarmland.java
*** ./block/BlockFarmland.java	2018-11-18 13:18:39.978869000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockFarmland.java	2017-10-20 21:01:16.567242000 -0700
***************
*** 22,27 ****
--- 22,28 ----
  {
      public static final PropertyInteger MOISTURE = PropertyInteger.create("moisture", 0, 7);
      protected static final AxisAlignedBB FARMLAND_AABB = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.9375D, 1.0D);
+     protected static final AxisAlignedBB field_194405_c = new AxisAlignedBB(0.0D, 0.9375D, 0.0D, 1.0D, 1.0D, 1.0D);
  
      protected BlockFarmland()
      {
***************
*** 61,67 ****
              }
              else if (!this.hasCrops(worldIn, pos))
              {
!                 this.func_190970_b(worldIn, pos);
              }
          }
          else if (i < 7)
--- 62,68 ----
              }
              else if (!this.hasCrops(worldIn, pos))
              {
!                 func_190970_b(worldIn, pos);
              }
          }
          else if (i < 7)
***************
*** 77,97 ****
      {
          if (!worldIn.isRemote && worldIn.rand.nextFloat() < fallDistance - 0.5F && entityIn instanceof EntityLivingBase && (entityIn instanceof EntityPlayer || worldIn.getGameRules().getBoolean("mobGriefing")) && entityIn.width * entityIn.width * entityIn.height > 0.512F)
          {
!             this.func_190970_b(worldIn, pos);
          }
  
          super.onFallenUpon(worldIn, pos, entityIn, fallDistance);
      }
  
!     private void func_190970_b(World p_190970_1_, BlockPos p_190970_2_)
      {
!         IBlockState iblockstate = Blocks.DIRT.getDefaultState();
!         p_190970_1_.setBlockState(p_190970_2_, iblockstate);
!         AxisAlignedBB axisalignedbb = iblockstate.getCollisionBoundingBox(p_190970_1_, p_190970_2_).offset(p_190970_2_);
  
!         for (Entity entity : p_190970_1_.getEntitiesWithinAABBExcludingEntity((Entity)null, axisalignedbb))
          {
!             entity.setPosition(entity.posX, axisalignedbb.maxY, entity.posZ);
          }
      }
  
--- 78,98 ----
      {
          if (!worldIn.isRemote && worldIn.rand.nextFloat() < fallDistance - 0.5F && entityIn instanceof EntityLivingBase && (entityIn instanceof EntityPlayer || worldIn.getGameRules().getBoolean("mobGriefing")) && entityIn.width * entityIn.width * entityIn.height > 0.512F)
          {
!             func_190970_b(worldIn, pos);
          }
  
          super.onFallenUpon(worldIn, pos, entityIn, fallDistance);
      }
  
!     protected static void func_190970_b(World p_190970_0_, BlockPos p_190970_1_)
      {
!         p_190970_0_.setBlockState(p_190970_1_, Blocks.DIRT.getDefaultState());
!         AxisAlignedBB axisalignedbb = field_194405_c.offset(p_190970_1_);
  
!         for (Entity entity : p_190970_0_.getEntitiesWithinAABBExcludingEntity((Entity)null, axisalignedbb))
          {
!             double d0 = Math.min(axisalignedbb.maxY - axisalignedbb.minY, axisalignedbb.maxY - entity.getEntityBoundingBox().minY);
!             entity.setPositionAndUpdate(entity.posX, entity.posY + d0 + 0.001D, entity.posZ);
          }
      }
  
***************
*** 125,131 ****
  
          if (worldIn.getBlockState(pos.up()).getMaterial().isSolid())
          {
!             this.func_190970_b(worldIn, pos);
          }
      }
  
--- 126,132 ----
  
          if (worldIn.getBlockState(pos.up()).getMaterial().isSolid())
          {
!             func_190970_b(worldIn, pos);
          }
      }
  
***************
*** 138,144 ****
  
          if (worldIn.getBlockState(pos.up()).getMaterial().isSolid())
          {
!             this.func_190970_b(worldIn, pos);
          }
      }
  
--- 139,145 ----
  
          if (worldIn.getBlockState(pos.up()).getMaterial().isSolid())
          {
!             func_190970_b(worldIn, pos);
          }
      }
  
diff -rc ./block/BlockFlowerPot.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockFlowerPot.java
*** ./block/BlockFlowerPot.java	2018-11-18 13:18:40.041833000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockFlowerPot.java	2018-11-18 13:37:00.569019600 -0800
***************
*** 103,109 ****
  
                  if (!playerIn.capabilities.isCreativeMode)
                  {
!                     itemstack.func_190918_g(1);
                  }
              }
              else
--- 103,109 ----
  
                  if (!playerIn.capabilities.isCreativeMode)
                  {
!                     itemstack.shrink(1);
                  }
              }
              else
diff -rc ./block/BlockGrassPath.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockGrassPath.java
*** ./block/BlockGrassPath.java	2018-11-18 13:18:40.115777000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockGrassPath.java	2017-10-20 21:01:16.701742000 -0700
***************
*** 56,62 ****
      {
          if (p_190971_1_.getBlockState(p_190971_2_.up()).getMaterial().isSolid())
          {
!             p_190971_1_.setBlockState(p_190971_2_, Blocks.DIRT.getDefaultState());
          }
      }
  
--- 56,62 ----
      {
          if (p_190971_1_.getBlockState(p_190971_2_.up()).getMaterial().isSolid())
          {
!             BlockFarmland.func_190970_b(p_190971_1_, p_190971_2_);
          }
      }
  
diff -rc ./block/BlockShulkerBox.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockShulkerBox.java
*** ./block/BlockShulkerBox.java	2018-11-18 13:18:40.915318000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockShulkerBox.java	2018-11-18 13:37:37.954395900 -0800
***************
*** 264,270 ****
                          if (i <= 4)
                          {
                              ++i;
!                             p_190948_3_.add(String.format("%s x%d", itemstack.getDisplayName(), itemstack.func_190916_E()));
                          }
                      }
                  }
--- 264,270 ----
                          if (i <= 4)
                          {
                              ++i;
!                             p_190948_3_.add(String.format("%s x%d", itemstack.getDisplayName(), itemstack.getCount()));
                          }
                      }
                  }
diff -rc ./block/BlockTNT.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockTNT.java
*** ./block/BlockTNT.java	2018-11-18 13:18:41.196154000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/BlockTNT.java	2018-11-18 13:37:00.597002700 -0800
***************
*** 110,116 ****
              }
              else if (!playerIn.capabilities.isCreativeMode)
              {
!                 itemstack.func_190918_g(1);
              }
  
              return true;
--- 110,116 ----
              }
              else if (!playerIn.capabilities.isCreativeMode)
              {
!                 itemstack.shrink(1);
              }
  
              return true;
diff -rc ./block/material/MapColor.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/material/MapColor.java
*** ./block/material/MapColor.java	2018-11-18 13:18:41.405036000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/material/MapColor.java	2017-10-20 21:01:17.722743000 -0700
***************
*** 63,69 ****
      public static final MapColor field_193560_ab = new MapColor(51, 2430480);
  
      /** Holds the color in RGB value that will be rendered on maps. */
!     public final int colorValue;
  
      /** Holds the index of the color used on map. */
      public final int colorIndex;
--- 63,69 ----
      public static final MapColor field_193560_ab = new MapColor(51, 2430480);
  
      /** Holds the color in RGB value that will be rendered on maps. */
!     public int colorValue;
  
      /** Holds the index of the color used on map. */
      public final int colorIndex;
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/state: BlockStateBas#
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/state: BlockStateBas~
diff -rc ./block/state/BlockStateBase.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/state/BlockStateBase.java
*** ./block/state/BlockStateBase.java	2018-11-18 13:18:41.566956000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/state/BlockStateBase.java	2017-10-20 21:08:22.012211600 -0700
***************
*** 2,7 ****
--- 2,8 ----
  
  import com.google.common.base.Function;
  import com.google.common.base.Joiner;
+ import com.google.common.collect.ImmutableTable;
  import com.google.common.collect.Iterables;
  import java.util.Collection;
  import java.util.Iterator;
***************
*** 9,14 ****
--- 10,16 ----
  import javax.annotation.Nullable;
  import net.minecraft.block.Block;
  import net.minecraft.block.properties.IProperty;
+ import net.minecraft.util.ResourceLocation;
  
  public abstract class BlockStateBase implements IBlockState
  {
***************
*** 30,38 ****
          }
          private <T extends Comparable<T>> String getPropertyName(IProperty<T> property, Comparable<?> entry)
          {
!             return property.getName((T)entry);
          }
      };
  
      public <T extends Comparable<T>> IBlockState cycleProperty(IProperty<T> property)
      {
--- 32,89 ----
          }
          private <T extends Comparable<T>> String getPropertyName(IProperty<T> property, Comparable<?> entry)
          {
!             return property.getName((T) entry);
          }
      };
+     private int blockId = -1;
+     private int blockStateId = -1;
+     private int metadata = -1;
+     private ResourceLocation blockLocation = null;
+ 
+     public int getBlockId()
+     {
+         if (this.blockId < 0)
+         {
+             this.blockId = Block.getIdFromBlock(this.getBlock());
+         }
+ 
+         return this.blockId;
+     }
+ 
+     public int getBlockStateId()
+     {
+         if (this.blockStateId < 0)
+         {
+             this.blockStateId = Block.getStateId(this);
+         }
+ 
+         return this.blockStateId;
+     }
+ 
+     public int getMetadata()
+     {
+         if (this.metadata < 0)
+         {
+             this.metadata = this.getBlock().getMetaFromState(this);
+         }
+ 
+         return this.metadata;
+     }
+ 
+     public ResourceLocation getBlockLocation()
+     {
+         if (this.blockLocation == null)
+         {
+             this.blockLocation = Block.REGISTRY.getNameForObject(this.getBlock());
+         }
+ 
+         return this.blockLocation;
+     }
+ 
+     public ImmutableTable < IProperty<?>, Comparable<?>, IBlockState > getPropertyValueTable()
+     {
+         return null;
+     }
  
      public <T extends Comparable<T>> IBlockState cycleProperty(IProperty<T> property)
      {
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/state: BlockStateCon#
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/state: BlockStateCon~
diff -rc ./block/state/BlockStateContainer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/state/BlockStateContainer.java
*** ./block/state/BlockStateContainer.java	2018-11-18 13:18:41.580932000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/block/state/BlockStateContainer.java	2017-10-20 21:35:39.896781400 -0700
***************
*** 17,26 ****
--- 17,28 ----
  import java.util.Collections;
  import java.util.List;
  import java.util.Map;
+ import java.util.Optional;
  import java.util.Map.Entry;
  import java.util.regex.Pattern;
  import javax.annotation.Nullable;
  import net.minecraft.block.Block;
+ import net.minecraft.block.BlockFlower;
  import net.minecraft.block.material.EnumPushReaction;
  import net.minecraft.block.material.MapColor;
  import net.minecraft.block.material.Material;
***************
*** 39,44 ****
--- 41,49 ----
  import net.minecraft.util.math.Vec3d;
  import net.minecraft.world.IBlockAccess;
  import net.minecraft.world.World;
+ import net.minecraftforge.common.property.IUnlistedProperty;
+ import optifine.BlockModelUtils;
+ import optifine.Reflector;
  
  public class BlockStateContainer
  {
***************
*** 57,89 ****
  
      public BlockStateContainer(Block blockIn, IProperty<?>... properties)
      {
!         this.block = blockIn;
          Map < String, IProperty<? >> map = Maps. < String, IProperty<? >> newHashMap();
  
!         for (IProperty<?> iproperty : properties)
          {
!             validateProperty(blockIn, iproperty);
              map.put(iproperty.getName(), iproperty);
          }
  
          this.properties = ImmutableSortedMap.copyOf(map);
          Map < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > map2 = Maps. < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > newLinkedHashMap();
!         List<BlockStateContainer.StateImplementation> list1 = Lists.<BlockStateContainer.StateImplementation>newArrayList();
  
!         for (List < Comparable<? >> list : Cartesian.cartesianProduct(this.getAllowedValues()))
          {
!             Map < IProperty<?>, Comparable<? >> map1 = MapPopulator. < IProperty<?>, Comparable<? >> createMap(this.properties.values(), list);
!             BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation = new BlockStateContainer.StateImplementation(blockIn, ImmutableMap.copyOf(map1));
              map2.put(map1, blockstatecontainer$stateimplementation);
!             list1.add(blockstatecontainer$stateimplementation);
          }
  
!         for (BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation1 : list1)
          {
              blockstatecontainer$stateimplementation1.buildPropertyValueTable(map2);
          }
  
!         this.validStates = ImmutableList.<IBlockState>copyOf(list1);
      }
  
      public static <T extends Comparable<T>> String validateProperty(Block block, IProperty<T> property)
--- 62,104 ----
  
      public BlockStateContainer(Block blockIn, IProperty<?>... properties)
      {
!         this(blockIn, properties, (ImmutableMap)null);
!     }
! 
!     protected BlockStateContainer.StateImplementation createState(Block p_createState_1_, ImmutableMap < IProperty<?>, Comparable<? >> p_createState_2_, @Nullable ImmutableMap < IUnlistedProperty<?>, Optional<? >> p_createState_3_)
!     {
!         return new BlockStateContainer.StateImplementation(p_createState_1_, p_createState_2_);
!     }
! 
!     protected BlockStateContainer(Block p_i9_1_, IProperty<?>[] p_i9_2_, ImmutableMap < IUnlistedProperty<?>, Optional<? >> p_i9_3_)
!     {
!         this.block = p_i9_1_;
          Map < String, IProperty<? >> map = Maps. < String, IProperty<? >> newHashMap();
  
!         for (IProperty<?> iproperty : p_i9_2_)
          {
!             validateProperty(p_i9_1_, iproperty);
              map.put(iproperty.getName(), iproperty);
          }
  
          this.properties = ImmutableSortedMap.copyOf(map);
          Map < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > map2 = Maps. < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > newLinkedHashMap();
!         List<BlockStateContainer.StateImplementation> list = Lists.<BlockStateContainer.StateImplementation>newArrayList();
  
!         for (List < Comparable<? >> list1 : Cartesian.cartesianProduct(this.getAllowedValues()))
          {
!             Map < IProperty<?>, Comparable<? >> map1 = MapPopulator. < IProperty<?>, Comparable<? >> createMap(this.properties.values(), list1);
!             BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation = this.createState(p_i9_1_, ImmutableMap.copyOf(map1), p_i9_3_);
              map2.put(map1, blockstatecontainer$stateimplementation);
!             list.add(blockstatecontainer$stateimplementation);
          }
  
!         for (BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation1 : list)
          {
              blockstatecontainer$stateimplementation1.buildPropertyValueTable(map2);
          }
  
!         this.validStates = ImmutableList.copyOf(list);
      }
  
      public static <T extends Comparable<T>> String validateProperty(Block block, IProperty<T> property)
***************
*** 156,161 ****
--- 171,225 ----
          return (IProperty)this.properties.get(propertyName);
      }
  
+     public static class Builder
+     {
+         private final Block block;
+         private final List < IProperty<? >> listed = Lists. < IProperty<? >> newArrayList();
+         private final List < IUnlistedProperty<? >> unlisted = Lists. < IUnlistedProperty<? >> newArrayList();
+ 
+         public Builder(Block p_i11_1_)
+         {
+             this.block = p_i11_1_;
+         }
+ 
+         public BlockStateContainer.Builder add(IProperty<?>... p_add_1_)
+         {
+             for (IProperty<?> iproperty : p_add_1_)
+             {
+                 this.listed.add(iproperty);
+             }
+ 
+             return this;
+         }
+ 
+         public BlockStateContainer.Builder add(IUnlistedProperty<?>... p_add_1_)
+         {
+             for (IUnlistedProperty<?> iunlistedproperty : p_add_1_)
+             {
+                 this.unlisted.add(iunlistedproperty);
+             }
+ 
+             return this;
+         }
+ 
+         public BlockStateContainer build()
+         {
+             IProperty<?>[] iproperty = new IProperty[this.listed.size()];
+             iproperty = (IProperty[])this.listed.toArray(iproperty);
+ 
+             if (this.unlisted.size() == 0)
+             {
+                 return new BlockStateContainer(this.block, iproperty);
+             }
+             else
+             {
+                 IUnlistedProperty<?>[] iunlistedproperty = new IUnlistedProperty[this.unlisted.size()];
+                 iunlistedproperty = (IUnlistedProperty[])this.unlisted.toArray(iunlistedproperty);
+                 return (BlockStateContainer)Reflector.newInstance(Reflector.ExtendedBlockState_Constructor, this.block, iproperty, iunlistedproperty);
+             }
+         }
+     }
+ 
      static class StateImplementation extends BlockStateBase
      {
          private final Block block;
***************
*** 168,173 ****
--- 232,244 ----
              this.properties = propertiesIn;
          }
  
+         protected StateImplementation(Block p_i8_1_, ImmutableMap < IProperty<?>, Comparable<? >> p_i8_2_, ImmutableTable < IProperty<?>, Comparable<?>, IBlockState > p_i8_3_)
+         {
+             this.block = p_i8_1_;
+             this.properties = p_i8_2_;
+             this.propertyValueTable = p_i8_3_;
+         }
+ 
          public Collection < IProperty<? >> getPropertyNames()
          {
              return Collections. < IProperty<? >> unmodifiableCollection(this.properties.keySet());
***************
*** 428,434 ****
  
          public AxisAlignedBB getBoundingBox(IBlockAccess blockAccess, BlockPos pos)
          {
!             return this.block.getBoundingBox(this, blockAccess, pos);
          }
  
          public RayTraceResult collisionRayTrace(World worldIn, BlockPos pos, Vec3d start, Vec3d end)
--- 499,516 ----
  
          public AxisAlignedBB getBoundingBox(IBlockAccess blockAccess, BlockPos pos)
          {
!             Block.EnumOffsetType block$enumoffsettype = this.block.getOffsetType();
! 
!             if (block$enumoffsettype != Block.EnumOffsetType.NONE && !(this.block instanceof BlockFlower))
!             {
!                 AxisAlignedBB axisalignedbb = this.block.getBoundingBox(this, blockAccess, pos);
!                 axisalignedbb = BlockModelUtils.getOffsetBoundingBox(axisalignedbb, block$enumoffsettype, pos);
!                 return axisalignedbb;
!             }
!             else
!             {
!                 return this.block.getBoundingBox(this, blockAccess, pos);
!             }
          }
  
          public RayTraceResult collisionRayTrace(World worldIn, BlockPos pos, Vec3d start, Vec3d end)
***************
*** 461,466 ****
--- 543,573 ----
              return this.block.causesSuffocation(this);
          }
  
+         public ImmutableTable < IProperty<?>, Comparable<?>, IBlockState > getPropertyValueTable()
+         {
+             return this.propertyValueTable;
+         }
+ 
+         public int getLightOpacity(IBlockAccess p_getLightOpacity_1_, BlockPos p_getLightOpacity_2_)
+         {
+             return Reflector.callInt(this.block, Reflector.ForgeBlock_getLightOpacity, this, p_getLightOpacity_1_, p_getLightOpacity_2_);
+         }
+ 
+         public int getLightValue(IBlockAccess p_getLightValue_1_, BlockPos p_getLightValue_2_)
+         {
+             return Reflector.callInt(this.block, Reflector.ForgeBlock_getLightValue, this, p_getLightValue_1_, p_getLightValue_2_);
+         }
+ 
+         public boolean isSideSolid(IBlockAccess p_isSideSolid_1_, BlockPos p_isSideSolid_2_, EnumFacing p_isSideSolid_3_)
+         {
+             return Reflector.callBoolean(this.block, Reflector.ForgeBlock_isSideSolid, this, p_isSideSolid_1_, p_isSideSolid_2_, p_isSideSolid_3_);
+         }
+ 
+         public boolean doesSideBlockRendering(IBlockAccess p_doesSideBlockRendering_1_, BlockPos p_doesSideBlockRendering_2_, EnumFacing p_doesSideBlockRendering_3_)
+         {
+             return Reflector.callBoolean(this.block, Reflector.ForgeBlock_doesSideBlockRendering, this, p_doesSideBlockRendering_1_, p_doesSideBlockRendering_2_, p_doesSideBlockRendering_3_);
+         }
+ 
          public BlockFaceShape func_193401_d(IBlockAccess p_193401_1_, BlockPos p_193401_2_, EnumFacing p_193401_3_)
          {
              return this.block.func_193383_a(p_193401_1_, this, p_193401_2_, p_193401_3_);
diff -rc ./client/audio/MusicTicker.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/audio/MusicTicker.java
*** ./client/audio/MusicTicker.java	2018-11-18 13:18:41.964712000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/audio/MusicTicker.java	2018-12-06 22:04:11.653371500 -0800
***************
*** 61,66 ****
--- 61,68 ----
  
      public static enum MusicType
      {
+     	SNOWBALL_CREDITS(SoundEvents.MUSIC_CREDITS, 0, 0),
+     	
          MENU(SoundEvents.MUSIC_MENU, 20, 600),
          GAME(SoundEvents.MUSIC_GAME, 12000, 24000),
          CREATIVE(SoundEvents.MUSIC_CREATIVE, 1200, 3600),
diff -rc ./client/ClientBrandRetriever.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/ClientBrandRetriever.java
*** ./client/ClientBrandRetriever.java	2018-11-18 13:18:41.715856000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/ClientBrandRetriever.java	2018-12-15 16:58:29.765573500 -0800
***************
*** 1,9 ****
  package net.minecraft.client;
  
  public class ClientBrandRetriever
  {
      public static String getClientModName()
      {
!         return "vanilla";
      }
  }
--- 1,11 ----
  package net.minecraft.client;
  
+ import org.golde.snowball.shared.Constants;
+ 
  public class ClientBrandRetriever
  {
      public static String getClientModName()
      {
!         return Constants.MINECRAFT_KEY;
      }
  }
diff -rc ./client/entity/AbstractClientPlayer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/entity/AbstractClientPlayer.java
*** ./client/entity/AbstractClientPlayer.java	2018-11-18 13:18:42.130616000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/entity/AbstractClientPlayer.java	2018-11-30 22:33:31.025277200 -0800
***************
*** 3,8 ****
--- 3,11 ----
  import com.mojang.authlib.GameProfile;
  import java.io.File;
  import javax.annotation.Nullable;
+ 
+ import org.golde.snowball.SnowballPlayer;
+ 
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.network.NetworkPlayerInfo;
  import net.minecraft.client.renderer.ImageBufferDownload;
***************
*** 18,23 ****
--- 21,30 ----
  import net.minecraft.util.StringUtils;
  import net.minecraft.world.GameType;
  import net.minecraft.world.World;
+ import optifine.CapeUtils;
+ import optifine.Config;
+ import optifine.PlayerConfigurations;
+ import optifine.Reflector;
  
  public abstract class AbstractClientPlayer extends EntityPlayer
  {
***************
*** 25,34 ****
--- 32,56 ----
      public float rotateElytraX;
      public float rotateElytraY;
      public float rotateElytraZ;
+     private ResourceLocation locationOfCape = null;
+     private String nameClear = null;
+     private static final ResourceLocation TEXTURE_ELYTRA = new ResourceLocation("textures/entity/elytra.png");
+     private final SnowballPlayer snowballPlayer;
  
      public AbstractClientPlayer(World worldIn, GameProfile playerProfile)
      {
          super(worldIn, playerProfile);
+         this.nameClear = playerProfile.getName();
+ 
+         if (this.nameClear != null && !this.nameClear.isEmpty())
+         {
+             this.nameClear = StringUtils.stripControlCodes(this.nameClear);
+         }
+ 
+         CapeUtils.downloadCape(this);
+         PlayerConfigurations.getPlayerConfiguration(this);
+         
+         snowballPlayer = SnowballPlayer.get(nameClear);
      }
  
      /**
***************
*** 39,44 ****
--- 61,70 ----
          NetworkPlayerInfo networkplayerinfo = Minecraft.getMinecraft().getConnection().getPlayerInfo(this.getGameProfile().getId());
          return networkplayerinfo != null && networkplayerinfo.getGameType() == GameType.SPECTATOR;
      }
+     
+     public SnowballPlayer getSnowballPlayer() {
+ 		return snowballPlayer;
+ 	}
  
      public boolean isCreative()
      {
***************
*** 55,61 ****
      }
  
      @Nullable
!     protected NetworkPlayerInfo getPlayerInfo()
      {
          if (this.playerInfo == null)
          {
--- 81,87 ----
      }
  
      @Nullable
! 	public NetworkPlayerInfo getPlayerInfo()
      {
          if (this.playerInfo == null)
          {
***************
*** 79,84 ****
--- 105,115 ----
       */
      public ResourceLocation getLocationSkin()
      {
+     	
+     	if(snowballPlayer.getCustomSkin() != null) {
+     		return snowballPlayer.getCustomSkin();
+     	}
+     	
          NetworkPlayerInfo networkplayerinfo = this.getPlayerInfo();
          return networkplayerinfo == null ? DefaultPlayerSkin.getDefaultSkin(this.getUniqueID()) : networkplayerinfo.getLocationSkin();
      }
***************
*** 86,93 ****
      @Nullable
      public ResourceLocation getLocationCape()
      {
!         NetworkPlayerInfo networkplayerinfo = this.getPlayerInfo();
!         return networkplayerinfo == null ? null : networkplayerinfo.getLocationCape();
      }
  
      public boolean isPlayerInfoSet()
--- 117,135 ----
      @Nullable
      public ResourceLocation getLocationCape()
      {
!         if (!Config.isShowCapes())
!         {
!             return null;
!         }
!         else if (this.locationOfCape != null)
!         {
!             return this.locationOfCape;
!         }
!         else
!         {
!             NetworkPlayerInfo networkplayerinfo = this.getPlayerInfo();
!             return networkplayerinfo == null ? null : networkplayerinfo.getLocationCape();
!         }
      }
  
      public boolean isPlayerInfoSet()
***************
*** 168,173 ****
              f *= 1.0F - f1 * 0.15F;
          }
  
!         return f;
      }
  }
--- 210,244 ----
              f *= 1.0F - f1 * 0.15F;
          }
  
!         return Reflector.ForgeHooksClient_getOffsetFOV.exists() ? Reflector.callFloat(Reflector.ForgeHooksClient_getOffsetFOV, this, f) : f;
!     }
! 
!     public String getNameClear()
!     {
!         return this.nameClear;
!     }
! 
!     public ResourceLocation getLocationOfCape()
!     {
!         return this.locationOfCape;
!     }
! 
!     public void setLocationOfCape(ResourceLocation p_setLocationOfCape_1_)
!     {
!         this.locationOfCape = p_setLocationOfCape_1_;
!     }
! 
!     public boolean hasElytraCape()
!     {
!         ResourceLocation resourcelocation = this.getLocationCape();
! 
!         if (resourcelocation == null)
!         {
!             return false;
!         }
!         else
!         {
!             return resourcelocation != this.locationOfCape;
!         }
      }
  }
diff -rc ./client/entity/EntityPlayerSP.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/entity/EntityPlayerSP.java
*** ./client/entity/EntityPlayerSP.java	2018-11-18 13:18:42.152603000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/entity/EntityPlayerSP.java	2017-10-20 21:01:18.180741000 -0700
***************
*** 17,22 ****
--- 17,23 ----
  import net.minecraft.client.gui.inventory.GuiBeacon;
  import net.minecraft.client.gui.inventory.GuiBrewingStand;
  import net.minecraft.client.gui.inventory.GuiChest;
+ import net.minecraft.client.gui.inventory.GuiContainer;
  import net.minecraft.client.gui.inventory.GuiCrafting;
  import net.minecraft.client.gui.inventory.GuiDispenser;
  import net.minecraft.client.gui.inventory.GuiEditCommandBlockMinecart;
***************
*** 914,919 ****
--- 915,925 ----
          {
              if (this.mc.currentScreen != null && !this.mc.currentScreen.doesGuiPauseGame())
              {
+                 if (this.mc.currentScreen instanceof GuiContainer)
+                 {
+                     this.closeScreen();
+                 }
+ 
                  this.mc.displayGuiScreen((GuiScreen)null);
              }
  
diff -rc ./client/gui/FontRenderer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/FontRenderer.java
*** ./client/gui/FontRenderer.java	2018-11-18 13:18:42.200592000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/FontRenderer.java	2018-11-18 14:58:01.938765900 -0800
***************
*** 9,14 ****
--- 9,15 ----
  import java.util.Arrays;
  import java.util.List;
  import java.util.Locale;
+ import java.util.Properties;
  import java.util.Random;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.renderer.BufferBuilder;
***************
*** 22,27 ****
--- 23,33 ----
  import net.minecraft.client.resources.IResourceManagerReloadListener;
  import net.minecraft.client.settings.GameSettings;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.FontUtils;
+ import optifine.GlBlendState;
+ 
  import org.apache.commons.io.IOUtils;
  
  public class FontRenderer implements IResourceManagerReloadListener
***************
*** 45,51 ****
       * drop shadows.
       */
      private final int[] colorCode = new int[32];
!     private final ResourceLocation locationFontTexture;
  
      /** The RenderEngine used to load and setup glyph textures. */
      private final TextureManager renderEngine;
--- 51,57 ----
       * drop shadows.
       */
      private final int[] colorCode = new int[32];
!     private ResourceLocation locationFontTexture;
  
      /** The RenderEngine used to load and setup glyph textures. */
      private final TextureManager renderEngine;
***************
*** 99,111 ****
       * Set if the "m" style (strikethrough) is active in currently rendering string
       */
      private boolean strikethroughStyle;
  
      public FontRenderer(GameSettings gameSettingsIn, ResourceLocation location, TextureManager textureManagerIn, boolean unicode)
      {
          this.locationFontTexture = location;
          this.renderEngine = textureManagerIn;
          this.unicodeFlag = unicode;
!         textureManagerIn.bindTexture(this.locationFontTexture);
  
          for (int i = 0; i < 32; ++i)
          {
--- 105,127 ----
       * Set if the "m" style (strikethrough) is active in currently rendering string
       */
      private boolean strikethroughStyle;
+     public GameSettings gameSettings;
+     public ResourceLocation locationFontTextureBase;
+     public boolean enabled = true;
+     public float offsetBold = 1.0F;
+     private float[] charWidthFloat = new float[256];
+     private boolean blend = false;
+     private GlBlendState oldBlendState = new GlBlendState();
  
      public FontRenderer(GameSettings gameSettingsIn, ResourceLocation location, TextureManager textureManagerIn, boolean unicode)
      {
+         this.gameSettings = gameSettingsIn;
+         this.locationFontTextureBase = location;
          this.locationFontTexture = location;
          this.renderEngine = textureManagerIn;
          this.unicodeFlag = unicode;
!         this.locationFontTexture = FontUtils.getHdFontLocation(this.locationFontTextureBase);
!         this.bindTexture(this.locationFontTexture);
  
          for (int i = 0; i < 32; ++i)
          {
***************
*** 144,149 ****
--- 160,172 ----
  
      public void onResourceManagerReload(IResourceManager resourceManager)
      {
+         this.locationFontTexture = FontUtils.getHdFontLocation(this.locationFontTextureBase);
+ 
+         for (int i = 0; i < UNICODE_PAGE_LOCATIONS.length; ++i)
+         {
+             UNICODE_PAGE_LOCATIONS[i] = null;
+         }
+ 
          this.readFontTexture();
          this.readGlyphSizes();
      }
***************
*** 155,161 ****
  
          try
          {
!             iresource = Minecraft.getMinecraft().getResourceManager().getResource(this.locationFontTexture);
              bufferedimage = TextureUtil.readBufferedImage(iresource.getInputStream());
          }
          catch (IOException ioexception)
--- 178,184 ----
  
          try
          {
!             iresource = this.getResource(this.locationFontTexture);
              bufferedimage = TextureUtil.readBufferedImage(iresource.getInputStream());
          }
          catch (IOException ioexception)
***************
*** 167,216 ****
              IOUtils.closeQuietly((Closeable)iresource);
          }
  
!         int lvt_3_2_ = bufferedimage.getWidth();
!         int lvt_4_1_ = bufferedimage.getHeight();
!         int[] lvt_5_1_ = new int[lvt_3_2_ * lvt_4_1_];
!         bufferedimage.getRGB(0, 0, lvt_3_2_, lvt_4_1_, lvt_5_1_, 0, lvt_3_2_);
!         int lvt_6_1_ = lvt_4_1_ / 16;
!         int lvt_7_1_ = lvt_3_2_ / 16;
!         boolean lvt_8_1_ = true;
!         float lvt_9_1_ = 8.0F / (float)lvt_7_1_;
  
!         for (int lvt_10_1_ = 0; lvt_10_1_ < 256; ++lvt_10_1_)
          {
!             int j1 = lvt_10_1_ % 16;
!             int k1 = lvt_10_1_ / 16;
  
!             if (lvt_10_1_ == 32)
!             {
!                 this.charWidth[lvt_10_1_] = 4;
!             }
  
!             int l1;
  
!             for (l1 = lvt_7_1_ - 1; l1 >= 0; --l1)
              {
!                 int i2 = j1 * lvt_7_1_ + l1;
!                 boolean flag1 = true;
  
!                 for (int j2 = 0; j2 < lvt_6_1_ && flag1; ++j2)
                  {
!                     int k2 = (k1 * lvt_7_1_ + j2) * lvt_3_2_;
  
!                     if ((lvt_5_1_[i2 + k2] >> 24 & 255) != 0)
                      {
!                         flag1 = false;
                      }
                  }
  
!                 if (!flag1)
                  {
                      break;
                  }
              }
  
!             ++l1;
!             this.charWidth[lvt_10_1_] = (int)(0.5D + (double)((float)l1 * lvt_9_1_)) + 1;
          }
      }
  
--- 190,268 ----
              IOUtils.closeQuietly((Closeable)iresource);
          }
  
!         Properties props = FontUtils.readFontProperties(this.locationFontTexture);
!         this.blend = FontUtils.readBoolean(props, "blend", false);
!         int imgWidth = bufferedimage.getWidth();
!         int imgHeight = bufferedimage.getHeight();
!         int charW = imgWidth / 16;
!         int charH = imgHeight / 16;
!         float kx = (float)imgWidth / 128.0F;
!         float boldScaleFactor = Config.limit(kx, 1.0F, 2.0F);
!         this.offsetBold = 1.0F / boldScaleFactor;
!         float offsetBoldConfig = FontUtils.readFloat(props, "offsetBold", -1.0F);
  
!         if (offsetBoldConfig >= 0.0F)
          {
!             this.offsetBold = offsetBoldConfig;
!         }
  
!         int[] aint = new int[imgWidth * imgHeight];
!         bufferedimage.getRGB(0, 0, imgWidth, imgHeight, aint, 0, imgWidth);
  
!         for (int i1 = 0; i1 < 256; ++i1)
!         {
!             int j1 = i1 % 16;
!             int k1 = i1 / 16;
!             int l1 = 0;
  
!             for (l1 = charW - 1; l1 >= 0; --l1)
              {
!                 int i2 = j1 * charW + l1;
!                 boolean flag = true;
  
!                 for (int j2 = 0; j2 < charH && flag; ++j2)
                  {
!                     int k2 = (k1 * charH + j2) * imgWidth;
!                     int l2 = aint[i2 + k2];
!                     int i3 = l2 >> 24 & 255;
  
!                     if (i3 > 16)
                      {
!                         flag = false;
                      }
                  }
  
!                 if (!flag)
                  {
                      break;
                  }
              }
  
!             if (i1 == 65)
!             {
!                 i1 = i1;
!             }
! 
!             if (i1 == 32)
!             {
!                 if (charW <= 8)
!                 {
!                     l1 = (int)(2.0F * kx);
!                 }
!                 else
!                 {
!                     l1 = (int)(1.5F * kx);
!                 }
!             }
! 
!             this.charWidthFloat[i1] = (float)(l1 + 1) / kx + 1.0F;
!         }
! 
!         FontUtils.readCustomCharWidths(props, this.charWidthFloat);
! 
!         for (int j3 = 0; j3 < this.charWidth.length; ++j3)
!         {
!             this.charWidth[j3] = Math.round(this.charWidthFloat[j3]);
          }
      }
  
***************
*** 220,226 ****
  
          try
          {
!             iresource = Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation("font/glyph_sizes.bin"));
              iresource.getInputStream().read(this.glyphWidth);
          }
          catch (IOException ioexception)
--- 272,278 ----
  
          try
          {
!             iresource = this.getResource(new ResourceLocation("font/glyph_sizes.bin"));
              iresource.getInputStream().read(this.glyphWidth);
          }
          catch (IOException ioexception)
***************
*** 238,251 ****
       */
      private float renderChar(char ch, boolean italic)
      {
!         if (ch == ' ')
          {
!             return 4.0F;
          }
          else
          {
!             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(ch);
!             return i != -1 && !this.unicodeFlag ? this.renderDefaultChar(i, italic) : this.renderUnicodeChar(ch, italic);
          }
      }
  
--- 290,303 ----
       */
      private float renderChar(char ch, boolean italic)
      {
!         if (ch != ' ' && ch != 160)
          {
!             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(ch);
!             return i != -1 && !this.unicodeFlag ? this.renderDefaultChar(i, italic) : this.renderUnicodeChar(ch, italic);
          }
          else
          {
!             return !this.unicodeFlag ? this.charWidthFloat[ch] : 4.0F;
          }
      }
  
***************
*** 257,276 ****
          int i = ch % 16 * 8;
          int j = ch / 16 * 8;
          int k = italic ? 1 : 0;
!         this.renderEngine.bindTexture(this.locationFontTexture);
!         int l = this.charWidth[ch];
!         float f = (float)l - 0.01F;
          GlStateManager.glBegin(5);
          GlStateManager.glTexCoord2f((float)i / 128.0F, (float)j / 128.0F);
          GlStateManager.glVertex3f(this.posX + (float)k, this.posY, 0.0F);
          GlStateManager.glTexCoord2f((float)i / 128.0F, ((float)j + 7.99F) / 128.0F);
          GlStateManager.glVertex3f(this.posX - (float)k, this.posY + 7.99F, 0.0F);
!         GlStateManager.glTexCoord2f(((float)i + f - 1.0F) / 128.0F, (float)j / 128.0F);
!         GlStateManager.glVertex3f(this.posX + f - 1.0F + (float)k, this.posY, 0.0F);
!         GlStateManager.glTexCoord2f(((float)i + f - 1.0F) / 128.0F, ((float)j + 7.99F) / 128.0F);
!         GlStateManager.glVertex3f(this.posX + f - 1.0F - (float)k, this.posY + 7.99F, 0.0F);
          GlStateManager.glEnd();
!         return (float)l;
      }
  
      private ResourceLocation getUnicodePageLocation(int page)
--- 309,328 ----
          int i = ch % 16 * 8;
          int j = ch / 16 * 8;
          int k = italic ? 1 : 0;
!         this.bindTexture(this.locationFontTexture);
!         float f = this.charWidthFloat[ch];
!         float f1 = 7.99F;
          GlStateManager.glBegin(5);
          GlStateManager.glTexCoord2f((float)i / 128.0F, (float)j / 128.0F);
          GlStateManager.glVertex3f(this.posX + (float)k, this.posY, 0.0F);
          GlStateManager.glTexCoord2f((float)i / 128.0F, ((float)j + 7.99F) / 128.0F);
          GlStateManager.glVertex3f(this.posX - (float)k, this.posY + 7.99F, 0.0F);
!         GlStateManager.glTexCoord2f(((float)i + f1 - 1.0F) / 128.0F, (float)j / 128.0F);
!         GlStateManager.glVertex3f(this.posX + f1 - 1.0F + (float)k, this.posY, 0.0F);
!         GlStateManager.glTexCoord2f(((float)i + f1 - 1.0F) / 128.0F, ((float)j + 7.99F) / 128.0F);
!         GlStateManager.glVertex3f(this.posX + f1 - 1.0F - (float)k, this.posY + 7.99F, 0.0F);
          GlStateManager.glEnd();
!         return f;
      }
  
      private ResourceLocation getUnicodePageLocation(int page)
***************
*** 278,283 ****
--- 330,336 ----
          if (UNICODE_PAGE_LOCATIONS[page] == null)
          {
              UNICODE_PAGE_LOCATIONS[page] = new ResourceLocation(String.format("textures/font/unicode_page_%02x.png", page));
+             UNICODE_PAGE_LOCATIONS[page] = FontUtils.getHdFontLocation(UNICODE_PAGE_LOCATIONS[page]);
          }
  
          return UNICODE_PAGE_LOCATIONS[page];
***************
*** 288,294 ****
       */
      private void loadGlyphTexture(int page)
      {
!         this.renderEngine.bindTexture(this.getUnicodePageLocation(page));
      }
  
      /**
--- 341,347 ----
       */
      private void loadGlyphTexture(int page)
      {
!         this.bindTexture(this.getUnicodePageLocation(page));
      }
  
      /**
***************
*** 341,347 ****
       */
      public int drawString(String text, int x, int y, int color)
      {
!         return this.drawString(text, (float)x, (float)y, color, false);
      }
  
      /**
--- 394,400 ----
       */
      public int drawString(String text, int x, int y, int color)
      {
!         return !this.enabled ? 0 : this.drawString(text, (float)x, (float)y, color, false);
      }
  
      /**
***************
*** 349,355 ****
       */
      public int drawString(String text, float x, float y, int color, boolean dropShadow)
      {
!         GlStateManager.enableAlpha();
          this.resetStyles();
          int i;
  
--- 402,416 ----
       */
      public int drawString(String text, float x, float y, int color, boolean dropShadow)
      {
!         this.enableAlpha();
! 
!         if (this.blend)
!         {
!             GlStateManager.getBlendState(this.oldBlendState);
!             GlStateManager.enableBlend();
!             GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
!         }
! 
          this.resetStyles();
          int i;
  
***************
*** 363,368 ****
--- 424,434 ----
              i = this.renderString(text, x, y, color, false);
          }
  
+         if (this.blend)
+         {
+             GlStateManager.setBlendState(this.oldBlendState);
+         }
+ 
          return i;
      }
  
***************
*** 377,383 ****
              bidi.setReorderingMode(0);
              return bidi.writeReordered(2);
          }
!         catch (ArabicShapingException var3)
          {
              return text;
          }
--- 443,449 ----
              bidi.setReorderingMode(0);
              return bidi.writeReordered(2);
          }
!         catch (ArabicShapingException var31)
          {
              return text;
          }
***************
*** 406,414 ****
  
              if (c0 == 167 && i + 1 < text.length())
              {
!                 int i1 = "0123456789abcdefklmnor".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));
  
!                 if (i1 < 16)
                  {
                      this.randomStyle = false;
                      this.boldStyle = false;
--- 472,480 ----
  
              if (c0 == 167 && i + 1 < text.length())
              {
!                 int l = "0123456789abcdefklmnor".indexOf(String.valueOf(text.charAt(i + 1)).toLowerCase(Locale.ROOT).charAt(0));
  
!                 if (l < 16)
                  {
                      this.randomStyle = false;
                      this.boldStyle = false;
***************
*** 416,463 ****
                      this.underlineStyle = false;
                      this.italicStyle = false;
  
!                     if (i1 < 0 || i1 > 15)
                      {
!                         i1 = 15;
                      }
  
                      if (shadow)
                      {
!                         i1 += 16;
                      }
  
!                     int j1 = this.colorCode[i1];
!                     this.textColor = j1;
!                     GlStateManager.color((float)(j1 >> 16) / 255.0F, (float)(j1 >> 8 & 255) / 255.0F, (float)(j1 & 255) / 255.0F, this.alpha);
                  }
!                 else if (i1 == 16)
                  {
                      this.randomStyle = true;
                  }
!                 else if (i1 == 17)
                  {
                      this.boldStyle = true;
                  }
!                 else if (i1 == 18)
                  {
                      this.strikethroughStyle = true;
                  }
!                 else if (i1 == 19)
                  {
                      this.underlineStyle = true;
                  }
!                 else if (i1 == 20)
                  {
                      this.italicStyle = true;
                  }
!                 else if (i1 == 21)
                  {
                      this.randomStyle = false;
                      this.boldStyle = false;
                      this.strikethroughStyle = false;
                      this.underlineStyle = false;
                      this.italicStyle = false;
!                     GlStateManager.color(this.red, this.blue, this.green, this.alpha);
                  }
  
                  ++i;
--- 482,535 ----
                      this.underlineStyle = false;
                      this.italicStyle = false;
  
!                     if (l < 0 || l > 15)
                      {
!                         l = 15;
                      }
  
                      if (shadow)
                      {
!                         l += 16;
!                     }
! 
!                     int i1 = this.colorCode[l];
! 
!                     if (Config.isCustomColors())
!                     {
!                         i1 = CustomColors.getTextColor(l, i1);
                      }
  
!                     this.textColor = i1;
!                     this.setColor((float)(i1 >> 16) / 255.0F, (float)(i1 >> 8 & 255) / 255.0F, (float)(i1 & 255) / 255.0F, this.alpha);
                  }
!                 else if (l == 16)
                  {
                      this.randomStyle = true;
                  }
!                 else if (l == 17)
                  {
                      this.boldStyle = true;
                  }
!                 else if (l == 18)
                  {
                      this.strikethroughStyle = true;
                  }
!                 else if (l == 19)
                  {
                      this.underlineStyle = true;
                  }
!                 else if (l == 20)
                  {
                      this.italicStyle = true;
                  }
!                 else if (l == 21)
                  {
                      this.randomStyle = false;
                      this.boldStyle = false;
                      this.strikethroughStyle = false;
                      this.underlineStyle = false;
                      this.italicStyle = false;
!                     this.setColor(this.red, this.blue, this.green, this.alpha);
                  }
  
                  ++i;
***************
*** 485,491 ****
                      c0 = c1;
                  }
  
!                 float f1 = this.unicodeFlag ? 0.5F : 1.0F;
                  boolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;
  
                  if (flag)
--- 557,563 ----
                      c0 = c1;
                  }
  
!                 float f1 = j != -1 && !this.unicodeFlag ? this.offsetBold : 0.5F;
                  boolean flag = (c0 == 0 || j == -1 || this.unicodeFlag) && shadow;
  
                  if (flag)
***************
*** 521,563 ****
                          this.posY += f1;
                      }
  
!                     ++f;
                  }
  
!                 if (this.strikethroughStyle)
!                 {
!                     Tessellator tessellator = Tessellator.getInstance();
!                     BufferBuilder bufferbuilder = tessellator.getBuffer();
!                     GlStateManager.disableTexture2D();
!                     bufferbuilder.begin(7, DefaultVertexFormats.POSITION);
!                     bufferbuilder.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
!                     bufferbuilder.pos((double)(this.posX + f), (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
!                     bufferbuilder.pos((double)(this.posX + f), (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
!                     bufferbuilder.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
!                     tessellator.draw();
!                     GlStateManager.enableTexture2D();
!                 }
! 
!                 if (this.underlineStyle)
!                 {
!                     Tessellator tessellator1 = Tessellator.getInstance();
!                     BufferBuilder bufferbuilder1 = tessellator1.getBuffer();
!                     GlStateManager.disableTexture2D();
!                     bufferbuilder1.begin(7, DefaultVertexFormats.POSITION);
!                     int l = this.underlineStyle ? -1 : 0;
!                     bufferbuilder1.pos((double)(this.posX + (float)l), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
!                     bufferbuilder1.pos((double)(this.posX + f), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
!                     bufferbuilder1.pos((double)(this.posX + f), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
!                     bufferbuilder1.pos((double)(this.posX + (float)l), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
!                     tessellator1.draw();
!                     GlStateManager.enableTexture2D();
!                 }
! 
!                 this.posX += (float)((int)f);
              }
          }
      }
  
      /**
       * Render string either left or right aligned depending on bidiFlag
       */
--- 593,640 ----
                          this.posY += f1;
                      }
  
!                     f += f1;
                  }
  
!                 this.doDraw(f);
              }
          }
      }
  
+     protected void doDraw(float p_doDraw_1_)
+     {
+         if (this.strikethroughStyle)
+         {
+             Tessellator tessellator = Tessellator.getInstance();
+             BufferBuilder bufferbuilder = tessellator.getBuffer();
+             GlStateManager.disableTexture2D();
+             bufferbuilder.begin(7, DefaultVertexFormats.POSITION);
+             bufferbuilder.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
+             bufferbuilder.pos((double)(this.posX + p_doDraw_1_), (double)(this.posY + (float)(this.FONT_HEIGHT / 2)), 0.0D).endVertex();
+             bufferbuilder.pos((double)(this.posX + p_doDraw_1_), (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
+             bufferbuilder.pos((double)this.posX, (double)(this.posY + (float)(this.FONT_HEIGHT / 2) - 1.0F), 0.0D).endVertex();
+             tessellator.draw();
+             GlStateManager.enableTexture2D();
+         }
+ 
+         if (this.underlineStyle)
+         {
+             Tessellator tessellator1 = Tessellator.getInstance();
+             BufferBuilder bufferbuilder1 = tessellator1.getBuffer();
+             GlStateManager.disableTexture2D();
+             bufferbuilder1.begin(7, DefaultVertexFormats.POSITION);
+             int i = this.underlineStyle ? -1 : 0;
+             bufferbuilder1.pos((double)(this.posX + (float)i), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
+             bufferbuilder1.pos((double)(this.posX + p_doDraw_1_), (double)(this.posY + (float)this.FONT_HEIGHT), 0.0D).endVertex();
+             bufferbuilder1.pos((double)(this.posX + p_doDraw_1_), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
+             bufferbuilder1.pos((double)(this.posX + (float)i), (double)(this.posY + (float)this.FONT_HEIGHT - 1.0F), 0.0D).endVertex();
+             tessellator1.draw();
+             GlStateManager.enableTexture2D();
+         }
+ 
+         this.posX += p_doDraw_1_;
+     }
+ 
      /**
       * Render string either left or right aligned depending on bidiFlag
       */
***************
*** 602,608 ****
              this.blue = (float)(color >> 8 & 255) / 255.0F;
              this.green = (float)(color & 255) / 255.0F;
              this.alpha = (float)(color >> 24 & 255) / 255.0F;
!             GlStateManager.color(this.red, this.blue, this.green, this.alpha);
              this.posX = x;
              this.posY = y;
              this.renderStringAtPos(text, dropShadow);
--- 679,685 ----
              this.blue = (float)(color >> 8 & 255) / 255.0F;
              this.green = (float)(color & 255) / 255.0F;
              this.alpha = (float)(color >> 24 & 255) / 255.0F;
!             this.setColor(this.red, this.blue, this.green, this.alpha);
              this.posX = x;
              this.posY = y;
              this.renderStringAtPos(text, dropShadow);
***************
*** 621,638 ****
          }
          else
          {
!             int i = 0;
              boolean flag = false;
  
!             for (int j = 0; j < text.length(); ++j)
              {
!                 char c0 = text.charAt(j);
!                 int k = this.getCharWidth(c0);
  
!                 if (k < 0 && j < text.length() - 1)
                  {
!                     ++j;
!                     c0 = text.charAt(j);
  
                      if (c0 != 'l' && c0 != 'L')
                      {
--- 698,715 ----
          }
          else
          {
!             float f = 0.0F;
              boolean flag = false;
  
!             for (int i = 0; i < text.length(); ++i)
              {
!                 char c0 = text.charAt(i);
!                 float f1 = this.getCharWidthFloat(c0);
  
!                 if (f1 < 0.0F && i < text.length() - 1)
                  {
!                     ++i;
!                     c0 = text.charAt(i);
  
                      if (c0 != 'l' && c0 != 'L')
                      {
***************
*** 646,663 ****
                          flag = true;
                      }
  
!                     k = 0;
                  }
  
!                 i += k;
  
!                 if (flag && k > 0)
                  {
!                     ++i;
                  }
              }
  
!             return i;
          }
      }
  
--- 723,740 ----
                          flag = true;
                      }
  
!                     f1 = 0.0F;
                  }
  
!                 f += f1;
  
!                 if (flag && f1 > 0.0F)
                  {
!                     f += this.unicodeFlag ? 1.0F : this.offsetBold;
                  }
              }
  
!             return Math.round(f);
          }
      }
  
***************
*** 666,700 ****
       */
      public int getCharWidth(char character)
      {
!         if (character == 167)
!         {
!             return -1;
!         }
!         else if (character == ' ')
          {
!             return 4;
          }
!         else
          {
!             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(character);
  
!             if (character > 0 && i != -1 && !this.unicodeFlag)
              {
!                 return this.charWidth[i];
              }
!             else if (this.glyphWidth[character] != 0)
              {
!                 int j = this.glyphWidth[character] & 255;
                  int k = j >>> 4;
                  int l = j & 15;
                  ++l;
!                 return (l - k) / 2 + 1;
              }
              else
              {
!                 return 0;
              }
          }
      }
  
      /**
--- 743,782 ----
       */
      public int getCharWidth(char character)
      {
!         return Math.round(this.getCharWidthFloat(character));
!     }
! 
!     private float getCharWidthFloat(char p_getCharWidthFloat_1_)
!     {
!         if (p_getCharWidthFloat_1_ == 167)
          {
!             return -1.0F;
          }
!         else if (p_getCharWidthFloat_1_ != ' ' && p_getCharWidthFloat_1_ != 160)
          {
!             int i = "\u00c0\u00c1\u00c2\u00c8\u00ca\u00cb\u00cd\u00d3\u00d4\u00d5\u00da\u00df\u00e3\u00f5\u011f\u0130\u0131\u0152\u0153\u015e\u015f\u0174\u0175\u017e\u0207\u0000\u0000\u0000\u0000\u0000\u0000\u0000 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u0000\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255d\u255c\u255b\u2510\u2514\u2534\u252c\u251c\u2500\u253c\u255e\u255f\u255a\u2554\u2569\u2566\u2560\u2550\u256c\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256b\u256a\u2518\u250c\u2588\u2584\u258c\u2590\u2580\u03b1\u03b2\u0393\u03c0\u03a3\u03c3\u03bc\u03c4\u03a6\u0398\u03a9\u03b4\u221e\u2205\u2208\u2229\u2261\u00b1\u2265\u2264\u2320\u2321\u00f7\u2248\u00b0\u2219\u00b7\u221a\u207f\u00b2\u25a0\u0000".indexOf(p_getCharWidthFloat_1_);
  
!             if (p_getCharWidthFloat_1_ > 0 && i != -1 && !this.unicodeFlag)
              {
!                 return this.charWidthFloat[i];
              }
!             else if (this.glyphWidth[p_getCharWidthFloat_1_] != 0)
              {
!                 int j = this.glyphWidth[p_getCharWidthFloat_1_] & 255;
                  int k = j >>> 4;
                  int l = j & 15;
                  ++l;
!                 return (float)((l - k) / 2 + 1);
              }
              else
              {
!                 return 0.0F;
              }
          }
+         else
+         {
+             return this.charWidthFloat[32];
+         }
      }
  
      /**
***************
*** 711,726 ****
      public String trimStringToWidth(String text, int width, boolean reverse)
      {
          StringBuilder stringbuilder = new StringBuilder();
!         int i = 0;
!         int j = reverse ? text.length() - 1 : 0;
!         int k = reverse ? -1 : 1;
          boolean flag = false;
          boolean flag1 = false;
  
!         for (int l = j; l >= 0 && l < text.length() && i < width; l += k)
          {
!             char c0 = text.charAt(l);
!             int i1 = this.getCharWidth(c0);
  
              if (flag)
              {
--- 793,808 ----
      public String trimStringToWidth(String text, int width, boolean reverse)
      {
          StringBuilder stringbuilder = new StringBuilder();
!         float f = 0.0F;
!         int i = reverse ? text.length() - 1 : 0;
!         int j = reverse ? -1 : 1;
          boolean flag = false;
          boolean flag1 = false;
  
!         for (int k = i; k >= 0 && k < text.length() && f < (float)width; k += j)
          {
!             char c0 = text.charAt(k);
!             float f1 = this.getCharWidthFloat(c0);
  
              if (flag)
              {
***************
*** 738,758 ****
                      flag1 = true;
                  }
              }
!             else if (i1 < 0)
              {
                  flag = true;
              }
              else
              {
!                 i += i1;
  
                  if (flag1)
                  {
!                     ++i;
                  }
              }
  
!             if (i > width)
              {
                  break;
              }
--- 820,840 ----
                      flag1 = true;
                  }
              }
!             else if (f1 < 0.0F)
              {
                  flag = true;
              }
              else
              {
!                 f += f1;
  
                  if (flag1)
                  {
!                     ++f;
                  }
              }
  
!             if (f > (float)width)
              {
                  break;
              }
***************
*** 788,797 ****
--- 870,891 ----
       */
      public void drawSplitString(String str, int x, int y, int wrapWidth, int textColor)
      {
+         if (this.blend)
+         {
+             GlStateManager.getBlendState(this.oldBlendState);
+             GlStateManager.enableBlend();
+             GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+         }
+ 
          this.resetStyles();
          this.textColor = textColor;
          str = this.trimStringNewline(str);
          this.renderSplitString(str, x, y, wrapWidth, false);
+ 
+         if (this.blend)
+         {
+             GlStateManager.setBlendState(this.oldBlendState);
+         }
      }
  
      /**
***************
*** 851,869 ****
       */
      String wrapFormattedStringToWidth(String str, int wrapWidth)
      {
!         int i = this.sizeStringToWidth(str, wrapWidth);
! 
!         if (str.length() <= i)
          {
              return str;
          }
          else
          {
!             String s = str.substring(0, i);
!             char c0 = str.charAt(i);
!             boolean flag = c0 == ' ' || c0 == '\n';
!             String s1 = getFormatFromString(s) + str.substring(i + (flag ? 1 : 0));
!             return s + "\n" + this.wrapFormattedStringToWidth(s1, wrapWidth);
          }
      }
  
--- 945,970 ----
       */
      String wrapFormattedStringToWidth(String str, int wrapWidth)
      {
!         if (str.length() <= 1)
          {
              return str;
          }
          else
          {
!             int i = this.sizeStringToWidth(str, wrapWidth);
! 
!             if (str.length() <= i)
!             {
!                 return str;
!             }
!             else
!             {
!                 String s = str.substring(0, i);
!                 char c0 = str.charAt(i);
!                 boolean flag = c0 == ' ' || c0 == '\n';
!                 String s1 = getFormatFromString(s) + str.substring(i + (flag ? 1 : 0));
!                 return s + "\n" + this.wrapFormattedStringToWidth(s1, wrapWidth);
!             }
          }
      }
  
***************
*** 873,910 ****
      private int sizeStringToWidth(String str, int wrapWidth)
      {
          int i = str.length();
          int j = 0;
!         int k = 0;
!         int l = -1;
  
!         for (boolean flag = false; k < i; ++k)
          {
!             char c0 = str.charAt(k);
  
              switch (c0)
              {
                  case '\n':
!                     --k;
                      break;
  
                  case ' ':
!                     l = k;
  
                  default:
!                     j += this.getCharWidth(c0);
  
                      if (flag)
                      {
!                         ++j;
                      }
  
                      break;
  
                  case '\u00a7':
!                     if (k < i - 1)
                      {
!                         ++k;
!                         char c1 = str.charAt(k);
  
                          if (c1 != 'l' && c1 != 'L')
                          {
--- 974,1011 ----
      private int sizeStringToWidth(String str, int wrapWidth)
      {
          int i = str.length();
+         float f = 0.0F;
          int j = 0;
!         int k = -1;
  
!         for (boolean flag = false; j < i; ++j)
          {
!             char c0 = str.charAt(j);
  
              switch (c0)
              {
                  case '\n':
!                     --j;
                      break;
  
                  case ' ':
!                     k = j;
  
                  default:
!                     f += this.getCharWidthFloat(c0);
  
                      if (flag)
                      {
!                         ++f;
                      }
  
                      break;
  
                  case '\u00a7':
!                     if (j < i - 1)
                      {
!                         ++j;
!                         char c1 = str.charAt(j);
  
                          if (c1 != 'l' && c1 != 'L')
                          {
***************
*** 922,939 ****
  
              if (c0 == '\n')
              {
!                 ++k;
!                 l = k;
                  break;
              }
  
!             if (j > wrapWidth)
              {
                  break;
              }
          }
  
!         return k != i && l != -1 && l < k ? l : k;
      }
  
      /**
--- 1023,1040 ----
  
              if (c0 == '\n')
              {
!                 ++j;
!                 k = j;
                  break;
              }
  
!             if (Math.round(f) > wrapWidth)
              {
                  break;
              }
          }
  
!         return j != i && k != -1 && k < j ? k : j;
      }
  
      /**
***************
*** 992,997 ****
      public int getColorCode(char character)
      {
          int i = "0123456789abcdef".indexOf(character);
!         return i >= 0 && i < this.colorCode.length ? this.colorCode[i] : -1;
      }
  }
--- 1093,1133 ----
      public int getColorCode(char character)
      {
          int i = "0123456789abcdef".indexOf(character);
! 
!         if (i >= 0 && i < this.colorCode.length)
!         {
!             int j = this.colorCode[i];
! 
!             if (Config.isCustomColors())
!             {
!                 j = CustomColors.getTextColor(i, j);
!             }
! 
!             return j;
!         }
!         else
!         {
!             return 16777215;
!         }
!     }
! 
!     protected void setColor(float p_setColor_1_, float p_setColor_2_, float p_setColor_3_, float p_setColor_4_)
!     {
!         GlStateManager.color(p_setColor_1_, p_setColor_2_, p_setColor_3_, p_setColor_4_);
!     }
! 
!     protected void enableAlpha()
!     {
!         GlStateManager.enableAlpha();
!     }
! 
!     protected void bindTexture(ResourceLocation p_bindTexture_1_)
!     {
!         this.renderEngine.bindTexture(p_bindTexture_1_);
!     }
! 
!     protected IResource getResource(ResourceLocation p_getResource_1_) throws IOException
!     {
!         return Minecraft.getMinecraft().getResourceManager().getResource(p_getResource_1_);
      }
  }
diff -rc ./client/gui/GuiButton.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiButton.java
*** ./client/gui/GuiButton.java	2018-11-18 13:18:42.236569000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiButton.java	2018-11-29 17:21:07.366931600 -0800
***************
*** 73,79 ****
          return i;
      }
  
!     public void func_191745_a(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
--- 73,79 ----
          return i;
      }
  
!     public void draw(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
diff -rc ./client/gui/GuiButtonImage.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiButtonImage.java
*** ./client/gui/GuiButtonImage.java	2018-11-18 13:18:42.245553000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiButtonImage.java	2018-11-29 17:21:07.381924100 -0800
***************
*** 26,32 ****
          this.yPosition = p_191746_2_;
      }
  
!     public void func_191745_a(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
--- 26,32 ----
          this.yPosition = p_191746_2_;
      }
  
!     public void draw(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
diff -rc ./client/gui/GuiButtonLanguage.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiButtonLanguage.java
*** ./client/gui/GuiButtonLanguage.java	2018-11-18 13:18:42.253561000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiButtonLanguage.java	2018-11-29 17:21:07.401911800 -0800
***************
*** 10,16 ****
          super(buttonID, xPos, yPos, 20, 20, "");
      }
  
!     public void func_191745_a(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
--- 10,16 ----
          super(buttonID, xPos, yPos, 20, 20, "");
      }
  
!     public void draw(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
diff -rc ./client/gui/GuiButtonToggle.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiButtonToggle.java
*** ./client/gui/GuiButtonToggle.java	2018-11-18 13:18:42.271535000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiButtonToggle.java	2018-11-29 17:21:07.464879100 -0800
***************
*** 44,50 ****
          this.yPosition = p_191752_2_;
      }
  
!     public void func_191745_a(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
--- 44,50 ----
          this.yPosition = p_191752_2_;
      }
  
!     public void draw(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
diff -rc ./client/gui/GuiCustomizeWorldScreen.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiCustomizeWorldScreen.java
*** ./client/gui/GuiCustomizeWorldScreen.java	2018-11-18 13:18:42.387483000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiCustomizeWorldScreen.java	2018-11-29 17:21:07.488866900 -0800
***************
*** 1020,1027 ****
              this.drawCenteredString(this.fontRendererObj, I18n.format("createWorld.customize.custom.confirmTitle"), this.width / 2, 105, 16777215);
              this.drawCenteredString(this.fontRendererObj, I18n.format("createWorld.customize.custom.confirm1"), this.width / 2, 125, 16777215);
              this.drawCenteredString(this.fontRendererObj, I18n.format("createWorld.customize.custom.confirm2"), this.width / 2, 135, 16777215);
!             this.confirm.func_191745_a(this.mc, mouseX, mouseY, partialTicks);
!             this.cancel.func_191745_a(this.mc, mouseX, mouseY, partialTicks);
          }
      }
  }
--- 1020,1027 ----
              this.drawCenteredString(this.fontRendererObj, I18n.format("createWorld.customize.custom.confirmTitle"), this.width / 2, 105, 16777215);
              this.drawCenteredString(this.fontRendererObj, I18n.format("createWorld.customize.custom.confirm1"), this.width / 2, 125, 16777215);
              this.drawCenteredString(this.fontRendererObj, I18n.format("createWorld.customize.custom.confirm2"), this.width / 2, 135, 16777215);
!             this.confirm.draw(this.mc, mouseX, mouseY, partialTicks);
!             this.cancel.draw(this.mc, mouseX, mouseY, partialTicks);
          }
      }
  }
diff -rc ./client/gui/GuiDownloadTerrain.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiDownloadTerrain.java
*** ./client/gui/GuiDownloadTerrain.java	2018-11-18 13:18:42.413453000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiDownloadTerrain.java	2017-10-20 21:01:18.389564000 -0700
***************
*** 1,28 ****
  package net.minecraft.client.gui;
  
- import java.io.IOException;
- import net.minecraft.client.network.NetHandlerPlayClient;
  import net.minecraft.client.resources.I18n;
- import net.minecraft.network.play.client.CPacketKeepAlive;
  
  public class GuiDownloadTerrain extends GuiScreen
  {
-     private final NetHandlerPlayClient connection;
-     private int progress;
- 
-     public GuiDownloadTerrain(NetHandlerPlayClient netHandler)
-     {
-         this.connection = netHandler;
-     }
- 
-     /**
-      * Fired when a key is typed (except F11 which toggles full screen). This is the equivalent of
-      * KeyListener.keyTyped(KeyEvent e). Args : character (character on the key), keyCode (lwjgl Keyboard key code)
-      */
-     protected void keyTyped(char typedChar, int keyCode) throws IOException
-     {
-     }
- 
      /**
       * Adds the buttons (and other controls) to the screen in question. Called when the GUI is displayed and when the
       * window resizes, the buttonList is cleared beforehand.
--- 1,9 ----
***************
*** 33,51 ****
      }
  
      /**
-      * Called from the main game loop to update the screen.
-      */
-     public void updateScreen()
-     {
-         ++this.progress;
- 
-         if (this.progress % 20 == 0)
-         {
-             this.connection.sendPacket(new CPacketKeepAlive());
-         }
-     }
- 
-     /**
       * Draws the screen and all the components in it.
       */
      public void drawScreen(int mouseX, int mouseY, float partialTicks)
--- 14,19 ----
diff -rc ./client/gui/GuiEnchantment.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiEnchantment.java
*** ./client/gui/GuiEnchantment.java	2018-11-18 13:18:42.423463000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiEnchantment.java	2018-11-30 22:38:50.077867100 -0800
***************
*** 231,237 ****
       */
      public void drawScreen(int mouseX, int mouseY, float partialTicks)
      {
!         partialTicks = this.mc.func_193989_ak();
          this.drawDefaultBackground();
          super.drawScreen(mouseX, mouseY, partialTicks);
          this.func_191948_b(mouseX, mouseY);
--- 231,237 ----
       */
      public void drawScreen(int mouseX, int mouseY, float partialTicks)
      {
!         partialTicks = this.mc.getParticleTicks();
          this.drawDefaultBackground();
          super.drawScreen(mouseX, mouseY, partialTicks);
          this.func_191948_b(mouseX, mouseY);
diff -rc ./client/gui/GuiIngame.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiIngame.java
*** ./client/gui/GuiIngame.java	2018-11-18 13:18:42.482428000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiIngame.java	2017-10-20 21:35:40.136379000 -0700
***************
*** 6,16 ****
--- 6,18 ----
  import com.google.common.collect.Maps;
  import com.google.common.collect.Ordering;
  import java.util.Collection;
+ import java.util.Iterator;
  import java.util.List;
  import java.util.Map;
  import java.util.Random;
  import javax.annotation.Nullable;
  import net.minecraft.block.material.Material;
+ import net.minecraft.block.state.IBlockState;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.gui.chat.IChatListener;
  import net.minecraft.client.gui.chat.NarratorChatListener;
***************
*** 55,60 ****
--- 57,68 ----
  import net.minecraft.util.text.ITextComponent;
  import net.minecraft.util.text.TextFormatting;
  import net.minecraft.world.border.WorldBorder;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.CustomItems;
+ import optifine.Reflector;
+ import optifine.ReflectorForge;
+ import optifine.TextureAnimations;
  
  public class GuiIngame extends Gui
  {
***************
*** 162,168 ****
          FontRenderer fontrenderer = this.getFontRenderer();
          GlStateManager.enableBlend();
  
!         if (Minecraft.isFancyGraphicsEnabled())
          {
              this.renderVignette(this.mc.player.getBrightness(), scaledresolution);
          }
--- 170,176 ----
          FontRenderer fontrenderer = this.getFontRenderer();
          GlStateManager.enableBlend();
  
!         if (Config.isVignetteEnabled())
          {
              this.renderVignette(this.mc.player.getBrightness(), scaledresolution);
          }
***************
*** 377,390 ****
          GlStateManager.popMatrix();
          scoreobjective1 = scoreboard.getObjectiveInDisplaySlot(0);
  
!         if (!this.mc.gameSettings.keyBindPlayerList.isKeyDown() || this.mc.isIntegratedServerRunning() && this.mc.player.connection.getPlayerInfoMap().size() <= 1 && scoreobjective1 == null)
          {
!             this.overlayPlayerList.updatePlayerList(false);
          }
          else
          {
!             this.overlayPlayerList.updatePlayerList(true);
!             this.overlayPlayerList.renderPlayerlist(i, scoreboard, scoreobjective1);
          }
  
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
--- 385,398 ----
          GlStateManager.popMatrix();
          scoreobjective1 = scoreboard.getObjectiveInDisplaySlot(0);
  
!         if (this.mc.gameSettings.keyBindPlayerList.isKeyDown() && (!this.mc.isIntegratedServerRunning() || this.mc.player.connection.getPlayerInfoMap().size() > 1 || scoreobjective1 != null))
          {
!             this.overlayPlayerList.updatePlayerList(true);
!             this.overlayPlayerList.renderPlayerlist(i, scoreboard, scoreobjective1);
          }
          else
          {
!             this.overlayPlayerList.updatePlayerList(false);
          }
  
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
***************
*** 408,415 ****
                  }
  
                  BlockPos blockpos = raytraceresult.getBlockPos();
  
!                 if (!this.mc.world.getBlockState(blockpos).getBlock().hasTileEntity() || !(this.mc.world.getTileEntity(blockpos) instanceof IInventory))
                  {
                      return;
                  }
--- 416,424 ----
                  }
  
                  BlockPos blockpos = raytraceresult.getBlockPos();
+                 IBlockState iblockstate = this.mc.world.getBlockState(blockpos);
  
!                 if (!ReflectorForge.blockHasTileEntity(iblockstate) || !(this.mc.world.getTileEntity(blockpos) instanceof IInventory))
                  {
                      return;
                  }
***************
*** 474,485 ****
              GlStateManager.enableBlend();
              int i = 0;
              int j = 0;
  
!             for (PotionEffect potioneffect : Ordering.natural().reverse().sortedCopy(collection))
              {
!                 Potion potion = potioneffect.getPotion();
  
!                 if (potion.hasStatusIcon() && potioneffect.doesShowParticles())
                  {
                      int k = resolution.getScaledWidth();
                      int l = 1;
--- 483,521 ----
              GlStateManager.enableBlend();
              int i = 0;
              int j = 0;
+             Iterator iterator = Ordering.natural().reverse().sortedCopy(collection).iterator();
  
!             while (true)
              {
!                 PotionEffect potioneffect;
!                 Potion potion;
!                 boolean flag;
  
!                 while (true)
!                 {
!                     if (!iterator.hasNext())
!                     {
!                         return;
!                     }
! 
!                     potioneffect = (PotionEffect)iterator.next();
!                     potion = potioneffect.getPotion();
!                     flag = potion.hasStatusIcon();
! 
!                     if (!Reflector.ForgePotion_shouldRenderHUD.exists())
!                     {
!                         break;
!                     }
! 
!                     if (Reflector.callBoolean(potion, Reflector.ForgePotion_shouldRenderHUD, potioneffect))
!                     {
!                         this.mc.getTextureManager().bindTexture(GuiContainer.INVENTORY_BACKGROUND);
!                         flag = true;
!                         break;
!                     }
!                 }
! 
!                 if (flag && potioneffect.doesShowParticles())
                  {
                      int k = resolution.getScaledWidth();
                      int l = 1;
***************
*** 522,528 ****
                      }
  
                      GlStateManager.color(1.0F, 1.0F, 1.0F, f);
!                     this.drawTexturedModalRect(k + 3, l + 3, i1 % 8 * 18, 198 + i1 / 8 * 18, 18, 18);
                  }
              }
          }
--- 558,577 ----
                      }
  
                      GlStateManager.color(1.0F, 1.0F, 1.0F, f);
! 
!                     if (Reflector.ForgePotion_renderHUDEffect.exists())
!                     {
!                         if (potion.hasStatusIcon())
!                         {
!                             this.drawTexturedModalRect(k + 3, l + 3, i1 % 8 * 18, 198 + i1 / 8 * 18, 18, 18);
!                         }
! 
!                         Reflector.call(potion, Reflector.ForgePotion_renderHUDEffect, k, l, potioneffect, this.mc, f);
!                     }
!                     else
!                     {
!                         this.drawTexturedModalRect(k + 3, l + 3, i1 % 8 * 18, 198 + i1 / 8 * 18, 18, 18);
!                     }
                  }
              }
          }
***************
*** 562,567 ****
--- 611,617 ----
              GlStateManager.enableBlend();
              GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              RenderHelper.enableGUIStandardItemLighting();
+             CustomItems.setRenderOffHand(false);
  
              for (int l = 0; l < 9; ++l)
              {
***************
*** 572,577 ****
--- 622,628 ----
  
              if (!itemstack.func_190926_b())
              {
+                 CustomItems.setRenderOffHand(true);
                  int l1 = sr.getScaledHeight() - 16 - 3;
  
                  if (enumhandside == EnumHandSide.LEFT)
***************
*** 582,587 ****
--- 633,640 ----
                  {
                      this.renderHotbarItem(i + 91 + 10, l1, partialTicks, entityplayer, itemstack);
                  }
+ 
+                 CustomItems.setRenderOffHand(false);
              }
  
              if (this.mc.gameSettings.attackIndicator == 2)
***************
*** 654,667 ****
          if (this.mc.player.experienceLevel > 0)
          {
              this.mc.mcProfiler.startSection("expLevel");
              String s = "" + this.mc.player.experienceLevel;
!             int i1 = (scaledRes.getScaledWidth() - this.getFontRenderer().getStringWidth(s)) / 2;
!             int j1 = scaledRes.getScaledHeight() - 31 - 4;
!             this.getFontRenderer().drawString(s, i1 + 1, j1, 0);
!             this.getFontRenderer().drawString(s, i1 - 1, j1, 0);
!             this.getFontRenderer().drawString(s, i1, j1 + 1, 0);
!             this.getFontRenderer().drawString(s, i1, j1 - 1, 0);
!             this.getFontRenderer().drawString(s, i1, j1, 8453920);
              this.mc.mcProfiler.endSection();
          }
      }
--- 707,727 ----
          if (this.mc.player.experienceLevel > 0)
          {
              this.mc.mcProfiler.startSection("expLevel");
+             int j1 = 8453920;
+ 
+             if (Config.isCustomColors())
+             {
+                 j1 = CustomColors.getExpBarTextColor(j1);
+             }
+ 
              String s = "" + this.mc.player.experienceLevel;
!             int k1 = (scaledRes.getScaledWidth() - this.getFontRenderer().getStringWidth(s)) / 2;
!             int i1 = scaledRes.getScaledHeight() - 31 - 4;
!             this.getFontRenderer().drawString(s, k1 + 1, i1, 0);
!             this.getFontRenderer().drawString(s, k1 - 1, i1, 0);
!             this.getFontRenderer().drawString(s, k1, i1 + 1, 0);
!             this.getFontRenderer().drawString(s, k1, i1 - 1, 0);
!             this.getFontRenderer().drawString(s, k1, i1, j1);
              this.mc.mcProfiler.endSection();
          }
      }
***************
*** 1089,1137 ****
       */
      private void renderVignette(float lightLevel, ScaledResolution scaledRes)
      {
!         lightLevel = 1.0F - lightLevel;
!         lightLevel = MathHelper.clamp(lightLevel, 0.0F, 1.0F);
!         WorldBorder worldborder = this.mc.world.getWorldBorder();
!         float f = (float)worldborder.getClosestDistance(this.mc.player);
!         double d0 = Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D, Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
!         double d1 = Math.max((double)worldborder.getWarningDistance(), d0);
! 
!         if ((double)f < d1)
          {
!             f = 1.0F - (float)((double)f / d1);
          }
          else
          {
!             f = 0.0F;
!         }
  
!         this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(lightLevel - this.prevVignetteBrightness) * 0.01D);
!         GlStateManager.disableDepth();
!         GlStateManager.depthMask(false);
!         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
  
!         if (f > 0.0F)
!         {
!             GlStateManager.color(0.0F, f, f, 1.0F);
!         }
!         else
!         {
!             GlStateManager.color(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
!         }
  
!         this.mc.getTextureManager().bindTexture(VIGNETTE_TEX_PATH);
!         Tessellator tessellator = Tessellator.getInstance();
!         BufferBuilder bufferbuilder = tessellator.getBuffer();
!         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
!         bufferbuilder.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
!         bufferbuilder.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
!         bufferbuilder.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
!         bufferbuilder.pos(0.0D, 0.0D, -90.0D).tex(0.0D, 0.0D).endVertex();
!         tessellator.draw();
!         GlStateManager.depthMask(true);
!         GlStateManager.enableDepth();
!         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
      }
  
      private void renderPortal(float timeInPortal, ScaledResolution scaledRes)
--- 1149,1205 ----
       */
      private void renderVignette(float lightLevel, ScaledResolution scaledRes)
      {
!         if (!Config.isVignetteEnabled())
          {
!             GlStateManager.enableDepth();
!             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
          }
          else
          {
!             lightLevel = 1.0F - lightLevel;
!             lightLevel = MathHelper.clamp(lightLevel, 0.0F, 1.0F);
!             WorldBorder worldborder = this.mc.world.getWorldBorder();
!             float f = (float)worldborder.getClosestDistance(this.mc.player);
!             double d0 = Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D, Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
!             double d1 = Math.max((double)worldborder.getWarningDistance(), d0);
  
!             if ((double)f < d1)
!             {
!                 f = 1.0F - (float)((double)f / d1);
!             }
!             else
!             {
!                 f = 0.0F;
!             }
  
!             this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(lightLevel - this.prevVignetteBrightness) * 0.01D);
!             GlStateManager.disableDepth();
!             GlStateManager.depthMask(false);
!             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.ZERO, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
  
!             if (f > 0.0F)
!             {
!                 GlStateManager.color(0.0F, f, f, 1.0F);
!             }
!             else
!             {
!                 GlStateManager.color(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
!             }
! 
!             this.mc.getTextureManager().bindTexture(VIGNETTE_TEX_PATH);
!             Tessellator tessellator = Tessellator.getInstance();
!             BufferBuilder bufferbuilder = tessellator.getBuffer();
!             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
!             bufferbuilder.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
!             bufferbuilder.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
!             bufferbuilder.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
!             bufferbuilder.pos(0.0D, 0.0D, -90.0D).tex(0.0D, 0.0D).endVertex();
!             tessellator.draw();
!             GlStateManager.depthMask(true);
!             GlStateManager.enableDepth();
!             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!         }
      }
  
      private void renderPortal(float timeInPortal, ScaledResolution scaledRes)
***************
*** 1199,1204 ****
--- 1267,1277 ----
       */
      public void updateTick()
      {
+         if (this.mc.world == null)
+         {
+             TextureAnimations.updateAnimations();
+         }
+ 
          if (this.recordPlayingUpFor > 0)
          {
              --this.recordPlayingUpFor;
diff -rc ./client/gui/GuiKeyBindingList.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiKeyBindingList.java
*** ./client/gui/GuiKeyBindingList.java	2018-11-18 13:18:42.505400000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiKeyBindingList.java	2018-11-29 17:21:07.503857400 -0800
***************
*** 125,131 ****
              this.btnReset.xPosition = p_192634_2_ + 190;
              this.btnReset.yPosition = p_192634_3_;
              this.btnReset.enabled = this.keybinding.getKeyCode() != this.keybinding.getKeyCodeDefault();
!             this.btnReset.func_191745_a(GuiKeyBindingList.this.mc, p_192634_6_, p_192634_7_, p_192634_9_);
              this.btnChangeKeyBinding.xPosition = p_192634_2_ + 105;
              this.btnChangeKeyBinding.yPosition = p_192634_3_;
              this.btnChangeKeyBinding.displayString = GameSettings.getKeyDisplayString(this.keybinding.getKeyCode());
--- 125,131 ----
              this.btnReset.xPosition = p_192634_2_ + 190;
              this.btnReset.yPosition = p_192634_3_;
              this.btnReset.enabled = this.keybinding.getKeyCode() != this.keybinding.getKeyCodeDefault();
!             this.btnReset.draw(GuiKeyBindingList.this.mc, p_192634_6_, p_192634_7_, p_192634_9_);
              this.btnChangeKeyBinding.xPosition = p_192634_2_ + 105;
              this.btnChangeKeyBinding.yPosition = p_192634_3_;
              this.btnChangeKeyBinding.displayString = GameSettings.getKeyDisplayString(this.keybinding.getKeyCode());
***************
*** 152,158 ****
                  this.btnChangeKeyBinding.displayString = TextFormatting.RED + this.btnChangeKeyBinding.displayString;
              }
  
!             this.btnChangeKeyBinding.func_191745_a(GuiKeyBindingList.this.mc, p_192634_6_, p_192634_7_, p_192634_9_);
          }
  
          public boolean mousePressed(int slotIndex, int mouseX, int mouseY, int mouseEvent, int relativeX, int relativeY)
--- 152,158 ----
                  this.btnChangeKeyBinding.displayString = TextFormatting.RED + this.btnChangeKeyBinding.displayString;
              }
  
!             this.btnChangeKeyBinding.draw(GuiKeyBindingList.this.mc, p_192634_6_, p_192634_7_, p_192634_9_);
          }
  
          public boolean mousePressed(int slotIndex, int mouseX, int mouseY, int mouseEvent, int relativeX, int relativeY)
diff -rc ./client/gui/GuiLockIconButton.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiLockIconButton.java
*** ./client/gui/GuiLockIconButton.java	2018-11-18 13:18:42.582370000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiLockIconButton.java	2018-11-29 17:21:07.517861400 -0800
***************
*** 22,28 ****
          this.locked = lockedIn;
      }
  
!     public void func_191745_a(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
--- 22,28 ----
          this.locked = lockedIn;
      }
  
!     public void draw(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
diff -rc ./client/gui/GuiMainMenu.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiMainMenu.java
*** ./client/gui/GuiMainMenu.java	2018-11-18 13:18:42.593350000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiMainMenu.java	2018-12-15 15:18:16.446024900 -0800
***************
*** 1,5 ****
--- 1,6 ----
  package net.minecraft.client.gui;
  
+ import com.google.common.base.Strings;
  import com.google.common.collect.Lists;
  import com.google.common.util.concurrent.Runnables;
  import java.io.BufferedReader;
***************
*** 7,17 ****
--- 8,22 ----
  import java.io.IOException;
  import java.io.InputStreamReader;
  import java.net.URI;
+ import java.net.URISyntaxException;
  import java.nio.charset.StandardCharsets;
+ import java.util.Arrays;
  import java.util.Calendar;
  import java.util.Date;
  import java.util.List;
  import java.util.Random;
+ 
+ import net.ilexiconn.qubble.client.gui.QubbleGUI;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.renderer.BufferBuilder;
  import net.minecraft.client.renderer.GlStateManager;
***************
*** 30,38 ****
--- 35,54 ----
  import net.minecraft.world.WorldServerDemo;
  import net.minecraft.world.storage.ISaveFormat;
  import net.minecraft.world.storage.WorldInfo;
+ import net.minecraftforge.fml.client.config.GuiUtils;
+ import optifine.CustomPanorama;
+ import optifine.CustomPanoramaProperties;
+ import optifine.Reflector;
+ 
  import org.apache.commons.io.IOUtils;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import org.golde.snowball.Snowball;
+ import org.golde.snowball.Updater.UpdateResult;
+ import org.golde.snowball.render.gui.GuiClientMainMenuSettings;
+ import org.golde.snowball.render.gui.GuiUpdate;
+ import org.golde.snowball.render.gui.SmallButton;
+ import org.golde.snowball.shared.Constants;
  import org.lwjgl.input.Mouse;
  import org.lwjgl.opengl.GLContext;
  import org.lwjgl.util.glu.Project;
***************
*** 91,96 ****
--- 107,113 ----
      private String openGLWarningLink;
      private static final ResourceLocation SPLASH_TEXTS = new ResourceLocation("texts/splashes.txt");
      private static final ResourceLocation MINECRAFT_TITLE_TEXTURES = new ResourceLocation("textures/gui/title/minecraft.png");
+     private static final ResourceLocation field_194400_H = new ResourceLocation("textures/gui/title/edition.png");
  
      /** An array of all the paths to the panorama pictures. */
      private static final ResourceLocation[] TITLE_PANORAMA_PATHS = new ResourceLocation[] {new ResourceLocation("textures/gui/title/background/panorama_0.png"), new ResourceLocation("textures/gui/title/background/panorama_1.png"), new ResourceLocation("textures/gui/title/background/panorama_2.png"), new ResourceLocation("textures/gui/title/background/panorama_3.png"), new ResourceLocation("textures/gui/title/background/panorama_4.png"), new ResourceLocation("textures/gui/title/background/panorama_5.png")};
***************
*** 230,243 ****
          int i = 24;
          int j = this.height / 4 + 48;
  
!         if (this.mc.isDemo())
!         {
!             this.addDemoButtons(j, 24);
!         }
!         else
!         {
!             this.addSingleplayerMultiplayerButtons(j, 24);
!         }
  
          this.buttonList.add(new GuiButton(0, this.width / 2 - 100, j + 72 + 12, 98, 20, I18n.format("menu.options")));
          this.buttonList.add(new GuiButton(4, this.width / 2 + 2, j + 72 + 12, 98, 20, I18n.format("menu.quit")));
--- 247,253 ----
          int i = 24;
          int j = this.height / 4 + 48;
  
!         this.addSingleplayerMultiplayerButtons(j, 24);
  
          this.buttonList.add(new GuiButton(0, this.width / 2 - 100, j + 72 + 12, 98, 20, I18n.format("menu.options")));
          this.buttonList.add(new GuiButton(4, this.width / 2 + 2, j + 72 + 12, 98, 20, I18n.format("menu.quit")));
***************
*** 268,273 ****
--- 278,290 ----
              this.realmsNotification.setGuiSize(this.width, this.height);
              this.realmsNotification.initGui();
          }
+         
+         if(Snowball.instance.getUpdateResults() != null && Snowball.instance.getUpdateResults().getResult() != null && Snowball.instance.getUpdateResults().getResult() == UpdateResult.UPDATE_AVAILABLE && !GuiUpdate.HAS_ALREADY_DISPLAYED) {
+         	
+         	Minecraft.getMinecraft().displayGuiScreen(new GuiUpdate(this));
+         	
+         }
+ 
      }
  
      /**
***************
*** 277,300 ****
      {
          this.buttonList.add(new GuiButton(1, this.width / 2 - 100, p_73969_1_, I18n.format("menu.singleplayer")));
          this.buttonList.add(new GuiButton(2, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 1, I18n.format("menu.multiplayer")));
!         this.realmsButton = this.addButton(new GuiButton(14, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 2, I18n.format("menu.online")));
      }
  
      /**
       * Adds Demo buttons on Main Menu for players who are playing Demo.
       */
-     private void addDemoButtons(int p_73972_1_, int p_73972_2_)
-     {
-         this.buttonList.add(new GuiButton(11, this.width / 2 - 100, p_73972_1_, I18n.format("menu.playdemo")));
-         this.buttonResetDemo = this.addButton(new GuiButton(12, this.width / 2 - 100, p_73972_1_ + p_73972_2_ * 1, I18n.format("menu.resetdemo")));
-         ISaveFormat isaveformat = this.mc.getSaveLoader();
-         WorldInfo worldinfo = isaveformat.getWorldInfo("Demo_World");
- 
-         if (worldinfo == null)
-         {
-             this.buttonResetDemo.enabled = false;
-         }
-     }
  
      /**
       * Called by the controls from the buttonList when activated. (Mouse pressed for buttons)
--- 294,316 ----
      {
          this.buttonList.add(new GuiButton(1, this.width / 2 - 100, p_73969_1_, I18n.format("menu.singleplayer")));
          this.buttonList.add(new GuiButton(2, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 1, I18n.format("menu.multiplayer")));
! 
!         this.realmsButton = this.addButton(new GuiButton(14, this.width / 2 + 2, p_73969_1_ + p_73969_2_ * 2, 98, 20, I18n.format("menu.online").replace("Minecraft", "").trim()));
!         //this.realmsButton = this.addButton(new GuiButton(14, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 2, I18n.format("menu.online")));
!         
!         //this.buttonList.add(this.modButton = new GuiButton(6, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 2, 98, 20, I18n.format("fml.menu.mods")));
!        
!         //Registered backwards so the draw functions get called right to left. This enabled the set floating text to work properly
!         this.buttonList.add(new SmallButton(this, 36, this.width / 2 - 100 + 75, p_73969_1_ + p_73969_2_ * 2, "settings").setFloatingText("Client Settings & Utilities"));
!         this.buttonList.add(new SmallButton(this, 35, this.width / 2 - 100 + 50, p_73969_1_ + p_73969_2_ * 2, "github").setFloatingText("Our Github"));
!         this.buttonList.add(new SmallButton(this, 34, this.width / 2 - 100 + 25, p_73969_1_ + p_73969_2_ * 2, "website").setFloatingText("Our Website").setEnabled(false));
!         this.buttonList.add(new SmallButton(this, 33, this.width / 2 - 100, p_73969_1_ + p_73969_2_ * 2, "discord").setFloatingText("Our Discord Server"));
!   
      }
  
      /**
       * Adds Demo buttons on Main Menu for players who are playing Demo.
       */
  
      /**
       * Called by the controls from the buttonList when activated. (Mouse pressed for buttons)
***************
*** 330,350 ****
          {
              this.mc.shutdown();
          }
! 
!         if (button.id == 11)
          {
!             this.mc.launchIntegratedServer("Demo_World", "Demo_World", WorldServerDemo.DEMO_WORLD_SETTINGS);
          }
! 
!         if (button.id == 12)
          {
!             ISaveFormat isaveformat = this.mc.getSaveLoader();
!             WorldInfo worldinfo = isaveformat.getWorldInfo("Demo_World");
! 
!             if (worldinfo != null)
!             {
!                 this.mc.displayGuiScreen(new GuiYesNo(this, I18n.format("selectWorld.deleteQuestion"), "'" + worldinfo.getWorldName() + "' " + I18n.format("selectWorld.deleteWarning"), I18n.format("selectWorld.deleteButton"), I18n.format("gui.cancel"), 12));
!             }
          }
      }
  
--- 346,386 ----
          {
              this.mc.shutdown();
          }
!         
!         if (button.id == 33)
          {
!         	try {
!         		//Discord
! 				this.openWebLink(new URI("https://discord.gg/SPfj5fS"));
! 			} catch (URISyntaxException e) {
! 				e.printStackTrace();
! 			}
!         }
!         
!         if (button.id == 34)
!         {
!         	try {
!         		//Website
! 				this.openWebLink(new URI("https://snowballclient.github.io/"));
! 			} catch (URISyntaxException e) {
! 				e.printStackTrace();
! 			} 
!         }
!         
!         if (button.id == 35)
!         {
!         	try {
!         		//Github
! 				this.openWebLink(new URI("https://github.com/SnowballClient"));
! 			} catch (URISyntaxException e) {
! 				e.printStackTrace();
! 			}
          }
!         
!         if (button.id == 36)
          {
!         	//Settings
!         	Minecraft.getMinecraft().displayGuiScreen(new GuiClientMainMenuSettings(this));
          }
      }
  
***************
*** 377,385 ****
                      Object object = oclass.getMethod("getDesktop").invoke((Object)null);
                      oclass.getMethod("browse", URI.class).invoke(object, new URI(this.openGLWarningLink));
                  }
!                 catch (Throwable throwable)
                  {
!                     LOGGER.error("Couldn't open link", throwable);
                  }
              }
  
--- 413,421 ----
                      Object object = oclass.getMethod("getDesktop").invoke((Object)null);
                      oclass.getMethod("browse", URI.class).invoke(object, new URI(this.openGLWarningLink));
                  }
!                 catch (Throwable throwable1)
                  {
!                     LOGGER.error("Couldn't open link", throwable1);
                  }
              }
  
***************
*** 410,463 ****
          GlStateManager.depthMask(false);
          GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
          int i = 8;
  
!         for (int j = 0; j < 64; ++j)
          {
              GlStateManager.pushMatrix();
!             float f = ((float)(j % 8) / 8.0F - 0.5F) / 64.0F;
!             float f1 = ((float)(j / 8) / 8.0F - 0.5F) / 64.0F;
              float f2 = 0.0F;
              GlStateManager.translate(f, f1, 0.0F);
              GlStateManager.rotate(MathHelper.sin(this.panoramaTimer / 400.0F) * 25.0F + 20.0F, 1.0F, 0.0F, 0.0F);
              GlStateManager.rotate(-this.panoramaTimer * 0.1F, 0.0F, 1.0F, 0.0F);
  
!             for (int k = 0; k < 6; ++k)
              {
                  GlStateManager.pushMatrix();
  
!                 if (k == 1)
                  {
                      GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
                  }
  
!                 if (k == 2)
                  {
                      GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
                  }
  
!                 if (k == 3)
                  {
                      GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
                  }
  
!                 if (k == 4)
                  {
                      GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
                  }
  
!                 if (k == 5)
                  {
                      GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
                  }
  
!                 this.mc.getTextureManager().bindTexture(TITLE_PANORAMA_PATHS[k]);
                  bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!                 int l = 255 / (j + 1);
                  float f3 = 0.0F;
!                 bufferbuilder.pos(-1.0D, -1.0D, 1.0D).tex(0.0D, 0.0D).color(255, 255, 255, l).endVertex();
!                 bufferbuilder.pos(1.0D, -1.0D, 1.0D).tex(1.0D, 0.0D).color(255, 255, 255, l).endVertex();
!                 bufferbuilder.pos(1.0D, 1.0D, 1.0D).tex(1.0D, 1.0D).color(255, 255, 255, l).endVertex();
!                 bufferbuilder.pos(-1.0D, 1.0D, 1.0D).tex(0.0D, 1.0D).color(255, 255, 255, l).endVertex();
                  tessellator.draw();
                  GlStateManager.popMatrix();
              }
--- 446,513 ----
          GlStateManager.depthMask(false);
          GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
          int i = 8;
+         int j = 64;
+         CustomPanoramaProperties custompanoramaproperties = CustomPanorama.getCustomPanoramaProperties();
+ 
+         if (custompanoramaproperties != null)
+         {
+             j = custompanoramaproperties.getBlur1();
+         }
  
!         for (int k = 0; k < j; ++k)
          {
              GlStateManager.pushMatrix();
!             float f = ((float)(k % 8) / 8.0F - 0.5F) / 64.0F;
!             float f1 = ((float)(k / 8) / 8.0F - 0.5F) / 64.0F;
              float f2 = 0.0F;
              GlStateManager.translate(f, f1, 0.0F);
              GlStateManager.rotate(MathHelper.sin(this.panoramaTimer / 400.0F) * 25.0F + 20.0F, 1.0F, 0.0F, 0.0F);
              GlStateManager.rotate(-this.panoramaTimer * 0.1F, 0.0F, 1.0F, 0.0F);
  
!             for (int l = 0; l < 6; ++l)
              {
                  GlStateManager.pushMatrix();
  
!                 if (l == 1)
                  {
                      GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
                  }
  
!                 if (l == 2)
                  {
                      GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
                  }
  
!                 if (l == 3)
                  {
                      GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
                  }
  
!                 if (l == 4)
                  {
                      GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
                  }
  
!                 if (l == 5)
                  {
                      GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
                  }
  
!                 ResourceLocation[] aresourcelocation = TITLE_PANORAMA_PATHS;
! 
!                 if (custompanoramaproperties != null)
!                 {
!                     aresourcelocation = custompanoramaproperties.getPanoramaLocations();
!                 }
! 
!                 this.mc.getTextureManager().bindTexture(aresourcelocation[l]);
                  bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!                 int i1 = 255 / (k + 1);
                  float f3 = 0.0F;
!                 bufferbuilder.pos(-1.0D, -1.0D, 1.0D).tex(0.0D, 0.0D).color(255, 255, 255, i1).endVertex();
!                 bufferbuilder.pos(1.0D, -1.0D, 1.0D).tex(1.0D, 0.0D).color(255, 255, 255, i1).endVertex();
!                 bufferbuilder.pos(1.0D, 1.0D, 1.0D).tex(1.0D, 1.0D).color(255, 255, 255, i1).endVertex();
!                 bufferbuilder.pos(-1.0D, 1.0D, 1.0D).tex(0.0D, 1.0D).color(255, 255, 255, i1).endVertex();
                  tessellator.draw();
                  GlStateManager.popMatrix();
              }
***************
*** 494,510 ****
          bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
          GlStateManager.disableAlpha();
          int i = 3;
  
!         for (int j = 0; j < 3; ++j)
          {
!             float f = 1.0F / (float)(j + 1);
!             int k = this.width;
!             int l = this.height;
!             float f1 = (float)(j - 1) / 256.0F;
!             bufferbuilder.pos((double)k, (double)l, (double)this.zLevel).tex((double)(0.0F + f1), 1.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
!             bufferbuilder.pos((double)k, 0.0D, (double)this.zLevel).tex((double)(1.0F + f1), 1.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
              bufferbuilder.pos(0.0D, 0.0D, (double)this.zLevel).tex((double)(1.0F + f1), 0.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
!             bufferbuilder.pos(0.0D, (double)l, (double)this.zLevel).tex((double)(0.0F + f1), 0.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
          }
  
          tessellator.draw();
--- 544,567 ----
          bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
          GlStateManager.disableAlpha();
          int i = 3;
+         int j = 3;
+         CustomPanoramaProperties custompanoramaproperties = CustomPanorama.getCustomPanoramaProperties();
  
!         if (custompanoramaproperties != null)
          {
!             j = custompanoramaproperties.getBlur2();
!         }
! 
!         for (int k = 0; k < j; ++k)
!         {
!             float f = 1.0F / (float)(k + 1);
!             int l = this.width;
!             int i1 = this.height;
!             float f1 = (float)(k - 1) / 256.0F;
!             bufferbuilder.pos((double)l, (double)i1, (double)this.zLevel).tex((double)(0.0F + f1), 1.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
!             bufferbuilder.pos((double)l, 0.0D, (double)this.zLevel).tex((double)(1.0F + f1), 1.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
              bufferbuilder.pos(0.0D, 0.0D, (double)this.zLevel).tex((double)(1.0F + f1), 0.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
!             bufferbuilder.pos(0.0D, (double)i1, (double)this.zLevel).tex((double)(0.0F + f1), 0.0D).color(1.0F, 1.0F, 1.0F, f).endVertex();
          }
  
          tessellator.draw();
***************
*** 521,546 ****
          GlStateManager.viewport(0, 0, 256, 256);
          this.drawPanorama(mouseX, mouseY, partialTicks);
          this.rotateAndBlurSkybox();
!         this.rotateAndBlurSkybox();
!         this.rotateAndBlurSkybox();
!         this.rotateAndBlurSkybox();
!         this.rotateAndBlurSkybox();
!         this.rotateAndBlurSkybox();
!         this.rotateAndBlurSkybox();
          this.mc.getFramebuffer().bindFramebuffer(true);
          GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
!         float f = 120.0F / (float)(this.width > this.height ? this.width : this.height);
!         float f1 = (float)this.height * f / 256.0F;
!         float f2 = (float)this.width * f / 256.0F;
!         int i = this.width;
!         int j = this.height;
          Tessellator tessellator = Tessellator.getInstance();
          BufferBuilder bufferbuilder = tessellator.getBuffer();
          bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!         bufferbuilder.pos(0.0D, (double)j, (double)this.zLevel).tex((double)(0.5F - f1), (double)(0.5F + f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
!         bufferbuilder.pos((double)i, (double)j, (double)this.zLevel).tex((double)(0.5F - f1), (double)(0.5F - f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
!         bufferbuilder.pos((double)i, 0.0D, (double)this.zLevel).tex((double)(0.5F + f1), (double)(0.5F - f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
!         bufferbuilder.pos(0.0D, 0.0D, (double)this.zLevel).tex((double)(0.5F + f1), (double)(0.5F + f2)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
          tessellator.draw();
      }
  
--- 578,611 ----
          GlStateManager.viewport(0, 0, 256, 256);
          this.drawPanorama(mouseX, mouseY, partialTicks);
          this.rotateAndBlurSkybox();
!         int i = 3;
!         CustomPanoramaProperties custompanoramaproperties = CustomPanorama.getCustomPanoramaProperties();
! 
!         if (custompanoramaproperties != null)
!         {
!             i = custompanoramaproperties.getBlur3();
!         }
! 
!         for (int j = 0; j < i; ++j)
!         {
!             this.rotateAndBlurSkybox();
!             this.rotateAndBlurSkybox();
!         }
! 
          this.mc.getFramebuffer().bindFramebuffer(true);
          GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
!         float f2 = 120.0F / (float)(this.width > this.height ? this.width : this.height);
!         float f = (float)this.height * f2 / 256.0F;
!         float f1 = (float)this.width * f2 / 256.0F;
!         int k = this.width;
!         int l = this.height;
          Tessellator tessellator = Tessellator.getInstance();
          BufferBuilder bufferbuilder = tessellator.getBuffer();
          bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!         bufferbuilder.pos(0.0D, (double)l, (double)this.zLevel).tex((double)(0.5F - f), (double)(0.5F + f1)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
!         bufferbuilder.pos((double)k, (double)l, (double)this.zLevel).tex((double)(0.5F - f), (double)(0.5F - f1)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
!         bufferbuilder.pos((double)k, 0.0D, (double)this.zLevel).tex((double)(0.5F + f), (double)(0.5F - f1)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
!         bufferbuilder.pos(0.0D, 0.0D, (double)this.zLevel).tex((double)(0.5F + f), (double)(0.5F + f1)).color(1.0F, 1.0F, 1.0F, 1.0F).endVertex();
          tessellator.draw();
      }
  
***************
*** 556,563 ****
          int i = 274;
          int j = this.width / 2 - 137;
          int k = 30;
!         this.drawGradientRect(0, 0, this.width, this.height, -2130706433, 16777215);
!         this.drawGradientRect(0, 0, this.width, this.height, 0, Integer.MIN_VALUE);
          this.mc.getTextureManager().bindTexture(MINECRAFT_TITLE_TEXTURES);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
  
--- 621,650 ----
          int i = 274;
          int j = this.width / 2 - 137;
          int k = 30;
!         int l = -2130706433;
!         int i1 = 16777215;
!         int j1 = 0;
!         int k1 = Integer.MIN_VALUE;
!         CustomPanoramaProperties custompanoramaproperties = CustomPanorama.getCustomPanoramaProperties();
! 
!         if (custompanoramaproperties != null)
!         {
!             l = custompanoramaproperties.getOverlay1Top();
!             i1 = custompanoramaproperties.getOverlay1Bottom();
!             j1 = custompanoramaproperties.getOverlay2Top();
!             k1 = custompanoramaproperties.getOverlay2Bottom();
!         }
! 
!         if (l != 0 || i1 != 0)
!         {
!             this.drawGradientRect(0, 0, this.width, this.height, l, i1);
!         }
! 
!         if (j1 != 0 || k1 != 0)
!         {
!             this.drawGradientRect(0, 0, this.width, this.height, j1, k1);
!         }
! 
          this.mc.getTextureManager().bindTexture(MINECRAFT_TITLE_TEXTURES);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
  
***************
*** 575,580 ****
--- 662,672 ----
              this.drawTexturedModalRect(j + 155, 30, 0, 45, 155, 44);
          }
  
+         this.mc.getTextureManager().bindTexture(field_194400_H);
+         drawModalRectWithCustomSizedTexture(j + 88, 67, 0.0F, 0.0F, 98, 14, 128.0F, 16.0F);
+ 
+         
+ 
          GlStateManager.pushMatrix();
          GlStateManager.translate((float)(this.width / 2 + 90), 70.0F, 0.0F);
          GlStateManager.rotate(-20.0F, 0.0F, 0.0F, 1.0F);
***************
*** 583,600 ****
          GlStateManager.scale(f, f, f);
          this.drawCenteredString(this.fontRendererObj, this.splashText, 0, -8, -256);
          GlStateManager.popMatrix();
!         String s = "Minecraft 1.12";
! 
!         if (this.mc.isDemo())
!         {
!             s = s + " Demo";
!         }
!         else
          {
!             s = s + ("release".equalsIgnoreCase(this.mc.getVersionType()) ? "" : "/" + this.mc.getVersionType());
          }
  
-         this.drawString(this.fontRendererObj, s, 2, this.height - 10, -1);
          this.drawString(this.fontRendererObj, "Copyright Mojang AB. Do not distribute!", this.field_193979_N, this.height - 10, -1);
  
          if (mouseX > this.field_193979_N && mouseX < this.field_193979_N + this.field_193978_M && mouseY > this.height - 10 && mouseY < this.height && Mouse.isInsideWindow())
--- 675,694 ----
          GlStateManager.scale(f, f, f);
          this.drawCenteredString(this.fontRendererObj, this.splashText, 0, -8, -256);
          GlStateManager.popMatrix();
!         //String s = "Minecraft 1.12.2 " + ("release".equalsIgnoreCase(this.mc.getVersionType()) ? "" : "/" + this.mc.getVersionType());
!         
!         List<String> list = Arrays.asList(Snowball.instance.MAIN_MENU_STRINGS);
!         for (int l1 = 0; l1 < list.size(); ++l1)
          {
!             String s1 = list.get(l1);
! 
!             if (!Strings.isNullOrEmpty(s1))
!             {
!                 this.drawString(this.fontRendererObj, s1, 2, this.height - (10 + l1 * (this.fontRendererObj.FONT_HEIGHT + 1)), 16777215);
!             }
          }
+         //this.drawString(this.fontRendererObj, s, 2, this.height - 10, -1);
  
          this.drawString(this.fontRendererObj, "Copyright Mojang AB. Do not distribute!", this.field_193979_N, this.height - 10, -1);
  
          if (mouseX > this.field_193979_N && mouseX < this.field_193979_N + this.field_193978_M && mouseY > this.height - 10 && mouseY < this.height && Mouse.isInsideWindow())
***************
*** 615,620 ****
--- 709,715 ----
          {
              this.realmsNotification.drawScreen(mouseX, mouseY, partialTicks);
          }
+         
      }
  
      /**
diff -rc ./client/gui/GuiMerchant.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiMerchant.java
*** ./client/gui/GuiMerchant.java	2018-11-18 13:18:42.617351000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiMerchant.java	2018-11-29 17:21:07.537166200 -0800
***************
*** 246,252 ****
              this.forward = p_i1095_4_;
          }
  
!         public void func_191745_a(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
          {
              if (this.visible)
              {
--- 246,252 ----
              this.forward = p_i1095_4_;
          }
  
!         public void draw(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
          {
              if (this.visible)
              {
diff -rc ./client/gui/GuiOptionsRowList.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiOptionsRowList.java
*** ./client/gui/GuiOptionsRowList.java	2018-11-18 13:18:42.699290000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiOptionsRowList.java	2018-11-29 17:21:07.551161500 -0800
***************
*** 80,92 ****
              if (this.buttonA != null)
              {
                  this.buttonA.yPosition = p_192634_3_;
!                 this.buttonA.func_191745_a(this.client, p_192634_6_, p_192634_7_, p_192634_9_);
              }
  
              if (this.buttonB != null)
              {
                  this.buttonB.yPosition = p_192634_3_;
!                 this.buttonB.func_191745_a(this.client, p_192634_6_, p_192634_7_, p_192634_9_);
              }
          }
  
--- 80,92 ----
              if (this.buttonA != null)
              {
                  this.buttonA.yPosition = p_192634_3_;
!                 this.buttonA.draw(this.client, p_192634_6_, p_192634_7_, p_192634_9_);
              }
  
              if (this.buttonB != null)
              {
                  this.buttonB.yPosition = p_192634_3_;
!                 this.buttonB.draw(this.client, p_192634_6_, p_192634_7_, p_192634_9_);
              }
          }
  
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui: GuiOverlayDeb~
diff -rc ./client/gui/GuiOverlayDebug.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiOverlayDebug.java
*** ./client/gui/GuiOverlayDebug.java	2018-11-18 13:18:42.710283000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiOverlayDebug.java	2017-10-20 21:35:40.168376500 -0700
***************
*** 3,8 ****
--- 3,9 ----
  import com.google.common.base.Strings;
  import com.google.common.collect.Lists;
  import com.google.common.collect.UnmodifiableIterator;
+ import java.util.Collection;
  import java.util.List;
  import java.util.Map.Entry;
  import net.minecraft.block.Block;
***************
*** 15,21 ****
  import net.minecraft.entity.Entity;
  import net.minecraft.entity.player.EntityPlayerMP;
  import net.minecraft.util.EnumFacing;
- import net.minecraft.util.FrameTimer;
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.util.math.RayTraceResult;
--- 16,21 ----
***************
*** 24,29 ****
--- 24,31 ----
  import net.minecraft.world.EnumSkyBlock;
  import net.minecraft.world.WorldType;
  import net.minecraft.world.chunk.Chunk;
+ import optifine.Reflector;
+ 
  import org.lwjgl.opengl.Display;
  
  public class GuiOverlayDebug extends Gui
***************
*** 103,109 ****
  
          if (this.mc.isReducedDebug())
          {
!             return Lists.newArrayList("Minecraft 1.12 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("Chunk-relative: %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15));
          }
          else
          {
--- 105,111 ----
  
          if (this.mc.isReducedDebug())
          {
!             return Lists.newArrayList("Minecraft 1.12.2 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("Chunk-relative: %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15));
          }
          else
          {
***************
*** 129,135 ****
                      s = "Towards positive X";
              }
  
!             List<String> list = Lists.newArrayList("Minecraft 1.12 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.mc.getVersionType()) ? "" : "/" + this.mc.getVersionType()) + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("XYZ: %.3f / %.5f / %.3f", this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().getEntityBoundingBox().minY, this.mc.getRenderViewEntity().posZ), String.format("Block: %d %d %d", blockpos.getX(), blockpos.getY(), blockpos.getZ()), String.format("Chunk: %d %d %d in %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15, blockpos.getX() >> 4, blockpos.getY() >> 4, blockpos.getZ() >> 4), String.format("Facing: %s (%s) (%.1f / %.1f)", enumfacing, s, MathHelper.wrapDegrees(entity.rotationYaw), MathHelper.wrapDegrees(entity.rotationPitch)));
  
              if (this.mc.world != null)
              {
--- 131,137 ----
                      s = "Towards positive X";
              }
  
!             List<String> list = Lists.newArrayList("Minecraft 1.12.2 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.mc.getVersionType()) ? "" : "/" + this.mc.getVersionType()) + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("XYZ: %.3f / %.5f / %.3f", this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().getEntityBoundingBox().minY, this.mc.getRenderViewEntity().posZ), String.format("Block: %d %d %d", blockpos.getX(), blockpos.getY(), blockpos.getZ()), String.format("Chunk: %d %d %d in %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15, blockpos.getX() >> 4, blockpos.getY() >> 4, blockpos.getZ() >> 4), String.format("Facing: %s (%s) (%.1f / %.1f)", enumfacing, s, MathHelper.wrapDegrees(entity.rotationYaw), MathHelper.wrapDegrees(entity.rotationPitch)));
  
              if (this.mc.world != null)
              {
***************
*** 189,194 ****
--- 191,203 ----
          long l = j - k;
          List<String> list = Lists.newArrayList(String.format("Java: %s %dbit", System.getProperty("java.version"), this.mc.isJava64bit() ? 64 : 32), String.format("Mem: % 2d%% %03d/%03dMB", l * 100L / i, bytesToMb(l), bytesToMb(i)), String.format("Allocated: % 2d%% %03dMB", j * 100L / i, bytesToMb(j)), "", String.format("CPU: %s", OpenGlHelper.getCpu()), "", String.format("Display: %dx%d (%s)", Display.getWidth(), Display.getHeight(), GlStateManager.glGetString(7936)), GlStateManager.glGetString(7937), GlStateManager.glGetString(7938));
  
+         if (Reflector.FMLCommonHandler_getBrandings.exists())
+         {
+             Object object = Reflector.call(Reflector.FMLCommonHandler_instance);
+             list.add("");
+             list.addAll((Collection)Reflector.call(object, Reflector.FMLCommonHandler_getBrandings, false));
+         }
+ 
          if (this.mc.isReducedDebug())
          {
              return list;
***************
*** 234,274 ****
  
      private void renderLagometer()
      {
-         GlStateManager.disableDepth();
-         FrameTimer frametimer = this.mc.getFrameTimer();
-         int i = frametimer.getLastIndex();
-         int j = frametimer.getIndex();
-         long[] along = frametimer.getFrames();
-         ScaledResolution scaledresolution = new ScaledResolution(this.mc);
-         int k = i;
-         int l = 0;
-         drawRect(0, scaledresolution.getScaledHeight() - 60, 240, scaledresolution.getScaledHeight(), -1873784752);
- 
-         while (k != j)
-         {
-             int i1 = frametimer.getLagometerValue(along[k], 30);
-             int j1 = this.getFrameColor(MathHelper.clamp(i1, 0, 60), 0, 30, 60);
-             this.drawVerticalLine(l, scaledresolution.getScaledHeight(), scaledresolution.getScaledHeight() - i1, j1);
-             ++l;
-             k = frametimer.parseIndex(k + 1);
-         }
- 
-         drawRect(1, scaledresolution.getScaledHeight() - 30 + 1, 14, scaledresolution.getScaledHeight() - 30 + 10, -1873784752);
-         this.fontRenderer.drawString("60", 2, scaledresolution.getScaledHeight() - 30 + 2, 14737632);
-         this.drawHorizontalLine(0, 239, scaledresolution.getScaledHeight() - 30, -1);
-         drawRect(1, scaledresolution.getScaledHeight() - 60 + 1, 14, scaledresolution.getScaledHeight() - 60 + 10, -1873784752);
-         this.fontRenderer.drawString("30", 2, scaledresolution.getScaledHeight() - 60 + 2, 14737632);
-         this.drawHorizontalLine(0, 239, scaledresolution.getScaledHeight() - 60, -1);
-         this.drawHorizontalLine(0, 239, scaledresolution.getScaledHeight() - 1, -1);
-         this.drawVerticalLine(0, scaledresolution.getScaledHeight() - 60, scaledresolution.getScaledHeight(), -1);
-         this.drawVerticalLine(239, scaledresolution.getScaledHeight() - 60, scaledresolution.getScaledHeight(), -1);
- 
-         if (this.mc.gameSettings.limitFramerate <= 120)
-         {
-             this.drawHorizontalLine(0, 239, scaledresolution.getScaledHeight() - 60 + this.mc.gameSettings.limitFramerate / 2, -16711681);
-         }
- 
-         GlStateManager.enableDepth();
      }
  
      private int getFrameColor(int p_181552_1_, int p_181552_2_, int p_181552_3_, int p_181552_4_)
--- 243,248 ----
diff -rc ./client/gui/GuiPageButtonList.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiPageButtonList.java
*** ./client/gui/GuiPageButtonList.java	2018-11-18 13:18:42.728274000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiPageButtonList.java	2018-11-29 17:21:07.601500100 -0800
***************
*** 459,465 ****
  
              if (!p_192635_5_)
              {
!                 p_192635_1_.func_191745_a(this.client, p_192635_3_, p_192635_4_, p_192635_6_);
              }
          }
  
--- 459,465 ----
  
              if (!p_192635_5_)
              {
!                 p_192635_1_.draw(this.client, p_192635_3_, p_192635_4_, p_192635_6_);
              }
          }
  
diff -rc ./client/gui/GuiScreen.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiScreen.java
*** ./client/gui/GuiScreen.java	2018-11-18 13:18:42.805227000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiScreen.java	2018-12-04 18:17:25.939043400 -0800
***************
*** 46,52 ****
      private static final Splitter NEWLINE_SPLITTER = Splitter.on('\n');
  
      /** Reference to the Minecraft object. */
!     protected Minecraft mc;
  
      /**
       * Holds a instance of RenderItem, used to draw the achievement icons on screen (is based on ItemStack)
--- 46,52 ----
      private static final Splitter NEWLINE_SPLITTER = Splitter.on('\n');
  
      /** Reference to the Minecraft object. */
!     public Minecraft mc;
  
      /**
       * Holds a instance of RenderItem, used to draw the achievement icons on screen (is based on ItemStack)
***************
*** 84,90 ****
      {
          for (int i = 0; i < this.buttonList.size(); ++i)
          {
!             ((GuiButton)this.buttonList.get(i)).func_191745_a(this.mc, mouseX, mouseY, partialTicks);
          }
  
          for (int j = 0; j < this.labelList.size(); ++j)
--- 84,90 ----
      {
          for (int i = 0; i < this.buttonList.size(); ++i)
          {
!             ((GuiButton)this.buttonList.get(i)).draw(this.mc, mouseX, mouseY, partialTicks);
          }
  
          for (int j = 0; j < this.labelList.size(); ++j)
***************
*** 688,694 ****
          }
      }
  
!     private void openWebLink(URI url)
      {
          try
          {
--- 688,694 ----
          }
      }
  
!     protected void openWebLink(URI url)
      {
          try
          {
diff -rc ./client/gui/GuiScreenBook.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiScreenBook.java
*** ./client/gui/GuiScreenBook.java	2018-11-18 13:18:42.837212000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiScreenBook.java	2018-11-29 17:21:07.701952700 -0800
***************
*** 630,636 ****
              this.isForward = p_i46316_4_;
          }
  
!         public void func_191745_a(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
          {
              if (this.visible)
              {
--- 630,636 ----
              this.isForward = p_i46316_4_;
          }
  
!         public void draw(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
          {
              if (this.visible)
              {
diff -rc ./client/gui/GuiScreenResourcePacks.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiScreenResourcePacks.java
*** ./client/gui/GuiScreenResourcePacks.java	2018-11-18 13:18:42.915165000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiScreenResourcePacks.java	2018-11-18 13:45:19.263073800 -0800
***************
*** 5,10 ****
--- 5,13 ----
  import java.io.IOException;
  import java.util.Collections;
  import java.util.List;
+ 
+ import org.golde.snowball.texture.SnowballResourcePackListEntry;
+ 
  import net.minecraft.client.renderer.OpenGlHelper;
  import net.minecraft.client.resources.I18n;
  import net.minecraft.client.resources.ResourcePackListEntry;
***************
*** 66,71 ****
--- 69,75 ----
                  this.selectedResourcePacks.add(new ResourcePackListEntryFound(this, resourcepackrepository$entry1));
              }
  
+             this.selectedResourcePacks.add(new SnowballResourcePackListEntry(this));
              this.selectedResourcePacks.add(new ResourcePackListEntryDefault(this));
          }
  
diff -rc ./client/gui/GuiSlot.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiSlot.java
*** ./client/gui/GuiSlot.java	2018-11-18 13:18:43.007113000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiSlot.java	2017-10-20 21:01:18.953561000 -0700
***************
*** 233,247 ****
              GlStateManager.disableFog();
              Tessellator tessellator = Tessellator.getInstance();
              BufferBuilder bufferbuilder = tessellator.getBuffer();
!             this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
!             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!             float f = 32.0F;
!             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!             bufferbuilder.pos((double)this.left, (double)this.bottom, 0.0D).tex((double)((float)this.left / 32.0F), (double)((float)(this.bottom + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
!             bufferbuilder.pos((double)this.right, (double)this.bottom, 0.0D).tex((double)((float)this.right / 32.0F), (double)((float)(this.bottom + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
!             bufferbuilder.pos((double)this.right, (double)this.top, 0.0D).tex((double)((float)this.right / 32.0F), (double)((float)(this.top + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
!             bufferbuilder.pos((double)this.left, (double)this.top, 0.0D).tex((double)((float)this.left / 32.0F), (double)((float)(this.top + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
!             tessellator.draw();
              int k = this.left + this.width / 2 - this.getListWidth() / 2 + 2;
              int l = this.top + 4 - (int)this.amountScrolled;
  
--- 233,239 ----
              GlStateManager.disableFog();
              Tessellator tessellator = Tessellator.getInstance();
              BufferBuilder bufferbuilder = tessellator.getBuffer();
!             this.drawContainerBackground(tessellator);
              int k = this.left + this.width / 2 - this.getListWidth() / 2 + 2;
              int l = this.top + 4 - (int)this.amountScrolled;
  
***************
*** 337,343 ****
  
              if (Mouse.isButtonDown(0) && this.getEnabled())
              {
!                 if (this.initialClickY == -1)
                  {
                      boolean flag1 = true;
  
--- 329,343 ----
  
              if (Mouse.isButtonDown(0) && this.getEnabled())
              {
!                 if (this.initialClickY != -1)
!                 {
!                     if (this.initialClickY >= 0)
!                     {
!                         this.amountScrolled -= (float)(this.mouseY - this.initialClickY) * this.scrollMultiplier;
!                         this.initialClickY = this.mouseY;
!                     }
!                 }
!                 else
                  {
                      boolean flag1 = true;
  
***************
*** 397,407 ****
                          this.initialClickY = -2;
                      }
                  }
-                 else if (this.initialClickY >= 0)
-                 {
-                     this.amountScrolled -= (float)(this.mouseY - this.initialClickY) * this.scrollMultiplier;
-                     this.initialClickY = this.mouseY;
-                 }
              }
              else
              {
--- 397,402 ----
***************
*** 479,485 ****
                  GlStateManager.enableTexture2D();
              }
  
!             this.func_192637_a(j, p_192638_1_, k, l, p_192638_3_, p_192638_4_, p_192638_5_);
          }
      }
  
--- 474,483 ----
                  GlStateManager.enableTexture2D();
              }
  
!             if (k >= this.top - this.slotHeight && k <= this.bottom)
!             {
!                 this.func_192637_a(j, p_192638_1_, k, l, p_192638_3_, p_192638_4_, p_192638_5_);
!             }
          }
      }
  
***************
*** 519,522 ****
--- 517,534 ----
      {
          return this.slotHeight;
      }
+ 
+     protected void drawContainerBackground(Tessellator p_drawContainerBackground_1_)
+     {
+         BufferBuilder bufferbuilder = p_drawContainerBackground_1_.getBuffer();
+         this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
+         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+         float f = 32.0F;
+         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
+         bufferbuilder.pos((double)this.left, (double)this.bottom, 0.0D).tex((double)((float)this.left / 32.0F), (double)((float)(this.bottom + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
+         bufferbuilder.pos((double)this.right, (double)this.bottom, 0.0D).tex((double)((float)this.right / 32.0F), (double)((float)(this.bottom + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
+         bufferbuilder.pos((double)this.right, (double)this.top, 0.0D).tex((double)((float)this.right / 32.0F), (double)((float)(this.top + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
+         bufferbuilder.pos((double)this.left, (double)this.top, 0.0D).tex((double)((float)this.left / 32.0F), (double)((float)(this.top + (int)this.amountScrolled) / 32.0F)).color(32, 32, 32, 255).endVertex();
+         p_drawContainerBackground_1_.draw();
+     }
  }
diff -rc ./client/gui/GuiTextField.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiTextField.java
*** ./client/gui/GuiTextField.java	2018-11-18 13:18:43.069078000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiTextField.java	2018-11-18 13:37:58.686627000 -0800
***************
*** 18,24 ****
      public int yPosition;
  
      /** The width of this text field. */
!     private final int width;
      private final int height;
  
      /** Has the current text being edited on the textbox. */
--- 18,24 ----
      public int yPosition;
  
      /** The width of this text field. */
!     public int width;
      private final int height;
  
      /** Has the current text being edited on the textbox. */
diff -rc ./client/gui/GuiUtilRenderComponents.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiUtilRenderComponents.java
*** ./client/gui/GuiUtilRenderComponents.java	2018-11-18 13:18:43.084068000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiUtilRenderComponents.java	2018-12-12 20:30:56.142375200 -0800
***************
*** 70,75 ****
--- 70,77 ----
                          s3 = s4;
                      }
  
+                     s3 = FontRenderer.getFormatFromString(s2) + s3; //Forge: Fix chat formatting not surviving line wrapping.
+ 
                      TextComponentString textcomponentstring1 = new TextComponentString(s3);
                      textcomponentstring1.setStyle(itextcomponent1.getStyle().createShallowCopy());
                      list1.add(j + 1, textcomponentstring1);
diff -rc ./client/gui/GuiVideoSettings.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiVideoSettings.java
*** ./client/gui/GuiVideoSettings.java	2018-11-18 13:18:43.095062000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiVideoSettings.java	2017-10-20 21:35:40.214452900 -0700
***************
*** 1,19 ****
  package net.minecraft.client.gui;
  
  import java.io.IOException;
- import net.minecraft.client.renderer.OpenGlHelper;
  import net.minecraft.client.resources.I18n;
  import net.minecraft.client.settings.GameSettings;
  
! public class GuiVideoSettings extends GuiScreen
  {
!     private final GuiScreen parentGuiScreen;
      protected String screenTitle = "Video Settings";
!     private final GameSettings guiGameSettings;
!     private GuiListExtended optionsRowList;
! 
!     /** An array of all of GameSettings.Options's video options. */
!     private static final GameSettings.Options[] VIDEO_OPTIONS = new GameSettings.Options[] {GameSettings.Options.GRAPHICS, GameSettings.Options.RENDER_DISTANCE, GameSettings.Options.AMBIENT_OCCLUSION, GameSettings.Options.FRAMERATE_LIMIT, GameSettings.Options.ANAGLYPH, GameSettings.Options.VIEW_BOBBING, GameSettings.Options.GUI_SCALE, GameSettings.Options.ATTACK_INDICATOR, GameSettings.Options.GAMMA, GameSettings.Options.RENDER_CLOUDS, GameSettings.Options.PARTICLES, GameSettings.Options.USE_FULLSCREEN, GameSettings.Options.ENABLE_VSYNC, GameSettings.Options.MIPMAP_LEVELS, GameSettings.Options.USE_VBO, GameSettings.Options.ENTITY_SHADOWS};
  
      public GuiVideoSettings(GuiScreen parentScreenIn, GameSettings gameSettingsIn)
      {
--- 1,29 ----
  package net.minecraft.client.gui;
  
  import java.io.IOException;
  import net.minecraft.client.resources.I18n;
  import net.minecraft.client.settings.GameSettings;
+ import optifine.Config;
+ import optifine.GuiAnimationSettingsOF;
+ import optifine.GuiDetailSettingsOF;
+ import optifine.GuiOptionButtonOF;
+ import optifine.GuiOptionSliderOF;
+ import optifine.GuiOtherSettingsOF;
+ import optifine.GuiPerformanceSettingsOF;
+ import optifine.GuiQualitySettingsOF;
+ import optifine.GuiScreenOF;
+ import optifine.Lang;
+ import optifine.TooltipManager;
+ import shadersmod.client.GuiShaders;
  
! public class GuiVideoSettings extends GuiScreenOF
  {
!     private GuiScreen parentGuiScreen;
      protected String screenTitle = "Video Settings";
!     private GameSettings guiGameSettings;
!     private static GameSettings.Options[] videoOptions = new GameSettings.Options[] {GameSettings.Options.GRAPHICS, GameSettings.Options.RENDER_DISTANCE, GameSettings.Options.AMBIENT_OCCLUSION, GameSettings.Options.FRAMERATE_LIMIT, GameSettings.Options.AO_LEVEL, GameSettings.Options.VIEW_BOBBING, GameSettings.Options.GUI_SCALE, GameSettings.Options.USE_VBO, GameSettings.Options.GAMMA, GameSettings.Options.ATTACK_INDICATOR, GameSettings.Options.DYNAMIC_LIGHTS, GameSettings.Options.DYNAMIC_FOV};
!     private static final String __OBFID = "CL_00000718";
!     private TooltipManager tooltipManager = new TooltipManager(this);
  
      public GuiVideoSettings(GuiScreen parentScreenIn, GameSettings gameSettingsIn)
      {
***************
*** 29,142 ****
      {
          this.screenTitle = I18n.format("options.videoTitle");
          this.buttonList.clear();
-         this.buttonList.add(new GuiButton(200, this.width / 2 - 100, this.height - 27, I18n.format("gui.done")));
  
!         if (OpenGlHelper.vboSupported)
!         {
!             this.optionsRowList = new GuiOptionsRowList(this.mc, this.width, this.height, 32, this.height - 32, 25, VIDEO_OPTIONS);
!         }
!         else
          {
!             GameSettings.Options[] agamesettings$options = new GameSettings.Options[VIDEO_OPTIONS.length - 1];
!             int i = 0;
  
!             for (GameSettings.Options gamesettings$options : VIDEO_OPTIONS)
              {
!                 if (gamesettings$options == GameSettings.Options.USE_VBO)
                  {
!                     break;
                  }
- 
-                 agamesettings$options[i] = gamesettings$options;
-                 ++i;
              }
- 
-             this.optionsRowList = new GuiOptionsRowList(this.mc, this.width, this.height, 32, this.height - 32, 25, agamesettings$options);
          }
      }
  
      /**
!      * Handles mouse input.
       */
!     public void handleMouseInput() throws IOException
      {
!         super.handleMouseInput();
!         this.optionsRowList.handleMouseInput();
      }
  
!     /**
!      * Fired when a key is typed (except F11 which toggles full screen). This is the equivalent of
!      * KeyListener.keyTyped(KeyEvent e). Args : character (character on the key), keyCode (lwjgl Keyboard key code)
!      */
!     protected void keyTyped(char typedChar, int keyCode) throws IOException
      {
!         if (keyCode == 1)
          {
!             this.mc.gameSettings.saveOptions();
          }
- 
-         super.keyTyped(typedChar, keyCode);
      }
  
!     /**
!      * Called by the controls from the buttonList when activated. (Mouse pressed for buttons)
!      */
!     protected void actionPerformed(GuiButton button) throws IOException
      {
!         if (button.enabled)
          {
!             if (button.id == 200)
              {
                  this.mc.gameSettings.saveOptions();
                  this.mc.displayGuiScreen(this.parentGuiScreen);
              }
          }
      }
  
      /**
!      * Called when the mouse is clicked. Args : mouseX, mouseY, clickedButton
       */
!     protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
      {
!         int i = this.guiGameSettings.guiScale;
!         super.mouseClicked(mouseX, mouseY, mouseButton);
!         this.optionsRowList.mouseClicked(mouseX, mouseY, mouseButton);
! 
!         if (this.guiGameSettings.guiScale != i)
!         {
!             ScaledResolution scaledresolution = new ScaledResolution(this.mc);
!             int j = scaledresolution.getScaledWidth();
!             int k = scaledresolution.getScaledHeight();
!             this.setWorldAndResolution(this.mc, j, k);
          }
      }
  
!     /**
!      * Called when a mouse button is released.
!      */
!     protected void mouseReleased(int mouseX, int mouseY, int state)
      {
!         int i = this.guiGameSettings.guiScale;
!         super.mouseReleased(mouseX, mouseY, state);
!         this.optionsRowList.mouseReleased(mouseX, mouseY, state);
! 
!         if (this.guiGameSettings.guiScale != i)
!         {
!             ScaledResolution scaledresolution = new ScaledResolution(this.mc);
!             int j = scaledresolution.getScaledWidth();
!             int k = scaledresolution.getScaledHeight();
!             this.setWorldAndResolution(this.mc, j, k);
!         }
      }
  
!     /**
!      * Draws the screen and all the components in it.
!      */
!     public void drawScreen(int mouseX, int mouseY, float partialTicks)
      {
!         this.drawDefaultBackground();
!         this.optionsRowList.drawScreen(mouseX, mouseY, partialTicks);
!         this.drawCenteredString(this.fontRendererObj, this.screenTitle, this.width / 2, 5, 16777215);
!         super.drawScreen(mouseX, mouseY, partialTicks);
      }
  }
--- 39,240 ----
      {
          this.screenTitle = I18n.format("options.videoTitle");
          this.buttonList.clear();
  
!         for (int i = 0; i < videoOptions.length; ++i)
          {
!             GameSettings.Options gamesettings$options = videoOptions[i];
  
!             if (gamesettings$options != null)
              {
!                 int j = this.width / 2 - 155 + i % 2 * 160;
!                 int k = this.height / 6 + 21 * (i / 2) - 12;
! 
!                 if (gamesettings$options.getEnumFloat())
                  {
!                     this.buttonList.add(new GuiOptionSliderOF(gamesettings$options.returnEnumOrdinal(), j, k, gamesettings$options));
!                 }
!                 else
!                 {
!                     this.buttonList.add(new GuiOptionButtonOF(gamesettings$options.returnEnumOrdinal(), j, k, gamesettings$options, this.guiGameSettings.getKeyBinding(gamesettings$options)));
                  }
              }
          }
+ 
+         int l = this.height / 6 + 21 * (videoOptions.length / 2) - 12;
+         int i1 = 0;
+         i1 = this.width / 2 - 155 + 0;
+         this.buttonList.add(new GuiOptionButton(231, i1, l, Lang.get("of.options.shaders")));
+         i1 = this.width / 2 - 155 + 160;
+         this.buttonList.add(new GuiOptionButton(202, i1, l, Lang.get("of.options.quality")));
+         l = l + 21;
+         i1 = this.width / 2 - 155 + 0;
+         this.buttonList.add(new GuiOptionButton(201, i1, l, Lang.get("of.options.details")));
+         i1 = this.width / 2 - 155 + 160;
+         this.buttonList.add(new GuiOptionButton(212, i1, l, Lang.get("of.options.performance")));
+         l = l + 21;
+         i1 = this.width / 2 - 155 + 0;
+         this.buttonList.add(new GuiOptionButton(211, i1, l, Lang.get("of.options.animations")));
+         i1 = this.width / 2 - 155 + 160;
+         this.buttonList.add(new GuiOptionButton(222, i1, l, Lang.get("of.options.other")));
+         l = l + 21;
+         this.buttonList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168 + 11, I18n.format("gui.done")));
      }
  
      /**
!      * Called by the controls from the buttonList when activated. (Mouse pressed for buttons)
       */
!     protected void actionPerformed(GuiButton button) throws IOException
      {
!         this.actionPerformed(button, 1);
      }
  
!     protected void actionPerformedRightClick(GuiButton p_actionPerformedRightClick_1_)
      {
!         if (p_actionPerformedRightClick_1_.id == GameSettings.Options.GUI_SCALE.ordinal())
          {
!             this.actionPerformed(p_actionPerformedRightClick_1_, -1);
          }
      }
  
!     private void actionPerformed(GuiButton p_actionPerformed_1_, int p_actionPerformed_2_)
      {
!         if (p_actionPerformed_1_.enabled)
          {
!             int i = this.guiGameSettings.guiScale;
! 
!             if (p_actionPerformed_1_.id < 200 && p_actionPerformed_1_ instanceof GuiOptionButton)
!             {
!                 this.guiGameSettings.setOptionValue(((GuiOptionButton)p_actionPerformed_1_).returnEnumOptions(), p_actionPerformed_2_);
!                 p_actionPerformed_1_.displayString = this.guiGameSettings.getKeyBinding(GameSettings.Options.getEnumOptions(p_actionPerformed_1_.id));
!             }
! 
!             if (p_actionPerformed_1_.id == 200)
              {
                  this.mc.gameSettings.saveOptions();
                  this.mc.displayGuiScreen(this.parentGuiScreen);
              }
+ 
+             if (this.guiGameSettings.guiScale != i)
+             {
+                 ScaledResolution scaledresolution = new ScaledResolution(this.mc);
+                 int j = scaledresolution.getScaledWidth();
+                 int k = scaledresolution.getScaledHeight();
+                 this.setWorldAndResolution(this.mc, j, k);
+             }
+ 
+             if (p_actionPerformed_1_.id == 201)
+             {
+                 this.mc.gameSettings.saveOptions();
+                 GuiDetailSettingsOF guidetailsettingsof = new GuiDetailSettingsOF(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guidetailsettingsof);
+             }
+ 
+             if (p_actionPerformed_1_.id == 202)
+             {
+                 this.mc.gameSettings.saveOptions();
+                 GuiQualitySettingsOF guiqualitysettingsof = new GuiQualitySettingsOF(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guiqualitysettingsof);
+             }
+ 
+             if (p_actionPerformed_1_.id == 211)
+             {
+                 this.mc.gameSettings.saveOptions();
+                 GuiAnimationSettingsOF guianimationsettingsof = new GuiAnimationSettingsOF(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guianimationsettingsof);
+             }
+ 
+             if (p_actionPerformed_1_.id == 212)
+             {
+                 this.mc.gameSettings.saveOptions();
+                 GuiPerformanceSettingsOF guiperformancesettingsof = new GuiPerformanceSettingsOF(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guiperformancesettingsof);
+             }
+ 
+             if (p_actionPerformed_1_.id == 222)
+             {
+                 this.mc.gameSettings.saveOptions();
+                 GuiOtherSettingsOF guiothersettingsof = new GuiOtherSettingsOF(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guiothersettingsof);
+             }
+ 
+             if (p_actionPerformed_1_.id == 231)
+             {
+                 if (Config.isAntialiasing() || Config.isAntialiasingConfigured())
+                 {
+                     Config.showGuiMessage(Lang.get("of.message.shaders.aa1"), Lang.get("of.message.shaders.aa2"));
+                     return;
+                 }
+ 
+                 if (Config.isAnisotropicFiltering())
+                 {
+                     Config.showGuiMessage(Lang.get("of.message.shaders.af1"), Lang.get("of.message.shaders.af2"));
+                     return;
+                 }
+ 
+                 if (Config.isFastRender())
+                 {
+                     Config.showGuiMessage(Lang.get("of.message.shaders.fr1"), Lang.get("of.message.shaders.fr2"));
+                     return;
+                 }
+ 
+                 if (Config.getGameSettings().anaglyph)
+                 {
+                     Config.showGuiMessage(Lang.get("of.message.shaders.an1"), Lang.get("of.message.shaders.an2"));
+                     return;
+                 }
+ 
+                 this.mc.gameSettings.saveOptions();
+                 GuiShaders guishaders = new GuiShaders(this, this.guiGameSettings);
+                 this.mc.displayGuiScreen(guishaders);
+             }
          }
      }
  
      /**
!      * Draws the screen and all the components in it.
       */
!     public void drawScreen(int mouseX, int mouseY, float partialTicks)
      {
!         this.drawDefaultBackground();
!         this.drawCenteredString(this.fontRendererObj, this.screenTitle, this.width / 2, 15, 16777215);
!         String s = Config.getVersion();
!         String s1 = "HD_U";
! 
!         if (s1.equals("HD"))
!         {
!             s = "OptiFine HD C6";
!         }
! 
!         if (s1.equals("HD_U"))
!         {
!             s = "OptiFine HD C6 Ultra";
          }
+ 
+         if (s1.equals("L"))
+         {
+             s = "OptiFine C6 Light";
+         }
+ 
+         this.drawString(this.fontRendererObj, s, 2, this.height - 10, 8421504);
+         String s2 = "Minecraft 1.12.2";
+         int i = this.fontRendererObj.getStringWidth(s2);
+         this.drawString(this.fontRendererObj, s2, this.width - i - 2, this.height - 10, 8421504);
+         super.drawScreen(mouseX, mouseY, partialTicks);
+         this.tooltipManager.drawTooltips(mouseX, mouseY, this.buttonList);
      }
  
!     public static int getButtonWidth(GuiButton p_getButtonWidth_0_)
      {
!         return p_getButtonWidth_0_.width;
      }
  
!     public static int getButtonHeight(GuiButton p_getButtonHeight_0_)
      {
!         return p_getButtonHeight_0_.height;
!     }
! 
!     public static void drawGradientRect(GuiScreen p_drawGradientRect_0_, int p_drawGradientRect_1_, int p_drawGradientRect_2_, int p_drawGradientRect_3_, int p_drawGradientRect_4_, int p_drawGradientRect_5_, int p_drawGradientRect_6_)
!     {
!         p_drawGradientRect_0_.drawGradientRect(p_drawGradientRect_1_, p_drawGradientRect_2_, p_drawGradientRect_3_, p_drawGradientRect_4_, p_drawGradientRect_5_, p_drawGradientRect_6_);
      }
  }
diff -rc ./client/gui/GuiWinGame.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiWinGame.java
*** ./client/gui/GuiWinGame.java	2018-11-18 13:18:43.105055000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/GuiWinGame.java	2017-10-20 21:01:19.024061000 -0700
***************
*** 24,41 ****
  {
      private static final Logger LOGGER = LogManager.getLogger();
      private static final ResourceLocation MINECRAFT_LOGO = new ResourceLocation("textures/gui/title/minecraft.png");
      private static final ResourceLocation VIGNETTE_TEXTURE = new ResourceLocation("textures/misc/vignette.png");
      private final boolean field_193980_h;
      private final Runnable field_193981_i;
      private float time;
      private List<String> lines;
      private int totalScrollLength;
!     private final float scrollSpeed = 0.5F;
  
      public GuiWinGame(boolean p_i47590_1_, Runnable p_i47590_2_)
      {
          this.field_193980_h = p_i47590_1_;
          this.field_193981_i = p_i47590_2_;
      }
  
      /**
--- 24,47 ----
  {
      private static final Logger LOGGER = LogManager.getLogger();
      private static final ResourceLocation MINECRAFT_LOGO = new ResourceLocation("textures/gui/title/minecraft.png");
+     private static final ResourceLocation field_194401_g = new ResourceLocation("textures/gui/title/edition.png");
      private static final ResourceLocation VIGNETTE_TEXTURE = new ResourceLocation("textures/misc/vignette.png");
      private final boolean field_193980_h;
      private final Runnable field_193981_i;
      private float time;
      private List<String> lines;
      private int totalScrollLength;
!     private float scrollSpeed = 0.5F;
  
      public GuiWinGame(boolean p_i47590_1_, Runnable p_i47590_2_)
      {
          this.field_193980_h = p_i47590_1_;
          this.field_193981_i = p_i47590_2_;
+ 
+         if (!p_i47590_1_)
+         {
+             this.scrollSpeed = 0.75F;
+         }
      }
  
      /**
***************
*** 45,51 ****
      {
          this.mc.getMusicTicker().update();
          this.mc.getSoundHandler().update();
!         float f = (float)(this.totalScrollLength + this.height + this.height + 24) / 0.5F;
  
          if (this.time > f)
          {
--- 51,57 ----
      {
          this.mc.getMusicTicker().update();
          this.mc.getSoundHandler().update();
!         float f = (float)(this.totalScrollLength + this.height + this.height + 24) / this.scrollSpeed;
  
          if (this.time > f)
          {
***************
*** 160,170 ****
          this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
          bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
          int i = this.width;
!         float f = -this.time * 0.5F * 0.5F;
!         float f1 = (float)this.height - this.time * 0.5F * 0.5F;
          float f2 = 0.015625F;
          float f3 = this.time * 0.02F;
!         float f4 = (float)(this.totalScrollLength + this.height + this.height + 24) / 0.5F;
          float f5 = (f4 - 20.0F - this.time) * 0.005F;
  
          if (f5 < f3)
--- 166,176 ----
          this.mc.getTextureManager().bindTexture(Gui.OPTIONS_BACKGROUND);
          bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
          int i = this.width;
!         float f = -this.time * 0.5F * this.scrollSpeed;
!         float f1 = (float)this.height - this.time * 0.5F * this.scrollSpeed;
          float f2 = 0.015625F;
          float f3 = this.time * 0.02F;
!         float f4 = (float)(this.totalScrollLength + this.height + this.height + 24) / this.scrollSpeed;
          float f5 = (f4 - 20.0F - this.time) * 0.005F;
  
          if (f5 < f3)
***************
*** 198,204 ****
          int j = this.width / 2 - 137;
          int k = this.height + 50;
          this.time += partialTicks;
!         float f = -this.time * 0.5F;
          GlStateManager.pushMatrix();
          GlStateManager.translate(0.0F, f, 0.0F);
          this.mc.getTextureManager().bindTexture(MINECRAFT_LOGO);
--- 204,210 ----
          int j = this.width / 2 - 137;
          int k = this.height + 50;
          this.time += partialTicks;
!         float f = -this.time * this.scrollSpeed;
          GlStateManager.pushMatrix();
          GlStateManager.translate(0.0F, f, 0.0F);
          this.mc.getTextureManager().bindTexture(MINECRAFT_LOGO);
***************
*** 206,211 ****
--- 212,219 ----
          GlStateManager.enableAlpha();
          this.drawTexturedModalRect(j, k, 0, 0, 155, 44);
          this.drawTexturedModalRect(j + 155, k, 0, 45, 155, 44);
+         this.mc.getTextureManager().bindTexture(field_194401_g);
+         drawModalRectWithCustomSizedTexture(j + 88, k + 37, 0.0F, 0.0F, 98, 14, 128.0F, 16.0F);
          GlStateManager.disableAlpha();
          int l = k + 100;
  
diff -rc ./client/gui/inventory/GuiBeacon.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/inventory/GuiBeacon.java
*** ./client/gui/inventory/GuiBeacon.java	2018-11-18 13:18:43.392901000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/inventory/GuiBeacon.java	2018-11-29 17:21:07.317956500 -0800
***************
*** 239,245 ****
              this.iconY = iconYIn;
          }
  
!         public void func_191745_a(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
          {
              if (this.visible)
              {
--- 239,245 ----
              this.iconY = iconYIn;
          }
  
!         public void draw(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
          {
              if (this.visible)
              {
diff -rc ./client/gui/inventory/GuiContainer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/inventory/GuiContainer.java
*** ./client/gui/inventory/GuiContainer.java	2018-11-18 13:18:43.428869000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/inventory/GuiContainer.java	2018-11-18 13:37:38.637274200 -0800
***************
*** 157,168 ****
              if (!this.draggedStack.func_190926_b() && this.isRightMouseClick)
              {
                  itemstack = itemstack.copy();
!                 itemstack.func_190920_e(MathHelper.ceil((float)itemstack.func_190916_E() / 2.0F));
              }
              else if (this.dragSplitting && this.dragSplittingSlots.size() > 1)
              {
                  itemstack = itemstack.copy();
!                 itemstack.func_190920_e(this.dragSplittingRemnant);
  
                  if (itemstack.func_190926_b())
                  {
--- 157,168 ----
              if (!this.draggedStack.func_190926_b() && this.isRightMouseClick)
              {
                  itemstack = itemstack.copy();
!                 itemstack.setCount(MathHelper.ceil((float)itemstack.getCount() / 2.0F));
              }
              else if (this.dragSplitting && this.dragSplittingSlots.size() > 1)
              {
                  itemstack = itemstack.copy();
!                 itemstack.setCount(this.dragSplittingRemnant);
  
                  if (itemstack.func_190926_b())
                  {
***************
*** 248,254 ****
          if (slotIn == this.clickedSlot && !this.draggedStack.func_190926_b() && this.isRightMouseClick && !itemstack.func_190926_b())
          {
              itemstack = itemstack.copy();
!             itemstack.func_190920_e(itemstack.func_190916_E() / 2);
          }
          else if (this.dragSplitting && this.dragSplittingSlots.contains(slotIn) && !itemstack1.func_190926_b())
          {
--- 248,254 ----
          if (slotIn == this.clickedSlot && !this.draggedStack.func_190926_b() && this.isRightMouseClick && !itemstack.func_190926_b())
          {
              itemstack = itemstack.copy();
!             itemstack.setCount(itemstack.getCount() / 2);
          }
          else if (this.dragSplitting && this.dragSplittingSlots.contains(slotIn) && !itemstack1.func_190926_b())
          {
***************
*** 261,273 ****
              {
                  itemstack = itemstack1.copy();
                  flag = true;
!                 Container.computeStackSize(this.dragSplittingSlots, this.dragSplittingLimit, itemstack, slotIn.getStack().func_190926_b() ? 0 : slotIn.getStack().func_190916_E());
                  int k = Math.min(itemstack.getMaxStackSize(), slotIn.getItemStackLimit(itemstack));
  
!                 if (itemstack.func_190916_E() > k)
                  {
                      s = TextFormatting.YELLOW.toString() + k;
!                     itemstack.func_190920_e(k);
                  }
              }
              else
--- 261,273 ----
              {
                  itemstack = itemstack1.copy();
                  flag = true;
!                 Container.computeStackSize(this.dragSplittingSlots, this.dragSplittingLimit, itemstack, slotIn.getStack().func_190926_b() ? 0 : slotIn.getStack().getCount());
                  int k = Math.min(itemstack.getMaxStackSize(), slotIn.getItemStackLimit(itemstack));
  
!                 if (itemstack.getCount() > k)
                  {
                      s = TextFormatting.YELLOW.toString() + k;
!                     itemstack.setCount(k);
                  }
              }
              else
***************
*** 323,344 ****
              }
              else
              {
!                 this.dragSplittingRemnant = itemstack.func_190916_E();
  
                  for (Slot slot : this.dragSplittingSlots)
                  {
                      ItemStack itemstack1 = itemstack.copy();
                      ItemStack itemstack2 = slot.getStack();
!                     int i = itemstack2.func_190926_b() ? 0 : itemstack2.func_190916_E();
                      Container.computeStackSize(this.dragSplittingSlots, this.dragSplittingLimit, itemstack1, i);
                      int j = Math.min(itemstack1.getMaxStackSize(), slot.getItemStackLimit(itemstack1));
  
!                     if (itemstack1.func_190916_E() > j)
                      {
!                         itemstack1.func_190920_e(j);
                      }
  
!                     this.dragSplittingRemnant -= itemstack1.func_190916_E() - i;
                  }
              }
          }
--- 323,344 ----
              }
              else
              {
!                 this.dragSplittingRemnant = itemstack.getCount();
  
                  for (Slot slot : this.dragSplittingSlots)
                  {
                      ItemStack itemstack1 = itemstack.copy();
                      ItemStack itemstack2 = slot.getStack();
!                     int i = itemstack2.func_190926_b() ? 0 : itemstack2.getCount();
                      Container.computeStackSize(this.dragSplittingSlots, this.dragSplittingLimit, itemstack1, i);
                      int j = Math.min(itemstack1.getMaxStackSize(), slot.getItemStackLimit(itemstack1));
  
!                     if (itemstack1.getCount() > j)
                      {
!                         itemstack1.setCount(j);
                      }
  
!                     this.dragSplittingRemnant -= itemstack1.getCount() - i;
                  }
              }
          }
***************
*** 493,499 ****
                          this.draggedStack = this.clickedSlot.getStack().copy();
                      }
                  }
!                 else if (this.draggedStack.func_190916_E() > 1 && slot != null && Container.canAddItemToSlot(slot, this.draggedStack, false))
                  {
                      long i = Minecraft.getSystemTime();
  
--- 493,499 ----
                          this.draggedStack = this.clickedSlot.getStack().copy();
                      }
                  }
!                 else if (this.draggedStack.getCount() > 1 && slot != null && Container.canAddItemToSlot(slot, this.draggedStack, false))
                  {
                      long i = Minecraft.getSystemTime();
  
***************
*** 505,511 ****
                              this.handleMouseClick(slot, slot.slotNumber, 1, ClickType.PICKUP);
                              this.handleMouseClick(this.clickedSlot, this.clickedSlot.slotNumber, 0, ClickType.PICKUP);
                              this.dragItemDropDelay = i + 750L;
!                             this.draggedStack.func_190918_g(1);
                          }
                      }
                      else
--- 505,511 ----
                              this.handleMouseClick(slot, slot.slotNumber, 1, ClickType.PICKUP);
                              this.handleMouseClick(this.clickedSlot, this.clickedSlot.slotNumber, 0, ClickType.PICKUP);
                              this.dragItemDropDelay = i + 750L;
!                             this.draggedStack.shrink(1);
                          }
                      }
                      else
***************
*** 516,522 ****
                  }
              }
          }
!         else if (this.dragSplitting && slot != null && !itemstack.func_190926_b() && (itemstack.func_190916_E() > this.dragSplittingSlots.size() || this.dragSplittingLimit == 2) && Container.canAddItemToSlot(slot, itemstack, true) && slot.isItemValid(itemstack) && this.inventorySlots.canDragIntoSlot(slot))
          {
              this.dragSplittingSlots.add(slot);
              this.updateDragSplitting();
--- 516,522 ----
                  }
              }
          }
!         else if (this.dragSplitting && slot != null && !itemstack.func_190926_b() && (itemstack.getCount() > this.dragSplittingSlots.size() || this.dragSplittingLimit == 2) && Container.canAddItemToSlot(slot, itemstack, true) && slot.isItemValid(itemstack) && this.inventorySlots.canDragIntoSlot(slot))
          {
              this.dragSplittingSlots.add(slot);
              this.updateDragSplitting();
diff -rc ./client/gui/inventory/GuiContainerCreative.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/inventory/GuiContainerCreative.java
*** ./client/gui/inventory/GuiContainerCreative.java	2018-11-18 13:18:43.444860000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/inventory/GuiContainerCreative.java	2018-11-18 13:36:22.004145900 -0800
***************
*** 41,70 ****
  import org.lwjgl.input.Keyboard;
  import org.lwjgl.input.Mouse;
  
  public class GuiContainerCreative extends InventoryEffectRenderer
  {
      /** The location of the creative inventory tabs texture */
      private static final ResourceLocation CREATIVE_INVENTORY_TABS = new ResourceLocation("textures/gui/container/creative_inventory/tabs.png");
      private static final InventoryBasic basicInventory = new InventoryBasic("tmp", true, 45);
- 
      /** Currently selected creative inventory tab index. */
      private static int selectedTabIndex = CreativeTabs.BUILDING_BLOCKS.getTabIndex();
- 
      /** Amount scrolled in Creative mode inventory (0 = top, 1 = bottom) */
      private float currentScroll;
- 
      /** True if the scrollbar is being dragged */
      private boolean isScrolling;
! 
!     /**
!      * True if the left mouse button was held down last time drawScreen was called.
!      */
      private boolean wasClicking;
      private GuiTextField searchField;
      private List<Slot> originalSlots;
      private Slot destroyItemSlot;
      private boolean clearSearch;
      private CreativeCrafting listener;
  
      public GuiContainerCreative(EntityPlayer player)
      {
--- 41,67 ----
  import org.lwjgl.input.Keyboard;
  import org.lwjgl.input.Mouse;
  
+ 
  public class GuiContainerCreative extends InventoryEffectRenderer
  {
      /** The location of the creative inventory tabs texture */
      private static final ResourceLocation CREATIVE_INVENTORY_TABS = new ResourceLocation("textures/gui/container/creative_inventory/tabs.png");
      private static final InventoryBasic basicInventory = new InventoryBasic("tmp", true, 45);
      /** Currently selected creative inventory tab index. */
      private static int selectedTabIndex = CreativeTabs.BUILDING_BLOCKS.getTabIndex();
      /** Amount scrolled in Creative mode inventory (0 = top, 1 = bottom) */
      private float currentScroll;
      /** True if the scrollbar is being dragged */
      private boolean isScrolling;
!     /** True if the left mouse button was held down last time drawScreen was called. */
      private boolean wasClicking;
      private GuiTextField searchField;
      private List<Slot> originalSlots;
      private Slot destroyItemSlot;
      private boolean clearSearch;
      private CreativeCrafting listener;
+     private static int tabPage = 0;
+     private int maxPages = 0;
  
      public GuiContainerCreative(EntityPlayer player)
      {
***************
*** 167,173 ****
                      if (!itemstack7.func_190926_b() && mouseButton >= 0 && mouseButton < 9)
                      {
                          ItemStack itemstack10 = itemstack7.copy();
!                         itemstack10.func_190920_e(itemstack10.getMaxStackSize());
                          this.mc.player.inventory.setInventorySlotContents(mouseButton, itemstack10);
                          this.mc.player.inventoryContainer.detectAndSendChanges();
                      }
--- 164,170 ----
                      if (!itemstack7.func_190926_b() && mouseButton >= 0 && mouseButton < 9)
                      {
                          ItemStack itemstack10 = itemstack7.copy();
!                         itemstack10.setCount(itemstack10.getMaxStackSize());
                          this.mc.player.inventory.setInventorySlotContents(mouseButton, itemstack10);
                          this.mc.player.inventoryContainer.detectAndSendChanges();
                      }
***************
*** 180,186 ****
                      if (inventoryplayer.getItemStack().func_190926_b() && slotIn.getHasStack())
                      {
                          ItemStack itemstack9 = slotIn.getStack().copy();
!                         itemstack9.func_190920_e(itemstack9.getMaxStackSize());
                          inventoryplayer.setItemStack(itemstack9);
                      }
  
--- 177,183 ----
                      if (inventoryplayer.getItemStack().func_190926_b() && slotIn.getHasStack())
                      {
                          ItemStack itemstack9 = slotIn.getStack().copy();
!                         itemstack9.setCount(itemstack9.getMaxStackSize());
                          inventoryplayer.setItemStack(itemstack9);
                      }
  
***************
*** 192,198 ****
                      if (!itemstack7.func_190926_b())
                      {
                          ItemStack itemstack8 = itemstack7.copy();
!                         itemstack8.func_190920_e(mouseButton == 0 ? 1 : itemstack8.getMaxStackSize());
                          this.mc.player.dropItem(itemstack8, true);
                          this.mc.playerController.sendPacketDropItem(itemstack8);
                      }
--- 189,195 ----
                      if (!itemstack7.func_190926_b())
                      {
                          ItemStack itemstack8 = itemstack7.copy();
!                         itemstack8.setCount(mouseButton == 0 ? 1 : itemstack8.getMaxStackSize());
                          this.mc.player.dropItem(itemstack8, true);
                          this.mc.playerController.sendPacketDropItem(itemstack8);
                      }
***************
*** 206,221 ****
                      {
                          if (flag)
                          {
!                             itemstack5.func_190920_e(itemstack5.getMaxStackSize());
                          }
!                         else if (itemstack5.func_190916_E() < itemstack5.getMaxStackSize())
                          {
!                             itemstack5.func_190917_f(1);
                          }
                      }
                      else
                      {
!                         itemstack5.func_190918_g(1);
                      }
                  }
                  else if (!itemstack7.func_190926_b() && itemstack5.func_190926_b())
--- 203,218 ----
                      {
                          if (flag)
                          {
!                             itemstack5.setCount(itemstack5.getMaxStackSize());
                          }
!                         else if (itemstack5.getCount() < itemstack5.getMaxStackSize())
                          {
!                             itemstack5.grow(1);
                          }
                      }
                      else
                      {
!                         itemstack5.shrink(1);
                      }
                  }
                  else if (!itemstack7.func_190926_b() && itemstack5.func_190926_b())
***************
*** 225,231 ****
  
                      if (flag)
                      {
!                         itemstack5.func_190920_e(itemstack5.getMaxStackSize());
                      }
                  }
                  else if (mouseButton == 0)
--- 222,228 ----
  
                      if (flag)
                      {
!                         itemstack5.setCount(itemstack5.getMaxStackSize());
                      }
                  }
                  else if (mouseButton == 0)
***************
*** 234,240 ****
                  }
                  else
                  {
!                     inventoryplayer.getItemStack().func_190918_g(1);
                  }
              }
              else if (this.inventorySlots != null)
--- 231,237 ----
                  }
                  else
                  {
!                     inventoryplayer.getItemStack().shrink(1);
                  }
              }
              else if (this.inventorySlots != null)
***************
*** 262,268 ****
                      else if (type == ClickType.THROW && !itemstack3.func_190926_b())
                      {
                          ItemStack itemstack2 = itemstack3.copy();
!                         itemstack2.func_190920_e(mouseButton == 0 ? 1 : itemstack2.getMaxStackSize());
                          this.mc.player.dropItem(itemstack2, true);
                          this.mc.playerController.sendPacketDropItem(itemstack2);
                      }
--- 259,265 ----
                      else if (type == ClickType.THROW && !itemstack3.func_190926_b())
                      {
                          ItemStack itemstack2 = itemstack3.copy();
!                         itemstack2.setCount(mouseButton == 0 ? 1 : itemstack2.getMaxStackSize());
                          this.mc.player.dropItem(itemstack2, true);
                          this.mc.playerController.sendPacketDropItem(itemstack2);
                      }
***************
*** 305,310 ****
--- 302,314 ----
              this.setCurrentCreativeTab(CreativeTabs.CREATIVE_TAB_ARRAY[i]);
              this.listener = new CreativeCrafting(this.mc);
              this.mc.player.inventoryContainer.addListener(this.listener);
+             int tabCount = CreativeTabs.CREATIVE_TAB_ARRAY.length;
+             if (tabCount > 12)
+             {
+                 buttonList.add(new GuiButton(101, guiLeft,              guiTop - 50, 20, 20, "<"));
+                 buttonList.add(new GuiButton(102, guiLeft + xSize - 20, guiTop - 50, 20, 20, ">"));
+                 maxPages = (int) Math.ceil((tabCount - 12) / 10D);
+             }
          }
          else
          {
***************
*** 333,339 ****
       */
      protected void keyTyped(char typedChar, int keyCode) throws IOException
      {
!         if (selectedTabIndex != CreativeTabs.SEARCH.getTabIndex())
          {
              if (GameSettings.isKeyDown(this.mc.gameSettings.keyBindChat))
              {
--- 337,343 ----
       */
      protected void keyTyped(char typedChar, int keyCode) throws IOException
      {
!         if (!CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex].hasSearchBar())
          {
              if (GameSettings.isKeyDown(this.mc.gameSettings.keyBindChat))
              {
***************
*** 371,376 ****
--- 375,408 ----
          GuiContainerCreative.ContainerCreative guicontainercreative$containercreative = (GuiContainerCreative.ContainerCreative)this.inventorySlots;
          guicontainercreative$containercreative.itemList.clear();
  
+         CreativeTabs tab = CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex];
+         if (tab.hasSearchBar() && tab != CreativeTabs.SEARCH)
+         {
+             tab.displayAllRelevantItems(guicontainercreative$containercreative.itemList);
+             if (!this.searchField.getText().isEmpty())
+             {
+                 //TODO: Make this a SearchTree not a manual search
+                 String search = this.searchField.getText().toLowerCase(Locale.ROOT);
+                 java.util.Iterator<ItemStack> itr = guicontainercreative$containercreative.itemList.iterator();
+                 while (itr.hasNext()) {
+                     ItemStack stack = itr.next();
+                     boolean matches = false;
+                     for (String line : stack.getTooltip(this.mc.player, this.mc.gameSettings.advancedItemTooltips ? ITooltipFlag.TooltipFlags.ADVANCED : ITooltipFlag.TooltipFlags.NORMAL))
+                     {
+                         if (TextFormatting.getTextWithoutFormattingCodes(line).toLowerCase(Locale.ROOT).contains(search)) {
+                             matches = true;
+                             break;
+                         }
+                     }
+                     if (!matches)
+                         itr.remove();
+                 }
+             }
+             this.currentScroll = 0.0F;
+             guicontainercreative$containercreative.scrollTo(0.0F);
+             return;
+         }
+ 
          if (this.searchField.getText().isEmpty())
          {
              for (Item item : Item.REGISTRY)
***************
*** 394,400 ****
      {
          CreativeTabs creativetabs = CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex];
  
!         if (creativetabs.drawInForegroundOfTab())
          {
              GlStateManager.disableBlend();
              this.fontRendererObj.drawString(I18n.format(creativetabs.getTranslatedTabLabel()), 8, 6, 4210752);
--- 426,432 ----
      {
          CreativeTabs creativetabs = CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex];
  
!         if (creativetabs != null && creativetabs.drawInForegroundOfTab())
          {
              GlStateManager.disableBlend();
              this.fontRendererObj.drawString(I18n.format(creativetabs.getTranslatedTabLabel()), 8, 6, 4210752);
***************
*** 435,441 ****
  
              for (CreativeTabs creativetabs : CreativeTabs.CREATIVE_TAB_ARRAY)
              {
!                 if (this.isMouseOverTab(creativetabs, i, j))
                  {
                      this.setCurrentCreativeTab(creativetabs);
                      return;
--- 467,473 ----
  
              for (CreativeTabs creativetabs : CreativeTabs.CREATIVE_TAB_ARRAY)
              {
!                 if (creativetabs != null && this.isMouseOverTab(creativetabs, i, j))
                  {
                      this.setCurrentCreativeTab(creativetabs);
                      return;
***************
*** 451,456 ****
--- 483,489 ----
       */
      private boolean needsScrollBars()
      {
+         if (CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex] == null) return false;
          return selectedTabIndex != CreativeTabs.INVENTORY.getTabIndex() && CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex].shouldHidePlayerInventory() && ((GuiContainerCreative.ContainerCreative)this.inventorySlots).canScroll();
      }
  
***************
*** 459,471 ****
       */
      private void setCurrentCreativeTab(CreativeTabs tab)
      {
          int i = selectedTabIndex;
          selectedTabIndex = tab.getTabIndex();
          GuiContainerCreative.ContainerCreative guicontainercreative$containercreative = (GuiContainerCreative.ContainerCreative)this.inventorySlots;
          this.dragSplittingSlots.clear();
          guicontainercreative$containercreative.itemList.clear();
  
!         if (tab == CreativeTabs.field_192395_m)
          {
              for (int j = 0; j < 9; ++j)
              {
--- 492,505 ----
       */
      private void setCurrentCreativeTab(CreativeTabs tab)
      {
+         if (tab == null) return;
          int i = selectedTabIndex;
          selectedTabIndex = tab.getTabIndex();
          GuiContainerCreative.ContainerCreative guicontainercreative$containercreative = (GuiContainerCreative.ContainerCreative)this.inventorySlots;
          this.dragSplittingSlots.clear();
          guicontainercreative$containercreative.itemList.clear();
  
!         if (tab == CreativeTabs.HOTBAR)
          {
              for (int j = 0; j < 9; ++j)
              {
***************
*** 564,575 ****
  
          if (this.searchField != null)
          {
!             if (tab == CreativeTabs.SEARCH)
              {
                  this.searchField.setVisible(true);
                  this.searchField.setCanLoseFocus(false);
                  this.searchField.setFocused(true);
                  this.searchField.setText("");
                  this.updateCreativeSearch();
              }
              else
--- 598,611 ----
  
          if (this.searchField != null)
          {
!             if (tab.hasSearchBar())
              {
                  this.searchField.setVisible(true);
                  this.searchField.setCanLoseFocus(false);
                  this.searchField.setFocused(true);
                  this.searchField.setText("");
+                 this.searchField.width = tab.getSearchbarWidth();
+                 this.searchField.xPosition = this.guiLeft + (82 /*default left*/ + 89 /*default width*/) - this.searchField.width;
                  this.updateCreativeSearch();
              }
              else
***************
*** 647,665 ****
  
          super.drawScreen(mouseX, mouseY, partialTicks);
  
!         for (CreativeTabs creativetabs : CreativeTabs.CREATIVE_TAB_ARRAY)
          {
              if (this.renderCreativeInventoryHoveringText(creativetabs, mouseX, mouseY))
              {
                  break;
              }
          }
  
          if (this.destroyItemSlot != null && selectedTabIndex == CreativeTabs.INVENTORY.getTabIndex() && this.isPointInRegion(this.destroyItemSlot.xDisplayPosition, this.destroyItemSlot.yDisplayPosition, 16, 16, mouseX, mouseY))
          {
              this.drawCreativeTabHoveringText(I18n.format("inventory.binSlot"), mouseX, mouseY);
          }
  
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          GlStateManager.disableLighting();
          this.func_191948_b(mouseX, mouseY);
--- 683,725 ----
  
          super.drawScreen(mouseX, mouseY, partialTicks);
  
!         int start = tabPage * 10;
!         int end = Math.min(CreativeTabs.CREATIVE_TAB_ARRAY.length, ((tabPage + 1) * 10) + 2);
!         if (tabPage != 0) start += 2;
!         boolean rendered = false;
! 
!         for (CreativeTabs creativetabs : java.util.Arrays.copyOfRange(CreativeTabs.CREATIVE_TAB_ARRAY,start,end))
          {
+             if (creativetabs == null) continue;
              if (this.renderCreativeInventoryHoveringText(creativetabs, mouseX, mouseY))
              {
+                 rendered = true;
                  break;
              }
          }
  
+         if (!rendered && !renderCreativeInventoryHoveringText(CreativeTabs.SEARCH, mouseX, mouseY))
+         {
+             renderCreativeInventoryHoveringText(CreativeTabs.INVENTORY, mouseX, mouseY);
+         }
+ 
          if (this.destroyItemSlot != null && selectedTabIndex == CreativeTabs.INVENTORY.getTabIndex() && this.isPointInRegion(this.destroyItemSlot.xDisplayPosition, this.destroyItemSlot.yDisplayPosition, 16, 16, mouseX, mouseY))
          {
              this.drawCreativeTabHoveringText(I18n.format("inventory.binSlot"), mouseX, mouseY);
          }
  
+         if (maxPages != 0)
+         {
+             String page = String.format("%d / %d", tabPage + 1, maxPages + 1);
+             int width = fontRendererObj.getStringWidth(page);
+             GlStateManager.disableLighting();
+             this.zLevel = 300.0F;
+             itemRender.zLevel = 300.0F;
+             fontRendererObj.drawString(page, guiLeft + (xSize / 2) - (width / 2), guiTop - 44, -1);
+             this.zLevel = 0.0F;
+             itemRender.zLevel = 0.0F;
+         }
+ 
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          GlStateManager.disableLighting();
          this.func_191948_b(mouseX, mouseY);
***************
*** 725,740 ****
          RenderHelper.enableGUIStandardItemLighting();
          CreativeTabs creativetabs = CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex];
  
!         for (CreativeTabs creativetabs1 : CreativeTabs.CREATIVE_TAB_ARRAY)
          {
              this.mc.getTextureManager().bindTexture(CREATIVE_INVENTORY_TABS);
  
              if (creativetabs1.getTabIndex() != selectedTabIndex)
              {
                  this.drawTab(creativetabs1);
              }
          }
  
          this.mc.getTextureManager().bindTexture(new ResourceLocation("textures/gui/container/creative_inventory/tab_" + creativetabs.getBackgroundImageName()));
          this.drawTexturedModalRect(this.guiLeft, this.guiTop, 0, 0, this.xSize, this.ySize);
          this.searchField.drawTextBox();
--- 785,819 ----
          RenderHelper.enableGUIStandardItemLighting();
          CreativeTabs creativetabs = CreativeTabs.CREATIVE_TAB_ARRAY[selectedTabIndex];
  
!         int start = tabPage * 10;
!         int end = Math.min(CreativeTabs.CREATIVE_TAB_ARRAY.length, ((tabPage + 1) * 10 + 2));
!         if (tabPage != 0) start += 2;
! 
!         for (CreativeTabs creativetabs1 : java.util.Arrays.copyOfRange(CreativeTabs.CREATIVE_TAB_ARRAY,start,end))
          {
              this.mc.getTextureManager().bindTexture(CREATIVE_INVENTORY_TABS);
  
+             if (creativetabs1 == null) continue;
              if (creativetabs1.getTabIndex() != selectedTabIndex)
              {
                  this.drawTab(creativetabs1);
              }
          }
  
+         if (tabPage != 0)
+         {
+             if (creativetabs != CreativeTabs.SEARCH)
+             {
+                 this.mc.getTextureManager().bindTexture(CREATIVE_INVENTORY_TABS);
+                 drawTab(CreativeTabs.SEARCH);
+             }
+             if (creativetabs != CreativeTabs.INVENTORY)
+             {
+                 this.mc.getTextureManager().bindTexture(CREATIVE_INVENTORY_TABS);
+                 drawTab(CreativeTabs.INVENTORY);
+             }
+         }
+ 
          this.mc.getTextureManager().bindTexture(new ResourceLocation("textures/gui/container/creative_inventory/tab_" + creativetabs.getBackgroundImageName()));
          this.drawTexturedModalRect(this.guiLeft, this.guiTop, 0, 0, this.xSize, this.ySize);
          this.searchField.drawTextBox();
***************
*** 749,754 ****
--- 828,841 ----
              this.drawTexturedModalRect(i, j + (int)((float)(k - j - 17) * this.currentScroll), 232 + (this.needsScrollBars() ? 0 : 12), 0, 12, 15);
          }
  
+         if (creativetabs == null || creativetabs.getTabPage() != tabPage)
+         {
+             if (creativetabs != CreativeTabs.SEARCH && creativetabs != CreativeTabs.INVENTORY)
+             {
+                 return;
+             }
+         }
+ 
          this.drawTab(creativetabs);
  
          if (creativetabs == CreativeTabs.INVENTORY)
***************
*** 762,772 ****
       */
      protected boolean isMouseOverTab(CreativeTabs tab, int mouseX, int mouseY)
      {
          int i = tab.getTabColumn();
          int j = 28 * i;
          int k = 0;
  
!         if (tab.func_192394_m())
          {
              j = this.xSize - 28 * (6 - i) + 2;
          }
--- 849,867 ----
       */
      protected boolean isMouseOverTab(CreativeTabs tab, int mouseX, int mouseY)
      {
+         if (tab.getTabPage() != tabPage)
+         {
+             if (tab != CreativeTabs.SEARCH && tab != CreativeTabs.INVENTORY)
+             {
+                 return false;
+             }
+         }
+ 
          int i = tab.getTabColumn();
          int j = 28 * i;
          int k = 0;
  
!         if (tab.isAlignedRight())
          {
              j = this.xSize - 28 * (6 - i) + 2;
          }
***************
*** 797,803 ****
          int j = 28 * i;
          int k = 0;
  
!         if (tab.func_192394_m())
          {
              j = this.xSize - 28 * (6 - i) + 2;
          }
--- 892,898 ----
          int j = 28 * i;
          int k = 0;
  
!         if (tab.isAlignedRight())
          {
              j = this.xSize - 28 * (6 - i) + 2;
          }
***************
*** 846,852 ****
              k += 32;
          }
  
!         if (tab.func_192394_m())
          {
              l = this.guiLeft + this.xSize - 28 * (6 - i);
          }
--- 941,947 ----
              k += 32;
          }
  
!         if (tab.isAlignedRight())
          {
              l = this.guiLeft + this.xSize - 28 * (6 - i);
          }
***************
*** 866,871 ****
--- 961,968 ----
          }
  
          GlStateManager.disableLighting();
+         GlStateManager.color(1F, 1F, 1F); //Forge: Reset color in case Items change it.
+         GlStateManager.enableBlend(); //Forge: Make sure blend is enabled else tabs show a white border.
          this.drawTexturedModalRect(l, i1, j, k, 28, 32);
          this.zLevel = 100.0F;
          this.itemRender.zLevel = 100.0F;
***************
*** 890,895 ****
--- 987,1001 ----
          {
              this.mc.displayGuiScreen(new GuiStats(this, this.mc.player.getStatFileWriter()));
          }
+ 
+         if (button.id == 101)
+         {
+             tabPage = Math.max(tabPage - 1, 0);
+         }
+         else if (button.id == 102)
+         {
+             tabPage = Math.min(tabPage + 1, maxPages);
+         }
      }
  
      /**
***************
*** 900,906 ****
          return selectedTabIndex;
      }
  
!     public static void func_192044_a(Minecraft p_192044_0_, int p_192044_1_, boolean p_192044_2_, boolean p_192044_3_)
      {
          EntityPlayerSP entityplayersp = p_192044_0_.player;
          CreativeSettings creativesettings = p_192044_0_.field_191950_u;
--- 1006,1012 ----
          return selectedTabIndex;
      }
  
!     public static void handleHotbarSnapshots(Minecraft p_192044_0_, int p_192044_1_, boolean p_192044_2_, boolean p_192044_3_)
      {
          EntityPlayerSP entityplayersp = p_192044_0_.player;
          CreativeSettings creativesettings = p_192044_0_.field_191950_u;
***************
*** 931,1065 ****
          }
      }
  
      public static class ContainerCreative extends Container
-     {
-         public NonNullList<ItemStack> itemList = NonNullList.<ItemStack>func_191196_a();
- 
-         public ContainerCreative(EntityPlayer player)
          {
!             InventoryPlayer inventoryplayer = player.inventory;
  
!             for (int i = 0; i < 5; ++i)
              {
!                 for (int j = 0; j < 9; ++j)
                  {
!                     this.addSlotToContainer(new GuiContainerCreative.LockedSlot(GuiContainerCreative.basicInventory, i * 9 + j, 9 + j * 18, 18 + i * 18));
                  }
              }
  
!             for (int k = 0; k < 9; ++k)
              {
!                 this.addSlotToContainer(new Slot(inventoryplayer, k, 9 + k * 18, 112));
              }
  
!             this.scrollTo(0.0F);
!         }
  
!         public boolean canInteractWith(EntityPlayer playerIn)
!         {
!             return true;
!         }
  
!         public void scrollTo(float p_148329_1_)
!         {
!             int i = (this.itemList.size() + 9 - 1) / 9 - 5;
!             int j = (int)((double)(p_148329_1_ * (float)i) + 0.5D);
  
!             if (j < 0)
              {
!                 j = 0;
              }
  
!             for (int k = 0; k < 5; ++k)
              {
!                 for (int l = 0; l < 9; ++l)
                  {
!                     int i1 = l + (k + j) * 9;
  
!                     if (i1 >= 0 && i1 < this.itemList.size())
                      {
!                         GuiContainerCreative.basicInventory.setInventorySlotContents(l + k * 9, this.itemList.get(i1));
!                     }
!                     else
!                     {
!                         GuiContainerCreative.basicInventory.setInventorySlotContents(l + k * 9, ItemStack.field_190927_a);
                      }
                  }
-             }
-         }
  
!         public boolean canScroll()
!         {
!             return this.itemList.size() > 45;
!         }
  
!         public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
!         {
!             if (index >= this.inventorySlots.size() - 9 && index < this.inventorySlots.size())
              {
!                 Slot slot = this.inventorySlots.get(index);
! 
!                 if (slot != null && slot.getHasStack())
!                 {
!                     slot.putStack(ItemStack.field_190927_a);
!                 }
              }
  
!             return ItemStack.field_190927_a;
!         }
! 
!         public boolean canMergeSlot(ItemStack stack, Slot slotIn)
!         {
!             return slotIn.yDisplayPosition > 90;
!         }
! 
!         public boolean canDragIntoSlot(Slot slotIn)
!         {
!             return slotIn.inventory instanceof InventoryPlayer || slotIn.yDisplayPosition > 90 && slotIn.xDisplayPosition <= 162;
          }
-     }
  
      class CreativeSlot extends Slot
      {
          private final Slot slot;
  
!         public CreativeSlot(Slot p_i46313_2_, int p_i46313_3_)
          {
!             super(p_i46313_2_.inventory, p_i46313_3_, 0, 0);
              this.slot = p_i46313_2_;
          }
  
!         public ItemStack func_190901_a(EntityPlayer p_190901_1_, ItemStack p_190901_2_)
          {
!             this.slot.func_190901_a(p_190901_1_, p_190901_2_);
!             return p_190901_2_;
          }
  
          public boolean isItemValid(ItemStack stack)
          {
              return this.slot.isItemValid(stack);
          }
  
          public ItemStack getStack()
          {
              return this.slot.getStack();
          }
  
          public boolean getHasStack()
          {
              return this.slot.getHasStack();
          }
  
          public void putStack(ItemStack stack)
          {
              this.slot.putStack(stack);
          }
  
          public void onSlotChanged()
          {
              this.slot.onSlotChanged();
          }
  
          public int getSlotStackLimit()
          {
              return this.slot.getSlotStackLimit();
--- 1037,1212 ----
          }
      }
  
+     
      public static class ContainerCreative extends Container
          {
!             /** the list of items in this container */
!             public NonNullList<ItemStack> itemList = NonNullList.<ItemStack>func_191196_a();
  
!             public ContainerCreative(EntityPlayer player)
              {
!                 InventoryPlayer inventoryplayer = player.inventory;
! 
!                 for (int i = 0; i < 5; ++i)
                  {
!                     for (int j = 0; j < 9; ++j)
!                     {
!                         this.addSlotToContainer(new GuiContainerCreative.LockedSlot(GuiContainerCreative.basicInventory, i * 9 + j, 9 + j * 18, 18 + i * 18));
!                     }
                  }
+ 
+                 for (int k = 0; k < 9; ++k)
+                 {
+                     this.addSlotToContainer(new Slot(inventoryplayer, k, 9 + k * 18, 112));
+                 }
+ 
+                 this.scrollTo(0.0F);
              }
  
!             /**
!              * Determines whether supplied player can use this container
!              */
!             public boolean canInteractWith(EntityPlayer playerIn)
              {
!                 return true;
              }
  
!             /**
!              * Updates the gui slots ItemStack's based on scroll position.
!              */
!             public void scrollTo(float pos)
!             {
!                 int i = (this.itemList.size() + 9 - 1) / 9 - 5;
!                 int j = (int)((double)(pos * (float)i) + 0.5D);
  
!                 if (j < 0)
!                 {
!                     j = 0;
!                 }
  
!                 for (int k = 0; k < 5; ++k)
!                 {
!                     for (int l = 0; l < 9; ++l)
!                     {
!                         int i1 = l + (k + j) * 9;
  
!                         if (i1 >= 0 && i1 < this.itemList.size())
!                         {
!                             GuiContainerCreative.basicInventory.setInventorySlotContents(l + k * 9, this.itemList.get(i1));
!                         }
!                         else
!                         {
!                             GuiContainerCreative.basicInventory.setInventorySlotContents(l + k * 9, ItemStack.field_190927_a);
!                         }
!                     }
!                 }
!             }
! 
!             public boolean canScroll()
              {
!                 return this.itemList.size() > 45;
              }
  
!             /**
!              * Handle when the stack in slot {@code index} is shift-clicked. Normally this moves the stack between the
!              * player inventory and the other inventory(s).
!              */
!             public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
              {
!                 if (index >= this.inventorySlots.size() - 9 && index < this.inventorySlots.size())
                  {
!                     Slot slot = this.inventorySlots.get(index);
  
!                     if (slot != null && slot.getHasStack())
                      {
!                         slot.putStack(ItemStack.field_190927_a);
                      }
                  }
  
!                 return ItemStack.field_190927_a;
!             }
  
!             /**
!              * Called to determine if the current slot is valid for the stack merging (double-click) code. The stack
!              * passed in is null for the initial slot that was double-clicked.
!              */
!             public boolean canMergeSlot(ItemStack stack, Slot slotIn)
              {
!                 return slotIn.yDisplayPosition > 90;
              }
  
!             /**
!              * Returns true if the player can "drag-spilt" items into this slot,. returns true by default. Called to
!              * check if the slot can be added to a list of Slots to split the held ItemStack across.
!              */
!             public boolean canDragIntoSlot(Slot slotIn)
!             {
!                 return slotIn.inventory instanceof InventoryPlayer || slotIn.yDisplayPosition > 90 && slotIn.xDisplayPosition <= 162;
!             }
          }
  
+     
      class CreativeSlot extends Slot
      {
          private final Slot slot;
  
!         public CreativeSlot(Slot p_i46313_2_, int index)
          {
!             super(p_i46313_2_.inventory, index, 0, 0);
              this.slot = p_i46313_2_;
          }
  
!         @Override
!         public ItemStack func_190901_a(EntityPlayer thePlayer, ItemStack stack)
          {
!             this.slot.func_190901_a(thePlayer, stack);
!             return stack;
          }
  
+         /**
+          * Check if the stack is allowed to be placed in this slot, used for armor slots as well as furnace fuel.
+          */
          public boolean isItemValid(ItemStack stack)
          {
              return this.slot.isItemValid(stack);
          }
  
+         /**
+          * Helper fnct to get the stack in the slot.
+          */
          public ItemStack getStack()
          {
              return this.slot.getStack();
          }
  
+         /**
+          * Returns if this slot contains a stack.
+          */
          public boolean getHasStack()
          {
              return this.slot.getHasStack();
          }
  
+         /**
+          * Helper method to put a stack in the slot.
+          */
          public void putStack(ItemStack stack)
          {
              this.slot.putStack(stack);
          }
  
+         /**
+          * Called when the stack in a Slot changes
+          */
          public void onSlotChanged()
          {
              this.slot.onSlotChanged();
          }
  
+         /**
+          * Returns the maximum stack size for a given slot (usually the same as getInventoryStackLimit(), but 1 in the
+          * case of armor slots)
+          */
          public int getSlotStackLimit()
          {
              return this.slot.getSlotStackLimit();
***************
*** 1076,1119 ****
              return this.slot.getSlotTexture();
          }
  
          public ItemStack decrStackSize(int amount)
          {
              return this.slot.decrStackSize(amount);
          }
  
          public boolean isHere(IInventory inv, int slotIn)
          {
              return this.slot.isHere(inv, slotIn);
          }
  
!         public boolean canBeHovered()
          {
              return this.slot.canBeHovered();
          }
  
          public boolean canTakeStack(EntityPlayer playerIn)
          {
              return this.slot.canTakeStack(playerIn);
          }
      }
  
      static class LockedSlot extends Slot
-     {
-         public LockedSlot(IInventory p_i47453_1_, int p_i47453_2_, int p_i47453_3_, int p_i47453_4_)
          {
!             super(p_i47453_1_, p_i47453_2_, p_i47453_3_, p_i47453_4_);
!         }
! 
!         public boolean canTakeStack(EntityPlayer playerIn)
!         {
!             if (super.canTakeStack(playerIn) && this.getHasStack())
              {
!                 return this.getStack().getSubCompound("CustomCreativeLock") == null;
              }
!             else
              {
!                 return !this.getHasStack();
              }
          }
!     }
! }
--- 1223,1317 ----
              return this.slot.getSlotTexture();
          }
  
+         /**
+          * Decrease the size of the stack in slot (first int arg) by the amount of the second int arg. Returns the new
+          * stack.
+          */
          public ItemStack decrStackSize(int amount)
          {
              return this.slot.decrStackSize(amount);
          }
  
+         /**
+          * returns true if the slot exists in the given inventory and location
+          */
          public boolean isHere(IInventory inv, int slotIn)
          {
              return this.slot.isHere(inv, slotIn);
          }
  
!         /**
!          * Actualy only call when we want to render the white square effect over the slots. Return always True, except
!          * for the armor slot of the Donkey/Mule (we can't interact with the Undead and Skeleton horses)
!          */
!         public boolean isEnabled()
          {
              return this.slot.canBeHovered();
          }
  
+         /**
+          * Return whether this slot's stack can be taken from this slot.
+          */
          public boolean canTakeStack(EntityPlayer playerIn)
          {
              return this.slot.canTakeStack(playerIn);
          }
+ 
+ //        /*========================================= FORGE START =====================================*/
+ //        public net.minecraft.util.ResourceLocation getBackgroundLocation()
+ //        {
+ //            return this.slot.getBackgroundLocation();
+ //        }
+ //
+ //        public void setBackgroundLocation(net.minecraft.util.ResourceLocation texture)
+ //        {
+ //            this.slot.setBackgroundLocation(texture);
+ //        }
+ //
+ //        public void setBackgroundName(@Nullable String name)
+ //        {
+ //            this.slot.setBackgroundName(name);
+ //        }
+ //
+ //        @Nullable
+ //        public net.minecraft.client.renderer.texture.TextureAtlasSprite getBackgroundSprite()
+ //        {
+ //            return this.slot.getBackgroundSprite();
+ //        }
+ //
+ //        public int getSlotIndex()
+ //        {
+ //            return this.slot.getSlotIndex();
+ //        }
+ //
+ //        public boolean isSameInventory(Slot other)
+ //        {
+ //            return this.slot.isSameInventory(other);
+ //        }
+ //        /*========================================= FORGE END =====================================*/
      }
  
+     
      static class LockedSlot extends Slot
          {
!             public LockedSlot(IInventory p_i47453_1_, int p_i47453_2_, int p_i47453_3_, int p_i47453_4_)
              {
!                 super(p_i47453_1_, p_i47453_2_, p_i47453_3_, p_i47453_4_);
              }
! 
!             /**
!              * Return whether this slot's stack can be taken from this slot.
!              */
!             public boolean canTakeStack(EntityPlayer playerIn)
              {
!                 if (super.canTakeStack(playerIn) && this.getHasStack())
!                 {
!                     return this.getStack().getSubCompound("CustomCreativeLock") == null;
!                 }
!                 else
!                 {
!                     return !this.getHasStack();
!                 }
              }
          }
! }
\ No newline at end of file
diff -rc ./client/gui/inventory/GuiCrafting.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/inventory/GuiCrafting.java
*** ./client/gui/inventory/GuiCrafting.java	2018-11-18 13:18:43.459851000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/inventory/GuiCrafting.java	2017-10-20 21:01:19.270563000 -0700
***************
*** 41,47 ****
      {
          super.initGui();
          this.field_193112_y = this.width < 379;
!         this.field_192050_x.func_191856_a(this.width, this.height, this.mc, this.field_193112_y, this.inventorySlots, ((ContainerWorkbench)this.inventorySlots).craftMatrix);
          this.guiLeft = this.field_192050_x.func_193011_a(this.field_193112_y, this.width, this.xSize);
          this.field_192049_w = new GuiButtonImage(10, this.guiLeft + 5, this.height / 2 - 49, 20, 18, 0, 168, 19, CRAFTING_TABLE_GUI_TEXTURES);
          this.buttonList.add(this.field_192049_w);
--- 41,47 ----
      {
          super.initGui();
          this.field_193112_y = this.width < 379;
!         this.field_192050_x.func_194303_a(this.width, this.height, this.mc, this.field_193112_y, ((ContainerWorkbench)this.inventorySlots).craftMatrix);
          this.guiLeft = this.field_192050_x.func_193011_a(this.field_193112_y, this.width, this.xSize);
          this.field_192049_w = new GuiButtonImage(10, this.guiLeft + 5, this.height / 2 - 49, 20, 18, 0, 168, 19, CRAFTING_TABLE_GUI_TEXTURES);
          this.buttonList.add(this.field_192049_w);
***************
*** 177,180 ****
--- 177,185 ----
          this.field_192050_x.func_191871_c();
          super.onGuiClosed();
      }
+ 
+     public GuiRecipeBook func_194310_f()
+     {
+         return this.field_192050_x;
+     }
  }
diff -rc ./client/gui/inventory/GuiInventory.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/inventory/GuiInventory.java
*** ./client/gui/inventory/GuiInventory.java	2018-11-18 13:18:43.530826000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/inventory/GuiInventory.java	2017-10-20 21:01:19.323061000 -0700
***************
*** 67,73 ****
          }
  
          this.field_192046_B = this.width < 379;
!         this.field_192045_A.func_191856_a(this.width, this.height, this.mc, this.field_192046_B, this.inventorySlots, ((ContainerPlayer)this.inventorySlots).craftMatrix);
          this.guiLeft = this.field_192045_A.func_193011_a(this.field_192046_B, this.width, this.xSize);
          this.field_192048_z = new GuiButtonImage(10, this.guiLeft + 104, this.height / 2 - 22, 20, 18, 178, 0, 19, INVENTORY_BACKGROUND);
          this.buttonList.add(this.field_192048_z);
--- 67,73 ----
          }
  
          this.field_192046_B = this.width < 379;
!         this.field_192045_A.func_194303_a(this.width, this.height, this.mc, this.field_192046_B, ((ContainerPlayer)this.inventorySlots).craftMatrix);
          this.guiLeft = this.field_192045_A.func_193011_a(this.field_192046_B, this.width, this.xSize);
          this.field_192048_z = new GuiButtonImage(10, this.guiLeft + 104, this.height / 2 - 22, 20, 18, 178, 0, 19, INVENTORY_BACKGROUND);
          this.buttonList.add(this.field_192048_z);
***************
*** 256,259 ****
--- 256,264 ----
          this.field_192045_A.func_191871_c();
          super.onGuiClosed();
      }
+ 
+     public GuiRecipeBook func_194310_f()
+     {
+         return this.field_192045_A;
+     }
  }
diff -rc ./client/gui/recipebook/GuiButtonRecipe.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/GuiButtonRecipe.java
*** ./client/gui/recipebook/GuiButtonRecipe.java	2018-11-18 13:18:43.581798000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/GuiButtonRecipe.java	2018-11-29 17:21:07.426897600 -0800
***************
*** 55,61 ****
          this.yPosition = p_191770_2_;
      }
  
!     public void func_191745_a(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
--- 55,61 ----
          this.yPosition = p_191770_2_;
      }
  
!     public void draw(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
diff -rc ./client/gui/recipebook/GuiButtonRecipeTab.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/GuiButtonRecipeTab.java
*** ./client/gui/recipebook/GuiButtonRecipeTab.java	2018-11-18 13:18:43.591776000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/GuiButtonRecipeTab.java	2018-11-29 17:21:07.443891400 -0800
***************
*** 54,60 ****
          }
      }
  
!     public void func_191745_a(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
--- 54,60 ----
          }
      }
  
!     public void draw(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
      {
          if (this.visible)
          {
diff -rc ./client/gui/recipebook/GuiRecipeBook.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/GuiRecipeBook.java
*** ./client/gui/recipebook/GuiRecipeBook.java	2018-11-18 13:18:43.604782000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/GuiRecipeBook.java	2018-11-29 17:21:07.627485300 -0800
***************
*** 1,9 ****
  package net.minecraft.client.gui.recipebook;
  
  import com.google.common.collect.Lists;
- import it.unimi.dsi.fastutil.ints.IntArrayList;
- import it.unimi.dsi.fastutil.ints.IntList;
- import it.unimi.dsi.fastutil.ints.IntListIterator;
  import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
  import it.unimi.dsi.fastutil.objects.ObjectSet;
  import java.util.Iterator;
--- 1,6 ----
***************
*** 27,37 ****
  import net.minecraft.client.util.RecipeItemHelper;
  import net.minecraft.client.util.SearchTreeManager;
  import net.minecraft.creativetab.CreativeTabs;
- import net.minecraft.entity.player.InventoryPlayer;
- import net.minecraft.inventory.Container;
- import net.minecraft.inventory.ContainerPlayer;
- import net.minecraft.inventory.ContainerWorkbench;
- import net.minecraft.inventory.InventoryCraftResult;
  import net.minecraft.inventory.InventoryCrafting;
  import net.minecraft.inventory.Slot;
  import net.minecraft.item.ItemStack;
--- 24,29 ----
***************
*** 39,49 ****
  import net.minecraft.item.crafting.Ingredient;
  import net.minecraft.item.crafting.ShapedRecipes;
  import net.minecraft.network.play.client.CPacketRecipeInfo;
- import net.minecraft.network.play.client.CPacketRecipePlacement;
  import net.minecraft.stats.RecipeBook;
  import net.minecraft.util.ResourceLocation;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
  import org.lwjgl.input.Keyboard;
  
  public class GuiRecipeBook extends Gui implements IRecipeUpdateListener
--- 31,38 ----
***************
*** 52,63 ****
      private int field_191903_n;
      private int field_191904_o;
      private int field_191905_p;
-     private static final Logger field_193959_i = LogManager.getLogger();
      private final GhostRecipe field_191915_z = new GhostRecipe();
      private final List<GuiButtonRecipeTab> field_193018_j = Lists.newArrayList(new GuiButtonRecipeTab(0, CreativeTabs.SEARCH), new GuiButtonRecipeTab(0, CreativeTabs.TOOLS), new GuiButtonRecipeTab(0, CreativeTabs.BUILDING_BLOCKS), new GuiButtonRecipeTab(0, CreativeTabs.MISC), new GuiButtonRecipeTab(0, CreativeTabs.REDSTONE));
      private GuiButtonRecipeTab field_191913_x;
      private GuiButtonToggle field_193960_m;
-     private Container field_191908_s;
      private InventoryCrafting field_193961_o;
      private Minecraft field_191888_F;
      private GuiTextField field_193962_q;
--- 41,50 ----
***************
*** 67,87 ****
      private RecipeItemHelper field_193965_u = new RecipeItemHelper();
      private int field_193966_v;
  
!     public void func_191856_a(int p_191856_1_, int p_191856_2_, Minecraft p_191856_3_, boolean p_191856_4_, Container p_191856_5_, InventoryCrafting p_191856_6_)
      {
!         this.field_191888_F = p_191856_3_;
!         this.field_191904_o = p_191856_1_;
!         this.field_191905_p = p_191856_2_;
!         this.field_191908_s = p_191856_5_;
!         this.field_193961_o = p_191856_6_;
!         this.field_193964_s = p_191856_3_.player.func_192035_E();
!         this.field_193966_v = p_191856_3_.player.inventory.func_194015_p();
          this.field_191913_x = this.field_193018_j.get(0);
          this.field_191913_x.func_191753_b(true);
  
          if (this.func_191878_b())
          {
!             this.func_193014_a(p_191856_4_, p_191856_6_);
          }
  
          Keyboard.enableRepeatEvents(true);
--- 54,73 ----
      private RecipeItemHelper field_193965_u = new RecipeItemHelper();
      private int field_193966_v;
  
!     public void func_194303_a(int p_194303_1_, int p_194303_2_, Minecraft p_194303_3_, boolean p_194303_4_, InventoryCrafting p_194303_5_)
      {
!         this.field_191888_F = p_194303_3_;
!         this.field_191904_o = p_194303_1_;
!         this.field_191905_p = p_194303_2_;
!         this.field_193961_o = p_194303_5_;
!         this.field_193964_s = p_194303_3_.player.func_192035_E();
!         this.field_193966_v = p_194303_3_.player.inventory.func_194015_p();
          this.field_191913_x = this.field_193018_j.get(0);
          this.field_191913_x.func_191753_b(true);
  
          if (this.func_191878_b())
          {
!             this.func_193014_a(p_194303_4_, p_194303_5_);
          }
  
          Keyboard.enableRepeatEvents(true);
***************
*** 264,273 ****
  
              for (GuiButtonRecipeTab guibuttonrecipetab : this.field_193018_j)
              {
!                 guibuttonrecipetab.func_191745_a(this.field_191888_F, p_191861_1_, p_191861_2_, p_191861_3_);
              }
  
!             this.field_193960_m.func_191745_a(this.field_191888_F, p_191861_1_, p_191861_2_, p_191861_3_);
              this.field_193022_s.func_194191_a(i, j, p_191861_1_, p_191861_2_, p_191861_3_);
              GlStateManager.popMatrix();
          }
--- 250,259 ----
  
              for (GuiButtonRecipeTab guibuttonrecipetab : this.field_193018_j)
              {
!                 guibuttonrecipetab.draw(this.field_191888_F, p_191861_1_, p_191861_2_, p_191861_3_);
              }
  
!             this.field_193960_m.draw(this.field_191888_F, p_191861_1_, p_191861_2_, p_191861_3_);
              this.field_193022_s.func_194191_a(i, j, p_191861_1_, p_191861_2_, p_191861_3_);
              GlStateManager.popMatrix();
          }
***************
*** 331,337 ****
  
                  if (irecipe != null && recipelist != null)
                  {
!                     this.func_193945_a(irecipe, recipelist);
  
                      if (!this.func_191880_f() && p_191862_3_ == 0)
                      {
--- 317,329 ----
  
                  if (irecipe != null && recipelist != null)
                  {
!                     if (!recipelist.func_194213_a(irecipe) && this.field_191915_z.func_192686_c() == irecipe)
!                     {
!                         return false;
!                     }
! 
!                     this.field_191915_z.func_192682_a();
!                     this.field_191888_F.playerController.func_194338_a(this.field_191888_F.player.openContainer.windowId, irecipe, GuiScreen.isShiftKeyDown(), this.field_191888_F.player);
  
                      if (!this.func_191880_f() && p_191862_3_ == 0)
                      {
***************
*** 483,801 ****
          }
      }
  
!     private void func_193945_a(IRecipe p_193945_1_, RecipeList p_193945_2_)
!     {
!         boolean flag = p_193945_2_.func_194213_a(p_193945_1_);
!         InventoryCraftResult inventorycraftresult = null;
! 
!         if (this.field_191908_s instanceof ContainerWorkbench)
!         {
!             inventorycraftresult = ((ContainerWorkbench)this.field_191908_s).craftResult;
!         }
!         else if (this.field_191908_s instanceof ContainerPlayer)
!         {
!             inventorycraftresult = ((ContainerPlayer)this.field_191908_s).craftResult;
!         }
! 
!         if (inventorycraftresult != null)
!         {
!             if (!flag && this.field_191915_z.func_192686_c() == p_193945_1_)
!             {
!                 return;
!             }
! 
!             if (!this.func_193941_i() && !this.field_191888_F.player.isCreative())
!             {
!                 return;
!             }
! 
!             if (flag)
!             {
!                 this.func_193950_a(p_193945_1_, this.field_191908_s.inventorySlots, this.field_191908_s.windowId, inventorycraftresult);
!             }
!             else
!             {
!                 List<CPacketRecipePlacement.ItemMove> list2 = this.func_193954_a(inventorycraftresult);
!                 this.func_193951_a(p_193945_1_, this.field_191908_s.inventorySlots);
! 
!                 if (!list2.isEmpty())
!                 {
!                     this.field_191888_F.playerController.func_192831_a(this.field_191908_s.windowId, list2, Lists.newArrayList(), this.field_191888_F.player);
! 
!                     if (this.field_193964_s.func_192815_c())
!                     {
!                         this.field_191888_F.player.inventory.markDirty();
!                     }
!                 }
!             }
! 
!             if (!this.func_191880_f())
!             {
!                 this.func_191866_a();
!             }
!         }
!     }
! 
!     private void func_193950_a(IRecipe p_193950_1_, List<Slot> p_193950_2_, int p_193950_3_, InventoryCraftResult p_193950_4_)
!     {
!         boolean flag = p_193950_1_.matches(this.field_193961_o, this.field_191888_F.world);
!         int i = this.field_193965_u.func_194114_b(p_193950_1_, (IntList)null);
! 
!         if (flag)
!         {
!             boolean flag1 = true;
! 
!             for (int j = 0; j < this.field_193961_o.getSizeInventory(); ++j)
!             {
!                 ItemStack itemstack = this.field_193961_o.getStackInSlot(j);
! 
!                 if (!itemstack.func_190926_b() && i > itemstack.func_190916_E())
!                 {
!                     flag1 = false;
!                 }
!             }
! 
!             if (flag1)
!             {
!                 return;
!             }
!         }
! 
!         int i1 = this.func_193943_a(i, flag);
!         IntList intlist = new IntArrayList();
! 
!         if (this.field_193965_u.func_194118_a(p_193950_1_, intlist, i1))
!         {
!             int j1 = i1;
!             IntListIterator lvt_10_1_ = intlist.iterator();
! 
!             while (lvt_10_1_.hasNext())
!             {
!                 int k = ((Integer)lvt_10_1_.next()).intValue();
!                 int l = RecipeItemHelper.func_194115_b(k).getMaxStackSize();
! 
!                 if (l < j1)
!                 {
!                     j1 = l;
!                 }
!             }
! 
!             if (this.field_193965_u.func_194118_a(p_193950_1_, intlist, j1))
!             {
!                 List<CPacketRecipePlacement.ItemMove> list2 = this.func_193954_a(p_193950_4_);
!                 List<CPacketRecipePlacement.ItemMove> list3 = Lists.<CPacketRecipePlacement.ItemMove>newArrayList();
!                 this.func_193013_a(p_193950_1_, p_193950_2_, j1, intlist, list3);
!                 this.field_191888_F.playerController.func_192831_a(p_193950_3_, list2, list3, this.field_191888_F.player);
!                 this.field_191888_F.player.inventory.markDirty();
!             }
!         }
!     }
! 
!     private List<CPacketRecipePlacement.ItemMove> func_193954_a(InventoryCraftResult p_193954_1_)
!     {
!         this.field_191915_z.func_192682_a();
!         InventoryPlayer inventoryplayer = this.field_191888_F.player.inventory;
!         List<CPacketRecipePlacement.ItemMove> list2 = Lists.<CPacketRecipePlacement.ItemMove>newArrayList();
! 
!         for (int i = 0; i < this.field_193961_o.getSizeInventory(); ++i)
!         {
!             ItemStack itemstack = this.field_193961_o.getStackInSlot(i);
! 
!             if (!itemstack.func_190926_b())
!             {
!                 while (itemstack.func_190916_E() > 0)
!                 {
!                     int j = inventoryplayer.storeItemStack(itemstack);
! 
!                     if (j == -1)
!                     {
!                         j = inventoryplayer.getFirstEmptyStack();
!                     }
! 
!                     ItemStack itemstack1 = itemstack.copy();
!                     itemstack1.func_190920_e(1);
! 
!                     if (inventoryplayer.func_191971_c(j, itemstack1))
!                     {
!                         itemstack1.func_190917_f(1);
!                     }
!                     else
!                     {
!                         field_193959_i.error("Can't find any space for item in inventory");
!                     }
! 
!                     this.field_193961_o.decrStackSize(i, 1);
!                     int k = i + 1;
!                     list2.add(new CPacketRecipePlacement.ItemMove(itemstack1.copy(), k, j));
!                 }
!             }
!         }
! 
!         this.field_193961_o.clear();
!         p_193954_1_.clear();
!         return list2;
!     }
! 
!     private int func_193943_a(int p_193943_1_, boolean p_193943_2_)
!     {
!         int i = 1;
! 
!         if (GuiScreen.isShiftKeyDown())
!         {
!             i = p_193943_1_;
!         }
!         else if (p_193943_2_)
!         {
!             i = 64;
! 
!             for (int j = 0; j < this.field_193961_o.getSizeInventory(); ++j)
!             {
!                 ItemStack itemstack = this.field_193961_o.getStackInSlot(j);
! 
!                 if (!itemstack.func_190926_b() && i > itemstack.func_190916_E())
!                 {
!                     i = itemstack.func_190916_E();
!                 }
!             }
! 
!             if (i < 64)
!             {
!                 ++i;
!             }
!         }
! 
!         return i;
!     }
! 
!     private void func_193013_a(IRecipe p_193013_1_, List<Slot> p_193013_2_, int p_193013_3_, IntList p_193013_4_, List<CPacketRecipePlacement.ItemMove> p_193013_5_)
!     {
!         int i = this.field_193961_o.getWidth();
!         int j = this.field_193961_o.getHeight();
! 
!         if (p_193013_1_ instanceof ShapedRecipes)
!         {
!             ShapedRecipes shapedrecipes = (ShapedRecipes)p_193013_1_;
!             i = shapedrecipes.func_192403_f();
!             j = shapedrecipes.func_192404_g();
!         }
! 
!         int j1 = 1;
!         Iterator<Integer> iterator = p_193013_4_.iterator();
! 
!         for (int k = 0; k < this.field_193961_o.getWidth() && j != k; ++k)
!         {
!             for (int l = 0; l < this.field_193961_o.getHeight(); ++l)
!             {
!                 if (i == l || !iterator.hasNext())
!                 {
!                     j1 += this.field_193961_o.getWidth() - l;
!                     break;
!                 }
! 
!                 Slot slot = p_193013_2_.get(j1);
!                 ItemStack itemstack = RecipeItemHelper.func_194115_b(((Integer)iterator.next()).intValue());
! 
!                 if (itemstack.func_190926_b())
!                 {
!                     ++j1;
!                 }
!                 else
!                 {
!                     for (int i1 = 0; i1 < p_193013_3_; ++i1)
!                     {
!                         CPacketRecipePlacement.ItemMove cpacketrecipeplacement$itemmove = this.func_193946_a(j1, slot, itemstack);
! 
!                         if (cpacketrecipeplacement$itemmove != null)
!                         {
!                             p_193013_5_.add(cpacketrecipeplacement$itemmove);
!                         }
!                     }
! 
!                     ++j1;
!                 }
!             }
! 
!             if (!iterator.hasNext())
!             {
!                 break;
!             }
!         }
!     }
! 
!     @Nullable
!     private CPacketRecipePlacement.ItemMove func_193946_a(int p_193946_1_, Slot p_193946_2_, ItemStack p_193946_3_)
!     {
!         InventoryPlayer inventoryplayer = this.field_191888_F.player.inventory;
!         int i = inventoryplayer.func_194014_c(p_193946_3_);
! 
!         if (i == -1)
!         {
!             return null;
!         }
!         else
!         {
!             ItemStack itemstack = inventoryplayer.getStackInSlot(i).copy();
! 
!             if (itemstack.func_190926_b())
!             {
!                 field_193959_i.error("Matched: " + p_193946_3_.getUnlocalizedName() + " with empty item.");
!                 return null;
!             }
!             else
!             {
!                 if (itemstack.func_190916_E() > 1)
!                 {
!                     inventoryplayer.decrStackSize(i, 1);
!                 }
!                 else
!                 {
!                     inventoryplayer.removeStackFromSlot(i);
!                 }
! 
!                 itemstack.func_190920_e(1);
! 
!                 if (p_193946_2_.getStack().func_190926_b())
!                 {
!                     p_193946_2_.putStack(itemstack);
!                 }
!                 else
!                 {
!                     p_193946_2_.getStack().func_190917_f(1);
!                 }
! 
!                 return new CPacketRecipePlacement.ItemMove(itemstack, p_193946_1_, i);
!             }
!         }
!     }
! 
!     private boolean func_193941_i()
!     {
!         InventoryPlayer inventoryplayer = this.field_191888_F.player.inventory;
! 
!         for (int i = 0; i < this.field_193961_o.getSizeInventory(); ++i)
!         {
!             ItemStack itemstack = this.field_193961_o.getStackInSlot(i);
! 
!             if (!itemstack.func_190926_b())
!             {
!                 int j = inventoryplayer.storeItemStack(itemstack);
! 
!                 if (j == -1)
!                 {
!                     j = inventoryplayer.getFirstEmptyStack();
!                 }
! 
!                 if (j == -1)
!                 {
!                     return false;
!                 }
!             }
!         }
! 
!         return true;
!     }
! 
!     private void func_193951_a(IRecipe p_193951_1_, List<Slot> p_193951_2_)
      {
          ItemStack itemstack = p_193951_1_.getRecipeOutput();
          this.field_191915_z.func_192685_a(p_193951_1_);
--- 475,481 ----
          }
      }
  
!     public void func_193951_a(IRecipe p_193951_1_, List<Slot> p_193951_2_)
      {
          ItemStack itemstack = p_193951_1_.getRecipeOutput();
          this.field_191915_z.func_192685_a(p_193951_1_);
diff -rc ./client/gui/recipebook/GuiRecipeOverlay.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/GuiRecipeOverlay.java
*** ./client/gui/recipebook/GuiRecipeOverlay.java	2018-11-18 13:18:43.620759000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/GuiRecipeOverlay.java	2018-11-29 17:21:07.650485500 -0800
***************
*** 134,140 ****
  
              for (GuiRecipeOverlay.Button guirecipeoverlay$button : this.field_193972_f)
              {
!                 guirecipeoverlay$button.func_191745_a(this.field_191853_k, p_191842_1_, p_191842_2_, p_191842_3_);
              }
  
              GlStateManager.popMatrix();
--- 134,140 ----
  
              for (GuiRecipeOverlay.Button guirecipeoverlay$button : this.field_193972_f)
              {
!                 guirecipeoverlay$button.draw(this.field_191853_k, p_191842_1_, p_191842_2_, p_191842_3_);
              }
  
              GlStateManager.popMatrix();
***************
*** 202,208 ****
              this.field_193925_q = p_i47594_5_;
          }
  
!         public void func_191745_a(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
          {
              RenderHelper.enableGUIStandardItemLighting();
              GlStateManager.enableAlpha();
--- 202,208 ----
              this.field_193925_q = p_i47594_5_;
          }
  
!         public void draw(Minecraft p_191745_1_, int p_191745_2_, int p_191745_3_, float p_191745_4_)
          {
              RenderHelper.enableGUIStandardItemLighting();
              GlStateManager.enableAlpha();
diff -rc ./client/gui/recipebook/IRecipeShownListener.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/IRecipeShownListener.java
*** ./client/gui/recipebook/IRecipeShownListener.java	2018-11-18 13:18:43.632752000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/IRecipeShownListener.java	2017-10-20 21:01:19.409064000 -0700
***************
*** 3,6 ****
--- 3,8 ----
  public interface IRecipeShownListener
  {
      void func_192043_J_();
+ 
+     GuiRecipeBook func_194310_f();
  }
diff -rc ./client/gui/recipebook/RecipeBookPage.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/RecipeBookPage.java
*** ./client/gui/recipebook/RecipeBookPage.java	2018-11-18 13:18:43.650742000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/recipebook/RecipeBookPage.java	2018-11-29 17:21:07.749925100 -0800
***************
*** 111,117 ****
  
          for (GuiButtonRecipe guibuttonrecipe : this.field_193743_h)
          {
!             guibuttonrecipe.func_191745_a(this.field_193754_s, p_194191_3_, p_194191_4_, p_194191_5_);
  
              if (guibuttonrecipe.visible && guibuttonrecipe.isMouseOver())
              {
--- 111,117 ----
  
          for (GuiButtonRecipe guibuttonrecipe : this.field_193743_h)
          {
!             guibuttonrecipe.draw(this.field_193754_s, p_194191_3_, p_194191_4_, p_194191_5_);
  
              if (guibuttonrecipe.visible && guibuttonrecipe.isMouseOver())
              {
***************
*** 119,126 ****
              }
          }
  
!         this.field_193741_f.func_191745_a(this.field_193754_s, p_194191_3_, p_194191_4_, p_194191_5_);
!         this.field_193740_e.func_191745_a(this.field_193754_s, p_194191_3_, p_194191_4_, p_194191_5_);
          this.field_194202_c.func_191842_a(p_194191_3_, p_194191_4_, p_194191_5_);
      }
  
--- 119,126 ----
              }
          }
  
!         this.field_193741_f.draw(this.field_193754_s, p_194191_3_, p_194191_4_, p_194191_5_);
!         this.field_193740_e.draw(this.field_193754_s, p_194191_3_, p_194191_4_, p_194191_5_);
          this.field_194202_c.func_191842_a(p_194191_3_, p_194191_4_, p_194191_5_);
      }
  
diff -rc ./client/gui/ServerListEntryNormal.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/ServerListEntryNormal.java
*** ./client/gui/ServerListEntryNormal.java	2018-11-18 13:18:43.224003000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/gui/ServerListEntryNormal.java	2018-11-18 19:30:36.502595000 -0800
***************
*** 76,83 ****
              });
          }
  
!         boolean flag = this.server.version > 335;
!         boolean flag1 = this.server.version < 335;
          boolean flag2 = flag || flag1;
          this.mc.fontRendererObj.drawString(this.server.serverName, p_192634_2_ + 32 + 3, p_192634_3_ + 1, 16777215);
          List<String> list = this.mc.fontRendererObj.listFormattedStringToWidth(this.server.serverMOTD, p_192634_4_ - 32 - 2);
--- 76,83 ----
              });
          }
  
!         boolean flag = this.server.version > 340;
!         boolean flag1 = this.server.version < 340;
          boolean flag2 = flag || flag1;
          this.mc.fontRendererObj.drawString(this.server.serverName, p_192634_2_ + 32 + 3, p_192634_3_ + 1, 16777215);
          List<String> list = this.mc.fontRendererObj.listFormattedStringToWidth(this.server.serverMOTD, p_192634_4_ - 32 - 2);
diff -rc ./client/Minecraft.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/Minecraft.java
*** ./client/Minecraft.java	2018-11-18 13:18:41.767826000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/Minecraft.java	2018-12-12 19:57:06.582206000 -0800
***************
*** 1,18 ****
  package net.minecraft.client;
  
- import com.google.common.collect.Lists;
- import com.google.common.collect.Queues;
- import com.google.common.collect.Sets;
- import com.google.common.hash.Hashing;
- import com.google.common.util.concurrent.Futures;
- import com.google.common.util.concurrent.ListenableFuture;
- import com.google.common.util.concurrent.ListenableFutureTask;
- import com.mojang.authlib.AuthenticationService;
- import com.mojang.authlib.GameProfile;
- import com.mojang.authlib.GameProfileRepository;
- import com.mojang.authlib.minecraft.MinecraftSessionService;
- import com.mojang.authlib.properties.PropertyMap;
- import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
  import java.awt.image.BufferedImage;
  import java.io.File;
  import java.io.IOException;
--- 1,5 ----
***************
*** 35,46 ****
  import java.util.concurrent.Callable;
  import java.util.concurrent.Executors;
  import java.util.concurrent.FutureTask;
- import java.util.function.Consumer;
- import java.util.function.Function;
- import java.util.function.Predicate;
  import java.util.stream.Collectors;
  import javax.annotation.Nullable;
  import javax.imageio.ImageIO;
  import net.minecraft.block.Block;
  import net.minecraft.block.material.Material;
  import net.minecraft.block.state.IBlockState;
--- 22,65 ----
  import java.util.concurrent.Callable;
  import java.util.concurrent.Executors;
  import java.util.concurrent.FutureTask;
  import java.util.stream.Collectors;
+ 
  import javax.annotation.Nullable;
  import javax.imageio.ImageIO;
+ 
+ import org.apache.commons.io.Charsets;
+ import org.apache.commons.io.IOUtils;
+ import org.apache.commons.lang3.Validate;
+ import org.apache.logging.log4j.LogManager;
+ import org.apache.logging.log4j.Logger;
+ import org.golde.snowball.Snowball;
+ import org.golde.snowball.util.GameIsRunningInDemoException;
+ import org.lwjgl.LWJGLException;
+ import org.lwjgl.Sys;
+ import org.lwjgl.input.Keyboard;
+ import org.lwjgl.input.Mouse;
+ import org.lwjgl.opengl.ContextCapabilities;
+ import org.lwjgl.opengl.Display;
+ import org.lwjgl.opengl.DisplayMode;
+ import org.lwjgl.opengl.GLContext;
+ import org.lwjgl.opengl.OpenGLException;
+ import org.lwjgl.opengl.PixelFormat;
+ import org.lwjgl.util.glu.GLU;
+ 
+ import com.google.common.collect.Lists;
+ import com.google.common.collect.Queues;
+ import com.google.common.collect.Sets;
+ import com.google.common.hash.Hashing;
+ import com.google.common.util.concurrent.Futures;
+ import com.google.common.util.concurrent.ListenableFuture;
+ import com.google.common.util.concurrent.ListenableFutureTask;
+ import com.mojang.authlib.AuthenticationService;
+ import com.mojang.authlib.GameProfile;
+ import com.mojang.authlib.GameProfileRepository;
+ import com.mojang.authlib.minecraft.MinecraftSessionService;
+ import com.mojang.authlib.properties.PropertyMap;
+ import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+ 
  import net.minecraft.block.Block;
  import net.minecraft.block.material.Material;
  import net.minecraft.block.state.IBlockState;
***************
*** 201,222 ****
  import net.minecraft.world.storage.ISaveFormat;
  import net.minecraft.world.storage.ISaveHandler;
  import net.minecraft.world.storage.WorldInfo;
- import org.apache.commons.io.Charsets;
- import org.apache.commons.io.IOUtils;
- import org.apache.commons.lang3.Validate;
- import org.apache.logging.log4j.LogManager;
- import org.apache.logging.log4j.Logger;
- import org.lwjgl.LWJGLException;
- import org.lwjgl.Sys;
- import org.lwjgl.input.Keyboard;
- import org.lwjgl.input.Mouse;
- import org.lwjgl.opengl.ContextCapabilities;
- import org.lwjgl.opengl.Display;
- import org.lwjgl.opengl.DisplayMode;
- import org.lwjgl.opengl.GLContext;
- import org.lwjgl.opengl.OpenGLException;
- import org.lwjgl.opengl.PixelFormat;
- import org.lwjgl.util.glu.GLU;
  
  public class Minecraft implements IThreadListener, ISnooperInfo
  {
--- 220,225 ----
***************
*** 235,241 ****
      private ServerData currentServerData;
  
      /** The RenderEngine instance used by Minecraft */
!     private TextureManager renderEngine;
  
      /**
       * Set to 'this' in Minecraft constructor; used by some settings get methods
--- 238,244 ----
      private ServerData currentServerData;
  
      /** The RenderEngine instance used by Minecraft */
!     public TextureManager renderEngine;
  
      /**
       * Set to 'this' in Minecraft constructor; used by some settings get methods
***************
*** 359,365 ****
      private long debugCrashKeyPressTime = -1L;
      private IReloadableResourceManager mcResourceManager;
      private final MetadataSerializer metadataSerializer_ = new MetadataSerializer();
!     private final List<IResourcePack> defaultResourcePacks = Lists.<IResourcePack>newArrayList();
      private final DefaultResourcePack mcDefaultResourcePack;
      private ResourcePackRepository mcResourcePackRepository;
      private LanguageManager mcLanguageManager;
--- 362,368 ----
      private long debugCrashKeyPressTime = -1L;
      private IReloadableResourceManager mcResourceManager;
      private final MetadataSerializer metadataSerializer_ = new MetadataSerializer();
!     public final List<IResourcePack> defaultResourcePacks = Lists.<IResourcePack>newArrayList();
      private final DefaultResourcePack mcDefaultResourcePack;
      private ResourcePackRepository mcResourcePackRepository;
      private LanguageManager mcLanguageManager;
***************
*** 406,411 ****
--- 409,415 ----
      public Minecraft(GameConfiguration gameConfig)
      {
          theMinecraft = this;
+         Snowball.instance.constructor();
          this.mcDataDir = gameConfig.folderInfo.mcDataDir;
          this.fileAssets = gameConfig.folderInfo.assetsDir;
          this.fileResourcepacks = gameConfig.folderInfo.resourcePacksDir;
***************
*** 515,523 ****
  
      /**
       * Starts the game: initializes the canvas, the title, the settings, etcetera.
       */
!     private void startGame() throws LWJGLException, IOException
      {
          this.gameSettings = new GameSettings(this, this.mcDataDir);
          this.field_191950_u = new CreativeSettings(this, this.mcDataDir);
          this.defaultResourcePacks.add(this.mcDefaultResourcePack);
--- 519,533 ----
  
      /**
       * Starts the game: initializes the canvas, the title, the settings, etcetera.
+      * @throws GameIsRunningInDemoException 
       */
!     private void startGame() throws LWJGLException, IOException, GameIsRunningInDemoException
      {
+     	
+     	if(isDemo()) {
+         	throw new GameIsRunningInDemoException();
+         }
+     	
          this.gameSettings = new GameSettings(this, this.mcDataDir);
          this.field_191950_u = new CreativeSettings(this, this.mcDataDir);
          this.defaultResourcePacks.add(this.mcDefaultResourcePack);
***************
*** 633,638 ****
--- 643,650 ----
          }
  
          this.renderGlobal.makeEntityOutlineShader();
+         
+         Snowball.instance.start();
      }
  
      private void func_193986_ar()
***************
*** 684,690 ****
      private void createDisplay() throws LWJGLException
      {
          Display.setResizable(true);
!         Display.setTitle("Minecraft 1.12");
  
          try
          {
--- 696,702 ----
      private void createDisplay() throws LWJGLException
      {
          Display.setResizable(true);
!         Display.setTitle("Snowball v" + Snowball.instance.VERSION + " | Minecraft 1.12.2");
  
          try
          {
***************
*** 886,891 ****
--- 898,904 ----
          }
  
          this.mcLanguageManager.parseLanguageMetadata(list);
+         Snowball.instance.refreshAssets();
  
          if (this.renderGlobal != null)
          {
***************
*** 1674,1687 ****
  
                                  if (this.world.getBlockState(blockpos).getMaterial() != Material.AIR)
                                  {
!                                     int i = itemstack.func_190916_E();
                                      EnumActionResult enumactionresult = this.playerController.processRightClickBlock(this.player, this.world, blockpos, this.objectMouseOver.sideHit, this.objectMouseOver.hitVec, enumhand);
  
                                      if (enumactionresult == EnumActionResult.SUCCESS)
                                      {
                                          this.player.swingArm(enumhand);
  
!                                         if (!itemstack.func_190926_b() && (itemstack.func_190916_E() != i || this.playerController.isInCreativeMode()))
                                          {
                                              this.entityRenderer.itemRenderer.resetEquippedProgress(enumhand);
                                          }
--- 1687,1700 ----
  
                                  if (this.world.getBlockState(blockpos).getMaterial() != Material.AIR)
                                  {
!                                     int i = itemstack.getCount();
                                      EnumActionResult enumactionresult = this.playerController.processRightClickBlock(this.player, this.world, blockpos, this.objectMouseOver.sideHit, this.objectMouseOver.hitVec, enumhand);
  
                                      if (enumactionresult == EnumActionResult.SUCCESS)
                                      {
                                          this.player.swingArm(enumhand);
  
!                                         if (!itemstack.func_190926_b() && (itemstack.getCount() != i || this.playerController.isInCreativeMode()))
                                          {
                                              this.entityRenderer.itemRenderer.resetEquippedProgress(enumhand);
                                          }
***************
*** 2011,2016 ****
--- 2024,2032 ----
          }
  
          this.mcProfiler.endSection();
+         
+         Snowball.instance.tick();
+         
          this.systemTime = getSystemTime();
      }
  
***************
*** 2259,2265 ****
                  }
                  else
                  {
!                     GuiContainerCreative.func_192044_a(this, i, flag1, flag);
                  }
              }
          }
--- 2275,2281 ----
                  }
                  else
                  {
!                     GuiContainerCreative.handleHotbarSnapshots(this, i, flag1, flag);
                  }
              }
          }
***************
*** 2508,2514 ****
          SocketAddress socketaddress = this.theIntegratedServer.getNetworkSystem().addLocalEndpoint();
          NetworkManager networkmanager = NetworkManager.provideLocalClient(socketaddress);
          networkmanager.setNetHandler(new NetHandlerLoginClient(networkmanager, this, (GuiScreen)null));
!         networkmanager.sendPacket(new C00Handshake(335, socketaddress.toString(), 0, EnumConnectionState.LOGIN));
          networkmanager.sendPacket(new CPacketLoginStart(this.getSession().getProfile()));
          this.myNetworkManager = networkmanager;
      }
--- 2524,2530 ----
          SocketAddress socketaddress = this.theIntegratedServer.getNetworkSystem().addLocalEndpoint();
          NetworkManager networkmanager = NetworkManager.provideLocalClient(socketaddress);
          networkmanager.setNetHandler(new NetHandlerLoginClient(networkmanager, this, (GuiScreen)null));
!         networkmanager.sendPacket(new C00Handshake(socketaddress.toString(), 0, EnumConnectionState.LOGIN));
          networkmanager.sendPacket(new CPacketLoginStart(this.getSession().getProfile()));
          this.myNetworkManager = networkmanager;
      }
***************
*** 3521,3527 ****
          return this.timer.field_194147_b;
      }
  
!     public float func_193989_ak()
      {
          return this.timer.field_194148_c;
      }
--- 3537,3543 ----
          return this.timer.field_194147_b;
      }
  
!     public float getParticleTicks()
      {
          return this.timer.field_194148_c;
      }
diff -rc ./client/model/ModelBox.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/model/ModelBox.java
*** ./client/model/ModelBox.java	2018-11-18 13:18:44.212485000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/model/ModelBox.java	2018-11-30 21:22:51.060634000 -0800
***************
*** 36,41 ****
--- 36,112 ----
          this(renderer, texU, texV, x, y, z, dx, dy, dz, delta, renderer.mirror);
      }
  
+     public ModelBox(ModelRenderer p_i0_1_, int[][] p_i0_2_, float p_i0_3_, float p_i0_4_, float p_i0_5_, float p_i0_6_, float p_i0_7_, float p_i0_8_, float p_i0_9_, boolean p_i0_10_)
+     {
+         this.posX1 = p_i0_3_;
+         this.posY1 = p_i0_4_;
+         this.posZ1 = p_i0_5_;
+         this.posX2 = p_i0_3_ + p_i0_6_;
+         this.posY2 = p_i0_4_ + p_i0_7_;
+         this.posZ2 = p_i0_5_ + p_i0_8_;
+         this.vertexPositions = new PositionTextureVertex[8];
+         this.quadList = new TexturedQuad[6];
+         float f = p_i0_3_ + p_i0_6_;
+         float f1 = p_i0_4_ + p_i0_7_;
+         float f2 = p_i0_5_ + p_i0_8_;
+         p_i0_3_ = p_i0_3_ - p_i0_9_;
+         p_i0_4_ = p_i0_4_ - p_i0_9_;
+         p_i0_5_ = p_i0_5_ - p_i0_9_;
+         f = f + p_i0_9_;
+         f1 = f1 + p_i0_9_;
+         f2 = f2 + p_i0_9_;
+ 
+         if (p_i0_10_)
+         {
+             float f3 = f;
+             f = p_i0_3_;
+             p_i0_3_ = f3;
+         }
+ 
+         PositionTextureVertex positiontexturevertex7 = new PositionTextureVertex(p_i0_3_, p_i0_4_, p_i0_5_, 0.0F, 0.0F);
+         PositionTextureVertex positiontexturevertex = new PositionTextureVertex(f, p_i0_4_, p_i0_5_, 0.0F, 8.0F);
+         PositionTextureVertex positiontexturevertex1 = new PositionTextureVertex(f, f1, p_i0_5_, 8.0F, 8.0F);
+         PositionTextureVertex positiontexturevertex2 = new PositionTextureVertex(p_i0_3_, f1, p_i0_5_, 8.0F, 0.0F);
+         PositionTextureVertex positiontexturevertex3 = new PositionTextureVertex(p_i0_3_, p_i0_4_, f2, 0.0F, 0.0F);
+         PositionTextureVertex positiontexturevertex4 = new PositionTextureVertex(f, p_i0_4_, f2, 0.0F, 8.0F);
+         PositionTextureVertex positiontexturevertex5 = new PositionTextureVertex(f, f1, f2, 8.0F, 8.0F);
+         PositionTextureVertex positiontexturevertex6 = new PositionTextureVertex(p_i0_3_, f1, f2, 8.0F, 0.0F);
+         this.vertexPositions[0] = positiontexturevertex7;
+         this.vertexPositions[1] = positiontexturevertex;
+         this.vertexPositions[2] = positiontexturevertex1;
+         this.vertexPositions[3] = positiontexturevertex2;
+         this.vertexPositions[4] = positiontexturevertex3;
+         this.vertexPositions[5] = positiontexturevertex4;
+         this.vertexPositions[6] = positiontexturevertex5;
+         this.vertexPositions[7] = positiontexturevertex6;
+         this.quadList[0] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex4, positiontexturevertex, positiontexturevertex1, positiontexturevertex5}, p_i0_2_[4], false, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
+         this.quadList[1] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex7, positiontexturevertex3, positiontexturevertex6, positiontexturevertex2}, p_i0_2_[5], false, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
+         this.quadList[2] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex4, positiontexturevertex3, positiontexturevertex7, positiontexturevertex}, p_i0_2_[1], true, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
+         this.quadList[3] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex1, positiontexturevertex2, positiontexturevertex6, positiontexturevertex5}, p_i0_2_[0], true, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
+         this.quadList[4] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex, positiontexturevertex7, positiontexturevertex2, positiontexturevertex1}, p_i0_2_[2], false, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
+         this.quadList[5] = this.makeTexturedQuad(new PositionTextureVertex[] {positiontexturevertex3, positiontexturevertex4, positiontexturevertex5, positiontexturevertex6}, p_i0_2_[3], false, p_i0_1_.textureWidth, p_i0_1_.textureHeight);
+ 
+         if (p_i0_10_)
+         {
+             for (TexturedQuad texturedquad : this.quadList)
+             {
+                 texturedquad.flipFace();
+             }
+         }
+     }
+ 
+     private TexturedQuad makeTexturedQuad(PositionTextureVertex[] p_makeTexturedQuad_1_, int[] p_makeTexturedQuad_2_, boolean p_makeTexturedQuad_3_, float p_makeTexturedQuad_4_, float p_makeTexturedQuad_5_)
+     {
+         if (p_makeTexturedQuad_2_ == null)
+         {
+             return null;
+         }
+         else
+         {
+             return p_makeTexturedQuad_3_ ? new TexturedQuad(p_makeTexturedQuad_1_, p_makeTexturedQuad_2_[2], p_makeTexturedQuad_2_[3], p_makeTexturedQuad_2_[0], p_makeTexturedQuad_2_[1], p_makeTexturedQuad_4_, p_makeTexturedQuad_5_) : new TexturedQuad(p_makeTexturedQuad_1_, p_makeTexturedQuad_2_[0], p_makeTexturedQuad_2_[1], p_makeTexturedQuad_2_[2], p_makeTexturedQuad_2_[3], p_makeTexturedQuad_4_, p_makeTexturedQuad_5_);
+         }
+     }
+ 
      public ModelBox(ModelRenderer renderer, int texU, int texV, float x, float y, float z, int dx, int dy, int dz, float delta, boolean mirror)
      {
          this.posX1 = x;
***************
*** 99,105 ****
      {
          for (TexturedQuad texturedquad : this.quadList)
          {
!             texturedquad.draw(renderer, scale);
          }
      }
  
--- 170,179 ----
      {
          for (TexturedQuad texturedquad : this.quadList)
          {
!             if (texturedquad != null)
!             {
!                 texturedquad.draw(renderer, scale);
!             }
          }
      }
  
diff -rc ./client/model/ModelPlayer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/model/ModelPlayer.java
*** ./client/model/ModelPlayer.java	2018-11-18 13:18:44.479332000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/model/ModelPlayer.java	2017-10-20 21:01:19.877094000 -0700
***************
*** 129,143 ****
          copyModelAngles(this.bipedLeftArm, this.bipedLeftArmwear);
          copyModelAngles(this.bipedRightArm, this.bipedRightArmwear);
          copyModelAngles(this.bipedBody, this.bipedBodyWear);
- 
-         if (entityIn.isSneaking())
-         {
-             this.bipedCape.rotationPointY = 2.0F;
-         }
-         else
-         {
-             this.bipedCape.rotationPointY = 0.0F;
-         }
      }
  
      public void setInvisible(boolean invisible)
--- 129,134 ----
diff -rc ./client/model/ModelRenderer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/model/ModelRenderer.java
*** ./client/model/ModelRenderer.java	2018-11-18 13:18:44.522320000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/model/ModelRenderer.java	2018-11-30 21:22:51.084621000 -0800
***************
*** 1,11 ****
--- 1,17 ----
  package net.minecraft.client.model;
  
  import com.google.common.collect.Lists;
+ import java.util.ArrayList;
  import java.util.List;
  import net.minecraft.client.renderer.BufferBuilder;
  import net.minecraft.client.renderer.GLAllocation;
  import net.minecraft.client.renderer.GlStateManager;
+ import net.minecraft.client.renderer.RenderGlobal;
  import net.minecraft.client.renderer.Tessellator;
+ import net.minecraft.util.ResourceLocation;
+ import net.optifine.entity.model.anim.ModelUpdater;
+ import optifine.Config;
+ import optifine.ModelSprite;
  
  public class ModelRenderer
  {
***************
*** 26,35 ****
      public float rotateAngleX;
      public float rotateAngleY;
      public float rotateAngleZ;
!     private boolean compiled;
  
      /** The GL display list rendered by the Tessellator for this model */
!     private int displayList;
      public boolean mirror;
      public boolean showModel;
  
--- 32,41 ----
      public float rotateAngleX;
      public float rotateAngleY;
      public float rotateAngleZ;
!     public boolean compiled;
  
      /** The GL display list rendered by the Tessellator for this model */
!     public int displayList;
      public boolean mirror;
      public boolean showModel;
  
***************
*** 42,50 ****
--- 48,74 ----
      public float offsetX;
      public float offsetY;
      public float offsetZ;
+     public List spriteList;
+     public boolean mirrorV;
+     public float scaleX;
+     public float scaleY;
+     public float scaleZ;
+     private float savedScale;
+     private ResourceLocation textureLocation;
+     private String id;
+     private ModelUpdater modelUpdater;
+     private RenderGlobal renderGlobal;
  
      public ModelRenderer(ModelBase model, String boxNameIn)
      {
+         this.spriteList = new ArrayList();
+         this.mirrorV = false;
+         this.scaleX = 1.0F;
+         this.scaleY = 1.0F;
+         this.scaleZ = 1.0F;
+         this.textureLocation = null;
+         this.id = null;
+         this.renderGlobal = Config.getRenderGlobal();
          this.textureWidth = 64.0F;
          this.textureHeight = 32.0F;
          this.showModel = true;
***************
*** 124,222 ****
  
      public void render(float scale)
      {
!         if (!this.isHidden)
          {
!             if (this.showModel)
              {
!                 if (!this.compiled)
                  {
!                     this.compileDisplayList(scale);
                  }
  
!                 GlStateManager.translate(this.offsetX, this.offsetY, this.offsetZ);
  
!                 if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
                  {
!                     if (this.rotationPointX == 0.0F && this.rotationPointY == 0.0F && this.rotationPointZ == 0.0F)
                      {
!                         GlStateManager.callList(this.displayList);
! 
!                         if (this.childModels != null)
!                         {
!                             for (int k = 0; k < this.childModels.size(); ++k)
!                             {
!                                 ((ModelRenderer)this.childModels.get(k)).render(scale);
!                             }
!                         }
                      }
-                     else
-                     {
-                         GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
-                         GlStateManager.callList(this.displayList);
  
!                         if (this.childModels != null)
                          {
!                             for (int j = 0; j < this.childModels.size(); ++j)
!                             {
!                                 ((ModelRenderer)this.childModels.get(j)).render(scale);
!                             }
                          }
  
!                         GlStateManager.translate(-this.rotationPointX * scale, -this.rotationPointY * scale, -this.rotationPointZ * scale);
                      }
                  }
                  else
                  {
-                     GlStateManager.pushMatrix();
                      GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
  
!                     if (this.rotateAngleZ != 0.0F)
!                     {
!                         GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
!                     }
! 
!                     if (this.rotateAngleY != 0.0F)
!                     {
!                         GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
!                     }
! 
!                     if (this.rotateAngleX != 0.0F)
                      {
!                         GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
                      }
  
                      GlStateManager.callList(this.displayList);
  
                      if (this.childModels != null)
                      {
!                         for (int i = 0; i < this.childModels.size(); ++i)
                          {
!                             ((ModelRenderer)this.childModels.get(i)).render(scale);
                          }
                      }
  
!                     GlStateManager.popMatrix();
!                 }
  
!                 GlStateManager.translate(-this.offsetX, -this.offsetY, -this.offsetZ);
              }
!         }
!     }
! 
!     public void renderWithRotation(float scale)
!     {
!         if (!this.isHidden)
!         {
!             if (this.showModel)
              {
-                 if (!this.compiled)
-                 {
-                     this.compileDisplayList(scale);
-                 }
- 
                  GlStateManager.pushMatrix();
                  GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
  
                  if (this.rotateAngleY != 0.0F)
                  {
                      GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
--- 148,242 ----
  
      public void render(float scale)
      {
!         if (!this.isHidden && this.showModel)
          {
!             if (!this.compiled)
              {
!                 this.compileDisplayList(scale);
!             }
! 
!             int i = 0;
! 
!             if (this.textureLocation != null && !this.renderGlobal.renderOverlayDamaged)
!             {
!                 if (this.renderGlobal.renderOverlayEyes)
                  {
!                     return;
                  }
  
!                 i = GlStateManager.getBoundTexture();
!                 Config.getTextureManager().bindTexture(this.textureLocation);
!             }
  
!             if (this.modelUpdater != null)
!             {
!                 this.modelUpdater.update();
!             }
! 
!             boolean flag = this.scaleX != 1.0F || this.scaleY != 1.0F || this.scaleZ != 1.0F;
!             GlStateManager.translate(this.offsetX, this.offsetY, this.offsetZ);
! 
!             if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
!             {
!                 if (this.rotationPointX == 0.0F && this.rotationPointY == 0.0F && this.rotationPointZ == 0.0F)
                  {
!                     if (flag)
                      {
!                         GlStateManager.scale(this.scaleX, this.scaleY, this.scaleZ);
                      }
  
!                     GlStateManager.callList(this.displayList);
! 
!                     if (this.childModels != null)
!                     {
!                         for (int l = 0; l < this.childModels.size(); ++l)
                          {
!                             ((ModelRenderer)this.childModels.get(l)).render(scale);
                          }
+                     }
  
!                     if (flag)
!                     {
!                         GlStateManager.scale(1.0F / this.scaleX, 1.0F / this.scaleY, 1.0F / this.scaleZ);
                      }
                  }
                  else
                  {
                      GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
  
!                     if (flag)
                      {
!                         GlStateManager.scale(this.scaleX, this.scaleY, this.scaleZ);
                      }
  
                      GlStateManager.callList(this.displayList);
  
                      if (this.childModels != null)
                      {
!                         for (int k = 0; k < this.childModels.size(); ++k)
                          {
!                             ((ModelRenderer)this.childModels.get(k)).render(scale);
                          }
                      }
  
!                     if (flag)
!                     {
!                         GlStateManager.scale(1.0F / this.scaleX, 1.0F / this.scaleY, 1.0F / this.scaleZ);
!                     }
  
!                     GlStateManager.translate(-this.rotationPointX * scale, -this.rotationPointY * scale, -this.rotationPointZ * scale);
!                 }
              }
!             else
              {
                  GlStateManager.pushMatrix();
                  GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
  
+                 if (this.rotateAngleZ != 0.0F)
+                 {
+                     GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
+                 }
+ 
                  if (this.rotateAngleY != 0.0F)
                  {
                      GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
***************
*** 227,240 ****
                      GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
                  }
  
!                 if (this.rotateAngleZ != 0.0F)
                  {
!                     GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
                  }
  
                  GlStateManager.callList(this.displayList);
                  GlStateManager.popMatrix();
              }
          }
      }
  
--- 247,346 ----
                      GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
                  }
  
!                 if (flag)
                  {
!                     GlStateManager.scale(this.scaleX, this.scaleY, this.scaleZ);
                  }
  
                  GlStateManager.callList(this.displayList);
+ 
+                 if (this.childModels != null)
+                 {
+                     for (int j = 0; j < this.childModels.size(); ++j)
+                     {
+                         ((ModelRenderer)this.childModels.get(j)).render(scale);
+                     }
+                 }
+ 
                  GlStateManager.popMatrix();
              }
+ 
+             GlStateManager.translate(-this.offsetX, -this.offsetY, -this.offsetZ);
+ 
+             if (i != 0)
+             {
+                 GlStateManager.bindTexture(i);
+             }
+         }
+     }
+ 
+     public void renderWithRotation(float scale)
+     {
+         if (!this.isHidden && this.showModel)
+         {
+             if (!this.compiled)
+             {
+                 this.compileDisplayList(scale);
+             }
+ 
+             int i = 0;
+ 
+             if (this.textureLocation != null && !this.renderGlobal.renderOverlayDamaged)
+             {
+                 if (this.renderGlobal.renderOverlayEyes)
+                 {
+                     return;
+                 }
+ 
+                 i = GlStateManager.getBoundTexture();
+                 Config.getTextureManager().bindTexture(this.textureLocation);
+             }
+ 
+             if (this.modelUpdater != null)
+             {
+                 this.modelUpdater.update();
+             }
+ 
+             boolean flag = this.scaleX != 1.0F || this.scaleY != 1.0F || this.scaleZ != 1.0F;
+             GlStateManager.pushMatrix();
+             GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
+ 
+             if (this.rotateAngleY != 0.0F)
+             {
+                 GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
+             }
+ 
+             if (this.rotateAngleX != 0.0F)
+             {
+                 GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
+             }
+ 
+             if (this.rotateAngleZ != 0.0F)
+             {
+                 GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
+             }
+ 
+             if (flag)
+             {
+                 GlStateManager.scale(this.scaleX, this.scaleY, this.scaleZ);
+             }
+ 
+             GlStateManager.callList(this.displayList);
+ 
+             if (this.childModels != null)
+             {
+                 for (int j = 0; j < this.childModels.size(); ++j)
+                 {
+                     ((ModelRenderer)this.childModels.get(j)).render(scale);
+                 }
+             }
+ 
+             GlStateManager.popMatrix();
+ 
+             if (i != 0)
+             {
+                 GlStateManager.bindTexture(i);
+             }
          }
      }
  
***************
*** 243,282 ****
       */
      public void postRender(float scale)
      {
!         if (!this.isHidden)
          {
!             if (this.showModel)
              {
!                 if (!this.compiled)
                  {
!                     this.compileDisplayList(scale);
                  }
  
!                 if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
                  {
!                     if (this.rotationPointX != 0.0F || this.rotationPointY != 0.0F || this.rotationPointZ != 0.0F)
!                     {
!                         GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
!                     }
                  }
-                 else
-                 {
-                     GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
- 
-                     if (this.rotateAngleZ != 0.0F)
-                     {
-                         GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
-                     }
  
!                     if (this.rotateAngleY != 0.0F)
!                     {
!                         GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
!                     }
  
!                     if (this.rotateAngleX != 0.0F)
!                     {
!                         GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
!                     }
                  }
              }
          }
--- 349,385 ----
       */
      public void postRender(float scale)
      {
!         if (!this.isHidden && this.showModel)
          {
!             if (!this.compiled)
!             {
!                 this.compileDisplayList(scale);
!             }
! 
!             if (this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F)
              {
!                 if (this.rotationPointX != 0.0F || this.rotationPointY != 0.0F || this.rotationPointZ != 0.0F)
                  {
!                     GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
                  }
+             }
+             else
+             {
+                 GlStateManager.translate(this.rotationPointX * scale, this.rotationPointY * scale, this.rotationPointZ * scale);
  
!                 if (this.rotateAngleZ != 0.0F)
                  {
!                     GlStateManager.rotate(this.rotateAngleZ * (180F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
                  }
  
!                 if (this.rotateAngleY != 0.0F)
!                 {
!                     GlStateManager.rotate(this.rotateAngleY * (180F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
!                 }
  
!                 if (this.rotateAngleX != 0.0F)
!                 {
!                     GlStateManager.rotate(this.rotateAngleX * (180F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
                  }
              }
          }
***************
*** 287,293 ****
       */
      private void compileDisplayList(float scale)
      {
!         this.displayList = GLAllocation.generateDisplayLists(1);
          GlStateManager.glNewList(this.displayList, 4864);
          BufferBuilder bufferbuilder = Tessellator.getInstance().getBuffer();
  
--- 390,401 ----
       */
      private void compileDisplayList(float scale)
      {
!         if (this.displayList == 0)
!         {
!             this.savedScale = scale;
!             this.displayList = GLAllocation.generateDisplayLists(1);
!         }
! 
          GlStateManager.glNewList(this.displayList, 4864);
          BufferBuilder bufferbuilder = Tessellator.getInstance().getBuffer();
  
***************
*** 296,301 ****
--- 404,415 ----
              ((ModelBox)this.cubeList.get(i)).render(bufferbuilder, scale);
          }
  
+         for (int j = 0; j < this.spriteList.size(); ++j)
+         {
+             ModelSprite modelsprite = (ModelSprite)this.spriteList.get(j);
+             modelsprite.render(Tessellator.getInstance(), scale);
+         }
+ 
          GlStateManager.glEndList();
          this.compiled = true;
      }
***************
*** 309,312 ****
--- 423,547 ----
          this.textureHeight = (float)textureHeightIn;
          return this;
      }
+ 
+     public void addSprite(float p_addSprite_1_, float p_addSprite_2_, float p_addSprite_3_, int p_addSprite_4_, int p_addSprite_5_, int p_addSprite_6_, float p_addSprite_7_)
+     {
+         this.spriteList.add(new ModelSprite(this, this.textureOffsetX, this.textureOffsetY, p_addSprite_1_, p_addSprite_2_, p_addSprite_3_, p_addSprite_4_, p_addSprite_5_, p_addSprite_6_, p_addSprite_7_));
+     }
+ 
+     public boolean getCompiled()
+     {
+         return this.compiled;
+     }
+ 
+     public int getDisplayList()
+     {
+         return this.displayList;
+     }
+ 
+     public void resetDisplayList()
+     {
+         if (this.compiled)
+         {
+             this.compiled = false;
+             this.compileDisplayList(this.savedScale);
+         }
+     }
+ 
+     public ResourceLocation getTextureLocation()
+     {
+         return this.textureLocation;
+     }
+ 
+     public void setTextureLocation(ResourceLocation p_setTextureLocation_1_)
+     {
+         this.textureLocation = p_setTextureLocation_1_;
+     }
+ 
+     public String getId()
+     {
+         return this.id;
+     }
+ 
+     public void setId(String p_setId_1_)
+     {
+         this.id = p_setId_1_;
+     }
+ 
+     public void addBox(int[][] p_addBox_1_, float p_addBox_2_, float p_addBox_3_, float p_addBox_4_, float p_addBox_5_, float p_addBox_6_, float p_addBox_7_, float p_addBox_8_)
+     {
+         this.cubeList.add(new ModelBox(this, p_addBox_1_, p_addBox_2_, p_addBox_3_, p_addBox_4_, p_addBox_5_, p_addBox_6_, p_addBox_7_, p_addBox_8_, this.mirror));
+     }
+ 
+     public ModelRenderer getChild(String p_getChild_1_)
+     {
+         if (p_getChild_1_ == null)
+         {
+             return null;
+         }
+         else
+         {
+             if (this.childModels != null)
+             {
+                 for (int i = 0; i < this.childModels.size(); ++i)
+                 {
+                     ModelRenderer modelrenderer = this.childModels.get(i);
+ 
+                     if (p_getChild_1_.equals(modelrenderer.getId()))
+                     {
+                         return modelrenderer;
+                     }
+                 }
+             }
+ 
+             return null;
+         }
+     }
+ 
+     public ModelRenderer getChildDeep(String p_getChildDeep_1_)
+     {
+         if (p_getChildDeep_1_ == null)
+         {
+             return null;
+         }
+         else
+         {
+             ModelRenderer modelrenderer = this.getChild(p_getChildDeep_1_);
+ 
+             if (modelrenderer != null)
+             {
+                 return modelrenderer;
+             }
+             else
+             {
+                 if (this.childModels != null)
+                 {
+                     for (int i = 0; i < this.childModels.size(); ++i)
+                     {
+                         ModelRenderer modelrenderer1 = this.childModels.get(i);
+                         ModelRenderer modelrenderer2 = modelrenderer1.getChildDeep(p_getChildDeep_1_);
+ 
+                         if (modelrenderer2 != null)
+                         {
+                             return modelrenderer2;
+                         }
+                     }
+                 }
+ 
+                 return null;
+             }
+         }
+     }
+ 
+     public void setModelUpdater(ModelUpdater p_setModelUpdater_1_)
+     {
+         this.modelUpdater = p_setModelUpdater_1_;
+     }
+ 
+     public String toString()
+     {
+         StringBuffer stringbuffer = new StringBuffer();
+         stringbuffer.append("id: " + this.id + ", boxes: " + (this.cubeList != null ? this.cubeList.size() : null) + ", submodels: " + (this.childModels != null ? this.childModels.size() : null));
+         return stringbuffer.toString();
+     }
  }
diff -rc ./client/model/TexturedQuad.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/model/TexturedQuad.java
*** ./client/model/TexturedQuad.java	2018-11-18 13:18:44.740180000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/model/TexturedQuad.java	2017-10-20 21:35:41.043453000 -0700
***************
*** 4,9 ****
--- 4,11 ----
  import net.minecraft.client.renderer.Tessellator;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
  import net.minecraft.util.math.Vec3d;
+ import optifine.Config;
+ import shadersmod.client.SVertexFormat;
  
  public class TexturedQuad
  {
***************
*** 60,66 ****
              f2 = -f2;
          }
  
!         renderer.begin(7, DefaultVertexFormats.OLDMODEL_POSITION_TEX_NORMAL);
  
          for (int i = 0; i < 4; ++i)
          {
--- 62,75 ----
              f2 = -f2;
          }
  
!         if (Config.isShaders())
!         {
!             renderer.begin(7, SVertexFormat.defVertexFormatTextured);
!         }
!         else
!         {
!             renderer.begin(7, DefaultVertexFormats.OLDMODEL_POSITION_TEX_NORMAL);
!         }
  
          for (int i = 0; i < 4; ++i)
          {
diff -rc ./client/multiplayer/GuiConnecting.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/multiplayer/GuiConnecting.java
*** ./client/multiplayer/GuiConnecting.java	2018-11-18 13:18:44.783158000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/multiplayer/GuiConnecting.java	2018-11-21 10:10:12.733688700 -0800
***************
*** 18,23 ****
--- 18,24 ----
  import net.minecraft.util.text.TextComponentTranslation;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import org.golde.snowball.Snowball;
  
  public class GuiConnecting extends GuiScreen
  {
***************
*** 64,70 ****
                      inetaddress = InetAddress.getByName(ip);
                      GuiConnecting.this.networkManager = NetworkManager.createNetworkManagerAndConnect(inetaddress, port, GuiConnecting.this.mc.gameSettings.isUsingNativeTransport());
                      GuiConnecting.this.networkManager.setNetHandler(new NetHandlerLoginClient(GuiConnecting.this.networkManager, GuiConnecting.this.mc, GuiConnecting.this.previousGuiScreen));
!                     GuiConnecting.this.networkManager.sendPacket(new C00Handshake(335, ip, port, EnumConnectionState.LOGIN));
                      GuiConnecting.this.networkManager.sendPacket(new CPacketLoginStart(GuiConnecting.this.mc.getSession().getProfile()));
                  }
                  catch (UnknownHostException unknownhostexception)
--- 65,71 ----
                      inetaddress = InetAddress.getByName(ip);
                      GuiConnecting.this.networkManager = NetworkManager.createNetworkManagerAndConnect(inetaddress, port, GuiConnecting.this.mc.gameSettings.isUsingNativeTransport());
                      GuiConnecting.this.networkManager.setNetHandler(new NetHandlerLoginClient(GuiConnecting.this.networkManager, GuiConnecting.this.mc, GuiConnecting.this.previousGuiScreen));
!                     GuiConnecting.this.networkManager.sendPacket(new C00Handshake(ip, port, EnumConnectionState.LOGIN));
                      GuiConnecting.this.networkManager.sendPacket(new CPacketLoginStart(GuiConnecting.this.mc.getSession().getProfile()));
                  }
                  catch (UnknownHostException unknownhostexception)
diff -rc ./client/multiplayer/PlayerControllerMP.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/multiplayer/PlayerControllerMP.java
*** ./client/multiplayer/PlayerControllerMP.java	2018-11-18 13:18:44.803146000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/multiplayer/PlayerControllerMP.java	2018-11-18 13:37:39.335686900 -0800
***************
*** 1,7 ****
  package net.minecraft.client.multiplayer;
  
  import io.netty.buffer.Unpooled;
- import java.util.List;
  import net.minecraft.block.Block;
  import net.minecraft.block.BlockCommandBlock;
  import net.minecraft.block.BlockStructure;
--- 1,6 ----
***************
*** 20,35 ****
  import net.minecraft.item.ItemBlock;
  import net.minecraft.item.ItemStack;
  import net.minecraft.item.ItemSword;
  import net.minecraft.network.PacketBuffer;
  import net.minecraft.network.play.client.CPacketClickWindow;
  import net.minecraft.network.play.client.CPacketCreativeInventoryAction;
  import net.minecraft.network.play.client.CPacketCustomPayload;
  import net.minecraft.network.play.client.CPacketEnchantItem;
  import net.minecraft.network.play.client.CPacketHeldItemChange;
  import net.minecraft.network.play.client.CPacketPlayerDigging;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
- import net.minecraft.network.play.client.CPacketRecipePlacement;
  import net.minecraft.network.play.client.CPacketUseEntity;
  import net.minecraft.stats.RecipeBook;
  import net.minecraft.stats.StatisticsManager;
--- 19,35 ----
  import net.minecraft.item.ItemBlock;
  import net.minecraft.item.ItemStack;
  import net.minecraft.item.ItemSword;
+ import net.minecraft.item.crafting.IRecipe;
  import net.minecraft.network.PacketBuffer;
  import net.minecraft.network.play.client.CPacketClickWindow;
  import net.minecraft.network.play.client.CPacketCreativeInventoryAction;
  import net.minecraft.network.play.client.CPacketCustomPayload;
  import net.minecraft.network.play.client.CPacketEnchantItem;
  import net.minecraft.network.play.client.CPacketHeldItemChange;
+ import net.minecraft.network.play.client.CPacketPlaceRecipe;
  import net.minecraft.network.play.client.CPacketPlayerDigging;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
  import net.minecraft.network.play.client.CPacketUseEntity;
  import net.minecraft.stats.RecipeBook;
  import net.minecraft.stats.StatisticsManager;
***************
*** 469,478 ****
                      if (this.currentGameType.isCreative())
                      {
                          int i = itemstack.getMetadata();
!                         int j = itemstack.func_190916_E();
                          EnumActionResult enumactionresult = itemstack.onItemUse(player, worldIn, stack, vec, pos, f, f1, f2);
                          itemstack.setItemDamage(i);
!                         itemstack.func_190920_e(j);
                          return enumactionresult;
                      }
                      else
--- 469,478 ----
                      if (this.currentGameType.isCreative())
                      {
                          int i = itemstack.getMetadata();
!                         int j = itemstack.getCount();
                          EnumActionResult enumactionresult = itemstack.onItemUse(player, worldIn, stack, vec, pos, f, f1, f2);
                          itemstack.setItemDamage(i);
!                         itemstack.setCount(j);
                          return enumactionresult;
                      }
                      else
***************
*** 506,516 ****
              }
              else
              {
!                 int i = itemstack.func_190916_E();
                  ActionResult<ItemStack> actionresult = itemstack.useItemRightClick(worldIn, player, stack);
                  ItemStack itemstack1 = actionresult.getResult();
  
!                 if (itemstack1 != itemstack || itemstack1.func_190916_E() != i)
                  {
                      player.setHeldItem(stack, itemstack1);
                  }
--- 506,516 ----
              }
              else
              {
!                 int i = itemstack.getCount();
                  ActionResult<ItemStack> actionresult = itemstack.useItemRightClick(worldIn, player, stack);
                  ItemStack itemstack1 = actionresult.getResult();
  
!                 if (itemstack1 != itemstack || itemstack1.getCount() != i)
                  {
                      player.setHeldItem(stack, itemstack1);
                  }
***************
*** 572,581 ****
          return itemstack;
      }
  
!     public void func_192831_a(int p_192831_1_, List<CPacketRecipePlacement.ItemMove> p_192831_2_, List<CPacketRecipePlacement.ItemMove> p_192831_3_, EntityPlayer p_192831_4_)
      {
!         short short1 = p_192831_4_.openContainer.getNextTransactionID(p_192831_4_.inventory);
!         this.connection.sendPacket(new CPacketRecipePlacement(p_192831_1_, p_192831_2_, p_192831_3_, short1));
      }
  
      /**
--- 572,580 ----
          return itemstack;
      }
  
!     public void func_194338_a(int p_194338_1_, IRecipe p_194338_2_, boolean p_194338_3_, EntityPlayer p_194338_4_)
      {
!         this.connection.sendPacket(new CPacketPlaceRecipe(p_194338_1_, p_194338_2_, p_194338_3_));
      }
  
      /**
diff -rc ./client/multiplayer/ServerData.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/multiplayer/ServerData.java
*** ./client/multiplayer/ServerData.java	2018-11-18 13:18:44.846121000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/multiplayer/ServerData.java	2017-10-20 21:01:20.146700000 -0700
***************
*** 23,32 ****
  
      /** last server ping that showed up in the server browser */
      public long pingToServer;
!     public int version = 335;
  
      /** Game version for this server. */
!     public String gameVersion = "1.12";
      public boolean pinged;
      public String playerList;
      private ServerData.ServerResourceMode resourceMode = ServerData.ServerResourceMode.PROMPT;
--- 23,32 ----
  
      /** last server ping that showed up in the server browser */
      public long pingToServer;
!     public int version = 340;
  
      /** Game version for this server. */
!     public String gameVersion = "1.12.2";
      public boolean pinged;
      public String playerList;
      private ServerData.ServerResourceMode resourceMode = ServerData.ServerResourceMode.PROMPT;
diff -rc ./client/multiplayer/WorldClient.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/multiplayer/WorldClient.java
*** ./client/multiplayer/WorldClient.java	2018-11-18 13:18:44.888097000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/multiplayer/WorldClient.java	2017-10-20 21:35:41.125955300 -0700
***************
*** 4,14 ****
--- 4,16 ----
  import java.util.Random;
  import java.util.Set;
  import javax.annotation.Nullable;
+ import net.minecraft.block.Block;
  import net.minecraft.block.material.Material;
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.audio.MovingSoundMinecart;
  import net.minecraft.client.audio.PositionedSoundRecord;
+ import net.minecraft.client.entity.EntityPlayerSP;
  import net.minecraft.client.network.NetHandlerPlayClient;
  import net.minecraft.client.particle.ParticleFirework;
  import net.minecraft.crash.CrashReport;
***************
*** 37,48 ****
--- 39,56 ----
  import net.minecraft.world.EnumSkyBlock;
  import net.minecraft.world.GameType;
  import net.minecraft.world.World;
+ import net.minecraft.world.WorldProvider;
  import net.minecraft.world.WorldSettings;
  import net.minecraft.world.chunk.Chunk;
  import net.minecraft.world.chunk.IChunkProvider;
  import net.minecraft.world.storage.SaveDataMemoryStorage;
  import net.minecraft.world.storage.SaveHandlerMP;
  import net.minecraft.world.storage.WorldInfo;
+ import optifine.Config;
+ import optifine.CustomGuis;
+ import optifine.DynamicLights;
+ import optifine.PlayerControllerOF;
+ import optifine.Reflector;
  
  public class WorldClient extends World
  {
***************
*** 57,76 ****
      private final Set<ChunkPos> previousActiveChunkSet = Sets.<ChunkPos>newHashSet();
      private int ambienceTicks;
      protected Set<ChunkPos> viewableChunks;
  
      public WorldClient(NetHandlerPlayClient netHandler, WorldSettings settings, int dimension, EnumDifficulty difficulty, Profiler profilerIn)
      {
!         super(new SaveHandlerMP(), new WorldInfo(settings, "MpServer"), DimensionType.getById(dimension).createDimension(), profilerIn, true);
          this.ambienceTicks = this.rand.nextInt(12000);
          this.viewableChunks = Sets.<ChunkPos>newHashSet();
          this.connection = netHandler;
          this.getWorldInfo().setDifficulty(difficulty);
-         this.setSpawnPoint(new BlockPos(8, 64, 8));
          this.provider.registerWorld(this);
          this.chunkProvider = this.createChunkProvider();
          this.mapStorage = new SaveDataMemoryStorage();
          this.calculateInitialSkylight();
          this.calculateInitialWeather();
      }
  
      /**
--- 65,100 ----
      private final Set<ChunkPos> previousActiveChunkSet = Sets.<ChunkPos>newHashSet();
      private int ambienceTicks;
      protected Set<ChunkPos> viewableChunks;
+     private int playerChunkX = Integer.MIN_VALUE;
+     private int playerChunkY = Integer.MIN_VALUE;
+     private boolean playerUpdate = false;
  
      public WorldClient(NetHandlerPlayClient netHandler, WorldSettings settings, int dimension, EnumDifficulty difficulty, Profiler profilerIn)
      {
!         super(new SaveHandlerMP(), new WorldInfo(settings, "MpServer"), makeWorldProvider(dimension), profilerIn, true);
          this.ambienceTicks = this.rand.nextInt(12000);
          this.viewableChunks = Sets.<ChunkPos>newHashSet();
          this.connection = netHandler;
          this.getWorldInfo().setDifficulty(difficulty);
          this.provider.registerWorld(this);
+         this.setSpawnPoint(new BlockPos(8, 64, 8));
          this.chunkProvider = this.createChunkProvider();
          this.mapStorage = new SaveDataMemoryStorage();
          this.calculateInitialSkylight();
          this.calculateInitialWeather();
+         Reflector.call(this, Reflector.ForgeWorld_initCapabilities);
+         Reflector.postForgeBusEvent(Reflector.WorldEvent_Load_Constructor, this);
+ 
+         if (this.mc.playerController != null && this.mc.playerController.getClass() == PlayerControllerMP.class)
+         {
+             this.mc.playerController = new PlayerControllerOF(this.mc, netHandler);
+             CustomGuis.setPlayerControllerOF((PlayerControllerOF)this.mc.playerController);
+         }
+     }
+ 
+     private static WorldProvider makeWorldProvider(int p_makeWorldProvider_0_)
+     {
+         return Reflector.DimensionManager_createProviderFor.exists() ? (WorldProvider)Reflector.call(Reflector.DimensionManager_createProviderFor, p_makeWorldProvider_0_) : DimensionType.getById(p_makeWorldProvider_0_).createDimension();
      }
  
      /**
***************
*** 130,150 ****
  
      protected void buildChunkCoordList()
      {
!         this.viewableChunks.clear();
!         int i = this.mc.gameSettings.renderDistanceChunks;
!         this.theProfiler.startSection("buildList");
!         int j = MathHelper.floor(this.mc.player.posX / 16.0D);
!         int k = MathHelper.floor(this.mc.player.posZ / 16.0D);
  
!         for (int l = -i; l <= i; ++l)
          {
!             for (int i1 = -i; i1 <= i; ++i1)
              {
!                 this.viewableChunks.add(new ChunkPos(l + j, i1 + k));
              }
-         }
  
!         this.theProfiler.endSection();
      }
  
      protected void updateBlocks()
--- 154,182 ----
  
      protected void buildChunkCoordList()
      {
!         int i = MathHelper.floor(this.mc.player.posX / 16.0D);
!         int j = MathHelper.floor(this.mc.player.posZ / 16.0D);
  
!         if (i != this.playerChunkX || j != this.playerChunkY)
          {
!             this.playerChunkX = i;
!             this.playerChunkY = j;
!             this.viewableChunks.clear();
!             int k = this.mc.gameSettings.renderDistanceChunks;
!             this.theProfiler.startSection("buildList");
!             int l = MathHelper.floor(this.mc.player.posX / 16.0D);
!             int i1 = MathHelper.floor(this.mc.player.posZ / 16.0D);
! 
!             for (int j1 = -k; j1 <= k; ++j1)
              {
!                 for (int k1 = -k; k1 <= k; ++k1)
!                 {
!                     this.viewableChunks.add(new ChunkPos(j1 + l, k1 + i1));
!                 }
              }
  
!             this.theProfiler.endSection();
!         }
      }
  
      protected void updateBlocks()
***************
*** 335,351 ****
  
          if (this.ambienceTicks == 0)
          {
              this.updateLCG = this.updateLCG * 3 + 1013904223;
              int i = this.updateLCG >> 2;
              int j = i & 15;
              int k = i >> 8 & 15;
              int l = i >> 16 & 255;
              BlockPos blockpos = new BlockPos(j + p_147467_1_, l, k + p_147467_2_);
              IBlockState iblockstate = chunkIn.getBlockState(blockpos);
              j = j + p_147467_1_;
              k = k + p_147467_2_;
  
!             if (iblockstate.getMaterial() == Material.AIR && this.getLight(blockpos) <= this.rand.nextInt(8) && this.getLightFor(EnumSkyBlock.SKY, blockpos) <= 0 && this.mc.player != null && this.mc.player.getDistanceSq((double)j + 0.5D, (double)l + 0.5D, (double)k + 0.5D) > 4.0D)
              {
                  this.playSound((double)j + 0.5D, (double)l + 0.5D, (double)k + 0.5D, SoundEvents.AMBIENT_CAVE, SoundCategory.AMBIENT, 0.7F, 0.8F + this.rand.nextFloat() * 0.2F, false);
                  this.ambienceTicks = this.rand.nextInt(12000) + 6000;
--- 367,417 ----
  
          if (this.ambienceTicks == 0)
          {
+             EntityPlayerSP entityplayersp = this.mc.player;
+ 
+             if (entityplayersp == null)
+             {
+                 return;
+             }
+ 
+             if (Math.abs(entityplayersp.chunkCoordX - chunkIn.xPosition) > 1 || Math.abs(entityplayersp.chunkCoordZ - chunkIn.zPosition) > 1)
+             {
+                 return;
+             }
+ 
              this.updateLCG = this.updateLCG * 3 + 1013904223;
              int i = this.updateLCG >> 2;
              int j = i & 15;
              int k = i >> 8 & 15;
              int l = i >> 16 & 255;
+             l = l / 2;
+ 
+             if (entityplayersp.posY > 160.0D)
+             {
+                 l += 128;
+             }
+             else if (entityplayersp.posY > 96.0D)
+             {
+                 l += 64;
+             }
+ 
              BlockPos blockpos = new BlockPos(j + p_147467_1_, l, k + p_147467_2_);
              IBlockState iblockstate = chunkIn.getBlockState(blockpos);
              j = j + p_147467_1_;
              k = k + p_147467_2_;
+             double d0 = this.mc.player.getDistanceSq((double)j + 0.5D, (double)l + 0.5D, (double)k + 0.5D);
  
!             if (d0 < 4.0D)
!             {
!                 return;
!             }
! 
!             if (d0 > 255.0D)
!             {
!                 return;
!             }
! 
!             if (iblockstate.getMaterial() == Material.AIR && this.getLight(blockpos) <= this.rand.nextInt(8) && this.getLightFor(EnumSkyBlock.SKY, blockpos) <= 0)
              {
                  this.playSound((double)j + 0.5D, (double)l + 0.5D, (double)k + 0.5D, SoundEvents.AMBIENT_CAVE, SoundCategory.AMBIENT, 0.7F, 0.8F + this.rand.nextFloat() * 0.2F, false);
                  this.ambienceTicks = this.rand.nextInt(12000) + 6000;
***************
*** 358,363 ****
--- 424,435 ----
          int i = 32;
          Random random = new Random();
          ItemStack itemstack = this.mc.player.getHeldItemMainhand();
+ 
+         if (itemstack == null || Block.getBlockFromItem(itemstack.getItem()) != Blocks.BARRIER)
+         {
+             itemstack = this.mc.player.getHeldItemOffhand();
+         }
+ 
          boolean flag = this.mc.playerController.getCurrentGameType() == GameType.CREATIVE && !itemstack.func_190926_b() && itemstack.getItem() == Item.getItemFromBlock(Blocks.BARRIER);
          BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
  
***************
*** 546,549 ****
--- 618,664 ----
      {
          return (ChunkProviderClient)super.getChunkProvider();
      }
+ 
+     public int getCombinedLight(BlockPos pos, int lightValue)
+     {
+         int i = super.getCombinedLight(pos, lightValue);
+ 
+         if (Config.isDynamicLights())
+         {
+             i = DynamicLights.getCombinedLight(pos, i);
+         }
+ 
+         return i;
+     }
+ 
+     /**
+      * Sets the block state at a given location. Flag 1 will cause a block update. Flag 2 will send the change to
+      * clients (you almost always want this). Flag 4 prevents the block from being re-rendered, if this is a client
+      * world. Flags can be added together.
+      */
+     public boolean setBlockState(BlockPos pos, IBlockState newState, int flags)
+     {
+         this.playerUpdate = this.isPlayerActing();
+         boolean flag = super.setBlockState(pos, newState, flags);
+         this.playerUpdate = false;
+         return flag;
+     }
+ 
+     private boolean isPlayerActing()
+     {
+         if (this.mc.playerController instanceof PlayerControllerOF)
+         {
+             PlayerControllerOF playercontrollerof = (PlayerControllerOF)this.mc.playerController;
+             return playercontrollerof.isActing();
+         }
+         else
+         {
+             return false;
+         }
+     }
+ 
+     public boolean isPlayerUpdate()
+     {
+         return this.playerUpdate;
+     }
  }
diff -rc ./client/network/NetHandlerPlayClient.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/network/NetHandlerPlayClient.java
*** ./client/network/NetHandlerPlayClient.java	2018-11-18 13:18:44.958056000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/network/NetHandlerPlayClient.java	2018-11-21 10:55:44.600586700 -0800
***************
*** 48,53 ****
--- 48,54 ----
  import net.minecraft.client.gui.IProgressMeter;
  import net.minecraft.client.gui.MapItemRenderer;
  import net.minecraft.client.gui.inventory.GuiContainerCreative;
+ import net.minecraft.client.gui.recipebook.GuiRecipeBook;
  import net.minecraft.client.gui.recipebook.IRecipeShownListener;
  import net.minecraft.client.gui.toasts.RecipeToast;
  import net.minecraft.client.multiplayer.ClientAdvancementManager;
***************
*** 174,179 ****
--- 175,181 ----
  import net.minecraft.network.play.server.SPacketMultiBlockChange;
  import net.minecraft.network.play.server.SPacketOpenWindow;
  import net.minecraft.network.play.server.SPacketParticles;
+ import net.minecraft.network.play.server.SPacketPlaceGhostRecipe;
  import net.minecraft.network.play.server.SPacketPlayerAbilities;
  import net.minecraft.network.play.server.SPacketPlayerListHeaderFooter;
  import net.minecraft.network.play.server.SPacketPlayerListItem;
***************
*** 256,261 ****
--- 258,266 ----
  import net.minecraft.world.storage.MapData;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import org.golde.snowball.Snowball;
+ import org.golde.snowball.shared.Constants;
+ import org.golde.snowball.shared.CustomPayloadConstants;
  
  public class NetHandlerPlayClient implements INetHandlerPlayClient
  {
***************
*** 329,341 ****
          this.gameController.gameSettings.difficulty = packetIn.getDifficulty();
          this.gameController.loadWorld(this.clientWorldController);
          this.gameController.player.dimension = packetIn.getDimension();
!         this.gameController.displayGuiScreen(new GuiDownloadTerrain(this));
          this.gameController.player.setEntityId(packetIn.getPlayerId());
          this.currentServerMaxPlayers = packetIn.getMaxPlayers();
          this.gameController.player.setReducedDebug(packetIn.isReducedDebugInfo());
          this.gameController.playerController.setGameType(packetIn.getGameType());
          this.gameController.gameSettings.sendSettingsToServer();
          this.netManager.sendPacket(new CPacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString(ClientBrandRetriever.getClientModName())));
      }
  
      /**
--- 334,347 ----
          this.gameController.gameSettings.difficulty = packetIn.getDifficulty();
          this.gameController.loadWorld(this.clientWorldController);
          this.gameController.player.dimension = packetIn.getDimension();
!         this.gameController.displayGuiScreen(new GuiDownloadTerrain());
          this.gameController.player.setEntityId(packetIn.getPlayerId());
          this.currentServerMaxPlayers = packetIn.getMaxPlayers();
          this.gameController.player.setReducedDebug(packetIn.isReducedDebugInfo());
          this.gameController.playerController.setGameType(packetIn.getGameType());
          this.gameController.gameSettings.sendSettingsToServer();
          this.netManager.sendPacket(new CPacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString(ClientBrandRetriever.getClientModName())));
+         Snowball.instance.startConnectingToServer();
      }
  
      /**
***************
*** 918,924 ****
  
              if (entity instanceof EntityItem)
              {
!                 ((EntityItem)entity).getEntityItem().func_190920_e(packetIn.func_191208_c());
              }
  
              this.gameController.effectRenderer.addEffect(new ParticleItemPickup(this.clientWorldController, entity, entitylivingbase, 0.5F));
--- 924,930 ----
  
              if (entity instanceof EntityItem)
              {
!                 ((EntityItem)entity).getEntityItem().setCount(packetIn.func_191208_c());
              }
  
              this.gameController.effectRenderer.addEffect(new ParticleItemPickup(this.clientWorldController, entity, entitylivingbase, 0.5F));
***************
*** 1162,1172 ****
              this.clientWorldController.setWorldScoreboard(scoreboard);
              this.gameController.loadWorld(this.clientWorldController);
              this.gameController.player.dimension = packetIn.getDimensionID();
!             this.gameController.displayGuiScreen(new GuiDownloadTerrain(this));
          }
  
          this.gameController.setDimensionAndSpawnPlayer(packetIn.getDimensionID());
          this.gameController.playerController.setGameType(packetIn.getGameType());
      }
  
      /**
--- 1168,1179 ----
              this.clientWorldController.setWorldScoreboard(scoreboard);
              this.gameController.loadWorld(this.clientWorldController);
              this.gameController.player.dimension = packetIn.getDimensionID();
!             this.gameController.displayGuiScreen(new GuiDownloadTerrain());
          }
  
          this.gameController.setDimensionAndSpawnPlayer(packetIn.getDimensionID());
          this.gameController.playerController.setGameType(packetIn.getGameType());
+        	Snowball.instance.startConnectingToServer(); //Bungeecord
      }
  
      /**
***************
*** 1259,1265 ****
                  {
                      ItemStack itemstack1 = entityplayer.inventoryContainer.getSlot(i).getStack();
  
!                     if (itemstack1.func_190926_b() || itemstack1.func_190916_E() < itemstack.func_190916_E())
                      {
                          itemstack.func_190915_d(5);
                      }
--- 1266,1272 ----
                  {
                      ItemStack itemstack1 = entityplayer.inventoryContainer.getSlot(i).getStack();
  
!                     if (itemstack1.func_190926_b() || itemstack1.getCount() < itemstack.getCount())
                      {
                          itemstack.func_190915_d(5);
                      }
***************
*** 1447,1453 ****
              if (j == 0)
              {
                  this.gameController.player.connection.sendPacket(new CPacketClientStatus(CPacketClientStatus.State.PERFORM_RESPAWN));
!                 this.gameController.displayGuiScreen(new GuiDownloadTerrain(this));
              }
              else if (j == 1)
              {
--- 1454,1460 ----
              if (j == 0)
              {
                  this.gameController.player.connection.sendPacket(new CPacketClientStatus(CPacketClientStatus.State.PERFORM_RESPAWN));
!                 this.gameController.displayGuiScreen(new GuiDownloadTerrain());
              }
              else if (j == 1)
              {
***************
*** 2066,2071 ****
--- 2073,2081 ----
              String s1 = packetbuffer3.readStringFromBuffer(256);
              this.gameController.getSoundHandler().stop(s1, SoundCategory.getByName(s));
          }
+         else if(packetIn.getChannelName().startsWith(CustomPayloadConstants.CHANNEL_NAME)) {
+         	Snowball.instance.onCustomPayloadRecieve(packetIn.getBufferData());
+         }
      }
  
      /**
***************
*** 2296,2301 ****
--- 2306,2326 ----
          }
      }
  
+     public void func_194307_a(SPacketPlaceGhostRecipe p_194307_1_)
+     {
+         PacketThreadUtil.checkThreadAndEnqueue(p_194307_1_, this, this.gameController);
+         Container container = this.gameController.player.openContainer;
+ 
+         if (container.windowId == p_194307_1_.func_194313_b() && container.getCanCraft(this.gameController.player))
+         {
+             if (this.gameController.currentScreen instanceof IRecipeShownListener)
+             {
+                 GuiRecipeBook guirecipebook = ((IRecipeShownListener)this.gameController.currentScreen).func_194310_f();
+                 guirecipebook.func_193951_a(p_194307_1_.func_194311_a(), container.inventorySlots);
+             }
+         }
+     }
+ 
      /**
       * Returns this the NetworkManager instance registered with this NetworkHandlerPlayClient
       */
diff -rc ./client/network/NetworkPlayerInfo.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/network/NetworkPlayerInfo.java
*** ./client/network/NetworkPlayerInfo.java	2018-11-18 13:18:44.978045000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/network/NetworkPlayerInfo.java	2018-11-30 22:33:40.578310200 -0800
***************
*** 22,34 ****
       * The GameProfile for the player represented by this NetworkPlayerInfo instance
       */
      private final GameProfile gameProfile;
!     Map<Type, ResourceLocation> playerTextures = Maps.newEnumMap(Type.class);
      private GameType gameType;
  
      /** Player response time to server in milliseconds */
      private int responseTime;
      private boolean playerTexturesLoaded;
!     private String skinType;
  
      /**
       * When this is non-null, it is displayed instead of the player's real name
--- 22,34 ----
       * The GameProfile for the player represented by this NetworkPlayerInfo instance
       */
      private final GameProfile gameProfile;
!     public Map<Type, ResourceLocation> playerTextures = Maps.newEnumMap(Type.class);
      private GameType gameType;
  
      /** Player response time to server in milliseconds */
      private int responseTime;
      private boolean playerTexturesLoaded;
!     public String skinType;
  
      /**
       * When this is non-null, it is displayed instead of the player's real name
diff -rc ./client/network/ServerPinger.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/network/ServerPinger.java
*** ./client/network/ServerPinger.java	2018-11-18 13:18:44.991037000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/network/ServerPinger.java	2017-10-20 21:01:20.253618000 -0700
***************
*** 173,179 ****
  
          try
          {
!             networkmanager.sendPacket(new C00Handshake(335, serveraddress.getIP(), serveraddress.getPort(), EnumConnectionState.STATUS));
              networkmanager.sendPacket(new CPacketServerQuery());
          }
          catch (Throwable throwable)
--- 173,179 ----
  
          try
          {
!             networkmanager.sendPacket(new C00Handshake(serveraddress.getIP(), serveraddress.getPort(), EnumConnectionState.STATUS));
              networkmanager.sendPacket(new CPacketServerQuery());
          }
          catch (Throwable throwable)
diff -rc ./client/particle/ParticleItemPickup.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/particle/ParticleItemPickup.java
*** ./client/particle/ParticleItemPickup.java	2018-11-18 13:18:45.258882000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/particle/ParticleItemPickup.java	2017-10-20 21:35:40.592484700 -0700
***************
*** 7,12 ****
--- 7,14 ----
  import net.minecraft.client.renderer.entity.RenderManager;
  import net.minecraft.entity.Entity;
  import net.minecraft.world.World;
+ import optifine.Config;
+ import shadersmod.client.Shaders;
  
  public class ParticleItemPickup extends Particle
  {
***************
*** 31,36 ****
--- 33,46 ----
       */
      public void renderParticle(BufferBuilder worldRendererIn, Entity entityIn, float partialTicks, float rotationX, float rotationZ, float rotationYZ, float rotationXY, float rotationXZ)
      {
+         int i = 0;
+ 
+         if (Config.isShaders())
+         {
+             i = Shaders.activeProgram;
+             Shaders.nextEntity(this.item);
+         }
+ 
          float f = ((float)this.age + partialTicks) / (float)this.maxAge;
          f = f * f;
          double d0 = this.item.posX;
***************
*** 42,57 ****
          double d6 = d0 + (d3 - d0) * (double)f;
          double d7 = d1 + (d4 - d1) * (double)f;
          double d8 = d2 + (d5 - d2) * (double)f;
!         int i = this.getBrightnessForRender(partialTicks);
!         int j = i % 65536;
!         int k = i / 65536;
!         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j, (float)k);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          d6 = d6 - interpPosX;
          d7 = d7 - interpPosY;
          d8 = d8 - interpPosZ;
          GlStateManager.enableLighting();
          this.renderManager.doRenderEntity(this.item, d6, d7, d8, this.item.rotationYaw, partialTicks, false);
      }
  
      public void onUpdate()
--- 52,72 ----
          double d6 = d0 + (d3 - d0) * (double)f;
          double d7 = d1 + (d4 - d1) * (double)f;
          double d8 = d2 + (d5 - d2) * (double)f;
!         int j = this.getBrightnessForRender(partialTicks);
!         int k = j % 65536;
!         int l = j / 65536;
!         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)k, (float)l);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          d6 = d6 - interpPosX;
          d7 = d7 - interpPosY;
          d8 = d8 - interpPosZ;
          GlStateManager.enableLighting();
          this.renderManager.doRenderEntity(this.item, d6, d7, d8, this.item.rotationYaw, partialTicks, false);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.useProgram(i);
+         }
      }
  
      public void onUpdate()
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/particle: ParticleManag#
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/particle: ParticleManag~
diff -rc ./client/particle/ParticleManager.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/particle/ParticleManager.java
*** ./client/particle/ParticleManager.java	2018-11-18 13:18:45.278871000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/particle/ParticleManager.java	2017-10-20 21:35:40.603982000 -0700
***************
*** 10,15 ****
--- 10,16 ----
  import java.util.Queue;
  import java.util.Random;
  import javax.annotation.Nullable;
+ import net.minecraft.block.Block;
  import net.minecraft.block.material.Material;
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.client.renderer.ActiveRenderInfo;
***************
*** 31,37 ****
--- 32,41 ----
  import net.minecraft.util.math.AxisAlignedBB;
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.MathHelper;
+ import net.minecraft.util.math.RayTraceResult;
  import net.minecraft.world.World;
+ import optifine.Config;
+ import optifine.Reflector;
  
  public class ParticleManager
  {
***************
*** 158,164 ****
  
      public void addEffect(Particle effect)
      {
!         this.queueEntityFX.add(effect);
      }
  
      public void updateEffects()
--- 162,174 ----
  
      public void addEffect(Particle effect)
      {
!         if (effect != null)
!         {
!             if (!(effect instanceof ParticleFirework.Spark) || Config.isFireworkParticles())
!             {
!                 this.queueEntityFX.add(effect);
!             }
!         }
      }
  
      public void updateEffects()
***************
*** 197,214 ****
                      this.fxLayers[j][k].removeFirst();
                  }
  
!                 this.fxLayers[j][k].add(particle);
              }
          }
      }
  
      private void updateEffectLayer(int layer)
      {
!         this.worldObj.theProfiler.startSection(layer + "");
  
          for (int i = 0; i < 2; ++i)
          {
!             this.worldObj.theProfiler.startSection(i + "");
              this.tickParticleList(this.fxLayers[layer][i]);
              this.worldObj.theProfiler.endSection();
          }
--- 207,227 ----
                      this.fxLayers[j][k].removeFirst();
                  }
  
!                 if (!(particle instanceof Barrier) || !this.reuseBarrierParticle(particle, this.fxLayers[j][k]))
!                 {
!                     this.fxLayers[j][k].add(particle);
!                 }
              }
          }
      }
  
      private void updateEffectLayer(int layer)
      {
!         this.worldObj.theProfiler.startSection(String.valueOf(layer));
  
          for (int i = 0; i < 2; ++i)
          {
!             this.worldObj.theProfiler.startSection(String.valueOf(i));
              this.tickParticleList(this.fxLayers[layer][i]);
              this.worldObj.theProfiler.endSection();
          }
***************
*** 293,307 ****
          GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
          GlStateManager.alphaFunc(516, 0.003921569F);
  
!         for (int i_nf = 0; i_nf < 3; ++i_nf)
          {
!             final int i = i_nf;
  
!             for (int j = 0; j < 2; ++j)
              {
!                 if (!this.fxLayers[i][j].isEmpty())
                  {
!                     switch (j)
                      {
                          case 0:
                              GlStateManager.depthMask(false);
--- 306,320 ----
          GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
          GlStateManager.alphaFunc(516, 0.003921569F);
  
!         for (int i = 0; i < 3; ++i)
          {
!             final int j = i;
  
!             for (int k = 0; k < 2; ++k)
              {
!                 if (!this.fxLayers[j][k].isEmpty())
                  {
!                     switch (k)
                      {
                          case 0:
                              GlStateManager.depthMask(false);
***************
*** 311,317 ****
                              GlStateManager.depthMask(true);
                      }
  
!                     switch (i)
                      {
                          case 0:
                          default:
--- 324,330 ----
                              GlStateManager.depthMask(true);
                      }
  
!                     switch (j)
                      {
                          case 0:
                          default:
***************
*** 327,333 ****
                      BufferBuilder bufferbuilder = tessellator.getBuffer();
                      bufferbuilder.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
  
!                     for (final Particle particle : this.fxLayers[i][j])
                      {
                          try
                          {
--- 340,346 ----
                      BufferBuilder bufferbuilder = tessellator.getBuffer();
                      bufferbuilder.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
  
!                     for (final Particle particle : this.fxLayers[j][k])
                      {
                          try
                          {
***************
*** 348,364 ****
                              {
                                  public String call() throws Exception
                                  {
!                                     if (i == 0)
                                      {
                                          return "MISC_TEXTURE";
                                      }
!                                     else if (i == 1)
                                      {
                                          return "TERRAIN_TEXTURE";
                                      }
                                      else
                                      {
!                                         return i == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + i;
                                      }
                                  }
                              });
--- 361,377 ----
                              {
                                  public String call() throws Exception
                                  {
!                                     if (j == 0)
                                      {
                                          return "MISC_TEXTURE";
                                      }
!                                     else if (j == 1)
                                      {
                                          return "TERRAIN_TEXTURE";
                                      }
                                      else
                                      {
!                                         return j == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + j;
                                      }
                                  }
                              });
***************
*** 419,438 ****
  
      public void addBlockDestroyEffects(BlockPos pos, IBlockState state)
      {
!         if (state.getMaterial() != Material.AIR)
          {
              state = state.getActualState(this.worldObj, pos);
!             int i = 4;
  
!             for (int j = 0; j < 4; ++j)
              {
!                 for (int k = 0; k < 4; ++k)
                  {
!                     for (int l = 0; l < 4; ++l)
                      {
!                         double d0 = ((double)j + 0.5D) / 4.0D;
!                         double d1 = ((double)k + 0.5D) / 4.0D;
!                         double d2 = ((double)l + 0.5D) / 4.0D;
                          this.addEffect((new ParticleDigging(this.worldObj, (double)pos.getX() + d0, (double)pos.getY() + d1, (double)pos.getZ() + d2, d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, state)).setBlockPos(pos));
                      }
                  }
--- 432,463 ----
  
      public void addBlockDestroyEffects(BlockPos pos, IBlockState state)
      {
!         boolean flag;
! 
!         if (Reflector.ForgeBlock_addDestroyEffects.exists() && Reflector.ForgeBlock_isAir.exists())
!         {
!             Block block = state.getBlock();
!             flag = !Reflector.callBoolean(block, Reflector.ForgeBlock_isAir, state, this.worldObj, pos) && !Reflector.callBoolean(block, Reflector.ForgeBlock_addDestroyEffects, this.worldObj, pos, this);
!         }
!         else
!         {
!             flag = state.getMaterial() != Material.AIR;
!         }
! 
!         if (flag)
          {
              state = state.getActualState(this.worldObj, pos);
!             int l = 4;
  
!             for (int i = 0; i < 4; ++i)
              {
!                 for (int j = 0; j < 4; ++j)
                  {
!                     for (int k = 0; k < 4; ++k)
                      {
!                         double d0 = ((double)i + 0.5D) / 4.0D;
!                         double d1 = ((double)j + 0.5D) / 4.0D;
!                         double d2 = ((double)k + 0.5D) / 4.0D;
                          this.addEffect((new ParticleDigging(this.worldObj, (double)pos.getX() + d0, (double)pos.getY() + d1, (double)pos.getZ() + d2, d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, state)).setBlockPos(pos));
                      }
                  }
***************
*** 506,509 ****
--- 531,563 ----
  
          return "" + i;
      }
+ 
+     private boolean reuseBarrierParticle(Particle p_reuseBarrierParticle_1_, ArrayDeque<Particle> p_reuseBarrierParticle_2_)
+     {
+         for (Particle particle : p_reuseBarrierParticle_2_)
+         {
+             if (particle instanceof Barrier && p_reuseBarrierParticle_1_.prevPosX == particle.prevPosX && p_reuseBarrierParticle_1_.prevPosY == particle.prevPosY && p_reuseBarrierParticle_1_.prevPosZ == particle.prevPosZ)
+             {
+                 particle.particleAge = 0;
+                 return true;
+             }
+         }
+ 
+         return false;
+     }
+ 
+     public void addBlockHitEffects(BlockPos p_addBlockHitEffects_1_, RayTraceResult p_addBlockHitEffects_2_)
+     {
+         IBlockState iblockstate = this.worldObj.getBlockState(p_addBlockHitEffects_1_);
+ 
+         if (iblockstate != null)
+         {
+             boolean flag = Reflector.callBoolean(iblockstate.getBlock(), Reflector.ForgeBlock_addHitEffects, iblockstate, this.worldObj, p_addBlockHitEffects_2_, this);
+ 
+             if (iblockstate != null && !flag)
+             {
+                 this.addBlockHitEffects(p_addBlockHitEffects_1_, p_addBlockHitEffects_2_.sideHit);
+             }
+         }
+     }
  }
diff -rc ./client/renderer/block/model/BakedQuad.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/block/model/BakedQuad.java
*** ./client/renderer/block/model/BakedQuad.java	2018-11-18 13:18:46.100400000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/block/model/BakedQuad.java	2017-10-20 21:35:39.830283200 -0700
***************
*** 1,18 ****
  package net.minecraft.client.renderer.block.model;
  
  import net.minecraft.client.renderer.texture.TextureAtlasSprite;
  import net.minecraft.util.EnumFacing;
  
! public class BakedQuad
  {
      /**
       * Joined 4 vertex records, each stores packed data according to the VertexFormat of the quad. Vanilla minecraft
       * uses DefaultVertexFormats.BLOCK, Forge uses (usually) ITEM, use BakedQuad.getFormat() to get the correct format.
       */
!     protected final int[] vertexData;
      protected final int tintIndex;
!     protected final EnumFacing face;
!     protected final TextureAtlasSprite sprite;
  
      public BakedQuad(int[] vertexDataIn, int tintIndexIn, EnumFacing faceIn, TextureAtlasSprite spriteIn)
      {
--- 1,41 ----
  package net.minecraft.client.renderer.block.model;
  
+ import net.minecraft.client.Minecraft;
  import net.minecraft.client.renderer.texture.TextureAtlasSprite;
+ import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+ import net.minecraft.client.renderer.vertex.VertexFormat;
  import net.minecraft.util.EnumFacing;
+ import net.minecraftforge.client.model.pipeline.IVertexConsumer;
+ import net.minecraftforge.client.model.pipeline.IVertexProducer;
+ import optifine.Config;
+ import optifine.QuadBounds;
+ import optifine.Reflector;
  
! public class BakedQuad implements IVertexProducer
  {
      /**
       * Joined 4 vertex records, each stores packed data according to the VertexFormat of the quad. Vanilla minecraft
       * uses DefaultVertexFormats.BLOCK, Forge uses (usually) ITEM, use BakedQuad.getFormat() to get the correct format.
       */
!     protected int[] vertexData;
      protected final int tintIndex;
!     protected EnumFacing face;
!     protected TextureAtlasSprite sprite;
!     private int[] vertexDataSingle = null;
!     protected boolean applyDiffuseLighting = Reflector.ForgeHooksClient_fillNormal.exists();
!     protected VertexFormat format = DefaultVertexFormats.ITEM;
!     private QuadBounds quadBounds;
! 
!     public BakedQuad(int[] p_i6_1_, int p_i6_2_, EnumFacing p_i6_3_, TextureAtlasSprite p_i6_4_, boolean p_i6_5_, VertexFormat p_i6_6_)
!     {
!         this.vertexData = p_i6_1_;
!         this.tintIndex = p_i6_2_;
!         this.face = p_i6_3_;
!         this.sprite = p_i6_4_;
!         this.applyDiffuseLighting = p_i6_5_;
!         this.format = p_i6_6_;
!         this.fixVertexData();
!     }
  
      public BakedQuad(int[] vertexDataIn, int tintIndexIn, EnumFacing faceIn, TextureAtlasSprite spriteIn)
      {
***************
*** 20,34 ****
--- 43,64 ----
          this.tintIndex = tintIndexIn;
          this.face = faceIn;
          this.sprite = spriteIn;
+         this.fixVertexData();
      }
  
      public TextureAtlasSprite getSprite()
      {
+         if (this.sprite == null)
+         {
+             this.sprite = getSpriteByUv(this.getVertexData());
+         }
+ 
          return this.sprite;
      }
  
      public int[] getVertexData()
      {
+         this.fixVertexData();
          return this.vertexData;
      }
  
***************
*** 44,49 ****
--- 74,248 ----
  
      public EnumFacing getFace()
      {
+         if (this.face == null)
+         {
+             this.face = FaceBakery.getFacingFromVertexData(this.getVertexData());
+         }
+ 
          return this.face;
      }
+ 
+     public int[] getVertexDataSingle()
+     {
+         if (this.vertexDataSingle == null)
+         {
+             this.vertexDataSingle = makeVertexDataSingle(this.getVertexData(), this.getSprite());
+         }
+ 
+         return this.vertexDataSingle;
+     }
+ 
+     private static int[] makeVertexDataSingle(int[] p_makeVertexDataSingle_0_, TextureAtlasSprite p_makeVertexDataSingle_1_)
+     {
+         int[] aint = (int[])p_makeVertexDataSingle_0_.clone();
+         int i = p_makeVertexDataSingle_1_.sheetWidth / p_makeVertexDataSingle_1_.getIconWidth();
+         int j = p_makeVertexDataSingle_1_.sheetHeight / p_makeVertexDataSingle_1_.getIconHeight();
+         int k = aint.length / 4;
+ 
+         for (int l = 0; l < 4; ++l)
+         {
+             int i1 = l * k;
+             float f = Float.intBitsToFloat(aint[i1 + 4]);
+             float f1 = Float.intBitsToFloat(aint[i1 + 4 + 1]);
+             float f2 = p_makeVertexDataSingle_1_.toSingleU(f);
+             float f3 = p_makeVertexDataSingle_1_.toSingleV(f1);
+             aint[i1 + 4] = Float.floatToRawIntBits(f2);
+             aint[i1 + 4 + 1] = Float.floatToRawIntBits(f3);
+         }
+ 
+         return aint;
+     }
+ 
+     public void pipe(IVertexConsumer p_pipe_1_)
+     {
+         Reflector.callVoid(Reflector.LightUtil_putBakedQuad, p_pipe_1_, this);
+     }
+ 
+     public VertexFormat getFormat()
+     {
+         return this.format;
+     }
+ 
+     public boolean shouldApplyDiffuseLighting()
+     {
+         return this.applyDiffuseLighting;
+     }
+ 
+     private static TextureAtlasSprite getSpriteByUv(int[] p_getSpriteByUv_0_)
+     {
+         float f = 1.0F;
+         float f1 = 1.0F;
+         float f2 = 0.0F;
+         float f3 = 0.0F;
+         int i = p_getSpriteByUv_0_.length / 4;
+ 
+         for (int j = 0; j < 4; ++j)
+         {
+             int k = j * i;
+             float f4 = Float.intBitsToFloat(p_getSpriteByUv_0_[k + 4]);
+             float f5 = Float.intBitsToFloat(p_getSpriteByUv_0_[k + 4 + 1]);
+             f = Math.min(f, f4);
+             f1 = Math.min(f1, f5);
+             f2 = Math.max(f2, f4);
+             f3 = Math.max(f3, f5);
+         }
+ 
+         float f6 = (f + f2) / 2.0F;
+         float f7 = (f1 + f3) / 2.0F;
+         TextureAtlasSprite textureatlassprite = Minecraft.getMinecraft().getTextureMapBlocks().getIconByUV((double)f6, (double)f7);
+         return textureatlassprite;
+     }
+ 
+     protected void fixVertexData()
+     {
+         if (Config.isShaders())
+         {
+             if (this.vertexData.length == 28)
+             {
+                 this.vertexData = expandVertexData(this.vertexData);
+             }
+         }
+         else if (this.vertexData.length == 56)
+         {
+             this.vertexData = compactVertexData(this.vertexData);
+         }
+     }
+ 
+     private static int[] expandVertexData(int[] p_expandVertexData_0_)
+     {
+         int i = p_expandVertexData_0_.length / 4;
+         int j = i * 2;
+         int[] aint = new int[j * 4];
+ 
+         for (int k = 0; k < 4; ++k)
+         {
+             System.arraycopy(p_expandVertexData_0_, k * i, aint, k * j, i);
+         }
+ 
+         return aint;
+     }
+ 
+     private static int[] compactVertexData(int[] p_compactVertexData_0_)
+     {
+         int i = p_compactVertexData_0_.length / 4;
+         int j = i / 2;
+         int[] aint = new int[j * 4];
+ 
+         for (int k = 0; k < 4; ++k)
+         {
+             System.arraycopy(p_compactVertexData_0_, k * i, aint, k * j, j);
+         }
+ 
+         return aint;
+     }
+ 
+     public QuadBounds getQuadBounds()
+     {
+         if (this.quadBounds == null)
+         {
+             this.quadBounds = new QuadBounds(this.getVertexData());
+         }
+ 
+         return this.quadBounds;
+     }
+ 
+     public float getMidX()
+     {
+         QuadBounds quadbounds = this.getQuadBounds();
+         return (quadbounds.getMaxX() + quadbounds.getMinX()) / 2.0F;
+     }
+ 
+     public double getMidY()
+     {
+         QuadBounds quadbounds = this.getQuadBounds();
+         return (double)((quadbounds.getMaxY() + quadbounds.getMinY()) / 2.0F);
+     }
+ 
+     public double getMidZ()
+     {
+         QuadBounds quadbounds = this.getQuadBounds();
+         return (double)((quadbounds.getMaxZ() + quadbounds.getMinZ()) / 2.0F);
+     }
+ 
+     public boolean isFaceQuad()
+     {
+         QuadBounds quadbounds = this.getQuadBounds();
+         return quadbounds.isFaceQuad(this.face);
+     }
+ 
+     public boolean isFullQuad()
+     {
+         QuadBounds quadbounds = this.getQuadBounds();
+         return quadbounds.isFullQuad(this.face);
+     }
+ 
+     public boolean isFullFaceQuad()
+     {
+         return this.isFullQuad() && this.isFaceQuad();
+     }
+ 
+     public String toString()
+     {
+         return "vertex: " + this.vertexData.length / 7 + ", tint: " + this.tintIndex + ", facing: " + this.face + ", sprite: " + this.sprite;
+     }
  }
diff -rc ./client/renderer/block/model/BakedQuadRetextured.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/block/model/BakedQuadRetextured.java
*** ./client/renderer/block/model/BakedQuadRetextured.java	2018-11-18 13:18:46.113391000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/block/model/BakedQuadRetextured.java	2017-10-20 21:01:20.934598000 -0700
***************
*** 6,26 ****
  public class BakedQuadRetextured extends BakedQuad
  {
      private final TextureAtlasSprite texture;
  
      public BakedQuadRetextured(BakedQuad quad, TextureAtlasSprite textureIn)
      {
!         super(Arrays.copyOf(quad.getVertexData(), quad.getVertexData().length), quad.tintIndex, FaceBakery.getFacingFromVertexData(quad.getVertexData()), quad.getSprite());
          this.texture = textureIn;
          this.remapQuad();
      }
  
      private void remapQuad()
      {
          for (int i = 0; i < 4; ++i)
          {
!             int j = 7 * i;
!             this.vertexData[j + 4] = Float.floatToRawIntBits(this.texture.getInterpolatedU((double)this.sprite.getUnInterpolatedU(Float.intBitsToFloat(this.vertexData[j + 4]))));
!             this.vertexData[j + 4 + 1] = Float.floatToRawIntBits(this.texture.getInterpolatedV((double)this.sprite.getUnInterpolatedV(Float.intBitsToFloat(this.vertexData[j + 4 + 1]))));
          }
      }
  }
--- 6,32 ----
  public class BakedQuadRetextured extends BakedQuad
  {
      private final TextureAtlasSprite texture;
+     private final TextureAtlasSprite spriteOld;
  
      public BakedQuadRetextured(BakedQuad quad, TextureAtlasSprite textureIn)
      {
!         super(Arrays.copyOf(quad.getVertexData(), quad.getVertexData().length), quad.tintIndex, FaceBakery.getFacingFromVertexData(quad.getVertexData()), textureIn);
          this.texture = textureIn;
+         this.format = quad.format;
+         this.applyDiffuseLighting = quad.applyDiffuseLighting;
+         this.spriteOld = quad.getSprite();
          this.remapQuad();
+         this.fixVertexData();
      }
  
      private void remapQuad()
      {
          for (int i = 0; i < 4; ++i)
          {
!             int j = this.format.getIntegerSize() * i;
!             int k = this.format.getUvOffsetById(0) / 4;
!             this.vertexData[j + k] = Float.floatToRawIntBits(this.texture.getInterpolatedU((double)this.spriteOld.getUnInterpolatedU(Float.intBitsToFloat(this.vertexData[j + k]))));
!             this.vertexData[j + k + 1] = Float.floatToRawIntBits(this.texture.getInterpolatedV((double)this.spriteOld.getUnInterpolatedV(Float.intBitsToFloat(this.vertexData[j + k + 1]))));
          }
      }
  }
diff -rc ./client/renderer/block/model/FaceBakery.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/block/model/FaceBakery.java
*** ./client/renderer/block/model/FaceBakery.java	2018-11-18 13:18:46.200340000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/block/model/FaceBakery.java	2017-10-20 21:35:40.058352900 -0700
***************
*** 3,14 ****
--- 3,21 ----
  import javax.annotation.Nullable;
  import net.minecraft.client.renderer.EnumFaceDirection;
  import net.minecraft.client.renderer.texture.TextureAtlasSprite;
+ import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.util.math.Vec3i;
+ import net.minecraftforge.common.model.ITransformation;
+ import optifine.BlockModelUtils;
+ import optifine.Config;
+ import optifine.Reflector;
+ 
  import org.lwjgl.util.vector.Matrix4f;
  import org.lwjgl.util.vector.Vector3f;
  import org.lwjgl.util.vector.Vector4f;
+ import shadersmod.client.Shaders;
  
  public class FaceBakery
  {
***************
*** 46,51 ****
--- 53,59 ----
  
      public BakedQuad makeBakedQuad(Vector3f posFrom, Vector3f posTo, BlockPartFace face, TextureAtlasSprite sprite, EnumFacing facing, ModelRotation modelRotationIn, @Nullable BlockPartRotation partRotation, boolean uvLocked, boolean shade)
      {
+     	//1.12.__.
          BlockFaceUV blockfaceuv = face.blockFaceUV;
  
          if (uvLocked)
***************
*** 64,81 ****
          return new BakedQuad(aint, face.tintIndex, enumfacing, sprite);
      }
  
      private BlockFaceUV applyUVLock(BlockFaceUV p_188010_1_, EnumFacing p_188010_2_, ModelRotation p_188010_3_)
      {
          return UV_ROTATIONS[getIndex(p_188010_3_, p_188010_2_)].rotateUV(p_188010_1_);
      }
  
!     private int[] makeQuadVertexData(BlockFaceUV uvs, TextureAtlasSprite sprite, EnumFacing orientation, float[] p_188012_4_, ModelRotation rotationIn, @Nullable BlockPartRotation partRotation, boolean shade)
      {
!         int[] aint = new int[28];
  
!         for (int i = 0; i < 4; ++i)
          {
!             this.fillVertexData(aint, i, orientation, uvs, p_188012_4_, sprite, rotationIn, partRotation, shade);
          }
  
          return aint;
--- 72,132 ----
          return new BakedQuad(aint, face.tintIndex, enumfacing, sprite);
      }
  
+     public BakedQuad makeBakedQuad(Vector3f p_makeBakedQuad_1_, Vector3f p_makeBakedQuad_2_, BlockPartFace p_makeBakedQuad_3_, TextureAtlasSprite p_makeBakedQuad_4_, EnumFacing p_makeBakedQuad_5_, ITransformation p_makeBakedQuad_6_, BlockPartRotation p_makeBakedQuad_7_, boolean p_makeBakedQuad_8_, boolean p_makeBakedQuad_9_)
+     {
+         BlockFaceUV blockfaceuv = p_makeBakedQuad_3_.blockFaceUV;
+ 
+         if (p_makeBakedQuad_8_)
+         {
+             if (Reflector.ForgeHooksClient_applyUVLock.exists())
+             {
+                 blockfaceuv = (BlockFaceUV)Reflector.call(Reflector.ForgeHooksClient_applyUVLock, p_makeBakedQuad_3_.blockFaceUV, p_makeBakedQuad_5_, p_makeBakedQuad_6_);
+             }
+             else
+             {
+                 blockfaceuv = this.applyUVLock(p_makeBakedQuad_3_.blockFaceUV, p_makeBakedQuad_5_, (ModelRotation)p_makeBakedQuad_6_);
+             }
+         }
+ 
+         boolean flag = p_makeBakedQuad_9_ && !Reflector.ForgeHooksClient_fillNormal.exists();
+         int[] aint = this.makeQuadVertexData(blockfaceuv, p_makeBakedQuad_4_, p_makeBakedQuad_5_, this.getPositionsDiv16(p_makeBakedQuad_1_, p_makeBakedQuad_2_), p_makeBakedQuad_6_, p_makeBakedQuad_7_, flag);
+         EnumFacing enumfacing = getFacingFromVertexData(aint);
+ 
+         if (p_makeBakedQuad_7_ == null)
+         {
+             this.applyFacing(aint, enumfacing);
+         }
+ 
+         if (Reflector.ForgeHooksClient_fillNormal.exists())
+         {
+             Reflector.call(Reflector.ForgeHooksClient_fillNormal, aint, enumfacing);
+             return new BakedQuad(aint, p_makeBakedQuad_3_.tintIndex, enumfacing, p_makeBakedQuad_4_, p_makeBakedQuad_9_, DefaultVertexFormats.ITEM);
+         }
+         else
+         {
+             return new BakedQuad(aint, p_makeBakedQuad_3_.tintIndex, enumfacing, p_makeBakedQuad_4_);
+         }
+     }
+ 
      private BlockFaceUV applyUVLock(BlockFaceUV p_188010_1_, EnumFacing p_188010_2_, ModelRotation p_188010_3_)
      {
          return UV_ROTATIONS[getIndex(p_188010_3_, p_188010_2_)].rotateUV(p_188010_1_);
      }
  
!     private int[] makeQuadVertexData(BlockFaceUV p_makeQuadVertexData_1_, TextureAtlasSprite p_makeQuadVertexData_2_, EnumFacing p_makeQuadVertexData_3_, float[] p_makeQuadVertexData_4_, ITransformation p_makeQuadVertexData_5_, @Nullable BlockPartRotation p_makeQuadVertexData_6_, boolean p_makeQuadVertexData_7_)
      {
!         int i = 28;
! 
!         if (Config.isShaders())
!         {
!             i = 56;
!         }
! 
!         int[] aint = new int[i];
  
!         for (int j = 0; j < 4; ++j)
          {
!             this.fillVertexData(aint, j, p_makeQuadVertexData_3_, p_makeQuadVertexData_1_, p_makeQuadVertexData_4_, p_makeQuadVertexData_2_, p_makeQuadVertexData_5_, p_makeQuadVertexData_6_, p_makeQuadVertexData_7_);
          }
  
          return aint;
***************
*** 83,98 ****
  
      private int getFaceShadeColor(EnumFacing facing)
      {
!         float f = this.getFaceBrightness(facing);
          int i = MathHelper.clamp((int)(f * 255.0F), 0, 255);
          return -16777216 | i << 16 | i << 8 | i;
      }
  
!     private float getFaceBrightness(EnumFacing facing)
      {
!         switch (facing)
          {
              case DOWN:
                  return 0.5F;
  
              case UP:
--- 134,154 ----
  
      private int getFaceShadeColor(EnumFacing facing)
      {
!         float f = getFaceBrightness(facing);
          int i = MathHelper.clamp((int)(f * 255.0F), 0, 255);
          return -16777216 | i << 16 | i << 8 | i;
      }
  
!     public static float getFaceBrightness(EnumFacing p_178412_0_)
      {
!         switch (p_178412_0_)
          {
              case DOWN:
+                 if (Config.isShaders())
+                 {
+                     return Shaders.blockLightLevel05;
+                 }
+ 
                  return 0.5F;
  
              case UP:
***************
*** 100,109 ****
--- 156,175 ----
  
              case NORTH:
              case SOUTH:
+                 if (Config.isShaders())
+                 {
+                     return Shaders.blockLightLevel08;
+                 }
+ 
                  return 0.8F;
  
              case WEST:
              case EAST:
+                 if (Config.isShaders())
+                 {
+                     return Shaders.blockLightLevel06;
+                 }
+ 
                  return 0.6F;
  
              default:
***************
*** 123,148 ****
          return afloat;
      }
  
!     private void fillVertexData(int[] p_188015_1_, int p_188015_2_, EnumFacing p_188015_3_, BlockFaceUV p_188015_4_, float[] p_188015_5_, TextureAtlasSprite p_188015_6_, ModelRotation p_188015_7_, @Nullable BlockPartRotation p_188015_8_, boolean p_188015_9_)
      {
!         EnumFacing enumfacing = p_188015_7_.rotateFace(p_188015_3_);
!         int i = p_188015_9_ ? this.getFaceShadeColor(enumfacing) : -1;
!         EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = EnumFaceDirection.getFacing(p_188015_3_).getVertexInformation(p_188015_2_);
!         Vector3f vector3f = new Vector3f(p_188015_5_[enumfacedirection$vertexinformation.xIndex], p_188015_5_[enumfacedirection$vertexinformation.yIndex], p_188015_5_[enumfacedirection$vertexinformation.zIndex]);
!         this.rotatePart(vector3f, p_188015_8_);
!         int j = this.rotateVertex(vector3f, p_188015_3_, p_188015_2_, p_188015_7_);
!         this.storeVertexData(p_188015_1_, j, p_188015_2_, vector3f, i, p_188015_6_, p_188015_4_);
      }
  
      private void storeVertexData(int[] faceData, int storeIndex, int vertexIndex, Vector3f position, int shadeColor, TextureAtlasSprite sprite, BlockFaceUV faceUV)
      {
!         int i = storeIndex * 7;
!         faceData[i] = Float.floatToRawIntBits(position.x);
!         faceData[i + 1] = Float.floatToRawIntBits(position.y);
!         faceData[i + 2] = Float.floatToRawIntBits(position.z);
!         faceData[i + 3] = shadeColor;
!         faceData[i + 4] = Float.floatToRawIntBits(sprite.getInterpolatedU((double)faceUV.getVertexU(vertexIndex)));
!         faceData[i + 4 + 1] = Float.floatToRawIntBits(sprite.getInterpolatedV((double)faceUV.getVertexV(vertexIndex)));
      }
  
      private void rotatePart(Vector3f p_178407_1_, @Nullable BlockPartRotation partRotation)
--- 189,216 ----
          return afloat;
      }
  
!     private void fillVertexData(int[] p_fillVertexData_1_, int p_fillVertexData_2_, EnumFacing p_fillVertexData_3_, BlockFaceUV p_fillVertexData_4_, float[] p_fillVertexData_5_, TextureAtlasSprite p_fillVertexData_6_, ITransformation p_fillVertexData_7_, @Nullable BlockPartRotation p_fillVertexData_8_, boolean p_fillVertexData_9_)
      {
!         EnumFacing enumfacing = p_fillVertexData_7_.rotate(p_fillVertexData_3_);
!         int i = p_fillVertexData_9_ ? this.getFaceShadeColor(enumfacing) : -1;
!         EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = EnumFaceDirection.getFacing(p_fillVertexData_3_).getVertexInformation(p_fillVertexData_2_);
!         Vector3f vector3f = new Vector3f(p_fillVertexData_5_[enumfacedirection$vertexinformation.xIndex], p_fillVertexData_5_[enumfacedirection$vertexinformation.yIndex], p_fillVertexData_5_[enumfacedirection$vertexinformation.zIndex]);
!         this.rotatePart(vector3f, p_fillVertexData_8_);
!         int j = this.rotateVertex(vector3f, p_fillVertexData_3_, p_fillVertexData_2_, p_fillVertexData_7_);
!         BlockModelUtils.snapVertexPosition(vector3f);
!         this.storeVertexData(p_fillVertexData_1_, j, p_fillVertexData_2_, vector3f, i, p_fillVertexData_6_, p_fillVertexData_4_);
      }
  
      private void storeVertexData(int[] faceData, int storeIndex, int vertexIndex, Vector3f position, int shadeColor, TextureAtlasSprite sprite, BlockFaceUV faceUV)
      {
!         int i = faceData.length / 4;
!         int j = storeIndex * i;
!         faceData[j] = Float.floatToRawIntBits(position.x);
!         faceData[j + 1] = Float.floatToRawIntBits(position.y);
!         faceData[j + 2] = Float.floatToRawIntBits(position.z);
!         faceData[j + 3] = shadeColor;
!         faceData[j + 4] = Float.floatToRawIntBits(sprite.getInterpolatedU((double)faceUV.getVertexU(vertexIndex) * 0.999D + (double)faceUV.getVertexU((vertexIndex + 2) % 4) * 0.001D));
!         faceData[j + 4 + 1] = Float.floatToRawIntBits(sprite.getInterpolatedV((double)faceUV.getVertexV(vertexIndex) * 0.999D + (double)faceUV.getVertexV((vertexIndex + 2) % 4) * 0.001D));
      }
  
      private void rotatePart(Vector3f p_178407_1_, @Nullable BlockPartRotation partRotation)
***************
*** 193,206 ****
  
      public int rotateVertex(Vector3f p_188011_1_, EnumFacing p_188011_2_, int p_188011_3_, ModelRotation p_188011_4_)
      {
!         if (p_188011_4_ == ModelRotation.X0_Y0)
          {
!             return p_188011_3_;
          }
          else
          {
!             this.rotateScale(p_188011_1_, new Vector3f(0.5F, 0.5F, 0.5F), p_188011_4_.getMatrix4d(), new Vector3f(1.0F, 1.0F, 1.0F));
!             return p_188011_4_.rotateVertex(p_188011_2_, p_188011_3_);
          }
      }
  
--- 261,287 ----
  
      public int rotateVertex(Vector3f p_188011_1_, EnumFacing p_188011_2_, int p_188011_3_, ModelRotation p_188011_4_)
      {
!         return this.rotateVertex(p_188011_1_, p_188011_2_, p_188011_3_, p_188011_4_);
!     }
! 
!     public int rotateVertex(Vector3f p_rotateVertex_1_, EnumFacing p_rotateVertex_2_, int p_rotateVertex_3_, ITransformation p_rotateVertex_4_)
!     {
!         if (p_rotateVertex_4_ == ModelRotation.X0_Y0)
          {
!             return p_rotateVertex_3_;
          }
          else
          {
!             if (Reflector.ForgeHooksClient_transform.exists())
!             {
!                 Reflector.call(Reflector.ForgeHooksClient_transform, p_rotateVertex_1_, p_rotateVertex_4_.getMatrix());
!             }
!             else
!             {
!                 this.rotateScale(p_rotateVertex_1_, new Vector3f(0.5F, 0.5F, 0.5F), ((ModelRotation)p_rotateVertex_4_).getMatrix4d(), new Vector3f(1.0F, 1.0F, 1.0F));
!             }
! 
!             return p_rotateVertex_4_.rotate(p_rotateVertex_2_, p_rotateVertex_3_);
          }
      }
  
***************
*** 223,231 ****
  
      public static EnumFacing getFacingFromVertexData(int[] faceData)
      {
          Vector3f vector3f = new Vector3f(Float.intBitsToFloat(faceData[0]), Float.intBitsToFloat(faceData[1]), Float.intBitsToFloat(faceData[2]));
!         Vector3f vector3f1 = new Vector3f(Float.intBitsToFloat(faceData[7]), Float.intBitsToFloat(faceData[8]), Float.intBitsToFloat(faceData[9]));
!         Vector3f vector3f2 = new Vector3f(Float.intBitsToFloat(faceData[14]), Float.intBitsToFloat(faceData[15]), Float.intBitsToFloat(faceData[16]));
          Vector3f vector3f3 = new Vector3f();
          Vector3f vector3f4 = new Vector3f();
          Vector3f vector3f5 = new Vector3f();
--- 304,314 ----
  
      public static EnumFacing getFacingFromVertexData(int[] faceData)
      {
+         int i = faceData.length / 4;
+         int j = i * 2;
          Vector3f vector3f = new Vector3f(Float.intBitsToFloat(faceData[0]), Float.intBitsToFloat(faceData[1]), Float.intBitsToFloat(faceData[2]));
!         Vector3f vector3f1 = new Vector3f(Float.intBitsToFloat(faceData[i]), Float.intBitsToFloat(faceData[i + 1]), Float.intBitsToFloat(faceData[i + 2]));
!         Vector3f vector3f2 = new Vector3f(Float.intBitsToFloat(faceData[j]), Float.intBitsToFloat(faceData[j + 1]), Float.intBitsToFloat(faceData[j + 2]));
          Vector3f vector3f3 = new Vector3f();
          Vector3f vector3f4 = new Vector3f();
          Vector3f vector3f5 = new Vector3f();
***************
*** 273,285 ****
          afloat[EnumFaceDirection.Constants.EAST_INDEX] = -999.0F;
          afloat[EnumFaceDirection.Constants.UP_INDEX] = -999.0F;
          afloat[EnumFaceDirection.Constants.SOUTH_INDEX] = -999.0F;
  
!         for (int i = 0; i < 4; ++i)
          {
!             int j = 7 * i;
!             float f = Float.intBitsToFloat(aint[j]);
!             float f1 = Float.intBitsToFloat(aint[j + 1]);
!             float f2 = Float.intBitsToFloat(aint[j + 2]);
  
              if (f < afloat[EnumFaceDirection.Constants.WEST_INDEX])
              {
--- 356,369 ----
          afloat[EnumFaceDirection.Constants.EAST_INDEX] = -999.0F;
          afloat[EnumFaceDirection.Constants.UP_INDEX] = -999.0F;
          afloat[EnumFaceDirection.Constants.SOUTH_INDEX] = -999.0F;
+         int i = p_178408_1_.length / 4;
  
!         for (int j = 0; j < 4; ++j)
          {
!             int k = i * j;
!             float f = Float.intBitsToFloat(aint[k]);
!             float f1 = Float.intBitsToFloat(aint[k + 1]);
!             float f2 = Float.intBitsToFloat(aint[k + 2]);
  
              if (f < afloat[EnumFaceDirection.Constants.WEST_INDEX])
              {
***************
*** 314,341 ****
  
          EnumFaceDirection enumfacedirection = EnumFaceDirection.getFacing(p_178408_2_);
  
!         for (int i1 = 0; i1 < 4; ++i1)
          {
!             int j1 = 7 * i1;
!             EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = enumfacedirection.getVertexInformation(i1);
              float f8 = afloat[enumfacedirection$vertexinformation.xIndex];
              float f3 = afloat[enumfacedirection$vertexinformation.yIndex];
              float f4 = afloat[enumfacedirection$vertexinformation.zIndex];
!             p_178408_1_[j1] = Float.floatToRawIntBits(f8);
!             p_178408_1_[j1 + 1] = Float.floatToRawIntBits(f3);
!             p_178408_1_[j1 + 2] = Float.floatToRawIntBits(f4);
! 
!             for (int k = 0; k < 4; ++k)
!             {
!                 int l = 7 * k;
!                 float f5 = Float.intBitsToFloat(aint[l]);
!                 float f6 = Float.intBitsToFloat(aint[l + 1]);
!                 float f7 = Float.intBitsToFloat(aint[l + 2]);
  
                  if (MathHelper.epsilonEquals(f8, f5) && MathHelper.epsilonEquals(f3, f6) && MathHelper.epsilonEquals(f4, f7))
                  {
!                     p_178408_1_[j1 + 4] = aint[l + 4];
!                     p_178408_1_[j1 + 4 + 1] = aint[l + 4 + 1];
                  }
              }
          }
--- 398,425 ----
  
          EnumFaceDirection enumfacedirection = EnumFaceDirection.getFacing(p_178408_2_);
  
!         for (int j1 = 0; j1 < 4; ++j1)
          {
!             int k1 = i * j1;
!             EnumFaceDirection.VertexInformation enumfacedirection$vertexinformation = enumfacedirection.getVertexInformation(j1);
              float f8 = afloat[enumfacedirection$vertexinformation.xIndex];
              float f3 = afloat[enumfacedirection$vertexinformation.yIndex];
              float f4 = afloat[enumfacedirection$vertexinformation.zIndex];
!             p_178408_1_[k1] = Float.floatToRawIntBits(f8);
!             p_178408_1_[k1 + 1] = Float.floatToRawIntBits(f3);
!             p_178408_1_[k1 + 2] = Float.floatToRawIntBits(f4);
! 
!             for (int l = 0; l < 4; ++l)
!             {
!                 int i1 = i * l;
!                 float f5 = Float.intBitsToFloat(aint[i1]);
!                 float f6 = Float.intBitsToFloat(aint[i1 + 1]);
!                 float f7 = Float.intBitsToFloat(aint[i1 + 2]);
  
                  if (MathHelper.epsilonEquals(f8, f5) && MathHelper.epsilonEquals(f3, f6) && MathHelper.epsilonEquals(f4, f7))
                  {
!                     p_178408_1_[k1 + 4] = aint[i1 + 4];
!                     p_178408_1_[k1 + 4 + 1] = aint[i1 + 4 + 1];
                  }
              }
          }
diff -rc ./client/renderer/block/model/ModelBakery.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/block/model/ModelBakery.java
*** ./client/renderer/block/model/ModelBakery.java	2018-11-18 13:18:46.315274000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/block/model/ModelBakery.java	2017-10-20 21:35:40.526454800 -0700
***************
*** 42,47 ****
--- 42,55 ----
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.registry.IRegistry;
  import net.minecraft.util.registry.RegistrySimple;
+ import net.minecraftforge.common.model.ITransformation;
+ import net.minecraftforge.common.model.TRSRTransformation;
+ import net.minecraftforge.registries.IRegistryDelegate;
+ import optifine.CustomItems;
+ import optifine.Reflector;
+ import optifine.StrUtils;
+ import optifine.TextureUtils;
+ 
  import org.apache.commons.io.IOUtils;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
***************
*** 70,75 ****
--- 78,84 ----
      private final Map<String, ResourceLocation> itemLocations = Maps.<String, ResourceLocation>newLinkedHashMap();
      private final Map<ResourceLocation, ModelBlockDefinition> blockDefinitions = Maps.<ResourceLocation, ModelBlockDefinition>newHashMap();
      private final Map<Item, List<String>> variantNames = Maps.<Item, List<String>>newIdentityHashMap();
+     private static Map<IRegistryDelegate<Item>, Set<String>> customVariantNames = Maps.<IRegistryDelegate<Item>, Set<String>>newHashMap();
  
      public ModelBakery(IResourceManager resourceManagerIn, TextureMap textureMapIn, BlockModelShapes blockModelShapesIn)
      {
***************
*** 96,152 ****
  
          for (Block block : Block.REGISTRY)
          {
!             for (final ResourceLocation resourcelocation : blockstatemapper.getBlockstateLocations(block))
              {
                  try
                  {
!                     ModelBlockDefinition modelblockdefinition = this.getModelBlockDefinition(resourcelocation);
!                     Map<IBlockState, ModelResourceLocation> map = blockstatemapper.getVariants(block);
  
!                     if (modelblockdefinition.hasMultipartData())
!                     {
!                         Collection<ModelResourceLocation> collection = Sets.newHashSet(map.values());
!                         modelblockdefinition.getMultipartData().setStateContainer(block.getBlockState());
!                         Collection<ModelResourceLocation> collection1 = (Collection)this.multipartVariantMap.get(modelblockdefinition);
  
!                         if (collection1 == null)
!                         {
!                             collection1 = Lists.<ModelResourceLocation>newArrayList();
!                             this.multipartVariantMap.put(modelblockdefinition, collection1);
!                         }
  
!                         collection1.addAll(Lists.newArrayList(Iterables.filter(collection, new Predicate<ModelResourceLocation>()
!                         {
!                             public boolean apply(@Nullable ModelResourceLocation p_apply_1_)
!                             {
!                                 return resourcelocation.equals(p_apply_1_);
!                             }
!                         })));
!                     }
  
!                     for (Entry<IBlockState, ModelResourceLocation> entry : map.entrySet())
!                     {
!                         ModelResourceLocation modelresourcelocation = entry.getValue();
  
!                         if (resourcelocation.equals(modelresourcelocation))
!                         {
!                             try
!                             {
!                                 this.variants.put(modelresourcelocation, modelblockdefinition.getVariant(modelresourcelocation.getVariant()));
!                             }
!                             catch (RuntimeException var12)
!                             {
!                                 if (!modelblockdefinition.hasMultipartData())
!                                 {
!                                     LOGGER.warn("Unable to load variant: {} from {}", modelresourcelocation.getVariant(), modelresourcelocation);
!                                 }
!                             }
!                         }
                      }
                  }
!                 catch (Exception exception)
                  {
!                     LOGGER.warn("Unable to load definition {}", resourcelocation, exception);
                  }
              }
          }
--- 105,173 ----
  
          for (Block block : Block.REGISTRY)
          {
!             for (ResourceLocation resourcelocation : blockstatemapper.getBlockstateLocations(block))
              {
                  try
                  {
!                     this.loadBlock(blockstatemapper, block, resourcelocation);
!                 }
!                 catch (Exception exception)
!                 {
!                     LOGGER.warn("Unable to load definition " + resourcelocation, (Throwable)exception);
!                 }
!             }
!         }
!     }
  
!     protected void loadBlock(BlockStateMapper p_loadBlock_1_, Block p_loadBlock_2_, final ResourceLocation p_loadBlock_3_)
!     {
!         ModelBlockDefinition modelblockdefinition = this.getModelBlockDefinition(p_loadBlock_3_);
!         Map<IBlockState, ModelResourceLocation> map = p_loadBlock_1_.getVariants(p_loadBlock_2_);
  
!         if (modelblockdefinition.hasMultipartData())
!         {
!             Collection<ModelResourceLocation> collection = Sets.newHashSet(map.values());
!             modelblockdefinition.getMultipartData().setStateContainer(p_loadBlock_2_.getBlockState());
!             Collection<ModelResourceLocation> collection1 = (Collection)this.multipartVariantMap.get(modelblockdefinition);
  
!             if (collection1 == null)
!             {
!                 collection1 = Lists.<ModelResourceLocation>newArrayList();
!             }
  
!             collection1.addAll(Lists.newArrayList(Iterables.filter(collection, new Predicate<ModelResourceLocation>()
!             {
!                 public boolean apply(@Nullable ModelResourceLocation p_apply_1_)
!                 {
!                     return p_loadBlock_3_.equals(p_apply_1_);
!                 }
!             })));
!             this.registerMultipartVariant(modelblockdefinition, collection1);
!         }
  
!         for (Entry<IBlockState, ModelResourceLocation> entry : map.entrySet())
!         {
!             ModelResourceLocation modelresourcelocation = entry.getValue();
! 
!             if (p_loadBlock_3_.equals(modelresourcelocation))
!             {
!                 try
!                 {
!                     if (Reflector.ForgeItem_delegate.exists())
!                     {
!                         this.registerVariant(modelblockdefinition, modelresourcelocation);
!                     }
!                     else
!                     {
!                         this.variants.put(modelresourcelocation, modelblockdefinition.getVariant(modelresourcelocation.getVariant()));
                      }
                  }
!                 catch (RuntimeException runtimeexception)
                  {
!                     if (!modelblockdefinition.hasMultipartData())
!                     {
!                         LOGGER.warn("Unable to load variant: " + modelresourcelocation.getVariant() + " from " + modelresourcelocation, (Throwable)runtimeexception);
!                     }
                  }
              }
          }
***************
*** 159,164 ****
--- 180,187 ----
          this.loadVariantModels();
          this.loadMultipartVariantModels();
          this.loadItemModels();
+         CustomItems.update();
+         CustomItems.loadModels(this);
      }
  
      private void func_191401_d()
***************
*** 220,231 ****
      private ModelBlockDefinition loadModelBlockDefinition(ResourceLocation location, IResource resource)
      {
          InputStream inputstream = null;
!         ModelBlockDefinition lvt_4_1_;
  
          try
          {
              inputstream = resource.getInputStream();
!             lvt_4_1_ = ModelBlockDefinition.parseFromReader(new InputStreamReader(inputstream, StandardCharsets.UTF_8));
          }
          catch (Exception exception)
          {
--- 243,262 ----
      private ModelBlockDefinition loadModelBlockDefinition(ResourceLocation location, IResource resource)
      {
          InputStream inputstream = null;
!         ModelBlockDefinition modelblockdefinition;
  
          try
          {
              inputstream = resource.getInputStream();
! 
!             if (Reflector.ForgeModelBlockDefinition_parseFromReader2.exists())
!             {
!                 modelblockdefinition = (ModelBlockDefinition)Reflector.call(Reflector.ForgeModelBlockDefinition_parseFromReader2, new InputStreamReader(inputstream, StandardCharsets.UTF_8), location);
!             }
!             else
!             {
!                 modelblockdefinition = ModelBlockDefinition.parseFromReader(new InputStreamReader(inputstream, StandardCharsets.UTF_8));
!             }
          }
          catch (Exception exception)
          {
***************
*** 236,242 ****
              IOUtils.closeQuietly(inputstream);
          }
  
!         return lvt_4_1_;
      }
  
      private ResourceLocation getBlockstateLocation(ResourceLocation location)
--- 267,273 ----
              IOUtils.closeQuietly(inputstream);
          }
  
!         return modelblockdefinition;
      }
  
      private ResourceLocation getBlockstateLocation(ResourceLocation location)
***************
*** 289,308 ****
      {
          Reader reader = null;
          IResource iresource = null;
!         ModelBlock lvt_5_2_;
  
          try
          {
              String s = location.getResourcePath();
  
!             if (!"builtin/generated".equals(s))
              {
!                 if ("builtin/entity".equals(s))
!                 {
!                     lvt_5_2_ = MODEL_ENTITY;
!                     return lvt_5_2_;
!                 }
  
                  if (s.startsWith("builtin/"))
                  {
                      String s2 = s.substring("builtin/".length());
--- 320,339 ----
      {
          Reader reader = null;
          IResource iresource = null;
!         ModelBlock modelblock1;
  
          try
          {
              String s = location.getResourcePath();
  
!             if ("builtin/generated".equals(s))
              {
!                 ModelBlock modelblock4 = MODEL_GENERATED;
!                 return modelblock4;
!             }
  
+             if (!"builtin/entity".equals(s))
+             {
                  if (s.startsWith("builtin/"))
                  {
                      String s2 = s.substring("builtin/".length());
***************
*** 317,333 ****
                  }
                  else
                  {
!                     iresource = this.resourceManager.getResource(this.getModelLocation(location));
                      reader = new InputStreamReader(iresource.getInputStream(), StandardCharsets.UTF_8);
                  }
  
!                 lvt_5_2_ = ModelBlock.deserialize(reader);
!                 lvt_5_2_.name = location.toString();
!                 ModelBlock modelblock1 = lvt_5_2_;
!                 return modelblock1;
              }
  
!             lvt_5_2_ = MODEL_GENERATED;
          }
          finally
          {
--- 348,368 ----
                  }
                  else
                  {
!                     location = this.getModelLocation(location);
!                     iresource = this.resourceManager.getResource(location);
                      reader = new InputStreamReader(iresource.getInputStream(), StandardCharsets.UTF_8);
                  }
  
!                 ModelBlock modelblock3 = ModelBlock.deserialize(reader);
!                 modelblock3.name = location.toString();
!                 String s3 = TextureUtils.getBasePath(location.getResourcePath());
!                 fixModelLocations(modelblock3, s3);
!                 ModelBlock modelblock2 = modelblock3;
!                 return modelblock2;
              }
  
!             ModelBlock modelblock = MODEL_ENTITY;
!             modelblock1 = modelblock;
          }
          finally
          {
***************
*** 335,346 ****
              IOUtils.closeQuietly((Closeable)iresource);
          }
  
!         return lvt_5_2_;
      }
  
      private ResourceLocation getModelLocation(ResourceLocation location)
      {
!         return new ResourceLocation(location.getResourceDomain(), "models/" + location.getResourcePath() + ".json");
      }
  
      private void loadItemModels()
--- 370,395 ----
              IOUtils.closeQuietly((Closeable)iresource);
          }
  
!         return modelblock1;
      }
  
      private ResourceLocation getModelLocation(ResourceLocation location)
      {
!         String s = location.getResourcePath();
! 
!         if (!s.startsWith("mcpatcher") && !s.startsWith("optifine"))
!         {
!             return new ResourceLocation(location.getResourceDomain(), "models/" + location.getResourcePath() + ".json");
!         }
!         else
!         {
!             if (!s.endsWith(".json"))
!             {
!                 location = new ResourceLocation(location.getResourceDomain(), s + ".json");
!             }
! 
!             return location;
!         }
      }
  
      private void loadItemModels()
***************
*** 371,377 ****
          }
      }
  
!     private void loadItemModel(String variantName, ResourceLocation location, ResourceLocation itemName)
      {
          this.itemLocations.put(variantName, location);
  
--- 420,426 ----
          }
      }
  
!     public void loadItemModel(String variantName, ResourceLocation location, ResourceLocation itemName)
      {
          this.itemLocations.put(variantName, location);
  
***************
*** 382,396 ****
                  ModelBlock modelblock = this.loadModel(location);
                  this.models.put(location, modelblock);
              }
!             catch (Exception exception)
              {
!                 LOGGER.warn("Unable to load item model: '{}' for item: '{}'", location, itemName, exception);
              }
          }
      }
  
      private void registerVariantNames()
      {
          this.variantNames.put(Item.getItemFromBlock(Blocks.STONE), Lists.newArrayList("stone", "granite", "granite_smooth", "diorite", "diorite_smooth", "andesite", "andesite_smooth"));
          this.variantNames.put(Item.getItemFromBlock(Blocks.DIRT), Lists.newArrayList("dirt", "coarse_dirt", "podzol"));
          this.variantNames.put(Item.getItemFromBlock(Blocks.PLANKS), Lists.newArrayList("oak_planks", "spruce_planks", "birch_planks", "jungle_planks", "acacia_planks", "dark_oak_planks"));
--- 431,447 ----
                  ModelBlock modelblock = this.loadModel(location);
                  this.models.put(location, modelblock);
              }
!             catch (Exception exception1)
              {
!                 LOGGER.warn("Unable to load item model: '{}' for item: '{}'", location, itemName);
!                 LOGGER.warn(exception1.getClass().getName() + ": " + exception1.getMessage());
              }
          }
      }
  
      private void registerVariantNames()
      {
+         this.variantNames.clear();
          this.variantNames.put(Item.getItemFromBlock(Blocks.STONE), Lists.newArrayList("stone", "granite", "granite_smooth", "diorite", "diorite_smooth", "andesite", "andesite_smooth"));
          this.variantNames.put(Item.getItemFromBlock(Blocks.DIRT), Lists.newArrayList("dirt", "coarse_dirt", "podzol"));
          this.variantNames.put(Item.getItemFromBlock(Blocks.PLANKS), Lists.newArrayList("oak_planks", "spruce_planks", "birch_planks", "jungle_planks", "acacia_planks", "dark_oak_planks"));
***************
*** 438,443 ****
--- 489,499 ----
          this.variantNames.put(Items.OAK_DOOR, Lists.newArrayList("oak_door"));
          this.variantNames.put(Items.BOAT, Lists.newArrayList("oak_boat"));
          this.variantNames.put(Items.field_190929_cY, Lists.newArrayList("totem"));
+ 
+         for (Entry<IRegistryDelegate<Item>, Set<String>> entry : customVariantNames.entrySet())
+         {
+             this.variantNames.put((entry.getKey()).get(), Lists.newArrayList((entry.getValue()).iterator()));
+         }
      }
  
      private List<String> getVariantNames(Item stack)
***************
*** 455,460 ****
--- 511,522 ----
      private ResourceLocation getItemLocation(String location)
      {
          ResourceLocation resourcelocation = new ResourceLocation(location);
+ 
+         if (Reflector.ForgeHooksClient.exists())
+         {
+             resourcelocation = new ResourceLocation(location.replaceAll("#.*", ""));
+         }
+ 
          return new ResourceLocation(resourcelocation.getResourceDomain(), "item/" + resourcelocation.getResourcePath());
      }
  
***************
*** 563,568 ****
--- 625,636 ----
          {
              ResourceLocation resourcelocation = entry.getValue();
              ModelResourceLocation modelresourcelocation = new ModelResourceLocation(entry.getKey(), "inventory");
+ 
+             if (Reflector.ForgeHooksClient.exists())
+             {
+                 modelresourcelocation = (ModelResourceLocation)Reflector.call(Reflector.ModelLoader_getInventoryVariant, entry.getKey());
+             }
+ 
              ModelBlock modelblock = this.models.get(resourcelocation);
  
              if (modelblock != null && modelblock.isResolved())
***************
*** 648,678 ****
      }
  
      @Nullable
!     private IBakedModel bakeModel(ModelBlock modelBlockIn, ModelRotation modelRotationIn, boolean uvLocked)
      {
!         TextureAtlasSprite textureatlassprite = this.sprites.get(new ResourceLocation(modelBlockIn.resolveTextureName("particle")));
!         SimpleBakedModel.Builder simplebakedmodel$builder = (new SimpleBakedModel.Builder(modelBlockIn, modelBlockIn.createOverrides())).setTexture(textureatlassprite);
  
!         if (modelBlockIn.getElements().isEmpty())
          {
              return null;
          }
          else
          {
!             for (BlockPart blockpart : modelBlockIn.getElements())
              {
                  for (EnumFacing enumfacing : blockpart.mapFaces.keySet())
                  {
                      BlockPartFace blockpartface = blockpart.mapFaces.get(enumfacing);
!                     TextureAtlasSprite textureatlassprite1 = this.sprites.get(new ResourceLocation(modelBlockIn.resolveTextureName(blockpartface.texture)));
  
!                     if (blockpartface.cullFace == null)
                      {
!                         simplebakedmodel$builder.addGeneralQuad(this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, modelRotationIn, uvLocked));
                      }
                      else
                      {
!                         simplebakedmodel$builder.addFaceQuad(modelRotationIn.rotateFace(blockpartface.cullFace), this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, modelRotationIn, uvLocked));
                      }
                  }
              }
--- 716,786 ----
      }
  
      @Nullable
!     public IBakedModel bakeModel(ModelBlock modelBlockIn, ModelRotation modelRotationIn, boolean uvLocked)
      {
!     	//1.12.__.
!       	 TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.sprites.get(new ResourceLocation(modelBlockIn.resolveTextureName("particle")));
!            SimpleBakedModel.Builder simplebakedmodel$builder = (new SimpleBakedModel.Builder(modelBlockIn, modelBlockIn.createOverrides())).setTexture(textureatlassprite);
! 
!            if (modelBlockIn.getElements().isEmpty())
!            {
!                return null;
!            }
!            else
!            {
!                for (BlockPart blockpart : modelBlockIn.getElements())
!                {
!                    for (EnumFacing enumfacing : blockpart.mapFaces.keySet())
!                    {
!                        BlockPartFace blockpartface = (BlockPartFace)blockpart.mapFaces.get(enumfacing);
!                        TextureAtlasSprite textureatlassprite1 = (TextureAtlasSprite)this.sprites.get(new ResourceLocation(modelBlockIn.resolveTextureName(blockpartface.texture)));
! 
!                        if (blockpartface.cullFace == null)
!                        {
!                            simplebakedmodel$builder.addGeneralQuad(this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, modelRotationIn, uvLocked));
!                        }
!                        else
!                        {
!                            simplebakedmodel$builder.addFaceQuad(modelRotationIn.rotateFace(blockpartface.cullFace), this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, modelRotationIn, uvLocked));
!                        }
!                    }
!                }
! 
!                return simplebakedmodel$builder.makeBakedModel();
!            }
!     }
! 
!     protected IBakedModel bakeModel(ModelBlock p_bakeModel_1_, ITransformation p_bakeModel_2_, boolean p_bakeModel_3_)
!     {
!         TextureAtlasSprite textureatlassprite = this.sprites.get(new ResourceLocation(p_bakeModel_1_.resolveTextureName("particle")));
!         SimpleBakedModel.Builder simplebakedmodel$builder = (new SimpleBakedModel.Builder(p_bakeModel_1_, p_bakeModel_1_.createOverrides())).setTexture(textureatlassprite);
  
!         if (p_bakeModel_1_.getElements().isEmpty())
          {
              return null;
          }
          else
          {
!             for (BlockPart blockpart : p_bakeModel_1_.getElements())
              {
                  for (EnumFacing enumfacing : blockpart.mapFaces.keySet())
                  {
                      BlockPartFace blockpartface = blockpart.mapFaces.get(enumfacing);
!                     TextureAtlasSprite textureatlassprite1 = this.sprites.get(new ResourceLocation(p_bakeModel_1_.resolveTextureName(blockpartface.texture)));
!                     boolean flag = true;
! 
!                     if (Reflector.ForgeHooksClient.exists())
!                     {
!                         flag = TRSRTransformation.isInteger(p_bakeModel_2_.getMatrix());
!                     }
  
!                     if (blockpartface.cullFace != null && flag)
                      {
!                         simplebakedmodel$builder.addFaceQuad(p_bakeModel_2_.rotate(blockpartface.cullFace), this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, p_bakeModel_2_, p_bakeModel_3_));
                      }
                      else
                      {
!                         simplebakedmodel$builder.addGeneralQuad(this.makeBakedQuad(blockpart, blockpartface, textureatlassprite1, enumfacing, p_bakeModel_2_, p_bakeModel_3_));
                      }
                  }
              }
***************
*** 683,689 ****
  
      private BakedQuad makeBakedQuad(BlockPart p_177589_1_, BlockPartFace p_177589_2_, TextureAtlasSprite p_177589_3_, EnumFacing p_177589_4_, ModelRotation p_177589_5_, boolean p_177589_6_)
      {
!         return this.faceBakery.makeBakedQuad(p_177589_1_.positionFrom, p_177589_1_.positionTo, p_177589_2_, p_177589_3_, p_177589_4_, p_177589_5_, p_177589_1_.partRotation, p_177589_6_, p_177589_1_.shade);
      }
  
      private void loadModelsCheck()
--- 791,802 ----
  
      private BakedQuad makeBakedQuad(BlockPart p_177589_1_, BlockPartFace p_177589_2_, TextureAtlasSprite p_177589_3_, EnumFacing p_177589_4_, ModelRotation p_177589_5_, boolean p_177589_6_)
      {
!         return Reflector.ForgeHooksClient.exists() ? this.makeBakedQuad(p_177589_1_, p_177589_2_, p_177589_3_, p_177589_4_, p_177589_5_, p_177589_6_) : this.faceBakery.makeBakedQuad(p_177589_1_.positionFrom, p_177589_1_.positionTo, p_177589_2_, p_177589_3_, p_177589_4_, p_177589_5_, p_177589_1_.partRotation, p_177589_6_, p_177589_1_.shade);
!     }
! 
!     protected BakedQuad makeBakedQuad(BlockPart p_makeBakedQuad_1_, BlockPartFace p_makeBakedQuad_2_, TextureAtlasSprite p_makeBakedQuad_3_, EnumFacing p_makeBakedQuad_4_, ITransformation p_makeBakedQuad_5_, boolean p_makeBakedQuad_6_)
!     {
!         return this.faceBakery.makeBakedQuad(p_makeBakedQuad_1_.positionFrom, p_makeBakedQuad_1_.positionTo, p_makeBakedQuad_2_, p_makeBakedQuad_3_, p_makeBakedQuad_4_, p_makeBakedQuad_5_, p_makeBakedQuad_1_.partRotation, p_makeBakedQuad_6_, p_makeBakedQuad_1_.shade);
      }
  
      private void loadModelsCheck()
***************
*** 724,732 ****
                  this.models.put(resourcelocation1, modelblock);
                  this.addModelParentLocation(deque, set, modelblock);
              }
!             catch (Exception exception)
              {
!                 LOGGER.warn("In parent chain: {}; unable to load model: '{}'", JOINER.join(this.getParentPath(resourcelocation1)), resourcelocation1, exception);
              }
  
              set.add(resourcelocation1);
--- 837,845 ----
                  this.models.put(resourcelocation1, modelblock);
                  this.addModelParentLocation(deque, set, modelblock);
              }
!             catch (Exception var5)
              {
!                 LOGGER.warn("In parent chain: {}; unable to load model: '{}'", JOINER.join(this.getParentPath(resourcelocation1)), resourcelocation1);
              }
  
              set.add(resourcelocation1);
***************
*** 907,912 ****
--- 1020,1110 ----
          return this.itemModelGenerator.makeItemModel(this.textureMap, p_177582_1_);
      }
  
+     public ModelBlock getModelBlock(ResourceLocation p_getModelBlock_1_)
+     {
+         ModelBlock modelblock = this.models.get(p_getModelBlock_1_);
+         return modelblock;
+     }
+ 
+     public static void fixModelLocations(ModelBlock p_fixModelLocations_0_, String p_fixModelLocations_1_)
+     {
+         ResourceLocation resourcelocation = fixModelLocation(p_fixModelLocations_0_.parentLocation, p_fixModelLocations_1_);
+ 
+         if (resourcelocation != p_fixModelLocations_0_.parentLocation)
+         {
+             p_fixModelLocations_0_.parentLocation = resourcelocation;
+         }
+ 
+         if (p_fixModelLocations_0_.textures != null)
+         {
+             for (Entry<String, String> entry : p_fixModelLocations_0_.textures.entrySet())
+             {
+                 String s = entry.getValue();
+                 String s1 = fixResourcePath(s, p_fixModelLocations_1_);
+ 
+                 if (s1 != s)
+                 {
+                     entry.setValue(s1);
+                 }
+             }
+         }
+     }
+ 
+     public static ResourceLocation fixModelLocation(ResourceLocation p_fixModelLocation_0_, String p_fixModelLocation_1_)
+     {
+         if (p_fixModelLocation_0_ != null && p_fixModelLocation_1_ != null)
+         {
+             if (!p_fixModelLocation_0_.getResourceDomain().equals("minecraft"))
+             {
+                 return p_fixModelLocation_0_;
+             }
+             else
+             {
+                 String s = p_fixModelLocation_0_.getResourcePath();
+                 String s1 = fixResourcePath(s, p_fixModelLocation_1_);
+ 
+                 if (s1 != s)
+                 {
+                     p_fixModelLocation_0_ = new ResourceLocation(p_fixModelLocation_0_.getResourceDomain(), s1);
+                 }
+ 
+                 return p_fixModelLocation_0_;
+             }
+         }
+         else
+         {
+             return p_fixModelLocation_0_;
+         }
+     }
+ 
+     private static String fixResourcePath(String p_fixResourcePath_0_, String p_fixResourcePath_1_)
+     {
+         p_fixResourcePath_0_ = TextureUtils.fixResourcePath(p_fixResourcePath_0_, p_fixResourcePath_1_);
+         p_fixResourcePath_0_ = StrUtils.removeSuffix(p_fixResourcePath_0_, ".json");
+         p_fixResourcePath_0_ = StrUtils.removeSuffix(p_fixResourcePath_0_, ".png");
+         return p_fixResourcePath_0_;
+     }
+ 
+     protected void registerMultipartVariant(ModelBlockDefinition p_registerMultipartVariant_1_, Collection<ModelResourceLocation> p_registerMultipartVariant_2_)
+     {
+         this.multipartVariantMap.put(p_registerMultipartVariant_1_, p_registerMultipartVariant_2_);
+     }
+ 
+     public static void registerItemVariants(Item p_registerItemVariants_0_, ResourceLocation... p_registerItemVariants_1_)
+     {
+         IRegistryDelegate iregistrydelegate = (IRegistryDelegate)Reflector.getFieldValue(p_registerItemVariants_0_, Reflector.ForgeItem_delegate);
+ 
+         if (!customVariantNames.containsKey(iregistrydelegate))
+         {
+             customVariantNames.put(iregistrydelegate, Sets.newHashSet());
+         }
+ 
+         for (ResourceLocation resourcelocation : p_registerItemVariants_1_)
+         {
+             (customVariantNames.get(iregistrydelegate)).add(resourcelocation.toString());
+         }
+     }
+ 
      static
      {
          BUILT_IN_MODELS.put("missing", MISSING_MODEL_MESH);
diff -rc ./client/renderer/block/model/ModelRotation.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/block/model/ModelRotation.java
*** ./client/renderer/block/model/ModelRotation.java	2018-11-18 13:18:46.418216000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/block/model/ModelRotation.java	2017-10-20 21:35:40.556954100 -0700
***************
*** 2,13 ****
  
  import com.google.common.collect.Maps;
  import java.util.Map;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.math.MathHelper;
  import org.lwjgl.util.vector.Matrix4f;
  import org.lwjgl.util.vector.Vector3f;
  
! public enum ModelRotation
  {
      X0_Y0(0, 0),
      X0_Y90(0, 90),
--- 2,21 ----
  
  import com.google.common.collect.Maps;
  import java.util.Map;
+ import java.util.Optional;
+ 
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.math.MathHelper;
+ import net.minecraftforge.common.model.IModelPart;
+ import net.minecraftforge.common.model.IModelState;
+ import net.minecraftforge.common.model.ITransformation;
+ import net.minecraftforge.common.model.TRSRTransformation;
+ import optifine.Reflector;
+ 
  import org.lwjgl.util.vector.Matrix4f;
  import org.lwjgl.util.vector.Vector3f;
  
! public enum ModelRotation implements IModelState, ITransformation
  {
      X0_Y0(0, 0),
      X0_Y90(0, 90),
***************
*** 106,111 ****
--- 114,139 ----
          return MAP_ROTATIONS.get(Integer.valueOf(combineXY(MathHelper.normalizeAngle(x, 360), MathHelper.normalizeAngle(y, 360))));
      }
  
+     public Optional<TRSRTransformation> apply(Optional <? extends IModelPart > p_apply_1_)
+     {
+         return (Optional)Reflector.call(Reflector.ForgeHooksClient_applyTransform, this.getMatrix(), p_apply_1_);
+     }
+ 
+     public javax.vecmath.Matrix4f getMatrix()
+     {
+         return Reflector.ForgeHooksClient_getMatrix.exists() ? (javax.vecmath.Matrix4f)Reflector.call(Reflector.ForgeHooksClient_getMatrix, this) : new javax.vecmath.Matrix4f();
+     }
+ 
+     public EnumFacing rotate(EnumFacing p_rotate_1_)
+     {
+         return this.rotateFace(p_rotate_1_);
+     }
+ 
+     public int rotate(EnumFacing p_rotate_1_, int p_rotate_2_)
+     {
+         return this.rotateVertex(p_rotate_1_, p_rotate_2_);
+     }
+ 
      static {
          for (ModelRotation modelrotation : values())
          {
diff -rc ./client/renderer/BlockFluidRenderer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/BlockFluidRenderer.java
*** ./client/renderer/BlockFluidRenderer.java	2018-11-18 13:18:45.527730000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/BlockFluidRenderer.java	2017-10-20 21:35:39.858782500 -0700
***************
*** 2,7 ****
--- 2,8 ----
  
  import net.minecraft.block.Block;
  import net.minecraft.block.BlockLiquid;
+ import net.minecraft.block.BlockSlab;
  import net.minecraft.block.material.Material;
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.client.Minecraft;
***************
*** 13,18 ****
--- 14,23 ----
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.world.IBlockAccess;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.RenderEnv;
+ import shadersmod.client.SVertexBuilder;
  
  public class BlockFluidRenderer
  {
***************
*** 39,270 ****
  
      public boolean renderFluid(IBlockAccess blockAccess, IBlockState blockStateIn, BlockPos blockPosIn, BufferBuilder worldRendererIn)
      {
!         BlockLiquid blockliquid = (BlockLiquid)blockStateIn.getBlock();
!         boolean flag = blockStateIn.getMaterial() == Material.LAVA;
!         TextureAtlasSprite[] atextureatlassprite = flag ? this.atlasSpritesLava : this.atlasSpritesWater;
!         int i = this.blockColors.colorMultiplier(blockStateIn, blockAccess, blockPosIn, 0);
!         float f = (float)(i >> 16 & 255) / 255.0F;
!         float f1 = (float)(i >> 8 & 255) / 255.0F;
!         float f2 = (float)(i & 255) / 255.0F;
!         boolean flag1 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.UP);
!         boolean flag2 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.DOWN);
!         boolean[] aboolean = new boolean[] {blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.NORTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.SOUTH), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.WEST), blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.EAST)};
  
!         if (!flag1 && !flag2 && !aboolean[0] && !aboolean[1] && !aboolean[2] && !aboolean[3])
          {
!             return false;
!         }
!         else
!         {
!             boolean flag3 = false;
!             float f3 = 0.5F;
!             float f4 = 1.0F;
!             float f5 = 0.8F;
!             float f6 = 0.6F;
!             Material material = blockStateIn.getMaterial();
!             float f7 = this.getFluidHeight(blockAccess, blockPosIn, material);
!             float f8 = this.getFluidHeight(blockAccess, blockPosIn.south(), material);
!             float f9 = this.getFluidHeight(blockAccess, blockPosIn.east().south(), material);
!             float f10 = this.getFluidHeight(blockAccess, blockPosIn.east(), material);
!             double d0 = (double)blockPosIn.getX();
!             double d1 = (double)blockPosIn.getY();
!             double d2 = (double)blockPosIn.getZ();
!             float f11 = 0.001F;
! 
!             if (flag1)
              {
!                 flag3 = true;
!                 float f12 = BlockLiquid.getSlopeAngle(blockAccess, blockPosIn, material, blockStateIn);
!                 TextureAtlasSprite textureatlassprite = f12 > -999.0F ? atextureatlassprite[1] : atextureatlassprite[0];
!                 f7 -= 0.001F;
!                 f8 -= 0.001F;
!                 f9 -= 0.001F;
!                 f10 -= 0.001F;
!                 float f13;
!                 float f14;
!                 float f15;
!                 float f16;
!                 float f17;
!                 float f18;
!                 float f19;
!                 float f20;
! 
!                 if (f12 < -999.0F)
!                 {
!                     f13 = textureatlassprite.getInterpolatedU(0.0D);
!                     f17 = textureatlassprite.getInterpolatedV(0.0D);
!                     f14 = f13;
!                     f18 = textureatlassprite.getInterpolatedV(16.0D);
!                     f15 = textureatlassprite.getInterpolatedU(16.0D);
!                     f19 = f18;
!                     f16 = f15;
!                     f20 = f17;
!                 }
!                 else
!                 {
!                     float f21 = MathHelper.sin(f12) * 0.25F;
!                     float f22 = MathHelper.cos(f12) * 0.25F;
!                     float f23 = 8.0F;
!                     f13 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 - f21) * 16.0F));
!                     f17 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 + f21) * 16.0F));
!                     f14 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 + f21) * 16.0F));
!                     f18 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 + f21) * 16.0F));
!                     f15 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 + f21) * 16.0F));
!                     f19 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 - f21) * 16.0F));
!                     f16 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 - f21) * 16.0F));
!                     f20 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 - f21) * 16.0F));
!                 }
! 
!                 int k2 = blockStateIn.getPackedLightmapCoords(blockAccess, blockPosIn);
!                 int l2 = k2 >> 16 & 65535;
!                 int i3 = k2 & 65535;
!                 float f24 = 1.0F * f;
!                 float f25 = 1.0F * f1;
!                 float f26 = 1.0F * f2;
!                 worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
!                 worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
! 
!                 if (blockliquid.shouldRenderSides(blockAccess, blockPosIn.up()))
!                 {
!                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
!                 }
              }
  
!             if (flag2)
!             {
!                 float f35 = atextureatlassprite[0].getMinU();
!                 float f36 = atextureatlassprite[0].getMaxU();
!                 float f37 = atextureatlassprite[0].getMinV();
!                 float f38 = atextureatlassprite[0].getMaxV();
!                 int l1 = blockStateIn.getPackedLightmapCoords(blockAccess, blockPosIn.down());
!                 int i2 = l1 >> 16 & 65535;
!                 int j2 = l1 & 65535;
!                 worldRendererIn.pos(d0, d1, d2 + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f35, (double)f38).lightmap(i2, j2).endVertex();
!                 worldRendererIn.pos(d0, d1, d2).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f35, (double)f37).lightmap(i2, j2).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1, d2).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f36, (double)f37).lightmap(i2, j2).endVertex();
!                 worldRendererIn.pos(d0 + 1.0D, d1, d2 + 1.0D).color(0.5F, 0.5F, 0.5F, 1.0F).tex((double)f36, (double)f38).lightmap(i2, j2).endVertex();
!                 flag3 = true;
!             }
  
!             for (int i1 = 0; i1 < 4; ++i1)
              {
!                 int j1 = 0;
!                 int k1 = 0;
  
!                 if (i1 == 0)
                  {
!                     --k1;
!                 }
  
!                 if (i1 == 1)
!                 {
!                     ++k1;
!                 }
  
!                 if (i1 == 2)
!                 {
!                     --j1;
!                 }
  
!                 if (i1 == 3)
!                 {
!                     ++j1;
                  }
  
!                 BlockPos blockpos = blockPosIn.add(j1, 0, k1);
!                 TextureAtlasSprite textureatlassprite1 = atextureatlassprite[1];
! 
!                 if (!flag)
                  {
!                     Block block = blockAccess.getBlockState(blockpos).getBlock();
! 
!                     if (block == Blocks.GLASS || block == Blocks.STAINED_GLASS)
!                     {
!                         textureatlassprite1 = this.atlasSpriteWaterOverlay;
!                     }
                  }
  
!                 if (aboolean[i1])
                  {
!                     float f39;
!                     float f40;
!                     double d3;
!                     double d4;
!                     double d5;
!                     double d6;
  
                      if (i1 == 0)
                      {
!                         f39 = f7;
!                         f40 = f10;
!                         d3 = d0;
!                         d5 = d0 + 1.0D;
!                         d4 = d2 + 0.0010000000474974513D;
!                         d6 = d2 + 0.0010000000474974513D;
                      }
!                     else if (i1 == 1)
                      {
!                         f39 = f9;
!                         f40 = f8;
!                         d3 = d0 + 1.0D;
!                         d5 = d0;
!                         d4 = d2 + 1.0D - 0.0010000000474974513D;
!                         d6 = d2 + 1.0D - 0.0010000000474974513D;
                      }
!                     else if (i1 == 2)
                      {
!                         f39 = f8;
!                         f40 = f7;
!                         d3 = d0 + 0.0010000000474974513D;
!                         d5 = d0 + 0.0010000000474974513D;
!                         d4 = d2 + 1.0D;
!                         d6 = d2;
                      }
!                     else
                      {
!                         f39 = f10;
!                         f40 = f9;
!                         d3 = d0 + 1.0D - 0.0010000000474974513D;
!                         d5 = d0 + 1.0D - 0.0010000000474974513D;
!                         d4 = d2;
!                         d6 = d2 + 1.0D;
                      }
  
!                     flag3 = true;
!                     float f41 = textureatlassprite1.getInterpolatedU(0.0D);
!                     float f27 = textureatlassprite1.getInterpolatedU(8.0D);
!                     float f28 = textureatlassprite1.getInterpolatedV((double)((1.0F - f39) * 16.0F * 0.5F));
!                     float f29 = textureatlassprite1.getInterpolatedV((double)((1.0F - f40) * 16.0F * 0.5F));
!                     float f30 = textureatlassprite1.getInterpolatedV(8.0D);
!                     int j = blockStateIn.getPackedLightmapCoords(blockAccess, blockpos);
!                     int k = j >> 16 & 65535;
!                     int l = j & 65535;
!                     float f31 = i1 < 2 ? 0.8F : 0.6F;
!                     float f32 = 1.0F * f31 * f;
!                     float f33 = 1.0F * f31 * f1;
!                     float f34 = 1.0F * f31 * f2;
!                     worldRendererIn.pos(d3, d1 + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d5, d1 + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
!                     worldRendererIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
  
!                     if (textureatlassprite1 != this.atlasSpriteWaterOverlay)
                      {
!                         worldRendererIn.pos(d3, d1 + 0.0D, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f30).lightmap(k, l).endVertex();
!                         worldRendererIn.pos(d5, d1 + 0.0D, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f30).lightmap(k, l).endVertex();
!                         worldRendererIn.pos(d5, d1 + (double)f40, d6).color(f32, f33, f34, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
!                         worldRendererIn.pos(d3, d1 + (double)f39, d4).color(f32, f33, f34, 1.0F).tex((double)f41, (double)f28).lightmap(k, l).endVertex();
                      }
                  }
              }
  
!             return flag3;
          }
      }
  
      private float getFluidHeight(IBlockAccess blockAccess, BlockPos blockPosIn, Material blockMaterial)
--- 44,340 ----
  
      public boolean renderFluid(IBlockAccess blockAccess, IBlockState blockStateIn, BlockPos blockPosIn, BufferBuilder worldRendererIn)
      {
!         boolean flag3;
  
!         try
          {
!             if (Config.isShaders())
              {
!                 SVertexBuilder.pushEntity(blockStateIn, blockPosIn, blockAccess, worldRendererIn);
              }
  
!             BlockLiquid blockliquid = (BlockLiquid)blockStateIn.getBlock();
!             boolean flag = blockStateIn.getMaterial() == Material.LAVA;
!             TextureAtlasSprite[] atextureatlassprite = flag ? this.atlasSpritesLava : this.atlasSpritesWater;
!             RenderEnv renderenv = worldRendererIn.getRenderEnv(blockAccess, blockStateIn, blockPosIn);
!             int i = CustomColors.getFluidColor(blockAccess, blockStateIn, blockPosIn, renderenv);
!             float f = (float)(i >> 16 & 255) / 255.0F;
!             float f1 = (float)(i >> 8 & 255) / 255.0F;
!             float f2 = (float)(i & 255) / 255.0F;
!             boolean flag1 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.UP);
!             boolean flag2 = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.DOWN);
!             boolean[] aboolean = renderenv.getBorderFlags();
!             aboolean[0] = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.NORTH);
!             aboolean[1] = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.SOUTH);
!             aboolean[2] = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.WEST);
!             aboolean[3] = blockStateIn.shouldSideBeRendered(blockAccess, blockPosIn, EnumFacing.EAST);
  
!             if (flag1 || flag2 || aboolean[0] || aboolean[1] || aboolean[2] || aboolean[3])
              {
!                 flag3 = false;
!                 float f3 = 0.5F;
!                 float f4 = 1.0F;
!                 float f5 = 0.8F;
!                 float f6 = 0.6F;
!                 Material material = blockStateIn.getMaterial();
!                 float f7 = this.getFluidHeight(blockAccess, blockPosIn, material);
!                 float f8 = this.getFluidHeight(blockAccess, blockPosIn.south(), material);
!                 float f9 = this.getFluidHeight(blockAccess, blockPosIn.east().south(), material);
!                 float f10 = this.getFluidHeight(blockAccess, blockPosIn.east(), material);
!                 double d0 = (double)blockPosIn.getX();
!                 double d1 = (double)blockPosIn.getY();
!                 double d2 = (double)blockPosIn.getZ();
!                 float f11 = 0.001F;
  
!                 if (flag1)
                  {
!                     flag3 = true;
!                     float f12 = BlockLiquid.getSlopeAngle(blockAccess, blockPosIn, material, blockStateIn);
!                     TextureAtlasSprite textureatlassprite = f12 > -999.0F ? atextureatlassprite[1] : atextureatlassprite[0];
!                     worldRendererIn.setSprite(textureatlassprite);
!                     f7 -= 0.001F;
!                     f8 -= 0.001F;
!                     f9 -= 0.001F;
!                     f10 -= 0.001F;
!                     float f13;
!                     float f14;
!                     float f15;
!                     float f16;
!                     float f17;
!                     float f18;
!                     float f19;
!                     float f20;
  
!                     if (f12 < -999.0F)
!                     {
!                         f13 = textureatlassprite.getInterpolatedU(0.0D);
!                         f17 = textureatlassprite.getInterpolatedV(0.0D);
!                         f14 = f13;
!                         f18 = textureatlassprite.getInterpolatedV(16.0D);
!                         f15 = textureatlassprite.getInterpolatedU(16.0D);
!                         f19 = f18;
!                         f16 = f15;
!                         f20 = f17;
!                     }
!                     else
!                     {
!                         float f21 = MathHelper.sin(f12) * 0.25F;
!                         float f22 = MathHelper.cos(f12) * 0.25F;
!                         float f23 = 8.0F;
!                         f13 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 - f21) * 16.0F));
!                         f17 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 + f21) * 16.0F));
!                         f14 = textureatlassprite.getInterpolatedU((double)(8.0F + (-f22 + f21) * 16.0F));
!                         f18 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 + f21) * 16.0F));
!                         f15 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 + f21) * 16.0F));
!                         f19 = textureatlassprite.getInterpolatedV((double)(8.0F + (f22 - f21) * 16.0F));
!                         f16 = textureatlassprite.getInterpolatedU((double)(8.0F + (f22 - f21) * 16.0F));
!                         f20 = textureatlassprite.getInterpolatedV((double)(8.0F + (-f22 - f21) * 16.0F));
!                     }
  
!                     int k2 = blockStateIn.getPackedLightmapCoords(blockAccess, blockPosIn);
!                     int l2 = k2 >> 16 & 65535;
!                     int i3 = k2 & 65535;
!                     float f24 = 1.0F * f;
!                     float f25 = 1.0F * f1;
!                     float f26 = 1.0F * f2;
!                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
!                     worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
  
!                     if (blockliquid.shouldRenderSides(blockAccess, blockPosIn.up()))
!                     {
!                         worldRendererIn.pos(d0 + 0.0D, d1 + (double)f7, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f13, (double)f17).lightmap(l2, i3).endVertex();
!                         worldRendererIn.pos(d0 + 1.0D, d1 + (double)f10, d2 + 0.0D).color(f24, f25, f26, 1.0F).tex((double)f16, (double)f20).lightmap(l2, i3).endVertex();
!                         worldRendererIn.pos(d0 + 1.0D, d1 + (double)f9, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f15, (double)f19).lightmap(l2, i3).endVertex();
!                         worldRendererIn.pos(d0 + 0.0D, d1 + (double)f8, d2 + 1.0D).color(f24, f25, f26, 1.0F).tex((double)f14, (double)f18).lightmap(l2, i3).endVertex();
!                     }
                  }
  
!                 if (flag2)
                  {
!                     float f38 = atextureatlassprite[0].getMinU();
!                     float f39 = atextureatlassprite[0].getMaxU();
!                     float f40 = atextureatlassprite[0].getMinV();
!                     float f41 = atextureatlassprite[0].getMaxV();
!                     int l1 = blockStateIn.getPackedLightmapCoords(blockAccess, blockPosIn.down());
!                     int i2 = l1 >> 16 & 65535;
!                     int j2 = l1 & 65535;
!                     worldRendererIn.pos(d0, d1, d2 + 1.0D).color(f * 0.5F, f1 * 0.5F, f2 * 0.5F, 1.0F).tex((double)f38, (double)f41).lightmap(i2, j2).endVertex();
!                     worldRendererIn.pos(d0, d1, d2).color(f * 0.5F, f1 * 0.5F, f2 * 0.5F, 1.0F).tex((double)f38, (double)f40).lightmap(i2, j2).endVertex();
!                     worldRendererIn.pos(d0 + 1.0D, d1, d2).color(f * 0.5F, f1 * 0.5F, f2 * 0.5F, 1.0F).tex((double)f39, (double)f40).lightmap(i2, j2).endVertex();
!                     worldRendererIn.pos(d0 + 1.0D, d1, d2 + 1.0D).color(f * 0.5F, f1 * 0.5F, f2 * 0.5F, 1.0F).tex((double)f39, (double)f41).lightmap(i2, j2).endVertex();
!                     flag3 = true;
                  }
  
!                 for (int i1 = 0; i1 < 4; ++i1)
                  {
!                     int j1 = 0;
!                     int k1 = 0;
  
                      if (i1 == 0)
                      {
!                         --k1;
                      }
! 
!                     if (i1 == 1)
                      {
!                         ++k1;
                      }
! 
!                     if (i1 == 2)
                      {
!                         --j1;
                      }
! 
!                     if (i1 == 3)
                      {
!                         ++j1;
                      }
  
!                     BlockPos blockpos = blockPosIn.add(j1, 0, k1);
!                     TextureAtlasSprite textureatlassprite1 = atextureatlassprite[1];
!                     worldRendererIn.setSprite(textureatlassprite1);
!                     float f42 = 0.0F;
!                     float f43 = 0.0F;
! 
!                     if (!flag)
!                     {
!                         IBlockState iblockstate = blockAccess.getBlockState(blockpos);
!                         Block block = iblockstate.getBlock();
! 
!                         if (block == Blocks.GLASS || block == Blocks.STAINED_GLASS || block == Blocks.BEACON || block == Blocks.SLIME_BLOCK)
!                         {
!                             textureatlassprite1 = this.atlasSpriteWaterOverlay;
!                             worldRendererIn.setSprite(textureatlassprite1);
!                         }
! 
!                         if (block == Blocks.FARMLAND || block == Blocks.GRASS_PATH)
!                         {
!                             f42 = 0.9375F;
!                             f43 = 0.9375F;
!                         }
! 
!                         if (block instanceof BlockSlab)
!                         {
!                             BlockSlab blockslab = (BlockSlab)block;
! 
!                             if (!blockslab.isDouble() && iblockstate.getValue(BlockSlab.HALF) == BlockSlab.EnumBlockHalf.BOTTOM)
!                             {
!                                 f42 = 0.5F;
!                                 f43 = 0.5F;
!                             }
!                         }
!                     }
  
!                     if (aboolean[i1])
                      {
!                         float f44;
!                         float f45;
!                         double d3;
!                         double d4;
!                         double d5;
!                         double d6;
! 
!                         if (i1 == 0)
!                         {
!                             f44 = f7;
!                             f45 = f10;
!                             d3 = d0;
!                             d5 = d0 + 1.0D;
!                             d4 = d2 + 0.0010000000474974513D;
!                             d6 = d2 + 0.0010000000474974513D;
!                         }
!                         else if (i1 == 1)
!                         {
!                             f44 = f9;
!                             f45 = f8;
!                             d3 = d0 + 1.0D;
!                             d5 = d0;
!                             d4 = d2 + 1.0D - 0.0010000000474974513D;
!                             d6 = d2 + 1.0D - 0.0010000000474974513D;
!                         }
!                         else if (i1 == 2)
!                         {
!                             f44 = f8;
!                             f45 = f7;
!                             d3 = d0 + 0.0010000000474974513D;
!                             d5 = d0 + 0.0010000000474974513D;
!                             d4 = d2 + 1.0D;
!                             d6 = d2;
!                         }
!                         else
!                         {
!                             f44 = f10;
!                             f45 = f9;
!                             d3 = d0 + 1.0D - 0.0010000000474974513D;
!                             d5 = d0 + 1.0D - 0.0010000000474974513D;
!                             d4 = d2;
!                             d6 = d2 + 1.0D;
!                         }
! 
!                         if (f44 > f42 || f45 > f43)
!                         {
!                             f42 = Math.min(f42, f44);
!                             f43 = Math.min(f43, f45);
! 
!                             if (f42 > f11)
!                             {
!                                 f42 -= f11;
!                             }
! 
!                             if (f43 > f11)
!                             {
!                                 f43 -= f11;
!                             }
! 
!                             flag3 = true;
!                             float f27 = textureatlassprite1.getInterpolatedU(0.0D);
!                             float f28 = textureatlassprite1.getInterpolatedU(8.0D);
!                             float f29 = textureatlassprite1.getInterpolatedV((double)((1.0F - f44) * 16.0F * 0.5F));
!                             float f30 = textureatlassprite1.getInterpolatedV((double)((1.0F - f45) * 16.0F * 0.5F));
!                             float f31 = textureatlassprite1.getInterpolatedV(8.0D);
!                             float f32 = textureatlassprite1.getInterpolatedV((double)((1.0F - f42) * 16.0F * 0.5F));
!                             float f33 = textureatlassprite1.getInterpolatedV((double)((1.0F - f43) * 16.0F * 0.5F));
!                             int j = blockStateIn.getPackedLightmapCoords(blockAccess, blockpos);
!                             int k = j >> 16 & 65535;
!                             int l = j & 65535;
!                             float f34 = i1 < 2 ? 0.8F : 0.6F;
!                             float f35 = 1.0F * f34 * f;
!                             float f36 = 1.0F * f34 * f1;
!                             float f37 = 1.0F * f34 * f2;
!                             worldRendererIn.pos(d3, d1 + (double)f44, d4).color(f35, f36, f37, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
!                             worldRendererIn.pos(d5, d1 + (double)f45, d6).color(f35, f36, f37, 1.0F).tex((double)f28, (double)f30).lightmap(k, l).endVertex();
!                             worldRendererIn.pos(d5, d1 + (double)f43, d6).color(f35, f36, f37, 1.0F).tex((double)f28, (double)f33).lightmap(k, l).endVertex();
!                             worldRendererIn.pos(d3, d1 + (double)f42, d4).color(f35, f36, f37, 1.0F).tex((double)f27, (double)f32).lightmap(k, l).endVertex();
! 
!                             if (textureatlassprite1 != this.atlasSpriteWaterOverlay)
!                             {
!                                 worldRendererIn.pos(d3, d1 + (double)f42, d4).color(f35, f36, f37, 1.0F).tex((double)f27, (double)f32).lightmap(k, l).endVertex();
!                                 worldRendererIn.pos(d5, d1 + (double)f43, d6).color(f35, f36, f37, 1.0F).tex((double)f28, (double)f33).lightmap(k, l).endVertex();
!                                 worldRendererIn.pos(d5, d1 + (double)f45, d6).color(f35, f36, f37, 1.0F).tex((double)f28, (double)f30).lightmap(k, l).endVertex();
!                                 worldRendererIn.pos(d3, d1 + (double)f44, d4).color(f35, f36, f37, 1.0F).tex((double)f27, (double)f29).lightmap(k, l).endVertex();
!                             }
!                         }
                      }
                  }
+ 
+                 worldRendererIn.setSprite((TextureAtlasSprite)null);
+                 boolean flag4 = flag3;
+                 return flag4;
              }
  
!             flag3 = false;
          }
+         finally
+         {
+             if (Config.isShaders())
+             {
+                 SVertexBuilder.popEntity(worldRendererIn);
+             }
+         }
+ 
+         return flag3;
      }
  
      private float getFluidHeight(IBlockAccess blockAccess, BlockPos blockPosIn, Material blockMaterial)
diff -rc ./client/renderer/BlockModelRenderer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/BlockModelRenderer.java
*** ./client/renderer/BlockModelRenderer.java	2018-11-18 13:18:45.544720000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/BlockModelRenderer.java	2017-10-20 21:35:39.873781500 -0700
***************
*** 7,18 ****
--- 7,20 ----
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.renderer.block.model.BakedQuad;
+ import net.minecraft.client.renderer.block.model.FaceBakery;
  import net.minecraft.client.renderer.block.model.IBakedModel;
  import net.minecraft.client.renderer.color.BlockColors;
  import net.minecraft.client.renderer.texture.TextureUtil;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
  import net.minecraft.crash.CrashReport;
  import net.minecraft.crash.CrashReportCategory;
+ import net.minecraft.util.BlockRenderLayer;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.math.BlockPos;
***************
*** 20,33 ****
--- 22,51 ----
  import net.minecraft.util.math.Vec3d;
  import net.minecraft.util.math.Vec3i;
  import net.minecraft.world.IBlockAccess;
+ import optifine.BetterSnow;
+ import optifine.BlockModelCustomizer;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.ListQuadsOverlay;
+ import optifine.Reflector;
+ import optifine.ReflectorForge;
+ import optifine.RenderEnv;
+ import shadersmod.client.SVertexBuilder;
  
  public class BlockModelRenderer
  {
      private final BlockColors blockColors;
+     private static float aoLightValueOpaque = 0.2F;
+     private static final BlockRenderLayer[] OVERLAY_LAYERS = new BlockRenderLayer[] {BlockRenderLayer.CUTOUT, BlockRenderLayer.CUTOUT_MIPPED, BlockRenderLayer.TRANSLUCENT};
  
      public BlockModelRenderer(BlockColors blockColorsIn)
      {
          this.blockColors = blockColorsIn;
+ 
+         if (Reflector.ForgeModContainer_forgeLightPipelineEnabled.exists())
+         {
+             Reflector.setFieldValue(Reflector.ForgeModContainer_forgeLightPipelineEnabled, Boolean.valueOf(false));
+         }
      }
  
      public boolean renderModel(IBlockAccess blockAccessIn, IBakedModel modelIn, IBlockState blockStateIn, BlockPos blockPosIn, BufferBuilder buffer, boolean checkSides)
***************
*** 37,51 ****
  
      public boolean renderModel(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
      {
!         boolean flag = Minecraft.isAmbientOcclusionEnabled() && stateIn.getLightValue() == 0 && modelIn.isAmbientOcclusion();
  
          try
          {
!             return flag ? this.renderModelSmooth(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand) : this.renderModelFlat(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand);
          }
!         catch (Throwable throwable)
          {
!             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Tesselating block model");
              CrashReportCategory crashreportcategory = crashreport.makeCategory("Block model being tesselated");
              CrashReportCategory.addBlockInfo(crashreportcategory, posIn, stateIn);
              crashreportcategory.addCrashSection("Using AO", Boolean.valueOf(flag));
--- 55,93 ----
  
      public boolean renderModel(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
      {
!         boolean flag = Minecraft.isAmbientOcclusionEnabled() && ReflectorForge.getLightValue(stateIn, worldIn, posIn) == 0 && modelIn.isAmbientOcclusion();
  
          try
          {
!             if (Config.isShaders())
!             {
!                 SVertexBuilder.pushEntity(stateIn, posIn, worldIn, buffer);
!             }
! 
!             if (!Config.isAlternateBlocks())
!             {
!                 rand = 0L;
!             }
! 
!             RenderEnv renderenv = buffer.getRenderEnv(worldIn, stateIn, posIn);
!             modelIn = BlockModelCustomizer.getRenderModel(modelIn, stateIn, renderenv);
!             boolean flag1 = flag ? this.renderModelSmooth(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand) : this.renderModelFlat(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand);
! 
!             if (flag1)
!             {
!                 this.renderOverlayModels(worldIn, modelIn, stateIn, posIn, buffer, checkSides, rand, renderenv, flag);
!             }
! 
!             if (Config.isShaders())
!             {
!                 SVertexBuilder.popEntity(buffer);
!             }
! 
!             return flag1;
          }
!         catch (Throwable throwable1)
          {
!             CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Tesselating block model");
              CrashReportCategory crashreportcategory = crashreport.makeCategory("Block model being tesselated");
              CrashReportCategory.addBlockInfo(crashreportcategory, posIn, stateIn);
              crashreportcategory.addCrashSection("Using AO", Boolean.valueOf(flag));
***************
*** 56,72 ****
      public boolean renderModelSmooth(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
      {
          boolean flag = false;
!         float[] afloat = new float[EnumFacing.values().length * 2];
!         BitSet bitset = new BitSet(3);
!         BlockModelRenderer.AmbientOcclusionFace blockmodelrenderer$ambientocclusionface = new BlockModelRenderer.AmbientOcclusionFace();
  
!         for (EnumFacing enumfacing : EnumFacing.values())
          {
              List<BakedQuad> list = modelIn.getQuads(stateIn, enumfacing, rand);
  
              if (!list.isEmpty() && (!checkSides || stateIn.shouldSideBeRendered(worldIn, posIn, enumfacing)))
              {
!                 this.renderQuadsSmooth(worldIn, stateIn, posIn, buffer, list, afloat, bitset, blockmodelrenderer$ambientocclusionface);
                  flag = true;
              }
          }
--- 98,113 ----
      public boolean renderModelSmooth(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
      {
          boolean flag = false;
!         RenderEnv renderenv = buffer.getRenderEnv(worldIn, stateIn, posIn);
  
!         for (EnumFacing enumfacing : EnumFacing.VALUES)
          {
              List<BakedQuad> list = modelIn.getQuads(stateIn, enumfacing, rand);
  
              if (!list.isEmpty() && (!checkSides || stateIn.shouldSideBeRendered(worldIn, posIn, enumfacing)))
              {
!                 list = BlockModelCustomizer.getRenderQuads(list, worldIn, stateIn, posIn, enumfacing, rand, renderenv);
!                 this.renderQuadsSmooth(worldIn, stateIn, posIn, buffer, list, renderenv);
                  flag = true;
              }
          }
***************
*** 75,81 ****
  
          if (!list1.isEmpty())
          {
!             this.renderQuadsSmooth(worldIn, stateIn, posIn, buffer, list1, afloat, bitset, blockmodelrenderer$ambientocclusionface);
              flag = true;
          }
  
--- 116,123 ----
  
          if (!list1.isEmpty())
          {
!             list1 = BlockModelCustomizer.getRenderQuads(list1, worldIn, stateIn, posIn, (EnumFacing)null, rand, renderenv);
!             this.renderQuadsSmooth(worldIn, stateIn, posIn, buffer, list1, renderenv);
              flag = true;
          }
  
***************
*** 85,100 ****
      public boolean renderModelFlat(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
      {
          boolean flag = false;
!         BitSet bitset = new BitSet(3);
  
!         for (EnumFacing enumfacing : EnumFacing.values())
          {
              List<BakedQuad> list = modelIn.getQuads(stateIn, enumfacing, rand);
  
              if (!list.isEmpty() && (!checkSides || stateIn.shouldSideBeRendered(worldIn, posIn, enumfacing)))
              {
                  int i = stateIn.getPackedLightmapCoords(worldIn, posIn.offset(enumfacing));
!                 this.renderQuadsFlat(worldIn, stateIn, posIn, i, false, buffer, list, bitset);
                  flag = true;
              }
          }
--- 127,143 ----
      public boolean renderModelFlat(IBlockAccess worldIn, IBakedModel modelIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, boolean checkSides, long rand)
      {
          boolean flag = false;
!         RenderEnv renderenv = buffer.getRenderEnv(worldIn, stateIn, posIn);
  
!         for (EnumFacing enumfacing : EnumFacing.VALUES)
          {
              List<BakedQuad> list = modelIn.getQuads(stateIn, enumfacing, rand);
  
              if (!list.isEmpty() && (!checkSides || stateIn.shouldSideBeRendered(worldIn, posIn, enumfacing)))
              {
                  int i = stateIn.getPackedLightmapCoords(worldIn, posIn.offset(enumfacing));
!                 list = BlockModelCustomizer.getRenderQuads(list, worldIn, stateIn, posIn, enumfacing, rand, renderenv);
!                 this.renderQuadsFlat(worldIn, stateIn, posIn, i, false, buffer, list, renderenv);
                  flag = true;
              }
          }
***************
*** 103,157 ****
  
          if (!list1.isEmpty())
          {
!             this.renderQuadsFlat(worldIn, stateIn, posIn, -1, true, buffer, list1, bitset);
              flag = true;
          }
  
          return flag;
      }
  
!     private void renderQuadsSmooth(IBlockAccess blockAccessIn, IBlockState stateIn, BlockPos posIn, BufferBuilder buffer, List<BakedQuad> list, float[] quadBounds, BitSet bitSet, BlockModelRenderer.AmbientOcclusionFace aoFace)
      {
!         Vec3d vec3d = stateIn.func_191059_e(blockAccessIn, posIn);
!         double d0 = (double)posIn.getX() + vec3d.xCoord;
!         double d1 = (double)posIn.getY() + vec3d.yCoord;
!         double d2 = (double)posIn.getZ() + vec3d.zCoord;
          int i = 0;
  
!         for (int j = list.size(); i < j; ++i)
          {
!             BakedQuad bakedquad = list.get(i);
!             this.fillQuadBounds(stateIn, bakedquad.getVertexData(), bakedquad.getFace(), quadBounds, bitSet);
!             aoFace.updateVertexBrightness(blockAccessIn, stateIn, posIn, bakedquad.getFace(), quadBounds, bitSet);
!             buffer.addVertexData(bakedquad.getVertexData());
!             buffer.putBrightness4(aoFace.vertexBrightness[0], aoFace.vertexBrightness[1], aoFace.vertexBrightness[2], aoFace.vertexBrightness[3]);
  
!             if (bakedquad.hasTintIndex())
              {
!                 int k = this.blockColors.colorMultiplier(stateIn, blockAccessIn, posIn, bakedquad.getTintIndex());
  
                  if (EntityRenderer.anaglyphEnable)
                  {
                      k = TextureUtil.anaglyphColor(k);
                  }
  
!                 float f = (float)(k >> 16 & 255) / 255.0F;
!                 float f1 = (float)(k >> 8 & 255) / 255.0F;
!                 float f2 = (float)(k & 255) / 255.0F;
!                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[0] * f, aoFace.vertexColorMultiplier[0] * f1, aoFace.vertexColorMultiplier[0] * f2, 4);
!                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[1] * f, aoFace.vertexColorMultiplier[1] * f1, aoFace.vertexColorMultiplier[1] * f2, 3);
!                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[2] * f, aoFace.vertexColorMultiplier[2] * f1, aoFace.vertexColorMultiplier[2] * f2, 2);
!                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[3] * f, aoFace.vertexColorMultiplier[3] * f1, aoFace.vertexColorMultiplier[3] * f2, 1);
!             }
!             else
!             {
!                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[0], aoFace.vertexColorMultiplier[0], aoFace.vertexColorMultiplier[0], 4);
!                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[1], aoFace.vertexColorMultiplier[1], aoFace.vertexColorMultiplier[1], 3);
!                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[2], aoFace.vertexColorMultiplier[2], aoFace.vertexColorMultiplier[2], 2);
!                 buffer.putColorMultiplier(aoFace.vertexColorMultiplier[3], aoFace.vertexColorMultiplier[3], aoFace.vertexColorMultiplier[3], 1);
              }
  
!             buffer.putPosition(d0, d1, d2);
          }
      }
  
--- 146,234 ----
  
          if (!list1.isEmpty())
          {
!             list1 = BlockModelCustomizer.getRenderQuads(list1, worldIn, stateIn, posIn, (EnumFacing)null, rand, renderenv);
!             this.renderQuadsFlat(worldIn, stateIn, posIn, -1, true, buffer, list1, renderenv);
              flag = true;
          }
  
          return flag;
      }
  
!     private void renderQuadsSmooth(IBlockAccess p_renderQuadsSmooth_1_, IBlockState p_renderQuadsSmooth_2_, BlockPos p_renderQuadsSmooth_3_, BufferBuilder p_renderQuadsSmooth_4_, List<BakedQuad> p_renderQuadsSmooth_5_, RenderEnv p_renderQuadsSmooth_6_)
      {
!         float[] afloat = p_renderQuadsSmooth_6_.getQuadBounds();
!         BitSet bitset = p_renderQuadsSmooth_6_.getBoundsFlags();
!         BlockModelRenderer.AmbientOcclusionFace blockmodelrenderer$ambientocclusionface = p_renderQuadsSmooth_6_.getAoFace();
!         Vec3d vec3d = p_renderQuadsSmooth_2_.func_191059_e(p_renderQuadsSmooth_1_, p_renderQuadsSmooth_3_);
!         double d0 = (double)p_renderQuadsSmooth_3_.getX() + vec3d.xCoord;
!         double d1 = (double)p_renderQuadsSmooth_3_.getY() + vec3d.yCoord;
!         double d2 = (double)p_renderQuadsSmooth_3_.getZ() + vec3d.zCoord;
          int i = 0;
  
!         for (int j = p_renderQuadsSmooth_5_.size(); i < j; ++i)
          {
!             BakedQuad bakedquad = p_renderQuadsSmooth_5_.get(i);
!             this.fillQuadBounds(p_renderQuadsSmooth_2_, bakedquad.getVertexData(), bakedquad.getFace(), afloat, bitset);
!             blockmodelrenderer$ambientocclusionface.updateVertexBrightness(p_renderQuadsSmooth_1_, p_renderQuadsSmooth_2_, p_renderQuadsSmooth_3_, bakedquad.getFace(), afloat, bitset);
  
!             if (p_renderQuadsSmooth_4_.isMultiTexture())
              {
!                 p_renderQuadsSmooth_4_.addVertexData(bakedquad.getVertexDataSingle());
!                 p_renderQuadsSmooth_4_.putSprite(bakedquad.getSprite());
!             }
!             else
!             {
!                 p_renderQuadsSmooth_4_.addVertexData(bakedquad.getVertexData());
!             }
! 
!             p_renderQuadsSmooth_4_.putBrightness4(blockmodelrenderer$ambientocclusionface.vertexBrightness[0], blockmodelrenderer$ambientocclusionface.vertexBrightness[1], blockmodelrenderer$ambientocclusionface.vertexBrightness[2], blockmodelrenderer$ambientocclusionface.vertexBrightness[3]);
! 
!             if (bakedquad.shouldApplyDiffuseLighting())
!             {
!                 float f = FaceBakery.getFaceBrightness(bakedquad.getFace());
!                 float[] afloat1 = blockmodelrenderer$ambientocclusionface.vertexColorMultiplier;
!                 afloat1[0] *= f;
!                 afloat1 = blockmodelrenderer$ambientocclusionface.vertexColorMultiplier;
!                 afloat1[1] *= f;
!                 afloat1 = blockmodelrenderer$ambientocclusionface.vertexColorMultiplier;
!                 afloat1[2] *= f;
!                 afloat1 = blockmodelrenderer$ambientocclusionface.vertexColorMultiplier;
!                 afloat1[3] *= f;
!             }
! 
!             int l = CustomColors.getColorMultiplier(bakedquad, p_renderQuadsSmooth_2_, p_renderQuadsSmooth_1_, p_renderQuadsSmooth_3_, p_renderQuadsSmooth_6_);
! 
!             if (!bakedquad.hasTintIndex() && l == -1)
!             {
!                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], 4);
!                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], 3);
!                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], 2);
!                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], 1);
!             }
!             else
!             {
!                 int k = l;
! 
!                 if (l == -1)
!                 {
!                     k = this.blockColors.colorMultiplier(p_renderQuadsSmooth_2_, p_renderQuadsSmooth_1_, p_renderQuadsSmooth_3_, bakedquad.getTintIndex());
!                 }
  
                  if (EntityRenderer.anaglyphEnable)
                  {
                      k = TextureUtil.anaglyphColor(k);
                  }
  
!                 float f1 = (float)(k >> 16 & 255) / 255.0F;
!                 float f2 = (float)(k >> 8 & 255) / 255.0F;
!                 float f3 = (float)(k & 255) / 255.0F;
!                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f3, 4);
!                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f3, 3);
!                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f3, 2);
!                 p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f3, 1);
              }
  
!             p_renderQuadsSmooth_4_.putPosition(d0, d1, d2);
          }
      }
  
***************
*** 163,174 ****
          float f3 = -32.0F;
          float f4 = -32.0F;
          float f5 = -32.0F;
  
!         for (int i = 0; i < 4; ++i)
          {
!             float f6 = Float.intBitsToFloat(vertexData[i * 7]);
!             float f7 = Float.intBitsToFloat(vertexData[i * 7 + 1]);
!             float f8 = Float.intBitsToFloat(vertexData[i * 7 + 2]);
              f = Math.min(f, f6);
              f1 = Math.min(f1, f7);
              f2 = Math.min(f2, f8);
--- 240,252 ----
          float f3 = -32.0F;
          float f4 = -32.0F;
          float f5 = -32.0F;
+         int i = vertexData.length / 4;
  
!         for (int j = 0; j < 4; ++j)
          {
!             float f6 = Float.intBitsToFloat(vertexData[j * i]);
!             float f7 = Float.intBitsToFloat(vertexData[j * i + 1]);
!             float f8 = Float.intBitsToFloat(vertexData[j * i + 2]);
              f = Math.min(f, f6);
              f1 = Math.min(f1, f7);
              f2 = Math.min(f2, f8);
***************
*** 185,197 ****
              quadBounds[EnumFacing.UP.getIndex()] = f4;
              quadBounds[EnumFacing.NORTH.getIndex()] = f2;
              quadBounds[EnumFacing.SOUTH.getIndex()] = f5;
!             int j = EnumFacing.values().length;
!             quadBounds[EnumFacing.WEST.getIndex() + j] = 1.0F - f;
!             quadBounds[EnumFacing.EAST.getIndex() + j] = 1.0F - f3;
!             quadBounds[EnumFacing.DOWN.getIndex() + j] = 1.0F - f1;
!             quadBounds[EnumFacing.UP.getIndex() + j] = 1.0F - f4;
!             quadBounds[EnumFacing.NORTH.getIndex() + j] = 1.0F - f2;
!             quadBounds[EnumFacing.SOUTH.getIndex() + j] = 1.0F - f5;
          }
  
          float f9 = 1.0E-4F;
--- 263,275 ----
              quadBounds[EnumFacing.UP.getIndex()] = f4;
              quadBounds[EnumFacing.NORTH.getIndex()] = f2;
              quadBounds[EnumFacing.SOUTH.getIndex()] = f5;
!             int k = EnumFacing.VALUES.length;
!             quadBounds[EnumFacing.WEST.getIndex() + k] = 1.0F - f;
!             quadBounds[EnumFacing.EAST.getIndex() + k] = 1.0F - f3;
!             quadBounds[EnumFacing.DOWN.getIndex() + k] = 1.0F - f1;
!             quadBounds[EnumFacing.UP.getIndex() + k] = 1.0F - f4;
!             quadBounds[EnumFacing.NORTH.getIndex() + k] = 1.0F - f2;
!             quadBounds[EnumFacing.SOUTH.getIndex() + k] = 1.0F - f5;
          }
  
          float f9 = 1.0E-4F;
***************
*** 230,260 ****
          }
      }
  
!     private void renderQuadsFlat(IBlockAccess blockAccessIn, IBlockState stateIn, BlockPos posIn, int brightnessIn, boolean ownBrightness, BufferBuilder buffer, List<BakedQuad> list, BitSet bitSet)
      {
!         Vec3d vec3d = stateIn.func_191059_e(blockAccessIn, posIn);
!         double d0 = (double)posIn.getX() + vec3d.xCoord;
!         double d1 = (double)posIn.getY() + vec3d.yCoord;
!         double d2 = (double)posIn.getZ() + vec3d.zCoord;
          int i = 0;
  
!         for (int j = list.size(); i < j; ++i)
          {
!             BakedQuad bakedquad = list.get(i);
  
!             if (ownBrightness)
              {
!                 this.fillQuadBounds(stateIn, bakedquad.getVertexData(), bakedquad.getFace(), (float[])null, bitSet);
!                 BlockPos blockpos = bitSet.get(0) ? posIn.offset(bakedquad.getFace()) : posIn;
!                 brightnessIn = stateIn.getPackedLightmapCoords(blockAccessIn, blockpos);
              }
  
!             buffer.addVertexData(bakedquad.getVertexData());
!             buffer.putBrightness4(brightnessIn, brightnessIn, brightnessIn, brightnessIn);
  
!             if (bakedquad.hasTintIndex())
              {
!                 int k = this.blockColors.colorMultiplier(stateIn, blockAccessIn, posIn, bakedquad.getTintIndex());
  
                  if (EntityRenderer.anaglyphEnable)
                  {
--- 308,365 ----
          }
      }
  
!     private void renderQuadsFlat(IBlockAccess p_renderQuadsFlat_1_, IBlockState p_renderQuadsFlat_2_, BlockPos p_renderQuadsFlat_3_, int p_renderQuadsFlat_4_, boolean p_renderQuadsFlat_5_, BufferBuilder p_renderQuadsFlat_6_, List<BakedQuad> p_renderQuadsFlat_7_, RenderEnv p_renderQuadsFlat_8_)
      {
!         BitSet bitset = p_renderQuadsFlat_8_.getBoundsFlags();
!         Vec3d vec3d = p_renderQuadsFlat_2_.func_191059_e(p_renderQuadsFlat_1_, p_renderQuadsFlat_3_);
!         double d0 = (double)p_renderQuadsFlat_3_.getX() + vec3d.xCoord;
!         double d1 = (double)p_renderQuadsFlat_3_.getY() + vec3d.yCoord;
!         double d2 = (double)p_renderQuadsFlat_3_.getZ() + vec3d.zCoord;
          int i = 0;
  
!         for (int j = p_renderQuadsFlat_7_.size(); i < j; ++i)
          {
!             BakedQuad bakedquad = p_renderQuadsFlat_7_.get(i);
! 
!             if (p_renderQuadsFlat_5_)
!             {
!                 this.fillQuadBounds(p_renderQuadsFlat_2_, bakedquad.getVertexData(), bakedquad.getFace(), (float[])null, bitset);
!                 BlockPos blockpos = bitset.get(0) ? p_renderQuadsFlat_3_.offset(bakedquad.getFace()) : p_renderQuadsFlat_3_;
!                 p_renderQuadsFlat_4_ = p_renderQuadsFlat_2_.getPackedLightmapCoords(p_renderQuadsFlat_1_, blockpos);
!             }
  
!             if (p_renderQuadsFlat_6_.isMultiTexture())
              {
!                 p_renderQuadsFlat_6_.addVertexData(bakedquad.getVertexDataSingle());
!                 p_renderQuadsFlat_6_.putSprite(bakedquad.getSprite());
!             }
!             else
!             {
!                 p_renderQuadsFlat_6_.addVertexData(bakedquad.getVertexData());
              }
  
!             p_renderQuadsFlat_6_.putBrightness4(p_renderQuadsFlat_4_, p_renderQuadsFlat_4_, p_renderQuadsFlat_4_, p_renderQuadsFlat_4_);
!             int l = CustomColors.getColorMultiplier(bakedquad, p_renderQuadsFlat_2_, p_renderQuadsFlat_1_, p_renderQuadsFlat_3_, p_renderQuadsFlat_8_);
  
!             if (!bakedquad.hasTintIndex() && l == -1)
              {
!                 if (bakedquad.shouldApplyDiffuseLighting())
!                 {
!                     float f4 = FaceBakery.getFaceBrightness(bakedquad.getFace());
!                     p_renderQuadsFlat_6_.putColorMultiplier(f4, f4, f4, 4);
!                     p_renderQuadsFlat_6_.putColorMultiplier(f4, f4, f4, 3);
!                     p_renderQuadsFlat_6_.putColorMultiplier(f4, f4, f4, 2);
!                     p_renderQuadsFlat_6_.putColorMultiplier(f4, f4, f4, 1);
!                 }
!             }
!             else
!             {
!                 int k = l;
! 
!                 if (l == -1)
!                 {
!                     k = this.blockColors.colorMultiplier(p_renderQuadsFlat_2_, p_renderQuadsFlat_1_, p_renderQuadsFlat_3_, bakedquad.getTintIndex());
!                 }
  
                  if (EntityRenderer.anaglyphEnable)
                  {
***************
*** 264,276 ****
                  float f = (float)(k >> 16 & 255) / 255.0F;
                  float f1 = (float)(k >> 8 & 255) / 255.0F;
                  float f2 = (float)(k & 255) / 255.0F;
!                 buffer.putColorMultiplier(f, f1, f2, 4);
!                 buffer.putColorMultiplier(f, f1, f2, 3);
!                 buffer.putColorMultiplier(f, f1, f2, 2);
!                 buffer.putColorMultiplier(f, f1, f2, 1);
              }
  
!             buffer.putPosition(d0, d1, d2);
          }
      }
  
--- 369,390 ----
                  float f = (float)(k >> 16 & 255) / 255.0F;
                  float f1 = (float)(k >> 8 & 255) / 255.0F;
                  float f2 = (float)(k & 255) / 255.0F;
! 
!                 if (bakedquad.shouldApplyDiffuseLighting())
!                 {
!                     float f3 = FaceBakery.getFaceBrightness(bakedquad.getFace());
!                     f *= f3;
!                     f1 *= f3;
!                     f2 *= f3;
!                 }
! 
!                 p_renderQuadsFlat_6_.putColorMultiplier(f, f1, f2, 4);
!                 p_renderQuadsFlat_6_.putColorMultiplier(f, f1, f2, 3);
!                 p_renderQuadsFlat_6_.putColorMultiplier(f, f1, f2, 2);
!                 p_renderQuadsFlat_6_.putColorMultiplier(f, f1, f2, 1);
              }
  
!             p_renderQuadsFlat_6_.putPosition(d0, d1, d2);
          }
      }
  
***************
*** 281,287 ****
  
      public void renderModelBrightnessColor(IBlockState state, IBakedModel p_187495_2_, float p_187495_3_, float p_187495_4_, float p_187495_5_, float p_187495_6_)
      {
!         for (EnumFacing enumfacing : EnumFacing.values())
          {
              this.renderModelBrightnessColorQuads(p_187495_3_, p_187495_4_, p_187495_5_, p_187495_6_, p_187495_2_.getQuads(state, enumfacing, 0L));
          }
--- 395,401 ----
  
      public void renderModelBrightnessColor(IBlockState state, IBakedModel p_187495_2_, float p_187495_3_, float p_187495_4_, float p_187495_5_, float p_187495_6_)
      {
!         for (EnumFacing enumfacing : EnumFacing.VALUES)
          {
              this.renderModelBrightnessColorQuads(p_187495_3_, p_187495_4_, p_187495_5_, p_187495_6_, p_187495_2_.getQuads(state, enumfacing, 0L));
          }
***************
*** 339,349 ****
          }
      }
  
!     class AmbientOcclusionFace
      {
          private final float[] vertexColorMultiplier = new float[4];
          private final int[] vertexBrightness = new int[4];
  
          public void updateVertexBrightness(IBlockAccess worldIn, IBlockState state, BlockPos centerPos, EnumFacing direction, float[] faceShape, BitSet shapeState)
          {
              BlockPos blockpos = shapeState.get(0) ? centerPos.offset(direction) : centerPos;
--- 453,536 ----
          }
      }
  
!     public static float fixAoLightValue(float p_fixAoLightValue_0_)
!     {
!         return p_fixAoLightValue_0_ == 0.2F ? aoLightValueOpaque : p_fixAoLightValue_0_;
!     }
! 
!     public static void updateAoLightValue()
!     {
!         aoLightValueOpaque = 1.0F - Config.getAmbientOcclusionLevel() * 0.8F;
!     }
! 
!     private void renderOverlayModels(IBlockAccess p_renderOverlayModels_1_, IBakedModel p_renderOverlayModels_2_, IBlockState p_renderOverlayModels_3_, BlockPos p_renderOverlayModels_4_, BufferBuilder p_renderOverlayModels_5_, boolean p_renderOverlayModels_6_, long p_renderOverlayModels_7_, RenderEnv p_renderOverlayModels_9_, boolean p_renderOverlayModels_10_)
!     {
!         if (p_renderOverlayModels_9_.isOverlaysRendered())
!         {
!             for (int i = 0; i < OVERLAY_LAYERS.length; ++i)
!             {
!                 BlockRenderLayer blockrenderlayer = OVERLAY_LAYERS[i];
!                 ListQuadsOverlay listquadsoverlay = p_renderOverlayModels_9_.getListQuadsOverlay(blockrenderlayer);
! 
!                 if (listquadsoverlay.size() > 0)
!                 {
!                     RegionRenderCacheBuilder regionrendercachebuilder = p_renderOverlayModels_9_.getRegionRenderCacheBuilder();
! 
!                     if (regionrendercachebuilder != null)
!                     {
!                         BufferBuilder bufferbuilder = regionrendercachebuilder.getWorldRendererByLayer(blockrenderlayer);
! 
!                         if (!bufferbuilder.isDrawing())
!                         {
!                             bufferbuilder.begin(7, DefaultVertexFormats.BLOCK);
!                             bufferbuilder.setTranslation(p_renderOverlayModels_5_.getXOffset(), p_renderOverlayModels_5_.getYOffset(), p_renderOverlayModels_5_.getZOffset());
!                         }
! 
!                         for (int j = 0; j < listquadsoverlay.size(); ++j)
!                         {
!                             BakedQuad bakedquad = listquadsoverlay.getQuad(j);
!                             List<BakedQuad> list = listquadsoverlay.getListQuadsSingle(bakedquad);
!                             IBlockState iblockstate = listquadsoverlay.getBlockState(j);
!                             p_renderOverlayModels_9_.reset(p_renderOverlayModels_1_, iblockstate, p_renderOverlayModels_4_);
! 
!                             if (p_renderOverlayModels_10_)
!                             {
!                                 this.renderQuadsSmooth(p_renderOverlayModels_1_, iblockstate, p_renderOverlayModels_4_, bufferbuilder, list, p_renderOverlayModels_9_);
!                             }
!                             else
!                             {
!                                 int k = iblockstate.getPackedLightmapCoords(p_renderOverlayModels_1_, p_renderOverlayModels_4_.offset(bakedquad.getFace()));
!                                 this.renderQuadsFlat(p_renderOverlayModels_1_, iblockstate, p_renderOverlayModels_4_, k, false, bufferbuilder, list, p_renderOverlayModels_9_);
!                             }
!                         }
!                     }
! 
!                     listquadsoverlay.clear();
!                 }
!             }
!         }
! 
!         if (Config.isBetterSnow() && !p_renderOverlayModels_9_.isBreakingAnimation() && BetterSnow.shouldRender(p_renderOverlayModels_1_, p_renderOverlayModels_3_, p_renderOverlayModels_4_))
!         {
!             IBakedModel ibakedmodel = BetterSnow.getModelSnowLayer();
!             IBlockState iblockstate1 = BetterSnow.getStateSnowLayer();
!             this.renderModel(p_renderOverlayModels_1_, ibakedmodel, iblockstate1, p_renderOverlayModels_4_, p_renderOverlayModels_5_, p_renderOverlayModels_6_, p_renderOverlayModels_7_);
!         }
!     }
! 
!     public static class AmbientOcclusionFace
      {
          private final float[] vertexColorMultiplier = new float[4];
          private final int[] vertexBrightness = new int[4];
  
+         public AmbientOcclusionFace()
+         {
+         }
+ 
+         public AmbientOcclusionFace(BlockModelRenderer p_i46235_1_)
+         {
+         }
+ 
          public void updateVertexBrightness(IBlockAccess worldIn, IBlockState state, BlockPos centerPos, EnumFacing direction, float[] faceShape, BitSet shapeState)
          {
              BlockPos blockpos = shapeState.get(0) ? centerPos.offset(direction) : centerPos;
***************
*** 361,427 ****
              float f1 = worldIn.getBlockState(blockpos$pooledmutableblockpos2).getAmbientOcclusionLightValue();
              float f2 = worldIn.getBlockState(blockpos$pooledmutableblockpos3).getAmbientOcclusionLightValue();
              float f3 = worldIn.getBlockState(blockpos$pooledmutableblockpos4).getAmbientOcclusionLightValue();
              boolean flag = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(direction)).isTranslucent();
              boolean flag1 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(direction)).isTranslucent();
              boolean flag2 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos3).move(direction)).isTranslucent();
              boolean flag3 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos4).move(direction)).isTranslucent();
-             float f4;
              int i1;
  
              if (!flag2 && !flag)
              {
!                 f4 = f;
                  i1 = i;
              }
              else
              {
                  BlockPos blockpos1 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(blockmodelrenderer$enumneighborinfo.corners[2]);
!                 f4 = worldIn.getBlockState(blockpos1).getAmbientOcclusionLightValue();
                  i1 = state.getPackedLightmapCoords(worldIn, blockpos1);
              }
  
-             float f5;
              int j1;
  
              if (!flag3 && !flag)
              {
!                 f5 = f;
                  j1 = i;
              }
              else
              {
                  BlockPos blockpos2 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(blockmodelrenderer$enumneighborinfo.corners[3]);
!                 f5 = worldIn.getBlockState(blockpos2).getAmbientOcclusionLightValue();
                  j1 = state.getPackedLightmapCoords(worldIn, blockpos2);
              }
  
-             float f6;
              int k1;
  
              if (!flag2 && !flag1)
              {
!                 f6 = f1;
                  k1 = j;
              }
              else
              {
                  BlockPos blockpos3 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(blockmodelrenderer$enumneighborinfo.corners[2]);
!                 f6 = worldIn.getBlockState(blockpos3).getAmbientOcclusionLightValue();
                  k1 = state.getPackedLightmapCoords(worldIn, blockpos3);
              }
  
-             float f7;
              int l1;
  
              if (!flag3 && !flag1)
              {
!                 f7 = f1;
                  l1 = j;
              }
              else
              {
                  BlockPos blockpos4 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(blockmodelrenderer$enumneighborinfo.corners[3]);
!                 f7 = worldIn.getBlockState(blockpos4).getAmbientOcclusionLightValue();
                  l1 = state.getPackedLightmapCoords(worldIn, blockpos4);
              }
  
--- 548,622 ----
              float f1 = worldIn.getBlockState(blockpos$pooledmutableblockpos2).getAmbientOcclusionLightValue();
              float f2 = worldIn.getBlockState(blockpos$pooledmutableblockpos3).getAmbientOcclusionLightValue();
              float f3 = worldIn.getBlockState(blockpos$pooledmutableblockpos4).getAmbientOcclusionLightValue();
+             f = BlockModelRenderer.fixAoLightValue(f);
+             f1 = BlockModelRenderer.fixAoLightValue(f1);
+             f2 = BlockModelRenderer.fixAoLightValue(f2);
+             f3 = BlockModelRenderer.fixAoLightValue(f3);
              boolean flag = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(direction)).isTranslucent();
              boolean flag1 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(direction)).isTranslucent();
              boolean flag2 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos3).move(direction)).isTranslucent();
              boolean flag3 = worldIn.getBlockState(blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos4).move(direction)).isTranslucent();
              int i1;
+             float f25;
  
              if (!flag2 && !flag)
              {
!                 f25 = f;
                  i1 = i;
              }
              else
              {
                  BlockPos blockpos1 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(blockmodelrenderer$enumneighborinfo.corners[2]);
!                 f25 = worldIn.getBlockState(blockpos1).getAmbientOcclusionLightValue();
!                 f25 = BlockModelRenderer.fixAoLightValue(f25);
                  i1 = state.getPackedLightmapCoords(worldIn, blockpos1);
              }
  
              int j1;
+             float f26;
  
              if (!flag3 && !flag)
              {
!                 f26 = f;
                  j1 = i;
              }
              else
              {
                  BlockPos blockpos2 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos1).move(blockmodelrenderer$enumneighborinfo.corners[3]);
!                 f26 = worldIn.getBlockState(blockpos2).getAmbientOcclusionLightValue();
!                 f26 = BlockModelRenderer.fixAoLightValue(f26);
                  j1 = state.getPackedLightmapCoords(worldIn, blockpos2);
              }
  
              int k1;
+             float f27;
  
              if (!flag2 && !flag1)
              {
!                 f27 = f1;
                  k1 = j;
              }
              else
              {
                  BlockPos blockpos3 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(blockmodelrenderer$enumneighborinfo.corners[2]);
!                 f27 = worldIn.getBlockState(blockpos3).getAmbientOcclusionLightValue();
!                 f27 = BlockModelRenderer.fixAoLightValue(f27);
                  k1 = state.getPackedLightmapCoords(worldIn, blockpos3);
              }
  
              int l1;
+             float f28;
  
              if (!flag3 && !flag1)
              {
!                 f28 = f1;
                  l1 = j;
              }
              else
              {
                  BlockPos blockpos4 = blockpos$pooledmutableblockpos.setPos(blockpos$pooledmutableblockpos2).move(blockmodelrenderer$enumneighborinfo.corners[3]);
!                 f28 = worldIn.getBlockState(blockpos4).getAmbientOcclusionLightValue();
!                 f28 = BlockModelRenderer.fixAoLightValue(f28);
                  l1 = state.getPackedLightmapCoords(worldIn, blockpos4);
              }
  
***************
*** 432,438 ****
                  i3 = state.getPackedLightmapCoords(worldIn, centerPos.offset(direction));
              }
  
!             float f8 = shapeState.get(0) ? worldIn.getBlockState(blockpos).getAmbientOcclusionLightValue() : worldIn.getBlockState(centerPos).getAmbientOcclusionLightValue();
              BlockModelRenderer.VertexTranslations blockmodelrenderer$vertextranslations = BlockModelRenderer.VertexTranslations.getVertexTranslations(direction);
              blockpos$pooledmutableblockpos.release();
              blockpos$pooledmutableblockpos1.release();
--- 627,634 ----
                  i3 = state.getPackedLightmapCoords(worldIn, centerPos.offset(direction));
              }
  
!             float f4 = shapeState.get(0) ? worldIn.getBlockState(blockpos).getAmbientOcclusionLightValue() : worldIn.getBlockState(centerPos).getAmbientOcclusionLightValue();
!             f4 = BlockModelRenderer.fixAoLightValue(f4);
              BlockModelRenderer.VertexTranslations blockmodelrenderer$vertextranslations = BlockModelRenderer.VertexTranslations.getVertexTranslations(direction);
              blockpos$pooledmutableblockpos.release();
              blockpos$pooledmutableblockpos1.release();
***************
*** 442,494 ****
  
              if (shapeState.get(1) && blockmodelrenderer$enumneighborinfo.doNonCubicWeight)
              {
!                 float f29 = (f3 + f + f5 + f8) * 0.25F;
!                 float f30 = (f2 + f + f4 + f8) * 0.25F;
!                 float f31 = (f2 + f1 + f6 + f8) * 0.25F;
!                 float f32 = (f3 + f1 + f7 + f8) * 0.25F;
!                 float f13 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[1].shape];
!                 float f14 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[3].shape];
!                 float f15 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[5].shape];
!                 float f16 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[7].shape];
!                 float f17 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[1].shape];
!                 float f18 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[3].shape];
!                 float f19 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[5].shape];
!                 float f20 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[7].shape];
!                 float f21 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[1].shape];
!                 float f22 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[3].shape];
!                 float f23 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[5].shape];
!                 float f24 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[7].shape];
!                 float f25 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[1].shape];
!                 float f26 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[3].shape];
!                 float f27 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[5].shape];
!                 float f28 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[7].shape];
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert0] = f29 * f13 + f30 * f14 + f31 * f15 + f32 * f16;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert1] = f29 * f17 + f30 * f18 + f31 * f19 + f32 * f20;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert2] = f29 * f21 + f30 * f22 + f31 * f23 + f32 * f24;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert3] = f29 * f25 + f30 * f26 + f31 * f27 + f32 * f28;
                  int i2 = this.getAoBrightness(l, i, j1, i3);
                  int j2 = this.getAoBrightness(k, i, i1, i3);
                  int k2 = this.getAoBrightness(k, j, k1, i3);
                  int l2 = this.getAoBrightness(l, j, l1, i3);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert0] = this.getVertexBrightness(i2, j2, k2, l2, f13, f14, f15, f16);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert1] = this.getVertexBrightness(i2, j2, k2, l2, f17, f18, f19, f20);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert2] = this.getVertexBrightness(i2, j2, k2, l2, f21, f22, f23, f24);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert3] = this.getVertexBrightness(i2, j2, k2, l2, f25, f26, f27, f28);
              }
              else
              {
!                 float f9 = (f3 + f + f5 + f8) * 0.25F;
!                 float f10 = (f2 + f + f4 + f8) * 0.25F;
!                 float f11 = (f2 + f1 + f6 + f8) * 0.25F;
!                 float f12 = (f3 + f1 + f7 + f8) * 0.25F;
                  this.vertexBrightness[blockmodelrenderer$vertextranslations.vert0] = this.getAoBrightness(l, i, j1, i3);
                  this.vertexBrightness[blockmodelrenderer$vertextranslations.vert1] = this.getAoBrightness(k, i, i1, i3);
                  this.vertexBrightness[blockmodelrenderer$vertextranslations.vert2] = this.getAoBrightness(k, j, k1, i3);
                  this.vertexBrightness[blockmodelrenderer$vertextranslations.vert3] = this.getAoBrightness(l, j, l1, i3);
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert0] = f9;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert1] = f10;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert2] = f11;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert3] = f12;
              }
          }
  
--- 638,690 ----
  
              if (shapeState.get(1) && blockmodelrenderer$enumneighborinfo.doNonCubicWeight)
              {
!                 float f29 = (f3 + f + f26 + f4) * 0.25F;
!                 float f30 = (f2 + f + f25 + f4) * 0.25F;
!                 float f31 = (f2 + f1 + f27 + f4) * 0.25F;
!                 float f32 = (f3 + f1 + f28 + f4) * 0.25F;
!                 float f9 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[1].shape];
!                 float f10 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[3].shape];
!                 float f11 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[5].shape];
!                 float f12 = faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert0Weights[7].shape];
!                 float f13 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[1].shape];
!                 float f14 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[3].shape];
!                 float f15 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[5].shape];
!                 float f16 = faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert1Weights[7].shape];
!                 float f17 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[1].shape];
!                 float f18 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[3].shape];
!                 float f19 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[5].shape];
!                 float f20 = faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert2Weights[7].shape];
!                 float f21 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[0].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[1].shape];
!                 float f22 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[2].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[3].shape];
!                 float f23 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[4].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[5].shape];
!                 float f24 = faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[6].shape] * faceShape[blockmodelrenderer$enumneighborinfo.vert3Weights[7].shape];
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert0] = f29 * f9 + f30 * f10 + f31 * f11 + f32 * f12;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert1] = f29 * f13 + f30 * f14 + f31 * f15 + f32 * f16;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert2] = f29 * f17 + f30 * f18 + f31 * f19 + f32 * f20;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert3] = f29 * f21 + f30 * f22 + f31 * f23 + f32 * f24;
                  int i2 = this.getAoBrightness(l, i, j1, i3);
                  int j2 = this.getAoBrightness(k, i, i1, i3);
                  int k2 = this.getAoBrightness(k, j, k1, i3);
                  int l2 = this.getAoBrightness(l, j, l1, i3);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert0] = this.getVertexBrightness(i2, j2, k2, l2, f9, f10, f11, f12);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert1] = this.getVertexBrightness(i2, j2, k2, l2, f13, f14, f15, f16);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert2] = this.getVertexBrightness(i2, j2, k2, l2, f17, f18, f19, f20);
!                 this.vertexBrightness[blockmodelrenderer$vertextranslations.vert3] = this.getVertexBrightness(i2, j2, k2, l2, f21, f22, f23, f24);
              }
              else
              {
!                 float f5 = (f3 + f + f26 + f4) * 0.25F;
!                 float f6 = (f2 + f + f25 + f4) * 0.25F;
!                 float f7 = (f2 + f1 + f27 + f4) * 0.25F;
!                 float f8 = (f3 + f1 + f28 + f4) * 0.25F;
                  this.vertexBrightness[blockmodelrenderer$vertextranslations.vert0] = this.getAoBrightness(l, i, j1, i3);
                  this.vertexBrightness[blockmodelrenderer$vertextranslations.vert1] = this.getAoBrightness(k, i, i1, i3);
                  this.vertexBrightness[blockmodelrenderer$vertextranslations.vert2] = this.getAoBrightness(k, j, k1, i3);
                  this.vertexBrightness[blockmodelrenderer$vertextranslations.vert3] = this.getAoBrightness(l, j, l1, i3);
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert0] = f5;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert1] = f6;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert2] = f7;
!                 this.vertexColorMultiplier[blockmodelrenderer$vertextranslations.vert3] = f8;
              }
          }
  
diff -rc ./client/renderer/BufferBuilder.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/BufferBuilder.java
*** ./client/renderer/BufferBuilder.java	2018-11-18 13:18:45.703627000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/BufferBuilder.java	2018-11-30 21:22:51.093615100 -0800
***************
*** 9,50 ****
  import java.util.Arrays;
  import java.util.BitSet;
  import java.util.Comparator;
  import net.minecraft.client.renderer.vertex.VertexFormat;
  import net.minecraft.client.renderer.vertex.VertexFormatElement;
  import net.minecraft.util.math.MathHelper;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  
  public class BufferBuilder
  {
      private static final Logger LOGGER = LogManager.getLogger();
      private ByteBuffer byteBuffer;
!     private IntBuffer rawIntBuffer;
      private ShortBuffer rawShortBuffer;
!     private FloatBuffer rawFloatBuffer;
!     private int vertexCount;
      private VertexFormatElement vertexFormatElement;
      private int vertexFormatIndex;
  
      /** None */
      private boolean noColor;
!     private int drawMode;
      private double xOffset;
      private double yOffset;
      private double zOffset;
      private VertexFormat vertexFormat;
      private boolean isDrawing;
  
      public BufferBuilder(int bufferSizeIn)
      {
          this.byteBuffer = GLAllocation.createDirectByteBuffer(bufferSizeIn * 4);
          this.rawIntBuffer = this.byteBuffer.asIntBuffer();
          this.rawShortBuffer = this.byteBuffer.asShortBuffer();
          this.rawFloatBuffer = this.byteBuffer.asFloatBuffer();
      }
  
      private void growBuffer(int p_181670_1_)
      {
          if (MathHelper.roundUp(p_181670_1_, 4) / 4 > this.rawIntBuffer.remaining() || this.vertexCount * this.vertexFormat.getNextOffset() + p_181670_1_ > this.byteBuffer.capacity())
          {
              int i = this.byteBuffer.capacity();
--- 9,79 ----
  import java.util.Arrays;
  import java.util.BitSet;
  import java.util.Comparator;
+ import net.minecraft.block.state.IBlockState;
+ import net.minecraft.client.renderer.texture.TextureAtlasSprite;
  import net.minecraft.client.renderer.vertex.VertexFormat;
  import net.minecraft.client.renderer.vertex.VertexFormatElement;
+ import net.minecraft.util.BlockRenderLayer;
+ import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.MathHelper;
+ import net.minecraft.world.IBlockAccess;
+ import optifine.Config;
+ import optifine.RenderEnv;
+ import optifine.TextureUtils;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import org.lwjgl.opengl.GL11;
+ import shadersmod.client.SVertexBuilder;
  
  public class BufferBuilder
  {
      private static final Logger LOGGER = LogManager.getLogger();
      private ByteBuffer byteBuffer;
!     public IntBuffer rawIntBuffer;
      private ShortBuffer rawShortBuffer;
!     public FloatBuffer rawFloatBuffer;
!     public int vertexCount;
      private VertexFormatElement vertexFormatElement;
      private int vertexFormatIndex;
  
      /** None */
      private boolean noColor;
!     public int drawMode;
      private double xOffset;
      private double yOffset;
      private double zOffset;
      private VertexFormat vertexFormat;
      private boolean isDrawing;
+     private BlockRenderLayer blockLayer = null;
+     private boolean[] drawnIcons = new boolean[256];
+     private TextureAtlasSprite[] quadSprites = null;
+     private TextureAtlasSprite[] quadSpritesPrev = null;
+     private TextureAtlasSprite quadSprite = null;
+     public SVertexBuilder sVertexBuilder;
+     public RenderEnv renderEnv = null;
  
      public BufferBuilder(int bufferSizeIn)
      {
+         if (Config.isShaders())
+         {
+             bufferSizeIn *= 2;
+         }
+ 
          this.byteBuffer = GLAllocation.createDirectByteBuffer(bufferSizeIn * 4);
          this.rawIntBuffer = this.byteBuffer.asIntBuffer();
          this.rawShortBuffer = this.byteBuffer.asShortBuffer();
          this.rawFloatBuffer = this.byteBuffer.asFloatBuffer();
+         SVertexBuilder.initVertexBuilder(this);
      }
  
      private void growBuffer(int p_181670_1_)
      {
+         if (Config.isShaders())
+         {
+             p_181670_1_ *= 2;
+         }
+ 
          if (MathHelper.roundUp(p_181670_1_, 4) / 4 > this.rawIntBuffer.remaining() || this.vertexCount * this.vertexFormat.getNextOffset() + p_181670_1_ > this.byteBuffer.capacity())
          {
              int i = this.byteBuffer.capacity();
***************
*** 56,66 ****
              bytebuffer.put(this.byteBuffer);
              bytebuffer.rewind();
              this.byteBuffer = bytebuffer;
!             this.rawFloatBuffer = this.byteBuffer.asFloatBuffer().asReadOnlyBuffer();
              this.rawIntBuffer = this.byteBuffer.asIntBuffer();
              this.rawIntBuffer.position(k);
              this.rawShortBuffer = this.byteBuffer.asShortBuffer();
              this.rawShortBuffer.position(k << 1);
          }
      }
  
--- 85,104 ----
              bytebuffer.put(this.byteBuffer);
              bytebuffer.rewind();
              this.byteBuffer = bytebuffer;
!             this.rawFloatBuffer = this.byteBuffer.asFloatBuffer();
              this.rawIntBuffer = this.byteBuffer.asIntBuffer();
              this.rawIntBuffer.position(k);
              this.rawShortBuffer = this.byteBuffer.asShortBuffer();
              this.rawShortBuffer.position(k << 1);
+ 
+             if (this.quadSprites != null)
+             {
+                 TextureAtlasSprite[] atextureatlassprite = this.quadSprites;
+                 int l = this.getBufferQuadSize();
+                 this.quadSprites = new TextureAtlasSprite[l];
+                 System.arraycopy(atextureatlassprite, 0, this.quadSprites, 0, Math.min(atextureatlassprite.length, this.quadSprites.length));
+                 this.quadSpritesPrev = null;
+             }
          }
      }
  
***************
*** 122,127 ****
--- 160,182 ----
  
              bitset.set(i1);
          }
+ 
+         this.rawIntBuffer.limit(this.rawIntBuffer.capacity());
+         this.rawIntBuffer.position(this.getBufferSize());
+ 
+         if (this.quadSprites != null)
+         {
+             TextureAtlasSprite[] atextureatlassprite = new TextureAtlasSprite[this.vertexCount / 4];
+             int i2 = this.vertexFormat.getNextOffset() / 4 * 4;
+ 
+             for (int j2 = 0; j2 < ainteger.length; ++j2)
+             {
+                 int k2 = ainteger[j2].intValue();
+                 atextureatlassprite[j2] = this.quadSprites[k2];
+             }
+ 
+             System.arraycopy(atextureatlassprite, 0, this.quadSprites, 0, atextureatlassprite.length);
+         }
      }
  
      public BufferBuilder.State getVertexState()
***************
*** 133,142 ****
          this.rawIntBuffer.get(aint);
          this.rawIntBuffer.limit(this.rawIntBuffer.capacity());
          this.rawIntBuffer.position(i);
!         return new BufferBuilder.State(aint, new VertexFormat(this.vertexFormat));
      }
  
!     private int getBufferSize()
      {
          return this.vertexCount * this.vertexFormat.getIntegerSize();
      }
--- 188,206 ----
          this.rawIntBuffer.get(aint);
          this.rawIntBuffer.limit(this.rawIntBuffer.capacity());
          this.rawIntBuffer.position(i);
!         TextureAtlasSprite[] atextureatlassprite = null;
! 
!         if (this.quadSprites != null)
!         {
!             int j = this.vertexCount / 4;
!             atextureatlassprite = new TextureAtlasSprite[j];
!             System.arraycopy(this.quadSprites, 0, atextureatlassprite, 0, j);
!         }
! 
!         return new BufferBuilder.State(aint, new VertexFormat(this.vertexFormat), atextureatlassprite);
      }
  
!     public int getBufferSize()
      {
          return this.vertexCount * this.vertexFormat.getIntegerSize();
      }
***************
*** 168,173 ****
--- 232,262 ----
          this.rawIntBuffer.put(state.getRawBuffer());
          this.vertexCount = state.getVertexCount();
          this.vertexFormat = new VertexFormat(state.getVertexFormat());
+ 
+         if (state.stateQuadSprites != null)
+         {
+             if (this.quadSprites == null)
+             {
+                 this.quadSprites = this.quadSpritesPrev;
+             }
+ 
+             if (this.quadSprites == null || this.quadSprites.length < this.getBufferQuadSize())
+             {
+                 this.quadSprites = new TextureAtlasSprite[this.getBufferQuadSize()];
+             }
+ 
+             TextureAtlasSprite[] atextureatlassprite = state.stateQuadSprites;
+             System.arraycopy(atextureatlassprite, 0, this.quadSprites, 0, atextureatlassprite.length);
+         }
+         else
+         {
+             if (this.quadSprites != null)
+             {
+                 this.quadSpritesPrev = this.quadSprites;
+             }
+ 
+             this.quadSprites = null;
+         }
      }
  
      public void reset()
***************
*** 175,180 ****
--- 264,270 ----
          this.vertexCount = 0;
          this.vertexFormatElement = null;
          this.vertexFormatIndex = 0;
+         this.quadSprite = null;
      }
  
      public void begin(int glMode, VertexFormat format)
***************
*** 192,202 ****
--- 282,329 ----
              this.vertexFormatElement = format.getElement(this.vertexFormatIndex);
              this.noColor = false;
              this.byteBuffer.limit(this.byteBuffer.capacity());
+ 
+             if (Config.isShaders())
+             {
+                 SVertexBuilder.endSetVertexFormat(this);
+             }
+ 
+             if (Config.isMultiTexture())
+             {
+                 if (this.blockLayer != null)
+                 {
+                     if (this.quadSprites == null)
+                     {
+                         this.quadSprites = this.quadSpritesPrev;
+                     }
+ 
+                     if (this.quadSprites == null || this.quadSprites.length < this.getBufferQuadSize())
+                     {
+                         this.quadSprites = new TextureAtlasSprite[this.getBufferQuadSize()];
+                     }
+                 }
+             }
+             else
+             {
+                 if (this.quadSprites != null)
+                 {
+                     this.quadSpritesPrev = this.quadSprites;
+                 }
+ 
+                 this.quadSprites = null;
+             }
          }
      }
  
      public BufferBuilder tex(double u, double v)
      {
+         if (this.quadSprite != null && this.quadSprites != null)
+         {
+             u = (double)this.quadSprite.toSingleU((float)u);
+             v = (double)this.quadSprite.toSingleV((float)v);
+             this.quadSprites[this.vertexCount / 4] = this.quadSprite;
+         }
+ 
          int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.getOffset(this.vertexFormatIndex);
  
          switch (this.vertexFormatElement.getType())
***************
*** 293,299 ****
       *  
       * @param vertexIndex The index of the vertex in question, where 0 is the last one added, 1 is the second last, etc.
       */
!     private int getColorIndex(int vertexIndex)
      {
          return ((this.vertexCount - vertexIndex) * this.vertexFormat.getNextOffset() + this.vertexFormat.getColorOffset()) / 4;
      }
--- 420,426 ----
       *  
       * @param vertexIndex The index of the vertex in question, where 0 is the last one added, 1 is the second last, etc.
       */
!     public int getColorIndex(int vertexIndex)
      {
          return ((this.vertexCount - vertexIndex) * this.vertexFormat.getNextOffset() + this.vertexFormat.getColorOffset()) / 4;
      }
***************
*** 357,363 ****
       *  
       * @param index The index in the vertex data buffer to which the color data will be written, in {@code int}s
       */
!     private void putColorRGBA(int index, int red, int green, int blue)
      {
          if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
          {
--- 484,490 ----
       *  
       * @param index The index in the vertex data buffer to which the color data will be written, in {@code int}s
       */
!     public void putColorRGBA(int index, int red, int green, int blue)
      {
          if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
          {
***************
*** 442,461 ****
--- 569,610 ----
  
      public void addVertexData(int[] vertexData)
      {
+         if (Config.isShaders())
+         {
+             SVertexBuilder.beginAddVertexData(this, vertexData);
+         }
+ 
          this.growBuffer(vertexData.length * 4);
          this.rawIntBuffer.position(this.getBufferSize());
          this.rawIntBuffer.put(vertexData);
          this.vertexCount += vertexData.length / this.vertexFormat.getIntegerSize();
+ 
+         if (Config.isShaders())
+         {
+             SVertexBuilder.endAddVertexData(this);
+         }
      }
  
      public void endVertex()
      {
          ++this.vertexCount;
          this.growBuffer(this.vertexFormat.getNextOffset());
+         this.vertexFormatIndex = 0;
+         this.vertexFormatElement = this.vertexFormat.getElement(this.vertexFormatIndex);
+ 
+         if (Config.isShaders())
+         {
+             SVertexBuilder.endAddVertex(this);
+         }
      }
  
      public BufferBuilder pos(double x, double y, double z)
      {
+         if (Config.isShaders())
+         {
+             SVertexBuilder.beginAddVertex(this);
+         }
+ 
          int i = this.vertexCount * this.vertexFormat.getNextOffset() + this.vertexFormat.getOffset(this.vertexFormatIndex);
  
          switch (this.vertexFormatElement.getType())
***************
*** 538,553 ****
  
              case USHORT:
              case SHORT:
!                 this.byteBuffer.putShort(i, (short)((int)x * 32767 & 65535));
!                 this.byteBuffer.putShort(i + 2, (short)((int)y * 32767 & 65535));
!                 this.byteBuffer.putShort(i + 4, (short)((int)z * 32767 & 65535));
                  break;
  
              case UBYTE:
              case BYTE:
!                 this.byteBuffer.put(i, (byte)((int)x * 127 & 255));
!                 this.byteBuffer.put(i + 1, (byte)((int)y * 127 & 255));
!                 this.byteBuffer.put(i + 2, (byte)((int)z * 127 & 255));
          }
  
          this.nextVertexFormatIndex();
--- 687,702 ----
  
              case USHORT:
              case SHORT:
!                 this.byteBuffer.putShort(i, (short)((int)(x * 32767.0F) & 65535));
!                 this.byteBuffer.putShort(i + 2, (short)((int)(y * 32767.0F) & 65535));
!                 this.byteBuffer.putShort(i + 4, (short)((int)(z * 32767.0F) & 65535));
                  break;
  
              case UBYTE:
              case BYTE:
!                 this.byteBuffer.put(i, (byte)((int)(x * 127.0F) & 255));
!                 this.byteBuffer.put(i + 1, (byte)((int)(y * 127.0F) & 255));
!                 this.byteBuffer.put(i + 2, (byte)((int)(z * 127.0F) & 255));
          }
  
          this.nextVertexFormatIndex();
***************
*** 611,620 ****
--- 760,993 ----
          }
      }
  
+     public void putSprite(TextureAtlasSprite p_putSprite_1_)
+     {
+         if (this.quadSprites != null)
+         {
+             int i = this.vertexCount / 4;
+             this.quadSprites[i - 1] = p_putSprite_1_;
+         }
+     }
+ 
+     public void setSprite(TextureAtlasSprite p_setSprite_1_)
+     {
+         if (this.quadSprites != null)
+         {
+             this.quadSprite = p_setSprite_1_;
+         }
+     }
+ 
+     public boolean isMultiTexture()
+     {
+         return this.quadSprites != null;
+     }
+ 
+     public void drawMultiTexture()
+     {
+         if (this.quadSprites != null)
+         {
+             int i = Config.getMinecraft().getTextureMapBlocks().getCountRegisteredSprites();
+ 
+             if (this.drawnIcons.length <= i)
+             {
+                 this.drawnIcons = new boolean[i + 1];
+             }
+ 
+             Arrays.fill(this.drawnIcons, false);
+             int j = 0;
+             int k = -1;
+             int l = this.vertexCount / 4;
+ 
+             for (int i1 = 0; i1 < l; ++i1)
+             {
+                 TextureAtlasSprite textureatlassprite = this.quadSprites[i1];
+ 
+                 if (textureatlassprite != null)
+                 {
+                     int j1 = textureatlassprite.getIndexInMap();
+ 
+                     if (!this.drawnIcons[j1])
+                     {
+                         if (textureatlassprite == TextureUtils.iconGrassSideOverlay)
+                         {
+                             if (k < 0)
+                             {
+                                 k = i1;
+                             }
+                         }
+                         else
+                         {
+                             i1 = this.drawForIcon(textureatlassprite, i1) - 1;
+                             ++j;
+ 
+                             if (this.blockLayer != BlockRenderLayer.TRANSLUCENT)
+                             {
+                                 this.drawnIcons[j1] = true;
+                             }
+                         }
+                     }
+                 }
+             }
+ 
+             if (k >= 0)
+             {
+                 this.drawForIcon(TextureUtils.iconGrassSideOverlay, k);
+                 ++j;
+             }
+ 
+             if (j > 0)
+             {
+                 ;
+             }
+         }
+     }
+ 
+     private int drawForIcon(TextureAtlasSprite p_drawForIcon_1_, int p_drawForIcon_2_)
+     {
+         GL11.glBindTexture(GL11.GL_TEXTURE_2D, p_drawForIcon_1_.glSpriteTextureId);
+         int i = -1;
+         int j = -1;
+         int k = this.vertexCount / 4;
+ 
+         for (int l = p_drawForIcon_2_; l < k; ++l)
+         {
+             TextureAtlasSprite textureatlassprite = this.quadSprites[l];
+ 
+             if (textureatlassprite == p_drawForIcon_1_)
+             {
+                 if (j < 0)
+                 {
+                     j = l;
+                 }
+             }
+             else if (j >= 0)
+             {
+                 this.draw(j, l);
+ 
+                 if (this.blockLayer == BlockRenderLayer.TRANSLUCENT)
+                 {
+                     return l;
+                 }
+ 
+                 j = -1;
+ 
+                 if (i < 0)
+                 {
+                     i = l;
+                 }
+             }
+         }
+ 
+         if (j >= 0)
+         {
+             this.draw(j, k);
+         }
+ 
+         if (i < 0)
+         {
+             i = k;
+         }
+ 
+         return i;
+     }
+ 
+     private void draw(int p_draw_1_, int p_draw_2_)
+     {
+         int i = p_draw_2_ - p_draw_1_;
+ 
+         if (i > 0)
+         {
+             int j = p_draw_1_ * 4;
+             int k = i * 4;
+             GL11.glDrawArrays(this.drawMode, j, k);
+         }
+     }
+ 
+     public void setBlockLayer(BlockRenderLayer p_setBlockLayer_1_)
+     {
+         this.blockLayer = p_setBlockLayer_1_;
+ 
+         if (p_setBlockLayer_1_ == null)
+         {
+             if (this.quadSprites != null)
+             {
+                 this.quadSpritesPrev = this.quadSprites;
+             }
+ 
+             this.quadSprites = null;
+             this.quadSprite = null;
+         }
+     }
+ 
+     private int getBufferQuadSize()
+     {
+         int i = this.rawIntBuffer.capacity() * 4 / (this.vertexFormat.getIntegerSize() * 4);
+         return i;
+     }
+ 
+     public RenderEnv getRenderEnv(IBlockAccess p_getRenderEnv_1_, IBlockState p_getRenderEnv_2_, BlockPos p_getRenderEnv_3_)
+     {
+         if (this.renderEnv == null)
+         {
+             this.renderEnv = new RenderEnv(p_getRenderEnv_1_, p_getRenderEnv_2_, p_getRenderEnv_3_);
+             return this.renderEnv;
+         }
+         else
+         {
+             this.renderEnv.reset(p_getRenderEnv_1_, p_getRenderEnv_2_, p_getRenderEnv_3_);
+             return this.renderEnv;
+         }
+     }
+ 
+     public boolean isDrawing()
+     {
+         return this.isDrawing;
+     }
+ 
+     public double getXOffset()
+     {
+         return this.xOffset;
+     }
+ 
+     public double getYOffset()
+     {
+         return this.yOffset;
+     }
+ 
+     public double getZOffset()
+     {
+         return this.zOffset;
+     }
+ 
+     public void putColorRGBA(int p_putColorRGBA_1_, int p_putColorRGBA_2_, int p_putColorRGBA_3_, int p_putColorRGBA_4_, int p_putColorRGBA_5_)
+     {
+         if (ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN)
+         {
+             this.rawIntBuffer.put(p_putColorRGBA_1_, p_putColorRGBA_5_ << 24 | p_putColorRGBA_4_ << 16 | p_putColorRGBA_3_ << 8 | p_putColorRGBA_2_);
+         }
+         else
+         {
+             this.rawIntBuffer.put(p_putColorRGBA_1_, p_putColorRGBA_2_ << 24 | p_putColorRGBA_3_ << 16 | p_putColorRGBA_4_ << 8 | p_putColorRGBA_5_);
+         }
+     }
+ 
+     public boolean isColorDisabled()
+     {
+         return this.noColor;
+     }
+ 
      public class State
      {
          private final int[] stateRawBuffer;
          private final VertexFormat stateVertexFormat;
+         private TextureAtlasSprite[] stateQuadSprites;
+ 
+         public State(int[] p_i5_2_, VertexFormat p_i5_3_, TextureAtlasSprite[] p_i5_4_)
+         {
+             this.stateRawBuffer = p_i5_2_;
+             this.stateVertexFormat = p_i5_3_;
+             this.stateQuadSprites = p_i5_4_;
+         }
  
          public State(int[] buffer, VertexFormat format)
          {
diff -rc ./client/renderer/chunk/ChunkRenderDispatcher.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
*** ./client/renderer/chunk/ChunkRenderDispatcher.java	2018-11-18 13:18:46.752362000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk/ChunkRenderDispatcher.java	2017-10-20 21:01:21.238625000 -0700
***************
*** 30,49 ****
      private static final Logger LOGGER = LogManager.getLogger();
      private static final ThreadFactory THREAD_FACTORY = (new ThreadFactoryBuilder()).setNameFormat("Chunk Batcher %d").setDaemon(true).build();
      private final int countRenderBuilders;
!     private final List<Thread> listWorkerThreads = Lists.<Thread>newArrayList();
!     private final List<ChunkRenderWorker> listThreadedWorkers = Lists.<ChunkRenderWorker>newArrayList();
!     private final PriorityBlockingQueue<ChunkCompileTaskGenerator> queueChunkUpdates = Queues.<ChunkCompileTaskGenerator>newPriorityBlockingQueue();
      private final BlockingQueue<RegionRenderCacheBuilder> queueFreeRenderBuilders;
!     private final WorldVertexBufferUploader worldVertexUploader = new WorldVertexBufferUploader();
!     private final VertexBufferUploader vertexUploader = new VertexBufferUploader();
!     private final Queue<ChunkRenderDispatcher.PendingUpload> queueChunkUploads = Queues.<ChunkRenderDispatcher.PendingUpload>newPriorityQueue();
      private final ChunkRenderWorker renderWorker;
  
      public ChunkRenderDispatcher()
      {
          int i = Math.max(1, (int)((double)Runtime.getRuntime().maxMemory() * 0.3D) / 10485760);
          int j = Math.max(1, MathHelper.clamp(Runtime.getRuntime().availableProcessors(), 1, i / 5));
!         this.countRenderBuilders = MathHelper.clamp(j * 10, 1, i);
  
          if (j > 1)
          {
--- 30,68 ----
      private static final Logger LOGGER = LogManager.getLogger();
      private static final ThreadFactory THREAD_FACTORY = (new ThreadFactoryBuilder()).setNameFormat("Chunk Batcher %d").setDaemon(true).build();
      private final int countRenderBuilders;
!     private final List<Thread> listWorkerThreads;
!     private final List<ChunkRenderWorker> listThreadedWorkers;
!     private final PriorityBlockingQueue<ChunkCompileTaskGenerator> queueChunkUpdates;
      private final BlockingQueue<RegionRenderCacheBuilder> queueFreeRenderBuilders;
!     private final WorldVertexBufferUploader worldVertexUploader;
!     private final VertexBufferUploader vertexUploader;
!     private final Queue<ChunkRenderDispatcher.PendingUpload> queueChunkUploads;
      private final ChunkRenderWorker renderWorker;
  
      public ChunkRenderDispatcher()
      {
+         this(-1);
+     }
+ 
+     public ChunkRenderDispatcher(int p_i7_1_)
+     {
+         this.listWorkerThreads = Lists.<Thread>newArrayList();
+         this.listThreadedWorkers = Lists.<ChunkRenderWorker>newArrayList();
+         this.queueChunkUpdates = Queues.<ChunkCompileTaskGenerator>newPriorityBlockingQueue();
+         this.worldVertexUploader = new WorldVertexBufferUploader();
+         this.vertexUploader = new VertexBufferUploader();
+         this.queueChunkUploads = Queues.<ChunkRenderDispatcher.PendingUpload>newPriorityQueue();
          int i = Math.max(1, (int)((double)Runtime.getRuntime().maxMemory() * 0.3D) / 10485760);
          int j = Math.max(1, MathHelper.clamp(Runtime.getRuntime().availableProcessors(), 1, i / 5));
! 
!         if (p_i7_1_ < 0)
!         {
!             this.countRenderBuilders = MathHelper.clamp(j, 1, i);
!         }
!         else
!         {
!             this.countRenderBuilders = p_i7_1_;
!         }
  
          if (j > 1)
          {
***************
*** 120,126 ****
      public boolean updateChunkLater(RenderChunk chunkRenderer)
      {
          chunkRenderer.getLockCompileTask().lock();
!         boolean flag1;
  
          try
          {
--- 139,145 ----
      public boolean updateChunkLater(RenderChunk chunkRenderer)
      {
          chunkRenderer.getLockCompileTask().lock();
!         boolean flag;
  
          try
          {
***************
*** 132,152 ****
                      ChunkRenderDispatcher.this.queueChunkUpdates.remove(chunkcompiletaskgenerator);
                  }
              });
!             boolean flag = this.queueChunkUpdates.offer(chunkcompiletaskgenerator);
  
!             if (!flag)
              {
                  chunkcompiletaskgenerator.finish();
              }
  
!             flag1 = flag;
          }
          finally
          {
              chunkRenderer.getLockCompileTask().unlock();
          }
  
!         return flag1;
      }
  
      public boolean updateChunkNow(RenderChunk chunkRenderer)
--- 151,171 ----
                      ChunkRenderDispatcher.this.queueChunkUpdates.remove(chunkcompiletaskgenerator);
                  }
              });
!             boolean flag1 = this.queueChunkUpdates.offer(chunkcompiletaskgenerator);
  
!             if (!flag1)
              {
                  chunkcompiletaskgenerator.finish();
              }
  
!             flag = flag1;
          }
          finally
          {
              chunkRenderer.getLockCompileTask().unlock();
          }
  
!         return flag;
      }
  
      public boolean updateChunkNow(RenderChunk chunkRenderer)
***************
*** 162,168 ****
              {
                  this.renderWorker.processTask(chunkcompiletaskgenerator);
              }
!             catch (InterruptedException var7)
              {
                  ;
              }
--- 181,187 ----
              {
                  this.renderWorker.processTask(chunkcompiletaskgenerator);
              }
!             catch (InterruptedException var8)
              {
                  ;
              }
***************
*** 217,249 ****
      public boolean updateTransparencyLater(RenderChunk chunkRenderer)
      {
          chunkRenderer.getLockCompileTask().lock();
!         boolean flag;
  
          try
          {
              final ChunkCompileTaskGenerator chunkcompiletaskgenerator = chunkRenderer.makeCompileTaskTransparency();
  
!             if (chunkcompiletaskgenerator == null)
              {
!                 flag = true;
!                 return flag;
              }
  
!             chunkcompiletaskgenerator.addFinishRunnable(new Runnable()
!             {
!                 public void run()
!                 {
!                     ChunkRenderDispatcher.this.queueChunkUpdates.remove(chunkcompiletaskgenerator);
!                 }
!             });
!             flag = this.queueChunkUpdates.offer(chunkcompiletaskgenerator);
          }
          finally
          {
              chunkRenderer.getLockCompileTask().unlock();
          }
  
!         return flag;
      }
  
      public ListenableFuture<Object> uploadChunk(final BlockRenderLayer p_188245_1_, final BufferBuilder p_188245_2_, final RenderChunk p_188245_3_, final CompiledChunk p_188245_4_, final double p_188245_5_)
--- 236,269 ----
      public boolean updateTransparencyLater(RenderChunk chunkRenderer)
      {
          chunkRenderer.getLockCompileTask().lock();
!         boolean flag1;
  
          try
          {
              final ChunkCompileTaskGenerator chunkcompiletaskgenerator = chunkRenderer.makeCompileTaskTransparency();
  
!             if (chunkcompiletaskgenerator != null)
              {
!                 chunkcompiletaskgenerator.addFinishRunnable(new Runnable()
!                 {
!                     public void run()
!                     {
!                         ChunkRenderDispatcher.this.queueChunkUpdates.remove(chunkcompiletaskgenerator);
!                     }
!                 });
!                 boolean flag2 = this.queueChunkUpdates.offer(chunkcompiletaskgenerator);
!                 return flag2;
              }
  
!             boolean flag = true;
!             flag1 = flag;
          }
          finally
          {
              chunkRenderer.getLockCompileTask().unlock();
          }
  
!         return flag1;
      }
  
      public ListenableFuture<Object> uploadChunk(final BlockRenderLayer p_188245_1_, final BufferBuilder p_188245_2_, final RenderChunk p_188245_3_, final CompiledChunk p_188245_4_, final double p_188245_5_)
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk: ChunkRenderWo#
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk: ChunkRenderWo~
diff -rc ./client/renderer/chunk/ChunkRenderWorker.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk/ChunkRenderWorker.java
*** ./client/renderer/chunk/ChunkRenderWorker.java	2018-11-18 13:18:46.767355000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk/ChunkRenderWorker.java	2017-10-20 21:08:39.986849400 -0700
***************
*** 100,117 ****
              generator.getLock().unlock();
          }
  
!         Entity entity = Minecraft.getMinecraft().getRenderViewEntity();
  
!         if (entity == null)
          {
              generator.finish();
          }
          else
          {
              generator.setRegionRenderCacheBuilder(this.getRegionRenderCacheBuilder());
!             float f = (float)entity.posX;
!             float f1 = (float)entity.posY + entity.getEyeHeight();
!             float f2 = (float)entity.posZ;
              ChunkCompileTaskGenerator.Type chunkcompiletaskgenerator$type = generator.getType();
  
              if (chunkcompiletaskgenerator$type == ChunkCompileTaskGenerator.Type.REBUILD_CHUNK)
--- 100,117 ----
              generator.getLock().unlock();
          }
  
!         Entity entity1 = Minecraft.getMinecraft().getRenderViewEntity();
  
!         if (entity1 == null)
          {
              generator.finish();
          }
          else
          {
              generator.setRegionRenderCacheBuilder(this.getRegionRenderCacheBuilder());
!             float f = (float)entity1.posX;
!             float f1 = (float)entity1.posY + entity1.getEyeHeight();
!             float f2 = (float)entity1.posZ;
              ChunkCompileTaskGenerator.Type chunkcompiletaskgenerator$type = generator.getType();
  
              if (chunkcompiletaskgenerator$type == ChunkCompileTaskGenerator.Type.REBUILD_CHUNK)
***************
*** 145,169 ****
                  generator.getLock().unlock();
              }
  
!             final CompiledChunk compiledchunk = generator.getCompiledChunk();
!             ArrayList arraylist = Lists.newArrayList();
  
              if (chunkcompiletaskgenerator$type == ChunkCompileTaskGenerator.Type.REBUILD_CHUNK)
              {
                  for (BlockRenderLayer blockrenderlayer : BlockRenderLayer.values())
                  {
!                     if (compiledchunk.isLayerStarted(blockrenderlayer))
                      {
!                         arraylist.add(this.chunkRenderDispatcher.uploadChunk(blockrenderlayer, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(blockrenderlayer), generator.getRenderChunk(), compiledchunk, generator.getDistanceSq()));
                      }
                  }
              }
              else if (chunkcompiletaskgenerator$type == ChunkCompileTaskGenerator.Type.RESORT_TRANSPARENCY)
              {
!                 arraylist.add(this.chunkRenderDispatcher.uploadChunk(BlockRenderLayer.TRANSLUCENT, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT), generator.getRenderChunk(), compiledchunk, generator.getDistanceSq()));
              }
  
!             final ListenableFuture<List<Object>> listenablefuture = Futures.allAsList(arraylist);
              generator.addFinishRunnable(new Runnable()
              {
                  public void run()
--- 145,169 ----
                  generator.getLock().unlock();
              }
  
!             final CompiledChunk compiledchunk1 = generator.getCompiledChunk();
!             ArrayList arraylist1 = Lists.newArrayList();
  
              if (chunkcompiletaskgenerator$type == ChunkCompileTaskGenerator.Type.REBUILD_CHUNK)
              {
                  for (BlockRenderLayer blockrenderlayer : BlockRenderLayer.values())
                  {
!                     if (compiledchunk1.isLayerStarted(blockrenderlayer))
                      {
!                         arraylist1.add(this.chunkRenderDispatcher.uploadChunk(blockrenderlayer, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(blockrenderlayer), generator.getRenderChunk(), compiledchunk1, generator.getDistanceSq()));
                      }
                  }
              }
              else if (chunkcompiletaskgenerator$type == ChunkCompileTaskGenerator.Type.RESORT_TRANSPARENCY)
              {
!                 arraylist1.add(this.chunkRenderDispatcher.uploadChunk(BlockRenderLayer.TRANSLUCENT, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT), generator.getRenderChunk(), compiledchunk1, generator.getDistanceSq()));
              }
  
!             final ListenableFuture<List<Object>> listenablefuture = Futures.allAsList(arraylist1);
              generator.addFinishRunnable(new Runnable()
              {
                  public void run()
***************
*** 177,205 ****
                  {
                      ChunkRenderWorker.this.freeRenderBuilder(generator);
                      generator.getLock().lock();
!                     label49:
                      {
!                         try
                          {
-                             if (generator.getStatus() == ChunkCompileTaskGenerator.Status.UPLOADING)
-                             {
-                                 generator.setStatus(ChunkCompileTaskGenerator.Status.DONE);
-                                 break label49;
-                             }
- 
                              if (!generator.isFinished())
                              {
                                  ChunkRenderWorker.LOGGER.warn("Chunk render task was {} when I expected it to be uploading; aborting task", (Object)generator.getStatus());
                              }
!                         }
!                         finally
!                         {
!                             generator.getLock().unlock();
                          }
  
!                         return;
                      }
!                     generator.getRenderChunk().setCompiledChunk(compiledchunk);
                  }
                  public void onFailure(Throwable p_onFailure_1_)
                  {
--- 177,203 ----
                  {
                      ChunkRenderWorker.this.freeRenderBuilder(generator);
                      generator.getLock().lock();
! 
!                     try
                      {
!                         if (generator.getStatus() != ChunkCompileTaskGenerator.Status.UPLOADING)
                          {
                              if (!generator.isFinished())
                              {
                                  ChunkRenderWorker.LOGGER.warn("Chunk render task was {} when I expected it to be uploading; aborting task", (Object)generator.getStatus());
                              }
! 
!                             return;
                          }
  
!                         generator.setStatus(ChunkCompileTaskGenerator.Status.DONE);
                      }
!                     finally
!                     {
!                         generator.getLock().unlock();
!                     }
! 
!                     generator.getRenderChunk().setCompiledChunk(compiledchunk1);
                  }
                  public void onFailure(Throwable p_onFailure_1_)
                  {
***************
*** 216,222 ****
  
      private boolean isChunkExisting(BlockPos p_188263_1_, World p_188263_2_)
      {
!         return !p_188263_2_.getChunkFromChunkCoords(p_188263_1_.getX() >> 4, p_188263_1_.getZ() >> 4).isEmpty();
      }
  
      private RegionRenderCacheBuilder getRegionRenderCacheBuilder() throws InterruptedException
--- 214,227 ----
  
      private boolean isChunkExisting(BlockPos p_188263_1_, World p_188263_2_)
      {
!         if (p_188263_2_ == null)
!         {
!             return false;
!         }
!         else
!         {
!             return !p_188263_2_.getChunkFromChunkCoords(p_188263_1_.getX() >> 4, p_188263_1_.getZ() >> 4).isEmpty();
!         }
      }
  
      private RegionRenderCacheBuilder getRegionRenderCacheBuilder() throws InterruptedException
diff -rc ./client/renderer/chunk/RenderChunk.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk/RenderChunk.java
*** ./client/renderer/chunk/RenderChunk.java	2018-11-18 13:18:46.829334000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk/RenderChunk.java	2017-10-20 21:35:40.713452900 -0700
***************
*** 7,21 ****
--- 7,26 ----
  import java.util.concurrent.locks.ReentrantLock;
  import javax.annotation.Nullable;
  import net.minecraft.block.Block;
+ import net.minecraft.block.BlockCactus;
+ import net.minecraft.block.BlockRedstoneWire;
  import net.minecraft.block.state.IBlockState;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.entity.EntityPlayerSP;
+ import net.minecraft.client.multiplayer.WorldClient;
  import net.minecraft.client.renderer.BlockRendererDispatcher;
  import net.minecraft.client.renderer.BufferBuilder;
  import net.minecraft.client.renderer.GLAllocation;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.OpenGlHelper;
+ import net.minecraft.client.renderer.RegionRenderCacheBuilder;
  import net.minecraft.client.renderer.RenderGlobal;
+ import net.minecraft.client.renderer.ViewFrustum;
  import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher;
  import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
***************
*** 29,34 ****
--- 34,46 ----
  import net.minecraft.world.ChunkCache;
  import net.minecraft.world.World;
  import net.minecraft.world.chunk.Chunk;
+ import optifine.BlockPosM;
+ import optifine.ChunkCacheOF;
+ import optifine.Config;
+ import optifine.Reflector;
+ import optifine.ReflectorForge;
+ import optifine.RenderEnv;
+ import shadersmod.client.SVertexBuilder;
  
  public class RenderChunk
  {
***************
*** 49,55 ****
      private final BlockPos.MutableBlockPos position = new BlockPos.MutableBlockPos(-1, -1, -1);
      private final BlockPos.MutableBlockPos[] mapEnumFacing = new BlockPos.MutableBlockPos[6];
      private boolean needsUpdateCustom;
!     private ChunkCache region;
  
      public RenderChunk(World p_i47120_1_, RenderGlobal p_i47120_2_, int p_i47120_3_)
      {
--- 61,73 ----
      private final BlockPos.MutableBlockPos position = new BlockPos.MutableBlockPos(-1, -1, -1);
      private final BlockPos.MutableBlockPos[] mapEnumFacing = new BlockPos.MutableBlockPos[6];
      private boolean needsUpdateCustom;
!     private static BlockRenderLayer[] ENUM_WORLD_BLOCK_LAYERS = BlockRenderLayer.values();
!     private BlockRenderLayer[] blockLayersSingle = new BlockRenderLayer[1];
!     private boolean isMipmaps = Config.isMipmaps();
!     private boolean fixBlockLayer = !Reflector.BetterFoliageClient.exists();
!     private boolean playerUpdate = false;
!     private RenderChunk[] renderChunksOfset16 = new RenderChunk[6];
!     private Chunk chunk;
  
      public RenderChunk(World p_i47120_1_, RenderGlobal p_i47120_2_, int p_i47120_3_)
      {
***************
*** 100,110 ****
              this.position.setPos(p_189562_1_, p_189562_2_, p_189562_3_);
              this.boundingBox = new AxisAlignedBB((double)p_189562_1_, (double)p_189562_2_, (double)p_189562_3_, (double)(p_189562_1_ + 16), (double)(p_189562_2_ + 16), (double)(p_189562_3_ + 16));
  
!             for (EnumFacing enumfacing : EnumFacing.values())
              {
                  this.mapEnumFacing[enumfacing.ordinal()].setPos(this.position).move(enumfacing, 16);
              }
  
              this.initModelviewMatrix();
          }
      }
--- 118,130 ----
              this.position.setPos(p_189562_1_, p_189562_2_, p_189562_3_);
              this.boundingBox = new AxisAlignedBB((double)p_189562_1_, (double)p_189562_2_, (double)p_189562_3_, (double)(p_189562_1_ + 16), (double)(p_189562_2_ + 16), (double)(p_189562_3_ + 16));
  
!             for (EnumFacing enumfacing : EnumFacing.VALUES)
              {
                  this.mapEnumFacing[enumfacing.ordinal()].setPos(this.position).move(enumfacing, 16);
+                 this.renderChunksOfset16[enumfacing.ordinal()] = null;
              }
  
+             this.chunk = null;
              this.initModelviewMatrix();
          }
      }
***************
*** 115,123 ****
  
          if (compiledchunk.getState() != null && !compiledchunk.isLayerEmpty(BlockRenderLayer.TRANSLUCENT))
          {
!             this.preRenderBlocks(generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT), this.position);
!             generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT).setVertexState(compiledchunk.getState());
!             this.postRenderBlocks(BlockRenderLayer.TRANSLUCENT, x, y, z, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT), compiledchunk);
          }
      }
  
--- 135,144 ----
  
          if (compiledchunk.getState() != null && !compiledchunk.isLayerEmpty(BlockRenderLayer.TRANSLUCENT))
          {
!             BufferBuilder bufferbuilder = generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(BlockRenderLayer.TRANSLUCENT);
!             this.preRenderBlocks(bufferbuilder, this.position);
!             bufferbuilder.setVertexState(compiledchunk.getState());
!             this.postRenderBlocks(BlockRenderLayer.TRANSLUCENT, x, y, z, bufferbuilder, compiledchunk);
          }
      }
  
***************
*** 146,234 ****
          VisGraph lvt_9_1_ = new VisGraph();
          HashSet lvt_10_1_ = Sets.newHashSet();
  
!         if (!this.region.extendedLevelsInChunkCache())
          {
!             ++renderChunksUpdated;
!             boolean[] aboolean = new boolean[BlockRenderLayer.values().length];
!             BlockRendererDispatcher blockrendererdispatcher = Minecraft.getMinecraft().getBlockRendererDispatcher();
  
!             for (BlockPos.MutableBlockPos blockpos$mutableblockpos : BlockPos.getAllInBoxMutable(blockpos, blockpos1))
              {
!                 IBlockState iblockstate = this.region.getBlockState(blockpos$mutableblockpos);
!                 Block block = iblockstate.getBlock();
  
!                 if (iblockstate.isOpaqueCube())
                  {
!                     lvt_9_1_.setOpaqueCube(blockpos$mutableblockpos);
!                 }
  
!                 if (block.hasTileEntity())
!                 {
!                     TileEntity tileentity = this.region.getTileEntity(blockpos$mutableblockpos, Chunk.EnumCreateEntityType.CHECK);
  
!                     if (tileentity != null)
                      {
!                         TileEntitySpecialRenderer<TileEntity> tileentityspecialrenderer = TileEntityRendererDispatcher.instance.<TileEntity>getSpecialRenderer(tileentity);
  
!                         if (tileentityspecialrenderer != null)
                          {
!                             compiledchunk.addTileEntity(tileentity);
  
!                             if (tileentityspecialrenderer.isGlobalRenderer(tileentity))
                              {
!                                 lvt_10_1_.add(tileentity);
                              }
                          }
                      }
-                 }
  
!                 BlockRenderLayer blockrenderlayer1 = block.getBlockLayer();
!                 int j = blockrenderlayer1.ordinal();
  
!                 if (block.getDefaultState().getRenderType() != EnumBlockRenderType.INVISIBLE)
!                 {
!                     BufferBuilder bufferbuilder = generator.getRegionRenderCacheBuilder().getWorldRendererByLayerId(j);
  
!                     if (!compiledchunk.isLayerStarted(blockrenderlayer1))
                      {
!                         compiledchunk.setLayerStarted(blockrenderlayer1);
!                         this.preRenderBlocks(bufferbuilder, blockpos);
                      }
  
!                     aboolean[j] |= blockrendererdispatcher.renderBlock(iblockstate, blockpos$mutableblockpos, this.region, bufferbuilder);
                  }
-             }
  
!             for (BlockRenderLayer blockrenderlayer : BlockRenderLayer.values())
!             {
!                 if (aboolean[blockrenderlayer.ordinal()])
                  {
!                     compiledchunk.setLayerUsed(blockrenderlayer);
!                 }
  
!                 if (compiledchunk.isLayerStarted(blockrenderlayer))
!                 {
!                     this.postRenderBlocks(blockrenderlayer, x, y, z, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(blockrenderlayer), compiledchunk);
                  }
              }
-         }
  
!         compiledchunk.setVisibility(lvt_9_1_.computeVisibility());
!         this.lockCompileTask.lock();
  
!         try
!         {
!             Set<TileEntity> set = Sets.newHashSet(lvt_10_1_);
!             Set<TileEntity> set1 = Sets.newHashSet(this.setTileEntities);
!             set.removeAll(this.setTileEntities);
!             set1.removeAll(lvt_10_1_);
!             this.setTileEntities.clear();
!             this.setTileEntities.addAll(lvt_10_1_);
!             this.renderGlobal.updateTileEntities(set1, set);
!         }
!         finally
!         {
!             this.lockCompileTask.unlock();
          }
      }
  
--- 167,323 ----
          VisGraph lvt_9_1_ = new VisGraph();
          HashSet lvt_10_1_ = Sets.newHashSet();
  
!         if (this.world != null)
          {
!             ChunkCacheOF chunkcacheof = this.makeChunkCacheOF();
  
!             if (!chunkcacheof.isEmpty())
              {
!                 ++renderChunksUpdated;
!                 chunkcacheof.renderStart();
!                 boolean[] aboolean = new boolean[ENUM_WORLD_BLOCK_LAYERS.length];
!                 BlockRendererDispatcher blockrendererdispatcher = Minecraft.getMinecraft().getBlockRendererDispatcher();
!                 boolean flag = Reflector.ForgeBlock_canRenderInLayer.exists();
!                 boolean flag1 = Reflector.ForgeHooksClient_setRenderLayer.exists();
  
!                 for (Object blockposm0 : BlockPosM.getAllInBoxMutable(blockpos, blockpos1))
                  {
!                 	BlockPosM blockposm = (BlockPosM) blockposm0;
!                     IBlockState iblockstate = chunkcacheof.getBlockState(blockposm);
!                     Block block = iblockstate.getBlock();
  
!                     if (iblockstate.isOpaqueCube())
!                     {
!                         lvt_9_1_.setOpaqueCube(blockposm);
!                     }
  
!                     if (ReflectorForge.blockHasTileEntity(iblockstate))
                      {
!                         TileEntity tileentity = chunkcacheof.getTileEntity(blockposm, Chunk.EnumCreateEntityType.CHECK);
  
!                         if (tileentity != null)
                          {
!                             TileEntitySpecialRenderer<TileEntity> tileentityspecialrenderer = TileEntityRendererDispatcher.instance.<TileEntity>getSpecialRenderer(tileentity);
  
!                             if (tileentityspecialrenderer != null)
                              {
!                                 if (tileentityspecialrenderer.isGlobalRenderer(tileentity))
!                                 {
!                                     lvt_10_1_.add(tileentity);
!                                 }
!                                 else
!                                 {
!                                     compiledchunk.addTileEntity(tileentity);
!                                 }
                              }
                          }
                      }
  
!                     BlockRenderLayer[] ablockrenderlayer;
  
!                     if (flag)
!                     {
!                         ablockrenderlayer = ENUM_WORLD_BLOCK_LAYERS;
!                     }
!                     else
!                     {
!                         ablockrenderlayer = this.blockLayersSingle;
!                         ablockrenderlayer[0] = block.getBlockLayer();
!                     }
  
!                     for (int j = 0; j < ablockrenderlayer.length; ++j)
                      {
!                         BlockRenderLayer blockrenderlayer = ablockrenderlayer[j];
! 
!                         if (flag)
!                         {
!                             boolean flag2 = Reflector.callBoolean(block, Reflector.ForgeBlock_canRenderInLayer, iblockstate, blockrenderlayer);
! 
!                             if (!flag2)
!                             {
!                                 continue;
!                             }
!                         }
! 
!                         if (flag1)
!                         {
!                             Reflector.callVoid(Reflector.ForgeHooksClient_setRenderLayer, blockrenderlayer);
!                         }
! 
!                         if (this.fixBlockLayer)
!                         {
!                             blockrenderlayer = this.fixBlockLayer(block, blockrenderlayer);
!                         }
! 
!                         int k = blockrenderlayer.ordinal();
! 
!                         if (block.getDefaultState().getRenderType() != EnumBlockRenderType.INVISIBLE)
!                         {
!                             BufferBuilder bufferbuilder = generator.getRegionRenderCacheBuilder().getWorldRendererByLayerId(k);
!                             bufferbuilder.setBlockLayer(blockrenderlayer);
!                             RenderEnv renderenv = bufferbuilder.getRenderEnv(chunkcacheof, iblockstate, blockposm);
!                             renderenv.setRegionRenderCacheBuilder(generator.getRegionRenderCacheBuilder());
! 
!                             if (!compiledchunk.isLayerStarted(blockrenderlayer))
!                             {
!                                 compiledchunk.setLayerStarted(blockrenderlayer);
!                                 this.preRenderBlocks(bufferbuilder, blockpos);
!                             }
! 
!                             aboolean[k] |= blockrendererdispatcher.renderBlock(iblockstate, blockposm, chunkcacheof, bufferbuilder);
! 
!                             if (renderenv.isOverlaysRendered())
!                             {
!                                 this.postRenderOverlays(generator.getRegionRenderCacheBuilder(), compiledchunk, aboolean);
!                                 renderenv.setOverlaysRendered(false);
!                             }
!                         }
                      }
  
!                     if (flag1)
!                     {
!                         Reflector.callVoid(Reflector.ForgeHooksClient_setRenderLayer, null);
!                     }
                  }
  
!                 for (BlockRenderLayer blockrenderlayer1 : ENUM_WORLD_BLOCK_LAYERS)
                  {
!                     if (aboolean[blockrenderlayer1.ordinal()])
!                     {
!                         compiledchunk.setLayerUsed(blockrenderlayer1);
!                     }
  
!                     if (compiledchunk.isLayerStarted(blockrenderlayer1))
!                     {
!                         if (Config.isShaders())
!                         {
!                             SVertexBuilder.calcNormalChunkLayer(generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(blockrenderlayer1));
!                         }
! 
!                         this.postRenderBlocks(blockrenderlayer1, x, y, z, generator.getRegionRenderCacheBuilder().getWorldRendererByLayer(blockrenderlayer1), compiledchunk);
!                     }
                  }
+ 
+                 chunkcacheof.renderFinish();
              }
  
!             compiledchunk.setVisibility(lvt_9_1_.computeVisibility());
!             this.lockCompileTask.lock();
  
!             try
!             {
!                 Set<TileEntity> set = Sets.newHashSet(lvt_10_1_);
!                 Set<TileEntity> set1 = Sets.newHashSet(this.setTileEntities);
!                 set.removeAll(this.setTileEntities);
!                 set1.removeAll(lvt_10_1_);
!                 this.setTileEntities.clear();
!                 this.setTileEntities.addAll(lvt_10_1_);
!                 this.renderGlobal.updateTileEntities(set1, set);
!             }
!             finally
!             {
!                 this.lockCompileTask.unlock();
!             }
          }
      }
  
***************
*** 278,316 ****
      private void resetChunkCache()
      {
          int i = 1;
-         this.region = new ChunkCache(this.world, this.position.add(-1, -1, -1), this.position.add(16, 16, 16), 1);
      }
  
      @Nullable
      public ChunkCompileTaskGenerator makeCompileTaskTransparency()
      {
          this.lockCompileTask.lock();
!         ChunkCompileTaskGenerator chunkcompiletaskgenerator;
  
          try
          {
!             if (this.compileTask == null || this.compileTask.getStatus() != ChunkCompileTaskGenerator.Status.PENDING)
              {
!                 if (this.compileTask != null && this.compileTask.getStatus() != ChunkCompileTaskGenerator.Status.DONE)
!                 {
!                     this.compileTask.finish();
!                     this.compileTask = null;
!                 }
  
!                 this.compileTask = new ChunkCompileTaskGenerator(this, ChunkCompileTaskGenerator.Type.RESORT_TRANSPARENCY, this.getDistanceSq());
!                 this.compileTask.setCompiledChunk(this.compiledChunk);
!                 chunkcompiletaskgenerator = this.compileTask;
!                 return chunkcompiletaskgenerator;
              }
  
!             chunkcompiletaskgenerator = null;
          }
          finally
          {
              this.lockCompileTask.unlock();
          }
  
!         return chunkcompiletaskgenerator;
      }
  
      protected double getDistanceSq()
--- 367,405 ----
      private void resetChunkCache()
      {
          int i = 1;
      }
  
      @Nullable
      public ChunkCompileTaskGenerator makeCompileTaskTransparency()
      {
          this.lockCompileTask.lock();
!         ChunkCompileTaskGenerator chunkcompiletaskgenerator1;
  
          try
          {
!             if (this.compileTask != null && this.compileTask.getStatus() == ChunkCompileTaskGenerator.Status.PENDING)
              {
!                 ChunkCompileTaskGenerator chunkcompiletaskgenerator2 = null;
!                 return chunkcompiletaskgenerator2;
!             }
  
!             if (this.compileTask != null && this.compileTask.getStatus() != ChunkCompileTaskGenerator.Status.DONE)
!             {
!                 this.compileTask.finish();
!                 this.compileTask = null;
              }
  
!             this.compileTask = new ChunkCompileTaskGenerator(this, ChunkCompileTaskGenerator.Type.RESORT_TRANSPARENCY, this.getDistanceSq());
!             this.compileTask.setCompiledChunk(this.compiledChunk);
!             ChunkCompileTaskGenerator chunkcompiletaskgenerator = this.compileTask;
!             chunkcompiletaskgenerator1 = chunkcompiletaskgenerator;
          }
          finally
          {
              this.lockCompileTask.unlock();
          }
  
!         return chunkcompiletaskgenerator1;
      }
  
      protected double getDistanceSq()
***************
*** 409,420 ****
--- 498,515 ----
  
          this.needsUpdate = true;
          this.needsUpdateCustom = needsUpdateIn;
+ 
+         if (this.isWorldPlayerUpdate())
+         {
+             this.playerUpdate = true;
+         }
      }
  
      public void clearNeedsUpdate()
      {
          this.needsUpdate = false;
          this.needsUpdateCustom = false;
+         this.playerUpdate = false;
      }
  
      public boolean isNeedsUpdate()
***************
*** 436,439 ****
--- 531,643 ----
      {
          return this.world;
      }
+ 
+     private boolean isWorldPlayerUpdate()
+     {
+         if (this.world instanceof WorldClient)
+         {
+             WorldClient worldclient = (WorldClient)this.world;
+             return worldclient.isPlayerUpdate();
+         }
+         else
+         {
+             return false;
+         }
+     }
+ 
+     public boolean isPlayerUpdate()
+     {
+         return this.playerUpdate;
+     }
+ 
+     private BlockRenderLayer fixBlockLayer(Block p_fixBlockLayer_1_, BlockRenderLayer p_fixBlockLayer_2_)
+     {
+         if (this.isMipmaps)
+         {
+             if (p_fixBlockLayer_2_ == BlockRenderLayer.CUTOUT)
+             {
+                 if (p_fixBlockLayer_1_ instanceof BlockRedstoneWire)
+                 {
+                     return p_fixBlockLayer_2_;
+                 }
+ 
+                 if (p_fixBlockLayer_1_ instanceof BlockCactus)
+                 {
+                     return p_fixBlockLayer_2_;
+                 }
+ 
+                 return BlockRenderLayer.CUTOUT_MIPPED;
+             }
+         }
+         else if (p_fixBlockLayer_2_ == BlockRenderLayer.CUTOUT_MIPPED)
+         {
+             return BlockRenderLayer.CUTOUT;
+         }
+ 
+         return p_fixBlockLayer_2_;
+     }
+ 
+     private void postRenderOverlays(RegionRenderCacheBuilder p_postRenderOverlays_1_, CompiledChunk p_postRenderOverlays_2_, boolean[] p_postRenderOverlays_3_)
+     {
+         this.postRenderOverlay(BlockRenderLayer.CUTOUT, p_postRenderOverlays_1_, p_postRenderOverlays_2_, p_postRenderOverlays_3_);
+         this.postRenderOverlay(BlockRenderLayer.CUTOUT_MIPPED, p_postRenderOverlays_1_, p_postRenderOverlays_2_, p_postRenderOverlays_3_);
+         this.postRenderOverlay(BlockRenderLayer.TRANSLUCENT, p_postRenderOverlays_1_, p_postRenderOverlays_2_, p_postRenderOverlays_3_);
+     }
+ 
+     private void postRenderOverlay(BlockRenderLayer p_postRenderOverlay_1_, RegionRenderCacheBuilder p_postRenderOverlay_2_, CompiledChunk p_postRenderOverlay_3_, boolean[] p_postRenderOverlay_4_)
+     {
+         BufferBuilder bufferbuilder = p_postRenderOverlay_2_.getWorldRendererByLayer(p_postRenderOverlay_1_);
+ 
+         if (bufferbuilder.isDrawing())
+         {
+             p_postRenderOverlay_3_.setLayerStarted(p_postRenderOverlay_1_);
+             p_postRenderOverlay_4_[p_postRenderOverlay_1_.ordinal()] = true;
+         }
+     }
+ 
+     private ChunkCacheOF makeChunkCacheOF()
+     {
+         BlockPos blockpos = this.position.add(-1, -1, -1);
+         ChunkCache chunkcache = this.createRegionRenderCache(this.world, blockpos, this.position.add(16, 16, 16), 1);
+ 
+         if (Reflector.MinecraftForgeClient_onRebuildChunk.exists())
+         {
+             Reflector.call(Reflector.MinecraftForgeClient_onRebuildChunk, this.world, this.position, chunkcache);
+         }
+ 
+         ChunkCacheOF chunkcacheof = new ChunkCacheOF(chunkcache, blockpos, 1);
+         return chunkcacheof;
+     }
+ 
+     public RenderChunk getRenderChunkOffset16(ViewFrustum p_getRenderChunkOffset16_1_, EnumFacing p_getRenderChunkOffset16_2_)
+     {
+         RenderChunk renderchunk = this.renderChunksOfset16[p_getRenderChunkOffset16_2_.ordinal()];
+ 
+         if (renderchunk == null)
+         {
+             BlockPos blockpos = this.getBlockPosOffset16(p_getRenderChunkOffset16_2_);
+             renderchunk = p_getRenderChunkOffset16_1_.getRenderChunk(blockpos);
+             this.renderChunksOfset16[p_getRenderChunkOffset16_2_.ordinal()] = renderchunk;
+         }
+ 
+         return renderchunk;
+     }
+ 
+     public Chunk getChunk(World p_getChunk_1_)
+     {
+         if (this.chunk != null && this.chunk.isLoaded())
+         {
+             return this.chunk;
+         }
+         else
+         {
+             this.chunk = p_getChunk_1_.getChunkFromBlockCoords(this.getPosition());
+             return this.chunk;
+         }
+     }
+ 
+     protected ChunkCache createRegionRenderCache(World p_createRegionRenderCache_1_, BlockPos p_createRegionRenderCache_2_, BlockPos p_createRegionRenderCache_3_, int p_createRegionRenderCache_4_)
+     {
+         return new ChunkCache(p_createRegionRenderCache_1_, p_createRegionRenderCache_2_, p_createRegionRenderCache_3_, p_createRegionRenderCache_4_);
+     }
  }
diff -rc ./client/renderer/chunk/SetVisibility.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk/SetVisibility.java
*** ./client/renderer/chunk/SetVisibility.java	2018-11-18 13:18:46.846309000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk/SetVisibility.java	2017-10-20 21:01:21.296598000 -0700
***************
*** 1,18 ****
  package net.minecraft.client.renderer.chunk;
  
- import java.util.BitSet;
  import java.util.Set;
  import net.minecraft.util.EnumFacing;
  
  public class SetVisibility
  {
      private static final int COUNT_FACES = EnumFacing.values().length;
!     private final BitSet bitSet;
! 
!     public SetVisibility()
!     {
!         this.bitSet = new BitSet(COUNT_FACES * COUNT_FACES);
!     }
  
      public void setManyVisible(Set<EnumFacing> facing)
      {
--- 1,12 ----
  package net.minecraft.client.renderer.chunk;
  
  import java.util.Set;
  import net.minecraft.util.EnumFacing;
  
  public class SetVisibility
  {
      private static final int COUNT_FACES = EnumFacing.values().length;
!     private long bits;
  
      public void setManyVisible(Set<EnumFacing> facing)
      {
***************
*** 27,44 ****
  
      public void setVisible(EnumFacing facing, EnumFacing facing2, boolean p_178619_3_)
      {
!         this.bitSet.set(facing.ordinal() + facing2.ordinal() * COUNT_FACES, p_178619_3_);
!         this.bitSet.set(facing2.ordinal() + facing.ordinal() * COUNT_FACES, p_178619_3_);
      }
  
      public void setAllVisible(boolean visible)
      {
!         this.bitSet.set(0, this.bitSet.size(), visible);
      }
  
      public boolean isVisible(EnumFacing facing, EnumFacing facing2)
      {
!         return this.bitSet.get(facing.ordinal() + facing2.ordinal() * COUNT_FACES);
      }
  
      public String toString()
--- 21,45 ----
  
      public void setVisible(EnumFacing facing, EnumFacing facing2, boolean p_178619_3_)
      {
!         this.setBit(facing.ordinal() + facing2.ordinal() * COUNT_FACES, p_178619_3_);
!         this.setBit(facing2.ordinal() + facing.ordinal() * COUNT_FACES, p_178619_3_);
      }
  
      public void setAllVisible(boolean visible)
      {
!         if (visible)
!         {
!             this.bits = -1L;
!         }
!         else
!         {
!             this.bits = 0L;
!         }
      }
  
      public boolean isVisible(EnumFacing facing, EnumFacing facing2)
      {
!         return this.getBit(facing.ordinal() + facing2.ordinal() * COUNT_FACES);
      }
  
      public String toString()
***************
*** 75,78 ****
--- 76,106 ----
  
          return stringbuilder.toString();
      }
+ 
+     private boolean getBit(int p_getBit_1_)
+     {
+         return (this.bits & (long)(1 << p_getBit_1_)) != 0L;
+     }
+ 
+     private void setBit(int p_setBit_1_, boolean p_setBit_2_)
+     {
+         if (p_setBit_2_)
+         {
+             this.setBit(p_setBit_1_);
+         }
+         else
+         {
+             this.clearBit(p_setBit_1_);
+         }
+     }
+ 
+     private void setBit(int p_setBit_1_)
+     {
+         this.bits |= (long)(1 << p_setBit_1_);
+     }
+ 
+     private void clearBit(int p_clearBit_1_)
+     {
+         this.bits &= (long)(~(1 << p_clearBit_1_));
+     }
  }
diff -rc ./client/renderer/chunk/VisGraph.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk/VisGraph.java
*** ./client/renderer/chunk/VisGraph.java	2018-11-18 13:18:46.864299000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/chunk/VisGraph.java	2017-10-20 21:01:21.307626000 -0700
***************
*** 1,9 ****
  package net.minecraft.client.renderer.chunk;
  
! import com.google.common.collect.Queues;
  import java.util.BitSet;
  import java.util.EnumSet;
- import java.util.Queue;
  import java.util.Set;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.IntegerCache;
--- 1,8 ----
  package net.minecraft.client.renderer.chunk;
  
! import java.util.ArrayDeque;
  import java.util.BitSet;
  import java.util.EnumSet;
  import java.util.Set;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.IntegerCache;
***************
*** 68,90 ****
      private Set<EnumFacing> floodFill(int p_178604_1_)
      {
          Set<EnumFacing> set = EnumSet.<EnumFacing>noneOf(EnumFacing.class);
!         Queue<Integer> queue = Queues.<Integer>newArrayDeque();
!         queue.add(IntegerCache.getInteger(p_178604_1_));
          this.bitSet.set(p_178604_1_, true);
  
!         while (!queue.isEmpty())
          {
!             int i = ((Integer)queue.poll()).intValue();
              this.addEdges(i, set);
  
!             for (EnumFacing enumfacing : EnumFacing.values())
              {
                  int j = this.getNeighborIndexAtFace(i, enumfacing);
  
                  if (j >= 0 && !this.bitSet.get(j))
                  {
                      this.bitSet.set(j, true);
!                     queue.add(IntegerCache.getInteger(j));
                  }
              }
          }
--- 67,89 ----
      private Set<EnumFacing> floodFill(int p_178604_1_)
      {
          Set<EnumFacing> set = EnumSet.<EnumFacing>noneOf(EnumFacing.class);
!         ArrayDeque arraydeque = new ArrayDeque(384);
!         arraydeque.add(IntegerCache.getInteger(p_178604_1_));
          this.bitSet.set(p_178604_1_, true);
  
!         while (!arraydeque.isEmpty())
          {
!             int i = ((Integer)arraydeque.poll()).intValue();
              this.addEdges(i, set);
  
!             for (EnumFacing enumfacing : EnumFacing.VALUES)
              {
                  int j = this.getNeighborIndexAtFace(i, enumfacing);
  
                  if (j >= 0 && !this.bitSet.get(j))
                  {
                      this.bitSet.set(j, true);
!                     arraydeque.add(IntegerCache.getInteger(j));
                  }
              }
          }
diff -rc ./client/renderer/culling/ClippingHelper.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/culling/ClippingHelper.java
*** ./client/renderer/culling/ClippingHelper.java	2018-11-18 13:18:47.062184000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/culling/ClippingHelper.java	2017-10-20 21:01:21.339035000 -0700
***************
*** 7,15 ****
      public float[] modelviewMatrix = new float[16];
      public float[] clippingMatrix = new float[16];
  
!     private double dot(float[] p_178624_1_, double p_178624_2_, double p_178624_4_, double p_178624_6_)
      {
!         return (double)p_178624_1_[0] * p_178624_2_ + (double)p_178624_1_[1] * p_178624_4_ + (double)p_178624_1_[2] * p_178624_6_ + (double)p_178624_1_[3];
      }
  
      /**
--- 7,15 ----
      public float[] modelviewMatrix = new float[16];
      public float[] clippingMatrix = new float[16];
  
!     private float dot(float[] p_dot_1_, float p_dot_2_, float p_dot_3_, float p_dot_4_)
      {
!         return p_dot_1_[0] * p_dot_2_ + p_dot_1_[1] * p_dot_3_ + p_dot_1_[2] * p_dot_4_ + p_dot_1_[3];
      }
  
      /**
***************
*** 17,27 ****
       */
      public boolean isBoxInFrustum(double p_78553_1_, double p_78553_3_, double p_78553_5_, double p_78553_7_, double p_78553_9_, double p_78553_11_)
      {
          for (int i = 0; i < 6; ++i)
          {
              float[] afloat = this.frustum[i];
  
!             if (this.dot(afloat, p_78553_1_, p_78553_3_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_3_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_1_, p_78553_9_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_9_, p_78553_5_) <= 0.0D && this.dot(afloat, p_78553_1_, p_78553_3_, p_78553_11_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_3_, p_78553_11_) <= 0.0D && this.dot(afloat, p_78553_1_, p_78553_9_, p_78553_11_) <= 0.0D && this.dot(afloat, p_78553_7_, p_78553_9_, p_78553_11_) <= 0.0D)
              {
                  return false;
              }
--- 17,34 ----
       */
      public boolean isBoxInFrustum(double p_78553_1_, double p_78553_3_, double p_78553_5_, double p_78553_7_, double p_78553_9_, double p_78553_11_)
      {
+         float f = (float)p_78553_1_;
+         float f1 = (float)p_78553_3_;
+         float f2 = (float)p_78553_5_;
+         float f3 = (float)p_78553_7_;
+         float f4 = (float)p_78553_9_;
+         float f5 = (float)p_78553_11_;
+ 
          for (int i = 0; i < 6; ++i)
          {
              float[] afloat = this.frustum[i];
  
!             if (this.dot(afloat, f, f1, f2) <= 0.0F && this.dot(afloat, f3, f1, f2) <= 0.0F && this.dot(afloat, f, f4, f2) <= 0.0F && this.dot(afloat, f3, f4, f2) <= 0.0F && this.dot(afloat, f, f1, f5) <= 0.0F && this.dot(afloat, f3, f1, f5) <= 0.0F && this.dot(afloat, f, f4, f5) <= 0.0F && this.dot(afloat, f3, f4, f5) <= 0.0F)
              {
                  return false;
              }
diff -rc ./client/renderer/entity/layers/LayerArmorBase.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerArmorBase.java
*** ./client/renderer/entity/layers/LayerArmorBase.java	2018-11-18 13:18:48.215519000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerArmorBase.java	2017-10-20 21:35:40.288453200 -0700
***************
*** 6,16 ****
--- 6,23 ----
  import net.minecraft.client.model.ModelBase;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.entity.RenderLivingBase;
+ import net.minecraft.entity.Entity;
  import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.inventory.EntityEquipmentSlot;
  import net.minecraft.item.ItemArmor;
  import net.minecraft.item.ItemStack;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomItems;
+ import optifine.Reflector;
+ import optifine.ReflectorForge;
+ import shadersmod.client.Shaders;
+ import shadersmod.client.ShadersRender;
  
  public abstract class LayerArmorBase<T extends ModelBase> implements LayerRenderer<EntityLivingBase>
  {
***************
*** 55,65 ****
              if (itemarmor.getEquipmentSlot() == slotIn)
              {
                  T t = this.getModelFromSlot(slotIn);
                  t.setModelAttributes(this.renderer.getMainModel());
                  t.setLivingAnimations(entityLivingBaseIn, limbSwing, limbSwingAmount, partialTicks);
                  this.setModelSlotVisible(t, slotIn);
                  boolean flag = this.isLegSlot(slotIn);
!                 this.renderer.bindTexture(this.getArmorResource(itemarmor, flag));
  
                  switch (itemarmor.getArmorMaterial())
                  {
--- 62,117 ----
              if (itemarmor.getEquipmentSlot() == slotIn)
              {
                  T t = this.getModelFromSlot(slotIn);
+ 
+                 if (Reflector.ForgeHooksClient.exists())
+                 {
+                     t = this.getArmorModelHook(entityLivingBaseIn, itemstack, slotIn, t);
+                 }
+ 
                  t.setModelAttributes(this.renderer.getMainModel());
                  t.setLivingAnimations(entityLivingBaseIn, limbSwing, limbSwingAmount, partialTicks);
                  this.setModelSlotVisible(t, slotIn);
                  boolean flag = this.isLegSlot(slotIn);
! 
!                 if (!Config.isCustomItems() || !CustomItems.bindCustomArmorTexture(itemstack, slotIn, (String)null))
!                 {
!                     if (Reflector.ForgeHooksClient_getArmorTexture.exists())
!                     {
!                         this.renderer.bindTexture(this.getArmorResource(entityLivingBaseIn, itemstack, slotIn, (String)null));
!                     }
!                     else
!                     {
!                         this.renderer.bindTexture(this.getArmorResource(itemarmor, flag));
!                     }
!                 }
! 
!                 if (Reflector.ForgeHooksClient_getArmorTexture.exists())
!                 {
!                     if (ReflectorForge.armorHasOverlay(itemarmor, itemstack))
!                     {
!                         int j = itemarmor.getColor(itemstack);
!                         float f3 = (float)(j >> 16 & 255) / 255.0F;
!                         float f4 = (float)(j >> 8 & 255) / 255.0F;
!                         float f5 = (float)(j & 255) / 255.0F;
!                         GlStateManager.color(this.colorR * f3, this.colorG * f4, this.colorB * f5, this.alpha);
!                         t.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
! 
!                         if (!Config.isCustomItems() || !CustomItems.bindCustomArmorTexture(itemstack, slotIn, "overlay"))
!                         {
!                             this.renderer.bindTexture(this.getArmorResource(entityLivingBaseIn, itemstack, slotIn, "overlay"));
!                         }
!                     }
! 
!                     GlStateManager.color(this.colorR, this.colorG, this.colorB, this.alpha);
!                     t.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
! 
!                     if (!this.skipRenderGlint && itemstack.hasEffect() && (!Config.isCustomItems() || !CustomItems.renderCustomArmorEffect(entityLivingBaseIn, itemstack, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale)))
!                     {
!                         renderEnchantedGlint(this.renderer, entityLivingBaseIn, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale);
!                     }
! 
!                     return;
!                 }
  
                  switch (itemarmor.getArmorMaterial())
                  {
***************
*** 70,76 ****
                          float f2 = (float)(i & 255) / 255.0F;
                          GlStateManager.color(this.colorR * f, this.colorG * f1, this.colorB * f2, this.alpha);
                          t.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
!                         this.renderer.bindTexture(this.getArmorResource(itemarmor, flag, "overlay"));
  
                      case CHAIN:
                      case IRON:
--- 122,132 ----
                          float f2 = (float)(i & 255) / 255.0F;
                          GlStateManager.color(this.colorR * f, this.colorG * f1, this.colorB * f2, this.alpha);
                          t.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
! 
!                         if (!Config.isCustomItems() || !CustomItems.bindCustomArmorTexture(itemstack, slotIn, "overlay"))
!                         {
!                             this.renderer.bindTexture(this.getArmorResource(itemarmor, flag, "overlay"));
!                         }
  
                      case CHAIN:
                      case IRON:
***************
*** 78,89 ****
                      case DIAMOND:
                          GlStateManager.color(this.colorR, this.colorG, this.colorB, this.alpha);
                          t.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
  
!                     default:
!                         if (!this.skipRenderGlint && itemstack.isItemEnchanted())
!                         {
!                             renderEnchantedGlint(this.renderer, entityLivingBaseIn, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale);
!                         }
                  }
              }
          }
--- 134,144 ----
                      case DIAMOND:
                          GlStateManager.color(this.colorR, this.colorG, this.colorB, this.alpha);
                          t.render(entityLivingBaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
+                 }
  
!                 if (!this.skipRenderGlint && itemstack.isItemEnchanted() && (!Config.isCustomItems() || !CustomItems.renderCustomArmorEffect(entityLivingBaseIn, itemstack, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale)))
!                 {
!                     renderEnchantedGlint(this.renderer, entityLivingBaseIn, t, limbSwing, limbSwingAmount, partialTicks, ageInTicks, netHeadYaw, headPitch, scale);
                  }
              }
          }
***************
*** 101,140 ****
  
      public static void renderEnchantedGlint(RenderLivingBase<?> p_188364_0_, EntityLivingBase p_188364_1_, ModelBase model, float p_188364_3_, float p_188364_4_, float p_188364_5_, float p_188364_6_, float p_188364_7_, float p_188364_8_, float p_188364_9_)
      {
!         float f = (float)p_188364_1_.ticksExisted + p_188364_5_;
!         p_188364_0_.bindTexture(ENCHANTED_ITEM_GLINT_RES);
!         Minecraft.getMinecraft().entityRenderer.func_191514_d(true);
!         GlStateManager.enableBlend();
!         GlStateManager.depthFunc(514);
!         GlStateManager.depthMask(false);
!         float f1 = 0.5F;
!         GlStateManager.color(0.5F, 0.5F, 0.5F, 1.0F);
! 
!         for (int i = 0; i < 2; ++i)
          {
!             GlStateManager.disableLighting();
!             GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_COLOR, GlStateManager.DestFactor.ONE);
!             float f2 = 0.76F;
!             GlStateManager.color(0.38F, 0.19F, 0.608F, 1.0F);
              GlStateManager.matrixMode(5890);
              GlStateManager.loadIdentity();
-             float f3 = 0.33333334F;
-             GlStateManager.scale(0.33333334F, 0.33333334F, 0.33333334F);
-             GlStateManager.rotate(30.0F - (float)i * 60.0F, 0.0F, 0.0F, 1.0F);
-             GlStateManager.translate(0.0F, f * (0.001F + (float)i * 0.003F) * 20.0F, 0.0F);
              GlStateManager.matrixMode(5888);
!             model.render(p_188364_1_, p_188364_3_, p_188364_4_, p_188364_6_, p_188364_7_, p_188364_8_, p_188364_9_);
!             GlStateManager.blendFunc(GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!         }
  
!         GlStateManager.matrixMode(5890);
!         GlStateManager.loadIdentity();
!         GlStateManager.matrixMode(5888);
!         GlStateManager.enableLighting();
!         GlStateManager.depthMask(true);
!         GlStateManager.depthFunc(515);
!         GlStateManager.disableBlend();
!         Minecraft.getMinecraft().entityRenderer.func_191514_d(false);
      }
  
      private ResourceLocation getArmorResource(ItemArmor armor, boolean p_177181_2_)
--- 156,209 ----
  
      public static void renderEnchantedGlint(RenderLivingBase<?> p_188364_0_, EntityLivingBase p_188364_1_, ModelBase model, float p_188364_3_, float p_188364_4_, float p_188364_5_, float p_188364_6_, float p_188364_7_, float p_188364_8_, float p_188364_9_)
      {
!         if (!Config.isShaders() || !Shaders.isShadowPass)
          {
!             float f = (float)p_188364_1_.ticksExisted + p_188364_5_;
!             p_188364_0_.bindTexture(ENCHANTED_ITEM_GLINT_RES);
! 
!             if (Config.isShaders())
!             {
!                 ShadersRender.renderEnchantedGlintBegin();
!             }
! 
!             Minecraft.getMinecraft().entityRenderer.func_191514_d(true);
!             GlStateManager.enableBlend();
!             GlStateManager.depthFunc(514);
!             GlStateManager.depthMask(false);
!             float f1 = 0.5F;
!             GlStateManager.color(0.5F, 0.5F, 0.5F, 1.0F);
! 
!             for (int i = 0; i < 2; ++i)
!             {
!                 GlStateManager.disableLighting();
!                 GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_COLOR, GlStateManager.DestFactor.ONE);
!                 float f2 = 0.76F;
!                 GlStateManager.color(0.38F, 0.19F, 0.608F, 1.0F);
!                 GlStateManager.matrixMode(5890);
!                 GlStateManager.loadIdentity();
!                 float f3 = 0.33333334F;
!                 GlStateManager.scale(0.33333334F, 0.33333334F, 0.33333334F);
!                 GlStateManager.rotate(30.0F - (float)i * 60.0F, 0.0F, 0.0F, 1.0F);
!                 GlStateManager.translate(0.0F, f * (0.001F + (float)i * 0.003F) * 20.0F, 0.0F);
!                 GlStateManager.matrixMode(5888);
!                 model.render(p_188364_1_, p_188364_3_, p_188364_4_, p_188364_6_, p_188364_7_, p_188364_8_, p_188364_9_);
!                 GlStateManager.blendFunc(GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!             }
! 
              GlStateManager.matrixMode(5890);
              GlStateManager.loadIdentity();
              GlStateManager.matrixMode(5888);
!             GlStateManager.enableLighting();
!             GlStateManager.depthMask(true);
!             GlStateManager.depthFunc(515);
!             GlStateManager.disableBlend();
!             Minecraft.getMinecraft().entityRenderer.func_191514_d(false);
  
!             if (Config.isShaders())
!             {
!                 ShadersRender.renderEnchantedGlintEnd();
!             }
!         }
      }
  
      private ResourceLocation getArmorResource(ItemArmor armor, boolean p_177181_2_)
***************
*** 159,162 ****
--- 228,262 ----
      protected abstract void initArmor();
  
      protected abstract void setModelSlotVisible(T p_188359_1_, EntityEquipmentSlot slotIn);
+ 
+     protected T getArmorModelHook(EntityLivingBase p_getArmorModelHook_1_, ItemStack p_getArmorModelHook_2_, EntityEquipmentSlot p_getArmorModelHook_3_, T p_getArmorModelHook_4_)
+     {
+         return p_getArmorModelHook_4_;
+     }
+ 
+     public ResourceLocation getArmorResource(Entity p_getArmorResource_1_, ItemStack p_getArmorResource_2_, EntityEquipmentSlot p_getArmorResource_3_, String p_getArmorResource_4_)
+     {
+         ItemArmor itemarmor = (ItemArmor)p_getArmorResource_2_.getItem();
+         String s = itemarmor.getArmorMaterial().getName();
+         String s1 = "minecraft";
+         int i = s.indexOf(58);
+ 
+         if (i != -1)
+         {
+             s1 = s.substring(0, i);
+             s = s.substring(i + 1);
+         }
+ 
+         String s2 = String.format("%s:textures/models/armor/%s_layer_%d%s.png", s1, s, this.isLegSlot(p_getArmorResource_3_) ? 2 : 1, p_getArmorResource_4_ == null ? "" : String.format("_%s", p_getArmorResource_4_));
+         s2 = Reflector.callString(Reflector.ForgeHooksClient_getArmorTexture, p_getArmorResource_1_, p_getArmorResource_2_, s2, p_getArmorResource_3_, p_getArmorResource_4_);
+         ResourceLocation resourcelocation = ARMOR_TEXTURE_RES_MAP.get(s2);
+ 
+         if (resourcelocation == null)
+         {
+             resourcelocation = new ResourceLocation(s2);
+             ARMOR_TEXTURE_RES_MAP.put(s2, resourcelocation);
+         }
+ 
+         return resourcelocation;
+     }
  }
diff -rc ./client/renderer/entity/layers/LayerCape.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerCape.java
*** ./client/renderer/entity/layers/LayerCape.java	2018-11-18 13:18:48.256496000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerCape.java	2017-10-20 21:01:22.049551000 -0700
***************
*** 46,57 ****
--- 46,63 ----
                      f2 = 0.0F;
                  }
  
+                 if (f2 > 165.0F)
+                 {
+                     f2 = 165.0F;
+                 }
+ 
                  float f4 = entitylivingbaseIn.prevCameraYaw + (entitylivingbaseIn.cameraYaw - entitylivingbaseIn.prevCameraYaw) * partialTicks;
                  f1 = f1 + MathHelper.sin((entitylivingbaseIn.prevDistanceWalkedModified + (entitylivingbaseIn.distanceWalkedModified - entitylivingbaseIn.prevDistanceWalkedModified) * partialTicks) * 6.0F) * 32.0F * f4;
  
                  if (entitylivingbaseIn.isSneaking())
                  {
                      f1 += 25.0F;
+                     GlStateManager.translate(0.0F, 0.142F, -0.0178F);
                  }
  
                  GlStateManager.rotate(6.0F + f2 / 2.0F + f1, 1.0F, 0.0F, 0.0F);
diff -rc ./client/renderer/entity/layers/LayerElytra.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerElytra.java
*** ./client/renderer/entity/layers/LayerElytra.java	2018-11-18 13:18:48.314462000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerElytra.java	2017-10-20 21:35:40.292956200 -0700
***************
*** 10,15 ****
--- 10,17 ----
  import net.minecraft.inventory.EntityEquipmentSlot;
  import net.minecraft.item.ItemStack;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomItems;
  
  public class LayerElytra implements LayerRenderer<EntityLivingBase>
  {
***************
*** 43,60 ****
                  {
                      this.renderPlayer.bindTexture(abstractclientplayer.getLocationElytra());
                  }
!                 else if (abstractclientplayer.hasPlayerInfo() && abstractclientplayer.getLocationCape() != null && abstractclientplayer.isWearing(EnumPlayerModelParts.CAPE))
                  {
                      this.renderPlayer.bindTexture(abstractclientplayer.getLocationCape());
                  }
                  else
                  {
!                     this.renderPlayer.bindTexture(TEXTURE_ELYTRA);
                  }
              }
              else
              {
!                 this.renderPlayer.bindTexture(TEXTURE_ELYTRA);
              }
  
              GlStateManager.pushMatrix();
--- 45,76 ----
                  {
                      this.renderPlayer.bindTexture(abstractclientplayer.getLocationElytra());
                  }
!                 else if (abstractclientplayer.hasElytraCape() && abstractclientplayer.hasPlayerInfo() && abstractclientplayer.getLocationCape() != null && abstractclientplayer.isWearing(EnumPlayerModelParts.CAPE))
                  {
                      this.renderPlayer.bindTexture(abstractclientplayer.getLocationCape());
                  }
                  else
                  {
!                     ResourceLocation resourcelocation1 = TEXTURE_ELYTRA;
! 
!                     if (Config.isCustomItems())
!                     {
!                         resourcelocation1 = CustomItems.getCustomElytraTexture(itemstack, resourcelocation1);
!                     }
! 
!                     this.renderPlayer.bindTexture(resourcelocation1);
                  }
              }
              else
              {
!                 ResourceLocation resourcelocation = TEXTURE_ELYTRA;
! 
!                 if (Config.isCustomItems())
!                 {
!                     resourcelocation = CustomItems.getCustomElytraTexture(itemstack, resourcelocation);
!                 }
! 
!                 this.renderPlayer.bindTexture(resourcelocation);
              }
  
              GlStateManager.pushMatrix();
diff -rc ./client/renderer/entity/layers/LayerEnderDragonEyes.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerEnderDragonEyes.java
*** ./client/renderer/entity/layers/LayerEnderDragonEyes.java	2018-11-18 13:18:48.345445000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerEnderDragonEyes.java	2017-10-20 21:35:40.296453100 -0700
***************
*** 6,11 ****
--- 6,13 ----
  import net.minecraft.client.renderer.entity.RenderDragon;
  import net.minecraft.entity.boss.EntityDragon;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import shadersmod.client.Shaders;
  
  public class LayerEnderDragonEyes implements LayerRenderer<EntityDragon>
  {
***************
*** 32,38 ****
--- 34,54 ----
          GlStateManager.enableLighting();
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          Minecraft.getMinecraft().entityRenderer.func_191514_d(true);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.beginSpiderEyes();
+         }
+ 
+         Config.getRenderGlobal().renderOverlayEyes = true;
          this.dragonRenderer.getMainModel().render(entitylivingbaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
+         Config.getRenderGlobal().renderOverlayEyes = false;
+ 
+         if (Config.isShaders())
+         {
+             Shaders.endSpiderEyes();
+         }
+ 
          Minecraft.getMinecraft().entityRenderer.func_191514_d(false);
          this.dragonRenderer.setLightmap(entitylivingbaseIn);
          GlStateManager.disableBlend();
diff -rc ./client/renderer/entity/layers/LayerEndermanEyes.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerEndermanEyes.java
*** ./client/renderer/entity/layers/LayerEndermanEyes.java	2018-11-18 13:18:48.359436000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerEndermanEyes.java	2017-10-20 21:35:40.300453600 -0700
***************
*** 6,11 ****
--- 6,13 ----
  import net.minecraft.client.renderer.entity.RenderEnderman;
  import net.minecraft.entity.monster.EntityEnderman;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import shadersmod.client.Shaders;
  
  public class LayerEndermanEyes implements LayerRenderer<EntityEnderman>
  {
***************
*** 32,38 ****
--- 34,54 ----
          GlStateManager.enableLighting();
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          Minecraft.getMinecraft().entityRenderer.func_191514_d(true);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.beginSpiderEyes();
+         }
+ 
+         Config.getRenderGlobal().renderOverlayEyes = true;
          this.endermanRenderer.getMainModel().render(entitylivingbaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
+         Config.getRenderGlobal().renderOverlayEyes = false;
+ 
+         if (Config.isShaders())
+         {
+             Shaders.endSpiderEyes();
+         }
+ 
          Minecraft.getMinecraft().entityRenderer.func_191514_d(false);
          this.endermanRenderer.setLightmap(entitylivingbaseIn);
          GlStateManager.depthMask(true);
diff -rc ./client/renderer/entity/layers/LayerSheepWool.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerSheepWool.java
*** ./client/renderer/entity/layers/LayerSheepWool.java	2018-11-18 13:18:48.640552000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerSheepWool.java	2017-10-20 21:35:40.303977500 -0700
***************
*** 6,17 ****
  import net.minecraft.entity.passive.EntitySheep;
  import net.minecraft.item.EnumDyeColor;
  import net.minecraft.util.ResourceLocation;
  
  public class LayerSheepWool implements LayerRenderer<EntitySheep>
  {
      private static final ResourceLocation TEXTURE = new ResourceLocation("textures/entity/sheep/sheep_fur.png");
      private final RenderSheep sheepRenderer;
!     private final ModelSheep1 sheepModel = new ModelSheep1();
  
      public LayerSheepWool(RenderSheep sheepRendererIn)
      {
--- 6,19 ----
  import net.minecraft.entity.passive.EntitySheep;
  import net.minecraft.item.EnumDyeColor;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomColors;
  
  public class LayerSheepWool implements LayerRenderer<EntitySheep>
  {
      private static final ResourceLocation TEXTURE = new ResourceLocation("textures/entity/sheep/sheep_fur.png");
      private final RenderSheep sheepRenderer;
!     public ModelSheep1 sheepModel = new ModelSheep1();
  
      public LayerSheepWool(RenderSheep sheepRendererIn)
      {
***************
*** 34,44 ****
--- 36,59 ----
                  float f = ((float)(entitylivingbaseIn.ticksExisted % 25) + partialTicks) / 25.0F;
                  float[] afloat1 = EntitySheep.getDyeRgb(EnumDyeColor.byMetadata(k));
                  float[] afloat2 = EntitySheep.getDyeRgb(EnumDyeColor.byMetadata(l));
+ 
+                 if (Config.isCustomColors())
+                 {
+                     afloat1 = CustomColors.getSheepColors(EnumDyeColor.byMetadata(k), afloat1);
+                     afloat2 = CustomColors.getSheepColors(EnumDyeColor.byMetadata(l), afloat2);
+                 }
+ 
                  GlStateManager.color(afloat1[0] * (1.0F - f) + afloat2[0] * f, afloat1[1] * (1.0F - f) + afloat2[1] * f, afloat1[2] * (1.0F - f) + afloat2[2] * f);
              }
              else
              {
                  float[] afloat = EntitySheep.getDyeRgb(entitylivingbaseIn.getFleeceColor());
+ 
+                 if (Config.isCustomColors())
+                 {
+                     afloat = CustomColors.getSheepColors(entitylivingbaseIn.getFleeceColor(), afloat);
+                 }
+ 
                  GlStateManager.color(afloat[0], afloat[1], afloat[2]);
              }
  
diff -rc ./client/renderer/entity/layers/LayerSpiderEyes.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerSpiderEyes.java
*** ./client/renderer/entity/layers/LayerSpiderEyes.java	2018-11-18 13:18:48.686526000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerSpiderEyes.java	2017-10-20 21:35:40.308455500 -0700
***************
*** 6,11 ****
--- 6,13 ----
  import net.minecraft.client.renderer.entity.RenderSpider;
  import net.minecraft.entity.monster.EntitySpider;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import shadersmod.client.Shaders;
  
  public class LayerSpiderEyes<T extends EntitySpider> implements LayerRenderer<T>
  {
***************
*** 39,45 ****
--- 41,61 ----
          OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j, (float)k);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          Minecraft.getMinecraft().entityRenderer.func_191514_d(true);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.beginSpiderEyes();
+         }
+ 
+         Config.getRenderGlobal().renderOverlayEyes = true;
          this.spiderRenderer.getMainModel().render(entitylivingbaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
+         Config.getRenderGlobal().renderOverlayEyes = false;
+ 
+         if (Config.isShaders())
+         {
+             Shaders.endSpiderEyes();
+         }
+ 
          Minecraft.getMinecraft().entityRenderer.func_191514_d(false);
          i = entitylivingbaseIn.getBrightnessForRender();
          j = i % 65536;
diff -rc ./client/renderer/entity/layers/LayerWolfCollar.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerWolfCollar.java
*** ./client/renderer/entity/layers/LayerWolfCollar.java	2018-11-18 13:18:48.738496000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/layers/LayerWolfCollar.java	2017-10-20 21:35:40.312453400 -0700
***************
*** 4,9 ****
--- 4,11 ----
  import net.minecraft.client.renderer.entity.RenderWolf;
  import net.minecraft.entity.passive.EntityWolf;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomColors;
  
  public class LayerWolfCollar implements LayerRenderer<EntityWolf>
  {
***************
*** 21,26 ****
--- 23,34 ----
          {
              this.wolfRenderer.bindTexture(WOLF_COLLAR);
              float[] afloat = entitylivingbaseIn.getCollarColor().func_193349_f();
+ 
+             if (Config.isCustomColors())
+             {
+                 afloat = CustomColors.getWolfCollarColors(entitylivingbaseIn.getCollarColor(), afloat);
+             }
+ 
              GlStateManager.color(afloat[0], afloat[1], afloat[2]);
              this.wolfRenderer.getMainModel().render(entitylivingbaseIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
          }
diff -rc ./client/renderer/entity/Render.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/Render.java
*** ./client/renderer/entity/Render.java	2018-11-18 13:18:47.212098000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/Render.java	2017-10-20 21:35:40.697955400 -0700
***************
*** 22,39 ****
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.world.World;
  
! public abstract class Render<T extends Entity>
  {
      private static final ResourceLocation SHADOW_TEXTURES = new ResourceLocation("textures/misc/shadow.png");
      protected final RenderManager renderManager;
!     protected float shadowSize;
  
      /**
       * Determines the darkness of the object's shadow. Higher value makes a darker shadow.
       */
      protected float shadowOpaque = 1.0F;
      protected boolean renderOutlines;
  
      protected Render(RenderManager renderManager)
      {
--- 22,44 ----
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.world.World;
+ import net.optifine.entity.model.IEntityRenderer;
+ import optifine.Config;
+ import shadersmod.client.Shaders;
  
! public abstract class Render<T extends Entity> implements IEntityRenderer
  {
      private static final ResourceLocation SHADOW_TEXTURES = new ResourceLocation("textures/misc/shadow.png");
      protected final RenderManager renderManager;
!     public float shadowSize;
  
      /**
       * Determines the darkness of the object's shadow. Higher value makes a darker shadow.
       */
      protected float shadowOpaque = 1.0F;
      protected boolean renderOutlines;
+     private Class entityClass = null;
+     private ResourceLocation locationTextureCustom = null;
  
      protected Render(RenderManager renderManager)
      {
***************
*** 115,120 ****
--- 120,130 ----
      {
          ResourceLocation resourcelocation = this.getEntityTexture(entity);
  
+         if (this.locationTextureCustom != null)
+         {
+             resourcelocation = this.locationTextureCustom;
+         }
+ 
          if (resourcelocation == null)
          {
              return false;
***************
*** 194,247 ****
       */
      private void renderShadow(Entity entityIn, double x, double y, double z, float shadowAlpha, float partialTicks)
      {
!         GlStateManager.enableBlend();
!         GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
!         this.renderManager.renderEngine.bindTexture(SHADOW_TEXTURES);
!         World world = this.getWorldFromRenderManager();
!         GlStateManager.depthMask(false);
!         float f = this.shadowSize;
! 
!         if (entityIn instanceof EntityLiving)
          {
!             EntityLiving entityliving = (EntityLiving)entityIn;
!             f *= entityliving.getRenderSizeModifier();
  
!             if (entityliving.isChild())
              {
!                 f *= 0.5F;
!             }
!         }
  
!         double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
!         double d0 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
!         double d1 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
!         int i = MathHelper.floor(d5 - (double)f);
!         int j = MathHelper.floor(d5 + (double)f);
!         int k = MathHelper.floor(d0 - (double)f);
!         int l = MathHelper.floor(d0);
!         int i1 = MathHelper.floor(d1 - (double)f);
!         int j1 = MathHelper.floor(d1 + (double)f);
!         double d2 = x - d5;
!         double d3 = y - d0;
!         double d4 = z - d1;
!         Tessellator tessellator = Tessellator.getInstance();
!         BufferBuilder bufferbuilder = tessellator.getBuffer();
!         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
  
!         for (BlockPos blockpos : BlockPos.getAllInBoxMutable(new BlockPos(i, k, i1), new BlockPos(j, l, j1)))
!         {
!             IBlockState iblockstate = world.getBlockState(blockpos.down());
  
!             if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE && world.getLightFromNeighbors(blockpos) > 3)
              {
!                 this.renderShadowSingle(iblockstate, x, y, z, blockpos, shadowAlpha, f, d2, d3, d4);
              }
-         }
  
!         tessellator.draw();
!         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!         GlStateManager.disableBlend();
!         GlStateManager.depthMask(true);
      }
  
      /**
--- 204,260 ----
       */
      private void renderShadow(Entity entityIn, double x, double y, double z, float shadowAlpha, float partialTicks)
      {
!         if (!Config.isShaders() || !Shaders.shouldSkipDefaultShadow)
          {
!             GlStateManager.enableBlend();
!             GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
!             this.renderManager.renderEngine.bindTexture(SHADOW_TEXTURES);
!             World world = this.getWorldFromRenderManager();
!             GlStateManager.depthMask(false);
!             float f = this.shadowSize;
  
!             if (entityIn instanceof EntityLiving)
              {
!                 EntityLiving entityliving = (EntityLiving)entityIn;
!                 f *= entityliving.getRenderSizeModifier();
  
!                 if (entityliving.isChild())
!                 {
!                     f *= 0.5F;
!                 }
!             }
  
!             double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
!             double d0 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
!             double d1 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
!             int i = MathHelper.floor(d5 - (double)f);
!             int j = MathHelper.floor(d5 + (double)f);
!             int k = MathHelper.floor(d0 - (double)f);
!             int l = MathHelper.floor(d0);
!             int i1 = MathHelper.floor(d1 - (double)f);
!             int j1 = MathHelper.floor(d1 + (double)f);
!             double d2 = x - d5;
!             double d3 = y - d0;
!             double d4 = z - d1;
!             Tessellator tessellator = Tessellator.getInstance();
!             BufferBuilder bufferbuilder = tessellator.getBuffer();
!             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
  
!             for (BlockPos blockpos : BlockPos.getAllInBoxMutable(new BlockPos(i, k, i1), new BlockPos(j, l, j1)))
              {
!                 IBlockState iblockstate = world.getBlockState(blockpos.down());
! 
!                 if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE && world.getLightFromNeighbors(blockpos) > 3)
!                 {
!                     this.renderShadowSingle(iblockstate, x, y, z, blockpos, shadowAlpha, f, d2, d3, d4);
!                 }
              }
  
!             tessellator.draw();
!             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!             GlStateManager.disableBlend();
!             GlStateManager.depthMask(true);
!         }
      }
  
      /**
***************
*** 390,393 ****
--- 403,426 ----
      public void renderMultipass(T p_188300_1_, double p_188300_2_, double p_188300_4_, double p_188300_6_, float p_188300_8_, float p_188300_9_)
      {
      }
+ 
+     public Class getEntityClass()
+     {
+         return this.entityClass;
+     }
+ 
+     public void setEntityClass(Class p_setEntityClass_1_)
+     {
+         this.entityClass = p_setEntityClass_1_;
+     }
+ 
+     public ResourceLocation getLocationTextureCustom()
+     {
+         return this.locationTextureCustom;
+     }
+ 
+     public void setLocationTextureCustom(ResourceLocation p_setLocationTextureCustom_1_)
+     {
+         this.locationTextureCustom = p_setLocationTextureCustom_1_;
+     }
  }
diff -rc ./client/renderer/entity/RenderEntityItem.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderEntityItem.java
*** ./client/renderer/entity/RenderEntityItem.java	2018-11-18 13:18:47.464951000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderEntityItem.java	2018-11-18 13:37:39.453156600 -0800
***************
*** 60,78 ****
      {
          int i = 1;
  
!         if (stack.func_190916_E() > 48)
          {
              i = 5;
          }
!         else if (stack.func_190916_E() > 32)
          {
              i = 4;
          }
!         else if (stack.func_190916_E() > 16)
          {
              i = 3;
          }
!         else if (stack.func_190916_E() > 1)
          {
              i = 2;
          }
--- 60,78 ----
      {
          int i = 1;
  
!         if (stack.getCount() > 48)
          {
              i = 5;
          }
!         else if (stack.getCount() > 32)
          {
              i = 4;
          }
!         else if (stack.getCount() > 16)
          {
              i = 3;
          }
!         else if (stack.getCount() > 1)
          {
              i = 2;
          }
diff -rc ./client/renderer/entity/RenderItemFrame.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderItemFrame.java
*** ./client/renderer/entity/RenderItemFrame.java	2018-11-18 13:18:47.625859000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderItemFrame.java	2017-10-20 21:35:40.774456000 -0700
***************
*** 11,22 ****
--- 11,27 ----
  import net.minecraft.client.renderer.block.model.ModelManager;
  import net.minecraft.client.renderer.block.model.ModelResourceLocation;
  import net.minecraft.client.renderer.texture.TextureMap;
+ import net.minecraft.entity.Entity;
  import net.minecraft.entity.item.EntityItemFrame;
  import net.minecraft.init.Items;
+ import net.minecraft.item.ItemMap;
  import net.minecraft.item.ItemStack;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.world.storage.MapData;
+ import optifine.Config;
+ import optifine.Reflector;
+ import optifine.ReflectorForge;
  
  public class RenderItemFrame extends Render<EntityItemFrame>
  {
***************
*** 49,55 ****
          ModelManager modelmanager = blockrendererdispatcher.getBlockModelShapes().getModelManager();
          IBakedModel ibakedmodel;
  
!         if (entity.getDisplayedItem().getItem() == Items.FILLED_MAP)
          {
              ibakedmodel = modelmanager.getModel(this.mapModel);
          }
--- 54,60 ----
          ModelManager modelmanager = blockrendererdispatcher.getBlockModelShapes().getModelManager();
          IBakedModel ibakedmodel;
  
!         if (entity.getDisplayedItem().getItem() instanceof ItemMap)
          {
              ibakedmodel = modelmanager.getModel(this.mapModel);
          }
***************
*** 98,132 ****
  
          if (!itemstack.func_190926_b())
          {
              GlStateManager.pushMatrix();
              GlStateManager.disableLighting();
!             boolean flag = itemstack.getItem() == Items.FILLED_MAP;
              int i = flag ? itemFrame.getRotation() % 4 * 2 : itemFrame.getRotation();
              GlStateManager.rotate((float)i * 360.0F / 8.0F, 0.0F, 0.0F, 1.0F);
  
!             if (flag)
              {
!                 this.renderManager.renderEngine.bindTexture(MAP_BACKGROUND_TEXTURES);
!                 GlStateManager.rotate(180.0F, 0.0F, 0.0F, 1.0F);
!                 float f = 0.0078125F;
!                 GlStateManager.scale(0.0078125F, 0.0078125F, 0.0078125F);
!                 GlStateManager.translate(-64.0F, -64.0F, 0.0F);
!                 MapData mapdata = Items.FILLED_MAP.getMapData(itemstack, itemFrame.world);
!                 GlStateManager.translate(0.0F, 0.0F, -1.0F);
! 
!                 if (mapdata != null)
                  {
!                     this.mc.entityRenderer.getMapItemRenderer().renderMap(mapdata, true);
                  }
-             }
-             else
-             {
-                 GlStateManager.scale(0.5F, 0.5F, 0.5F);
-                 GlStateManager.pushAttrib();
-                 RenderHelper.enableStandardItemLighting();
-                 this.itemRenderer.renderItem(itemstack, ItemCameraTransforms.TransformType.FIXED);
-                 RenderHelper.disableStandardItemLighting();
-                 GlStateManager.popAttrib();
              }
  
              GlStateManager.enableLighting();
--- 103,151 ----
  
          if (!itemstack.func_190926_b())
          {
+             if (!Config.zoomMode)
+             {
+                 Entity entity = this.mc.player;
+                 double d0 = itemFrame.getDistanceSq(entity.posX, entity.posY, entity.posZ);
+ 
+                 if (d0 > 4096.0D)
+                 {
+                     return;
+                 }
+             }
+ 
              GlStateManager.pushMatrix();
              GlStateManager.disableLighting();
!             boolean flag = itemstack.getItem() instanceof ItemMap;
              int i = flag ? itemFrame.getRotation() % 4 * 2 : itemFrame.getRotation();
              GlStateManager.rotate((float)i * 360.0F / 8.0F, 0.0F, 0.0F, 1.0F);
  
!             if (!Reflector.postForgeBusEvent(Reflector.RenderItemInFrameEvent_Constructor, itemFrame, this))
              {
!                 if (flag)
                  {
!                     this.renderManager.renderEngine.bindTexture(MAP_BACKGROUND_TEXTURES);
!                     GlStateManager.rotate(180.0F, 0.0F, 0.0F, 1.0F);
!                     float f = 0.0078125F;
!                     GlStateManager.scale(0.0078125F, 0.0078125F, 0.0078125F);
!                     GlStateManager.translate(-64.0F, -64.0F, 0.0F);
!                     MapData mapdata = ReflectorForge.getMapData(Items.FILLED_MAP, itemstack, itemFrame.world);
!                     GlStateManager.translate(0.0F, 0.0F, -1.0F);
! 
!                     if (mapdata != null)
!                     {
!                         this.mc.entityRenderer.getMapItemRenderer().renderMap(mapdata, true);
!                     }
!                 }
!                 else
!                 {
!                     GlStateManager.scale(0.5F, 0.5F, 0.5F);
!                     GlStateManager.pushAttrib();
!                     RenderHelper.enableStandardItemLighting();
!                     this.itemRenderer.renderItem(itemstack, ItemCameraTransforms.TransformType.FIXED);
!                     RenderHelper.disableStandardItemLighting();
!                     GlStateManager.popAttrib();
                  }
              }
  
              GlStateManager.enableLighting();
diff -rc ./client/renderer/entity/RenderLiving.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderLiving.java
*** ./client/renderer/entity/RenderLiving.java	2018-11-18 13:18:47.659840000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderLiving.java	2017-10-20 21:35:40.793484100 -0700
***************
*** 10,15 ****
--- 10,17 ----
  import net.minecraft.entity.Entity;
  import net.minecraft.entity.EntityHanging;
  import net.minecraft.entity.EntityLiving;
+ import optifine.Config;
+ import shadersmod.client.Shaders;
  
  public abstract class RenderLiving<T extends EntityLiving> extends RenderLivingBase<T>
  {
***************
*** 71,161 ****
  
      protected void renderLeash(T entityLivingIn, double x, double y, double z, float entityYaw, float partialTicks)
      {
!         Entity entity = entityLivingIn.getLeashedToEntity();
! 
!         if (entity != null)
          {
!             y = y - (1.6D - (double)entityLivingIn.height) * 0.5D;
!             Tessellator tessellator = Tessellator.getInstance();
!             BufferBuilder bufferbuilder = tessellator.getBuffer();
!             double d0 = this.interpolateValue((double)entity.prevRotationYaw, (double)entity.rotationYaw, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
!             double d1 = this.interpolateValue((double)entity.prevRotationPitch, (double)entity.rotationPitch, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
!             double d2 = Math.cos(d0);
!             double d3 = Math.sin(d0);
!             double d4 = Math.sin(d1);
  
!             if (entity instanceof EntityHanging)
              {
!                 d2 = 0.0D;
!                 d3 = 0.0D;
!                 d4 = -1.0D;
!             }
  
!             double d5 = Math.cos(d1);
!             double d6 = this.interpolateValue(entity.prevPosX, entity.posX, (double)partialTicks) - d2 * 0.7D - d3 * 0.5D * d5;
!             double d7 = this.interpolateValue(entity.prevPosY + (double)entity.getEyeHeight() * 0.7D, entity.posY + (double)entity.getEyeHeight() * 0.7D, (double)partialTicks) - d4 * 0.5D - 0.25D;
!             double d8 = this.interpolateValue(entity.prevPosZ, entity.posZ, (double)partialTicks) - d3 * 0.7D + d2 * 0.5D * d5;
!             double d9 = this.interpolateValue((double)entityLivingIn.prevRenderYawOffset, (double)entityLivingIn.renderYawOffset, (double)partialTicks) * 0.01745329238474369D + (Math.PI / 2D);
!             d2 = Math.cos(d9) * (double)entityLivingIn.width * 0.4D;
!             d3 = Math.sin(d9) * (double)entityLivingIn.width * 0.4D;
!             double d10 = this.interpolateValue(entityLivingIn.prevPosX, entityLivingIn.posX, (double)partialTicks) + d2;
!             double d11 = this.interpolateValue(entityLivingIn.prevPosY, entityLivingIn.posY, (double)partialTicks);
!             double d12 = this.interpolateValue(entityLivingIn.prevPosZ, entityLivingIn.posZ, (double)partialTicks) + d3;
!             x = x + d2;
!             z = z + d3;
!             double d13 = (double)((float)(d6 - d10));
!             double d14 = (double)((float)(d7 - d11));
!             double d15 = (double)((float)(d8 - d12));
!             GlStateManager.disableTexture2D();
!             GlStateManager.disableLighting();
!             GlStateManager.disableCull();
!             int i = 24;
!             double d16 = 0.025D;
!             bufferbuilder.begin(5, DefaultVertexFormats.POSITION_COLOR);
  
!             for (int j = 0; j <= 24; ++j)
!             {
!                 float f = 0.5F;
!                 float f1 = 0.4F;
!                 float f2 = 0.3F;
  
!                 if (j % 2 == 0)
                  {
!                     f *= 0.7F;
!                     f1 *= 0.7F;
!                     f2 *= 0.7F;
                  }
  
!                 float f3 = (float)j / 24.0F;
!                 bufferbuilder.pos(x + d13 * (double)f3 + 0.0D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F), z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
!                 bufferbuilder.pos(x + d13 * (double)f3 + 0.025D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
!             }
  
!             tessellator.draw();
!             bufferbuilder.begin(5, DefaultVertexFormats.POSITION_COLOR);
  
!             for (int k = 0; k <= 24; ++k)
!             {
!                 float f4 = 0.5F;
!                 float f5 = 0.4F;
!                 float f6 = 0.3F;
  
!                 if (k % 2 == 0)
                  {
!                     f4 *= 0.7F;
!                     f5 *= 0.7F;
!                     f6 *= 0.7F;
                  }
  
!                 float f7 = (float)k / 24.0F;
!                 bufferbuilder.pos(x + d13 * (double)f7 + 0.0D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f7).color(f4, f5, f6, 1.0F).endVertex();
!                 bufferbuilder.pos(x + d13 * (double)f7 + 0.025D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F), z + d15 * (double)f7 + 0.025D).color(f4, f5, f6, 1.0F).endVertex();
              }
- 
-             tessellator.draw();
-             GlStateManager.enableLighting();
-             GlStateManager.enableTexture2D();
-             GlStateManager.enableCull();
          }
      }
  }
--- 73,178 ----
  
      protected void renderLeash(T entityLivingIn, double x, double y, double z, float entityYaw, float partialTicks)
      {
!         if (!Config.isShaders() || !Shaders.isShadowPass)
          {
!             Entity entity = entityLivingIn.getLeashedToEntity();
  
!             if (entity != null)
              {
!                 y = y - (1.6D - (double)entityLivingIn.height) * 0.5D;
!                 Tessellator tessellator = Tessellator.getInstance();
!                 BufferBuilder bufferbuilder = tessellator.getBuffer();
!                 double d0 = this.interpolateValue((double)entity.prevRotationYaw, (double)entity.rotationYaw, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
!                 double d1 = this.interpolateValue((double)entity.prevRotationPitch, (double)entity.rotationPitch, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
!                 double d2 = Math.cos(d0);
!                 double d3 = Math.sin(d0);
!                 double d4 = Math.sin(d1);
  
!                 if (entity instanceof EntityHanging)
!                 {
!                     d2 = 0.0D;
!                     d3 = 0.0D;
!                     d4 = -1.0D;
!                 }
  
!                 double d5 = Math.cos(d1);
!                 double d6 = this.interpolateValue(entity.prevPosX, entity.posX, (double)partialTicks) - d2 * 0.7D - d3 * 0.5D * d5;
!                 double d7 = this.interpolateValue(entity.prevPosY + (double)entity.getEyeHeight() * 0.7D, entity.posY + (double)entity.getEyeHeight() * 0.7D, (double)partialTicks) - d4 * 0.5D - 0.25D;
!                 double d8 = this.interpolateValue(entity.prevPosZ, entity.posZ, (double)partialTicks) - d3 * 0.7D + d2 * 0.5D * d5;
!                 double d9 = this.interpolateValue((double)entityLivingIn.prevRenderYawOffset, (double)entityLivingIn.renderYawOffset, (double)partialTicks) * 0.01745329238474369D + (Math.PI / 2D);
!                 d2 = Math.cos(d9) * (double)entityLivingIn.width * 0.4D;
!                 d3 = Math.sin(d9) * (double)entityLivingIn.width * 0.4D;
!                 double d10 = this.interpolateValue(entityLivingIn.prevPosX, entityLivingIn.posX, (double)partialTicks) + d2;
!                 double d11 = this.interpolateValue(entityLivingIn.prevPosY, entityLivingIn.posY, (double)partialTicks);
!                 double d12 = this.interpolateValue(entityLivingIn.prevPosZ, entityLivingIn.posZ, (double)partialTicks) + d3;
!                 x = x + d2;
!                 z = z + d3;
!                 double d13 = (double)((float)(d6 - d10));
!                 double d14 = (double)((float)(d7 - d11));
!                 double d15 = (double)((float)(d8 - d12));
!                 GlStateManager.disableTexture2D();
!                 GlStateManager.disableLighting();
!                 GlStateManager.disableCull();
  
!                 if (Config.isShaders())
                  {
!                     Shaders.beginLeash();
                  }
  
!                 int i = 24;
!                 double d16 = 0.025D;
!                 bufferbuilder.begin(5, DefaultVertexFormats.POSITION_COLOR);
! 
!                 for (int j = 0; j <= 24; ++j)
!                 {
!                     float f = 0.5F;
!                     float f1 = 0.4F;
!                     float f2 = 0.3F;
! 
!                     if (j % 2 == 0)
!                     {
!                         f *= 0.7F;
!                         f1 *= 0.7F;
!                         f2 *= 0.7F;
!                     }
! 
!                     float f3 = (float)j / 24.0F;
!                     bufferbuilder.pos(x + d13 * (double)f3 + 0.0D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F), z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
!                     bufferbuilder.pos(x + d13 * (double)f3 + 0.025D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
!                 }
  
!                 tessellator.draw();
!                 bufferbuilder.begin(5, DefaultVertexFormats.POSITION_COLOR);
  
!                 for (int k = 0; k <= 24; ++k)
!                 {
!                     float f4 = 0.5F;
!                     float f5 = 0.4F;
!                     float f6 = 0.3F;
! 
!                     if (k % 2 == 0)
!                     {
!                         f4 *= 0.7F;
!                         f5 *= 0.7F;
!                         f6 *= 0.7F;
!                     }
! 
!                     float f7 = (float)k / 24.0F;
!                     bufferbuilder.pos(x + d13 * (double)f7 + 0.0D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f7).color(f4, f5, f6, 1.0F).endVertex();
!                     bufferbuilder.pos(x + d13 * (double)f7 + 0.025D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F), z + d15 * (double)f7 + 0.025D).color(f4, f5, f6, 1.0F).endVertex();
!                 }
! 
!                 tessellator.draw();
  
!                 if (Config.isShaders())
                  {
!                     Shaders.endLeash();
                  }
  
!                 GlStateManager.enableLighting();
!                 GlStateManager.enableTexture2D();
!                 GlStateManager.enableCull();
              }
          }
      }
  }
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity: RenderLivingB#
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity: RenderLivingB~
diff -rc ./client/renderer/entity/RenderLivingBase.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderLivingBase.java
*** ./client/renderer/entity/RenderLivingBase.java	2018-11-18 13:18:47.675831000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderLivingBase.java	2018-11-30 21:22:51.094614300 -0800
***************
*** 17,33 ****
  import net.minecraft.scoreboard.Team;
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.util.text.TextFormatting;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  
  public abstract class RenderLivingBase<T extends EntityLivingBase> extends Render<T>
  {
      private static final Logger LOGGER = LogManager.getLogger();
      private static final DynamicTexture TEXTURE_BRIGHTNESS = new DynamicTexture(16, 16);
!     protected ModelBase mainModel;
      protected FloatBuffer brightnessBuffer = GLAllocation.createDirectFloatBuffer(4);
      protected List<LayerRenderer<T>> layerRenderers = Lists.<LayerRenderer<T>>newArrayList();
      protected boolean renderMarker;
  
      public RenderLivingBase(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
      {
--- 17,47 ----
  import net.minecraft.scoreboard.Team;
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.util.text.TextFormatting;
+ import net.optifine.entity.model.CustomEntityModels;
+ import optifine.Config;
+ import optifine.Reflector;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import shadersmod.client.Shaders;
  
  public abstract class RenderLivingBase<T extends EntityLivingBase> extends Render<T>
  {
      private static final Logger LOGGER = LogManager.getLogger();
      private static final DynamicTexture TEXTURE_BRIGHTNESS = new DynamicTexture(16, 16);
!     public ModelBase mainModel;
      protected FloatBuffer brightnessBuffer = GLAllocation.createDirectFloatBuffer(4);
      protected List<LayerRenderer<T>> layerRenderers = Lists.<LayerRenderer<T>>newArrayList();
      protected boolean renderMarker;
+     public static float NAME_TAG_RANGE = 64.0F;
+     public static float NAME_TAG_RANGE_SNEAK = 32.0F;
+     public float renderLimbSwing;
+     public float renderLimbSwingAmount;
+     public float renderAgeInTicks;
+     public float renderHeadYaw;
+     public float renderHeadPitch;
+     public float renderScaleFactor;
+     public static final boolean animateModelLiving = Boolean.getBoolean("animate.model.living");
  
      public RenderLivingBase(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
      {
***************
*** 36,44 ****
          this.shadowSize = shadowSizeIn;
      }
  
!     protected <V extends EntityLivingBase, U extends LayerRenderer<V>> boolean addLayer(U layer)
      {
!         return this.layerRenderers.add((LayerRenderer<T>)layer);
      }
  
      public ModelBase getMainModel()
--- 50,58 ----
          this.shadowSize = shadowSizeIn;
      }
  
!     public <V extends EntityLivingBase, U extends LayerRenderer<V>> boolean addLayer(U layer)
      {
!         return this.layerRenderers.add((LayerRenderer<T>) layer);
      }
  
      public ModelBase getMainModel()
***************
*** 77,204 ****
       */
      public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks)
      {
!         GlStateManager.pushMatrix();
!         GlStateManager.disableCull();
!         this.mainModel.swingProgress = this.getSwingProgress(entity, partialTicks);
!         this.mainModel.isRiding = entity.isRiding();
!         this.mainModel.isChild = entity.isChild();
! 
!         try
!         {
!             float f = this.interpolateRotation(entity.prevRenderYawOffset, entity.renderYawOffset, partialTicks);
!             float f1 = this.interpolateRotation(entity.prevRotationYawHead, entity.rotationYawHead, partialTicks);
!             float f2 = f1 - f;
! 
!             if (entity.isRiding() && entity.getRidingEntity() instanceof EntityLivingBase)
!             {
!                 EntityLivingBase entitylivingbase = (EntityLivingBase)entity.getRidingEntity();
!                 f = this.interpolateRotation(entitylivingbase.prevRenderYawOffset, entitylivingbase.renderYawOffset, partialTicks);
!                 f2 = f1 - f;
!                 float f3 = MathHelper.wrapDegrees(f2);
  
!                 if (f3 < -85.0F)
!                 {
!                     f3 = -85.0F;
!                 }
  
!                 if (f3 >= 85.0F)
                  {
!                     f3 = 85.0F;
                  }
  
!                 f = f1 - f3;
  
!                 if (f3 * f3 > 2500.0F)
                  {
!                     f += f3 * 0.2F;
!                 }
  
!                 f2 = f1 - f;
!             }
  
!             float f7 = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
!             this.renderLivingAt(entity, x, y, z);
!             float f8 = this.handleRotationFloat(entity, partialTicks);
!             this.rotateCorpse(entity, f8, f, partialTicks);
!             float f4 = this.prepareScale(entity, partialTicks);
!             float f5 = 0.0F;
!             float f6 = 0.0F;
  
!             if (!entity.isRiding())
!             {
!                 f5 = entity.prevLimbSwingAmount + (entity.limbSwingAmount - entity.prevLimbSwingAmount) * partialTicks;
!                 f6 = entity.limbSwing - entity.limbSwingAmount * (1.0F - partialTicks);
  
!                 if (entity.isChild())
                  {
!                     f6 *= 3.0F;
                  }
  
!                 if (f5 > 1.0F)
                  {
!                     f5 = 1.0F;
!                 }
!             }
  
!             GlStateManager.enableAlpha();
!             this.mainModel.setLivingAnimations(entity, f6, f5, partialTicks);
!             this.mainModel.setRotationAngles(f6, f5, f8, f2, f7, f4, entity);
  
!             if (this.renderOutlines)
!             {
!                 boolean flag1 = this.setScoreTeamColor(entity);
!                 GlStateManager.enableColorMaterial();
!                 GlStateManager.enableOutlineMode(this.getTeamColor(entity));
  
!                 if (!this.renderMarker)
                  {
                      this.renderModel(entity, f6, f5, f8, f2, f7, f4);
-                 }
  
!                 if (!(entity instanceof EntityPlayer) || !((EntityPlayer)entity).isSpectator())
!                 {
!                     this.renderLayers(entity, f6, f5, partialTicks, f8, f2, f7, f4);
!                 }
  
!                 GlStateManager.disableOutlineMode();
!                 GlStateManager.disableColorMaterial();
  
!                 if (flag1)
!                 {
!                     this.unsetScoreTeamColor();
                  }
              }
!             else
              {
!                 boolean flag = this.setDoRenderBrightness(entity, partialTicks);
!                 this.renderModel(entity, f6, f5, f8, f2, f7, f4);
! 
!                 if (flag)
!                 {
!                     this.unsetBrightness();
!                 }
  
!                 GlStateManager.depthMask(true);
  
!                 if (!(entity instanceof EntityPlayer) || !((EntityPlayer)entity).isSpectator())
!                 {
!                     this.renderLayers(entity, f6, f5, partialTicks, f8, f2, f7, f4);
!                 }
              }
- 
-             GlStateManager.disableRescaleNormal();
-         }
-         catch (Exception exception)
-         {
-             LOGGER.error("Couldn't render entity", (Throwable)exception);
          }
- 
-         GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
-         GlStateManager.enableTexture2D();
-         GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
-         GlStateManager.enableCull();
-         GlStateManager.popMatrix();
-         super.doRender(entity, x, y, z, entityYaw, partialTicks);
      }
  
      public float prepareScale(T entitylivingbaseIn, float partialTicks)
--- 91,247 ----
       */
      public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks)
      {
!         if (!Reflector.RenderLivingEvent_Pre_Constructor.exists() || !Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Pre_Constructor, entity, this, partialTicks, x, y, z))
!         {
!             if (animateModelLiving)
!             {
!                 entity.limbSwingAmount = 1.0F;
!             }
  
!             GlStateManager.pushMatrix();
!             GlStateManager.disableCull();
!             this.mainModel.swingProgress = this.getSwingProgress(entity, partialTicks);
!             this.mainModel.isRiding = entity.isRiding();
! 
!             if (Reflector.ForgeEntity_shouldRiderSit.exists())
!             {
!                 this.mainModel.isRiding = entity.isRiding() && entity.getRidingEntity() != null && Reflector.callBoolean(entity.getRidingEntity(), Reflector.ForgeEntity_shouldRiderSit);
!             }
  
!             this.mainModel.isChild = entity.isChild();
! 
!             try
!             {
!                 float f = this.interpolateRotation(entity.prevRenderYawOffset, entity.renderYawOffset, partialTicks);
!                 float f1 = this.interpolateRotation(entity.prevRotationYawHead, entity.rotationYawHead, partialTicks);
!                 float f2 = f1 - f;
! 
!                 if (this.mainModel.isRiding && entity.getRidingEntity() instanceof EntityLivingBase)
                  {
!                     EntityLivingBase entitylivingbase = (EntityLivingBase)entity.getRidingEntity();
!                     f = this.interpolateRotation(entitylivingbase.prevRenderYawOffset, entitylivingbase.renderYawOffset, partialTicks);
!                     f2 = f1 - f;
!                     float f3 = MathHelper.wrapDegrees(f2);
! 
!                     if (f3 < -85.0F)
!                     {
!                         f3 = -85.0F;
!                     }
! 
!                     if (f3 >= 85.0F)
!                     {
!                         f3 = 85.0F;
!                     }
! 
!                     f = f1 - f3;
! 
!                     if (f3 * f3 > 2500.0F)
!                     {
!                         f += f3 * 0.2F;
!                     }
! 
!                     f2 = f1 - f;
                  }
  
!                 float f7 = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
!                 this.renderLivingAt(entity, x, y, z);
!                 float f8 = this.handleRotationFloat(entity, partialTicks);
!                 this.rotateCorpse(entity, f8, f, partialTicks);
!                 float f4 = this.prepareScale(entity, partialTicks);
!                 float f5 = 0.0F;
!                 float f6 = 0.0F;
  
!                 if (!entity.isRiding())
                  {
!                     f5 = entity.prevLimbSwingAmount + (entity.limbSwingAmount - entity.prevLimbSwingAmount) * partialTicks;
!                     f6 = entity.limbSwing - entity.limbSwingAmount * (1.0F - partialTicks);
  
!                     if (entity.isChild())
!                     {
!                         f6 *= 3.0F;
!                     }
  
!                     if (f5 > 1.0F)
!                     {
!                         f5 = 1.0F;
!                     }
!                 }
  
!                 GlStateManager.enableAlpha();
!                 this.mainModel.setLivingAnimations(entity, f6, f5, partialTicks);
!                 this.mainModel.setRotationAngles(f6, f5, f8, f2, f7, f4, entity);
  
!                 if (CustomEntityModels.isActive())
                  {
!                     this.renderLimbSwing = f6;
!                     this.renderLimbSwingAmount = f5;
!                     this.renderAgeInTicks = f8;
!                     this.renderHeadYaw = f2;
!                     this.renderHeadPitch = f7;
!                     this.renderScaleFactor = f4;
                  }
  
!                 if (this.renderOutlines)
                  {
!                     boolean flag1 = this.setScoreTeamColor(entity);
!                     GlStateManager.enableColorMaterial();
!                     GlStateManager.enableOutlineMode(this.getTeamColor(entity));
  
!                     if (!this.renderMarker)
!                     {
!                         this.renderModel(entity, f6, f5, f8, f2, f7, f4);
!                     }
  
!                     if (!(entity instanceof EntityPlayer) || !((EntityPlayer)entity).isSpectator())
!                     {
!                         this.renderLayers(entity, f6, f5, partialTicks, f8, f2, f7, f4);
!                     }
! 
!                     GlStateManager.disableOutlineMode();
!                     GlStateManager.disableColorMaterial();
  
!                     if (flag1)
!                     {
!                         this.unsetScoreTeamColor();
!                     }
!                 }
!                 else
                  {
+                     boolean flag = this.setDoRenderBrightness(entity, partialTicks);
                      this.renderModel(entity, f6, f5, f8, f2, f7, f4);
  
!                     if (flag)
!                     {
!                         this.unsetBrightness();
!                     }
  
!                     GlStateManager.depthMask(true);
  
!                     if (!(entity instanceof EntityPlayer) || !((EntityPlayer)entity).isSpectator())
!                     {
!                         this.renderLayers(entity, f6, f5, partialTicks, f8, f2, f7, f4);
!                     }
                  }
+ 
+                 GlStateManager.disableRescaleNormal();
              }
!             catch (Exception exception1)
              {
!                 LOGGER.error("Couldn't render entity", (Throwable)exception1);
!             }
  
!             GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
!             GlStateManager.enableTexture2D();
!             GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
!             GlStateManager.enableCull();
!             GlStateManager.popMatrix();
!             super.doRender(entity, x, y, z, entityYaw, partialTicks);
  
!             if (Reflector.RenderLivingEvent_Post_Constructor.exists())
!             {
!                 Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Post_Constructor, entity, this, partialTicks, x, y, z);
              }
          }
      }
  
      public float prepareScale(T entitylivingbaseIn, float partialTicks)
***************
*** 316,321 ****
--- 359,369 ----
                  this.brightnessBuffer.put(0.0F);
                  this.brightnessBuffer.put(0.0F);
                  this.brightnessBuffer.put(0.3F);
+ 
+                 if (Config.isShaders())
+                 {
+                     Shaders.setEntityColor(1.0F, 0.0F, 0.0F, 0.3F);
+                 }
              }
              else
              {
***************
*** 327,332 ****
--- 375,385 ----
                  this.brightnessBuffer.put(f3);
                  this.brightnessBuffer.put(f4);
                  this.brightnessBuffer.put(1.0F - f1);
+ 
+                 if (Config.isShaders())
+                 {
+                     Shaders.setEntityColor(f2, f3, f4, 1.0F - f1);
+                 }
              }
  
              this.brightnessBuffer.flip();
***************
*** 387,392 ****
--- 440,450 ----
          GlStateManager.glTexEnvi(8960, OpenGlHelper.GL_OPERAND0_ALPHA, 770);
          GlStateManager.glTexEnvi(8960, OpenGlHelper.GL_SOURCE0_ALPHA, 5890);
          GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.setEntityColor(0.0F, 0.0F, 0.0F, 0.0F);
+         }
      }
  
      /**
***************
*** 477,492 ****
  
      public void renderName(T entity, double x, double y, double z)
      {
!         if (this.canRenderName(entity))
          {
!             double d0 = entity.getDistanceSqToEntity(this.renderManager.renderViewEntity);
!             float f = entity.isSneaking() ? 32.0F : 64.0F;
  
!             if (d0 < (double)(f * f))
              {
!                 String s = entity.getDisplayName().getFormattedText();
!                 GlStateManager.alphaFunc(516, 0.1F);
!                 this.renderEntityName(entity, x, y, z, s, d0);
              }
          }
      }
--- 535,558 ----
  
      public void renderName(T entity, double x, double y, double z)
      {
!         if (!Reflector.RenderLivingEvent_Specials_Pre_Constructor.exists() || !Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Specials_Pre_Constructor, entity, this, x, y, z))
          {
!             if (this.canRenderName(entity))
!             {
!                 double d0 = entity.getDistanceSqToEntity(this.renderManager.renderViewEntity);
!                 float f = entity.isSneaking() ? NAME_TAG_RANGE_SNEAK : NAME_TAG_RANGE;
! 
!                 if (d0 < (double)(f * f))
!                 {
!                     String s = entity.getDisplayName().getFormattedText();
!                     GlStateManager.alphaFunc(516, 0.1F);
!                     this.renderEntityName(entity, x, y, z, s, d0);
!                 }
!             }
  
!             if (Reflector.RenderLivingEvent_Specials_Post_Constructor.exists())
              {
!                 Reflector.postForgeBusEvent(Reflector.RenderLivingEvent_Specials_Post_Constructor, entity, this, x, y, z);
              }
          }
      }
***************
*** 528,533 ****
--- 594,604 ----
          return Minecraft.isGuiEnabled() && entity != this.renderManager.renderViewEntity && flag && !entity.isBeingRidden();
      }
  
+     public List<LayerRenderer<T>> getLayerRenderers()
+     {
+         return this.layerRenderers;
+     }
+ 
      static
      {
          int[] aint = TEXTURE_BRIGHTNESS.getTextureData();
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity: RenderManager#
diff -rc ./client/renderer/entity/RenderManager.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderManager.java
*** ./client/renderer/entity/RenderManager.java	2018-11-18 13:18:47.722804000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderManager.java	2018-11-30 21:51:03.428727400 -0800
***************
*** 1,6 ****
--- 1,7 ----
  package net.minecraft.client.renderer.entity;
  
  import com.google.common.collect.Maps;
+ import java.util.Collections;
  import java.util.Map;
  import javax.annotation.Nullable;
  import net.minecraft.block.Block;
***************
*** 112,121 ****
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.Vec3d;
  import net.minecraft.world.World;
  
  public class RenderManager
  {
!     private final Map < Class <? extends Entity > , Render <? extends Entity >> entityRenderMap = Maps. < Class <? extends Entity > , Render <? extends Entity >> newHashMap();
      private final Map<String, RenderPlayer> skinMap = Maps.<String, RenderPlayer>newHashMap();
      private final RenderPlayer playerRenderer;
  
--- 113,125 ----
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.Vec3d;
  import net.minecraft.world.World;
+ import net.optifine.entity.model.CustomEntityModels;
+ import optifine.PlayerItemsLayer;
+ import optifine.Reflector;
  
  public class RenderManager
  {
!     public final Map<Class<? extends Entity>, Render> entityRenderMap = Maps.newHashMap();
      private final Map<String, RenderPlayer> skinMap = Maps.<String, RenderPlayer>newHashMap();
      private final RenderPlayer playerRenderer;
  
***************
*** 145,150 ****
--- 149,156 ----
  
      /** whether bounding box should be rendered or not */
      private boolean debugBoundingBox;
+     public Entity renderEntity = null;
+     public Render renderRender = null;
  
      public RenderManager(TextureManager renderEngineIn, RenderItem itemRendererIn)
      {
***************
*** 234,239 ****
--- 240,251 ----
          this.playerRenderer = new RenderPlayer(this);
          this.skinMap.put("default", this.playerRenderer);
          this.skinMap.put("slim", new RenderPlayer(this, true));
+         PlayerItemsLayer.register(this.skinMap);
+ 
+         if (Reflector.RenderingRegistry_loadEntityRenderers.exists())
+         {
+             Reflector.call(Reflector.RenderingRegistry_loadEntityRenderers, this, this.entityRenderMap);
+         }
      }
  
      public void setRenderPosition(double renderPosXIn, double renderPosYIn, double renderPosZIn)
***************
*** 249,255 ****
  
          if (render == null && entityClass != Entity.class)
          {
!             render = this.getEntityClassRenderObject((Class <? extends Entity >)entityClass.getSuperclass());
              this.entityRenderMap.put(entityClass, render);
          }
  
--- 261,267 ----
  
          if (render == null && entityClass != Entity.class)
          {
!             render = this.getEntityClassRenderObject((Class<? extends Entity>) entityClass.getSuperclass());
              this.entityRenderMap.put(entityClass, render);
          }
  
***************
*** 284,295 ****
              IBlockState iblockstate = worldIn.getBlockState(new BlockPos(livingPlayerIn));
              Block block = iblockstate.getBlock();
  
!             if (block == Blocks.BED)
              {
!                 int i = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
                  this.playerViewY = (float)(i * 90 + 180);
                  this.playerViewX = 0.0F;
              }
          }
          else
          {
--- 296,314 ----
              IBlockState iblockstate = worldIn.getBlockState(new BlockPos(livingPlayerIn));
              Block block = iblockstate.getBlock();
  
!             if (Reflector.callBoolean(block, Reflector.ForgeBlock_isBed, iblockstate, worldIn, new BlockPos(livingPlayerIn), (EntityLivingBase)livingPlayerIn))
              {
!                 EnumFacing enumfacing = (EnumFacing)Reflector.call(block, Reflector.ForgeBlock_getBedDirection, iblockstate, worldIn, new BlockPos(livingPlayerIn));
!                 int i = enumfacing.getHorizontalIndex();
                  this.playerViewY = (float)(i * 90 + 180);
                  this.playerViewX = 0.0F;
              }
+             else if (block == Blocks.BED)
+             {
+                 int j = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
+                 this.playerViewY = (float)(j * 90 + 180);
+                 this.playerViewX = 0.0F;
+             }
          }
          else
          {
***************
*** 383,393 ****
                  try
                  {
                      render.setRenderOutlines(this.renderOutlines);
                      render.doRender(entityIn, x, y, z, yaw, partialTicks);
                  }
!                 catch (Throwable throwable1)
                  {
!                     throw new ReportedException(CrashReport.makeCrashReport(throwable1, "Rendering entity in world"));
                  }
  
                  try
--- 402,419 ----
                  try
                  {
                      render.setRenderOutlines(this.renderOutlines);
+ 
+                     if (CustomEntityModels.isActive())
+                     {
+                         this.renderEntity = entityIn;
+                         this.renderRender = render;
+                     }
+ 
                      render.doRender(entityIn, x, y, z, yaw, partialTicks);
                  }
!                 catch (Throwable throwable2)
                  {
!                     throw new ReportedException(CrashReport.makeCrashReport(throwable2, "Rendering entity in world"));
                  }
  
                  try
***************
*** 397,405 ****
                          render.doRenderShadowAndFire(entityIn, x, y, z, yaw, partialTicks);
                      }
                  }
!                 catch (Throwable throwable2)
                  {
!                     throw new ReportedException(CrashReport.makeCrashReport(throwable2, "Post-rendering entity in world"));
                  }
  
                  if (this.debugBoundingBox && !entityIn.isInvisible() && !p_188391_10_ && !Minecraft.getMinecraft().isReducedDebug())
--- 423,431 ----
                          render.doRenderShadowAndFire(entityIn, x, y, z, yaw, partialTicks);
                      }
                  }
!                 catch (Throwable throwable1)
                  {
!                     throw new ReportedException(CrashReport.makeCrashReport(throwable1, "Post-rendering entity in world"));
                  }
  
                  if (this.debugBoundingBox && !entityIn.isInvisible() && !p_188391_10_ && !Minecraft.getMinecraft().isReducedDebug())
***************
*** 541,544 ****
--- 567,580 ----
      {
          this.renderOutlines = renderOutlinesIn;
      }
+ 
+     public Map<Class<? extends Entity>, Render> getEntityRenderMap()
+     {
+         return this.entityRenderMap;
+     }
+ 
+     public Map<String, RenderPlayer> getSkinMap()
+     {
+         return Collections.<String, RenderPlayer>unmodifiableMap(this.skinMap);
+     }
  }
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity: RenderManager~
diff -rc ./client/renderer/entity/RenderPlayer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderPlayer.java
*** ./client/renderer/entity/RenderPlayer.java	2018-11-18 13:18:47.844733000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderPlayer.java	2018-12-08 12:11:38.152947900 -0800
***************
*** 1,5 ****
--- 1,11 ----
  package net.minecraft.client.renderer.entity;
  
+ import org.golde.snowball.render.player.cosmetic.CosmeticBracelet;
+ import org.golde.snowball.render.player.cosmetic.CosmeticEars;
+ import org.golde.snowball.render.player.cosmetic.CosmeticSunglasses;
+ import org.golde.snowball.render.player.cosmetic.CosmeticTopHat;
+ import org.golde.snowball.render.player.cosmetic.CosmeticWings;
+ 
  import net.minecraft.client.entity.AbstractClientPlayer;
  import net.minecraft.client.model.ModelBiped;
  import net.minecraft.client.model.ModelPlayer;
***************
*** 45,50 ****
--- 51,62 ----
          this.addLayer(new LayerCustomHead(this.getMainModel().bipedHead));
          this.addLayer(new LayerElytra(this));
          this.addLayer(new LayerEntityOnShoulder(renderManager));
+         
+         this.addLayer(new CosmeticTopHat(this));
+         this.addLayer(new CosmeticBracelet(this));
+         this.addLayer(new CosmeticEars(this));
+         this.addLayer(new CosmeticWings(this));
+         this.addLayer(new CosmeticSunglasses(this));
      }
  
      public ModelPlayer getMainModel()
***************
*** 182,188 ****
              }
          }
  
!         super.renderEntityName(entityIn, x, y, z, name, distanceSq);
      }
  
      public void renderRightArm(AbstractClientPlayer clientPlayer)
--- 194,207 ----
              }
          }
  
!         String customUsername = entityIn.getSnowballPlayer().getCustomUsername();
!         if(customUsername != null) {
!         	super.renderEntityName(entityIn, x, y, z, customUsername, distanceSq);
!         }
!         else {
!         	super.renderEntityName(entityIn, x, y, z, name, distanceSq);
!         }
!         
      }
  
      public void renderRightArm(AbstractClientPlayer clientPlayer)
diff -rc ./client/renderer/entity/RenderXPOrb.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderXPOrb.java
*** ./client/renderer/entity/RenderXPOrb.java	2018-11-18 13:18:48.169547000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/entity/RenderXPOrb.java	2017-10-20 21:35:40.818453800 -0700
***************
*** 9,14 ****
--- 9,16 ----
  import net.minecraft.entity.item.EntityXPOrb;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.math.MathHelper;
+ import optifine.Config;
+ import optifine.CustomColors;
  
  public class RenderXPOrb extends Render<EntityXPOrb>
  {
***************
*** 45,67 ****
              int l = j / 65536;
              OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)k, (float)l);
              GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!             float f8 = 255.0F;
!             float f9 = ((float)entity.xpColor + partialTicks) / 2.0F;
!             l = (int)((MathHelper.sin(f9 + 0.0F) + 1.0F) * 0.5F * 255.0F);
              int i1 = 255;
!             int j1 = (int)((MathHelper.sin(f9 + 4.1887903F) + 1.0F) * 0.1F * 255.0F);
              GlStateManager.translate(0.0F, 0.1F, 0.0F);
              GlStateManager.rotate(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
              GlStateManager.rotate((float)(this.renderManager.options.thirdPersonView == 2 ? -1 : 1) * -this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
!             float f7 = 0.3F;
              GlStateManager.scale(0.3F, 0.3F, 0.3F);
              Tessellator tessellator = Tessellator.getInstance();
              BufferBuilder bufferbuilder = tessellator.getBuffer();
              bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
!             bufferbuilder.pos(-0.5D, -0.25D, 0.0D).tex((double)f, (double)f3).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!             bufferbuilder.pos(0.5D, -0.25D, 0.0D).tex((double)f1, (double)f3).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!             bufferbuilder.pos(0.5D, 0.75D, 0.0D).tex((double)f1, (double)f2).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!             bufferbuilder.pos(-0.5D, 0.75D, 0.0D).tex((double)f, (double)f2).color(l, 255, j1, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
              tessellator.draw();
              GlStateManager.disableBlend();
              GlStateManager.disableRescaleNormal();
--- 47,91 ----
              int l = j / 65536;
              OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)k, (float)l);
              GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!             float f7 = 255.0F;
!             float f8 = ((float)entity.xpColor + partialTicks) / 2.0F;
! 
!             if (Config.isCustomColors())
!             {
!                 f8 = CustomColors.getXpOrbTimer(f8);
!             }
! 
!             l = (int)((MathHelper.sin(f8 + 0.0F) + 1.0F) * 0.5F * 255.0F);
              int i1 = 255;
!             int j1 = (int)((MathHelper.sin(f8 + 4.1887903F) + 1.0F) * 0.1F * 255.0F);
              GlStateManager.translate(0.0F, 0.1F, 0.0F);
              GlStateManager.rotate(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
              GlStateManager.rotate((float)(this.renderManager.options.thirdPersonView == 2 ? -1 : 1) * -this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
!             float f9 = 0.3F;
              GlStateManager.scale(0.3F, 0.3F, 0.3F);
              Tessellator tessellator = Tessellator.getInstance();
              BufferBuilder bufferbuilder = tessellator.getBuffer();
              bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
!             int k1 = l;
!             int l1 = 255;
!             int i2 = j1;
! 
!             if (Config.isCustomColors())
!             {
!                 int j2 = CustomColors.getXpOrbColor(f8);
! 
!                 if (j2 >= 0)
!                 {
!                     k1 = j2 >> 16 & 255;
!                     l1 = j2 >> 8 & 255;
!                     i2 = j2 >> 0 & 255;
!                 }
!             }
! 
!             bufferbuilder.pos(-0.5D, -0.25D, 0.0D).tex((double)f, (double)f3).color(k1, l1, i2, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!             bufferbuilder.pos(0.5D, -0.25D, 0.0D).tex((double)f1, (double)f3).color(k1, l1, i2, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!             bufferbuilder.pos(0.5D, 0.75D, 0.0D).tex((double)f1, (double)f2).color(k1, l1, i2, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
!             bufferbuilder.pos(-0.5D, 0.75D, 0.0D).tex((double)f, (double)f2).color(k1, l1, i2, 128).normal(0.0F, 1.0F, 0.0F).endVertex();
              tessellator.draw();
              GlStateManager.disableBlend();
              GlStateManager.disableRescaleNormal();
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer: EntityRendere#
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer: EntityRendere~
diff -rc ./client/renderer/EntityRenderer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/EntityRenderer.java
*** ./client/renderer/EntityRenderer.java	2018-11-18 13:18:45.790576000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/EntityRenderer.java	2018-11-30 22:38:50.038889200 -0800
***************
*** 8,13 ****
--- 8,15 ----
  import java.awt.image.ImageObserver;
  import java.io.IOException;
  import java.nio.FloatBuffer;
+ import java.util.Calendar;
+ import java.util.Date;
  import java.util.List;
  import java.util.Random;
  import javax.annotation.Nullable;
***************
*** 19,36 ****
--- 21,47 ----
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.entity.AbstractClientPlayer;
  import net.minecraft.client.gui.FontRenderer;
+ import net.minecraft.client.gui.GuiDownloadTerrain;
+ import net.minecraft.client.gui.GuiMainMenu;
+ import net.minecraft.client.gui.GuiScreen;
  import net.minecraft.client.gui.MapItemRenderer;
  import net.minecraft.client.gui.ScaledResolution;
+ import net.minecraft.client.gui.advancements.GuiScreenAdvancements;
  import net.minecraft.client.particle.ParticleManager;
  import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
+ import net.minecraft.client.renderer.chunk.RenderChunk;
+ import net.minecraft.client.renderer.culling.ClippingHelper;
  import net.minecraft.client.renderer.culling.ClippingHelperImpl;
  import net.minecraft.client.renderer.culling.Frustum;
  import net.minecraft.client.renderer.culling.ICamera;
  import net.minecraft.client.renderer.texture.DynamicTexture;
  import net.minecraft.client.renderer.texture.TextureMap;
+ import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher;
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+ import net.minecraft.client.resources.I18n;
  import net.minecraft.client.resources.IResourceManager;
  import net.minecraft.client.resources.IResourceManagerReloadListener;
+ import net.minecraft.client.settings.GameSettings;
  import net.minecraft.client.shader.ShaderGroup;
  import net.minecraft.client.shader.ShaderLinkHelper;
  import net.minecraft.crash.CrashReport;
***************
*** 50,55 ****
--- 61,67 ----
  import net.minecraft.init.SoundEvents;
  import net.minecraft.inventory.IInventory;
  import net.minecraft.item.ItemStack;
+ import net.minecraft.server.integrated.IntegratedServer;
  import net.minecraft.util.BlockRenderLayer;
  import net.minecraft.util.EntitySelectors;
  import net.minecraft.util.EnumFacing;
***************
*** 64,78 ****
--- 76,105 ----
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.util.math.RayTraceResult;
  import net.minecraft.util.math.Vec3d;
+ import net.minecraft.util.text.TextComponentString;
  import net.minecraft.world.GameType;
  import net.minecraft.world.World;
+ import net.minecraft.world.WorldProvider;
  import net.minecraft.world.biome.Biome;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.Lagometer;
+ import optifine.RandomMobs;
+ import optifine.Reflector;
+ import optifine.ReflectorForge;
+ import optifine.TextureUtils;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import org.lwjgl.input.Keyboard;
  import org.lwjgl.input.Mouse;
  import org.lwjgl.opengl.Display;
+ import org.lwjgl.opengl.GL11;
  import org.lwjgl.opengl.GLContext;
+ import org.lwjgl.util.glu.GLU;
  import org.lwjgl.util.glu.Project;
+ import shadersmod.client.Shaders;
+ import shadersmod.client.ShadersRender;
  
  public class EntityRenderer implements IResourceManagerReloadListener
  {
***************
*** 89,95 ****
      private final IResourceManager resourceManager;
      private final Random random = new Random();
      private float farPlaneDistance;
!     public final ItemRenderer itemRenderer;
      private final MapItemRenderer theMapItemRenderer;
  
      /** Entity renderer update count */
--- 116,122 ----
      private final IResourceManager resourceManager;
      private final Random random = new Random();
      private float farPlaneDistance;
!     public ItemRenderer itemRenderer;
      private final MapItemRenderer theMapItemRenderer;
  
      /** Entity renderer update count */
***************
*** 97,104 ****
  
      /** Pointed entity */
      private Entity pointedEntity;
!     private final MouseFilter mouseFilterXAxis = new MouseFilter();
!     private final MouseFilter mouseFilterYAxis = new MouseFilter();
      private final float thirdPersonDistance = 4.0F;
  
      /** Previous third person distance */
--- 124,131 ----
  
      /** Pointed entity */
      private Entity pointedEntity;
!     private MouseFilter mouseFilterXAxis = new MouseFilter();
!     private MouseFilter mouseFilterYAxis = new MouseFilter();
      private final float thirdPersonDistance = 4.0F;
  
      /** Previous third person distance */
***************
*** 166,174 ****
  
      /** Fog color buffer */
      private final FloatBuffer fogColorBuffer = GLAllocation.createDirectFloatBuffer(16);
!     private float fogColorRed;
!     private float fogColorGreen;
!     private float fogColorBlue;
  
      /** Fog color 2 */
      private float fogColor2;
--- 193,201 ----
  
      /** Fog color buffer */
      private final FloatBuffer fogColorBuffer = GLAllocation.createDirectFloatBuffer(16);
!     public float fogColorRed;
!     public float fogColorGreen;
!     public float fogColorBlue;
  
      /** Fog color 2 */
      private float fogColor2;
***************
*** 189,195 ****
      public static final int SHADER_COUNT = SHADERS_TEXTURES.length;
      private int shaderIndex;
      private boolean useShader;
!     private int frameCount;
  
      public EntityRenderer(Minecraft mcIn, IResourceManager resourceManagerIn)
      {
--- 216,235 ----
      public static final int SHADER_COUNT = SHADERS_TEXTURES.length;
      private int shaderIndex;
      private boolean useShader;
!     public int frameCount;
!     private boolean initialized = false;
!     private World updatedWorld = null;
!     public boolean fogStandard = false;
!     private float clipDistance = 128.0F;
!     private long lastServerTime = 0L;
!     private int lastServerTicks = 0;
!     private int serverWaitTime = 0;
!     private int serverWaitTimeCurrent = 0;
!     private float avgServerTimeDiff = 0.0F;
!     private float avgServerTickDiff = 0.0F;
!     private long lastErrorCheckTimeMs = 0L;
!     private ShaderGroup[] fxaaShaders = new ShaderGroup[10];
!     private boolean loadVisibleChunks = false;
  
      public EntityRenderer(Minecraft mcIn, IResourceManager resourceManagerIn)
      {
***************
*** 263,290 ****
              {
                  this.loadShader(new ResourceLocation("shaders/post/invert.json"));
              }
          }
      }
  
      private void loadShader(ResourceLocation resourceLocationIn)
      {
!         try
!         {
!             this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
!             this.theShaderGroup.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
!             this.useShader = true;
!         }
!         catch (IOException ioexception)
!         {
!             LOGGER.warn("Failed to load shader: {}", resourceLocationIn, ioexception);
!             this.shaderIndex = SHADER_COUNT;
!             this.useShader = false;
!         }
!         catch (JsonSyntaxException jsonsyntaxexception)
          {
!             LOGGER.warn("Failed to load shader: {}", resourceLocationIn, jsonsyntaxexception);
!             this.shaderIndex = SHADER_COUNT;
!             this.useShader = false;
          }
      }
  
--- 303,337 ----
              {
                  this.loadShader(new ResourceLocation("shaders/post/invert.json"));
              }
+             else if (Reflector.ForgeHooksClient_loadEntityShader.exists())
+             {
+                 Reflector.call(Reflector.ForgeHooksClient_loadEntityShader, entityIn, this);
+             }
          }
      }
  
      private void loadShader(ResourceLocation resourceLocationIn)
      {
!         if (OpenGlHelper.isFramebufferEnabled())
          {
!             try
!             {
!                 this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
!                 this.theShaderGroup.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
!                 this.useShader = true;
!             }
!             catch (IOException ioexception)
!             {
!                 LOGGER.warn("Failed to load shader: {}", resourceLocationIn, ioexception);
!                 this.shaderIndex = SHADER_COUNT;
!                 this.useShader = false;
!             }
!             catch (JsonSyntaxException jsonsyntaxexception)
!             {
!                 LOGGER.warn("Failed to load shader: {}", resourceLocationIn, jsonsyntaxexception);
!                 this.shaderIndex = SHADER_COUNT;
!                 this.useShader = false;
!             }
          }
      }
  
***************
*** 345,354 ****
              this.mc.setRenderViewEntity(this.mc.player);
          }
  
!         float f3 = this.mc.world.getLightBrightness(new BlockPos(this.mc.getRenderViewEntity()));
!         float f4 = (float)this.mc.gameSettings.renderDistanceChunks / 32.0F;
!         float f2 = f3 * (1.0F - f4) + f4;
!         this.fogColor1 += (f2 - this.fogColor1) * 0.1F;
          ++this.rendererUpdateCount;
          this.itemRenderer.updateEquippedItem();
          this.addRainParticles();
--- 392,406 ----
              this.mc.setRenderViewEntity(this.mc.player);
          }
  
!         Entity entity = this.mc.getRenderViewEntity();
!         double d2 = entity.posX;
!         double d0 = entity.posY + (double)entity.getEyeHeight();
!         double d1 = entity.posZ;
!         float f2 = this.mc.world.getLightBrightness(new BlockPos(d2, d0, d1));
!         float f3 = (float)this.mc.gameSettings.renderDistanceChunks / 16.0F;
!         f3 = MathHelper.clamp(f3, 0.0F, 1.0F);
!         float f4 = f2 * (1.0F - f3) + f3;
!         this.fogColor1 += (f4 - this.fogColor1) * 0.1F;
          ++this.rendererUpdateCount;
          this.itemRenderer.updateEquippedItem();
          this.addRainParticles();
***************
*** 404,511 ****
      {
          Entity entity = this.mc.getRenderViewEntity();
  
!         if (entity != null)
          {
!             if (this.mc.world != null)
              {
!                 this.mc.mcProfiler.startSection("pick");
!                 this.mc.pointedEntity = null;
!                 double d0 = (double)this.mc.playerController.getBlockReachDistance();
!                 this.mc.objectMouseOver = entity.rayTrace(d0, partialTicks);
!                 Vec3d vec3d = entity.getPositionEyes(partialTicks);
!                 boolean flag = false;
!                 int i = 3;
!                 double d1 = d0;
  
!                 if (this.mc.playerController.extendedReach())
!                 {
!                     d1 = 6.0D;
!                     d0 = d1;
!                 }
!                 else
!                 {
!                     if (d0 > 3.0D)
!                     {
!                         flag = true;
!                     }
!                 }
  
!                 if (this.mc.objectMouseOver != null)
                  {
!                     d1 = this.mc.objectMouseOver.hitVec.distanceTo(vec3d);
                  }
  
!                 Vec3d vec3d1 = entity.getLook(1.0F);
!                 Vec3d vec3d2 = vec3d.addVector(vec3d1.xCoord * d0, vec3d1.yCoord * d0, vec3d1.zCoord * d0);
!                 this.pointedEntity = null;
!                 Vec3d vec3d3 = null;
!                 float f = 1.0F;
!                 List<Entity> list = this.mc.world.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec3d1.xCoord * d0, vec3d1.yCoord * d0, vec3d1.zCoord * d0).expand(1.0D, 1.0D, 1.0D), Predicates.and(EntitySelectors.NOT_SPECTATING, new Predicate<Entity>()
                  {
!                     public boolean apply(@Nullable Entity p_apply_1_)
                      {
!                         return p_apply_1_ != null && p_apply_1_.canBeCollidedWith();
                      }
!                 }));
!                 double d2 = d1;
! 
!                 for (int j = 0; j < list.size(); ++j)
                  {
!                     Entity entity1 = list.get(j);
!                     AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expandXyz((double)entity1.getCollisionBorderSize());
!                     RayTraceResult raytraceresult = axisalignedbb.calculateIntercept(vec3d, vec3d2);
  
!                     if (axisalignedbb.isVecInside(vec3d))
                      {
!                         if (d2 >= 0.0D)
                          {
!                             this.pointedEntity = entity1;
!                             vec3d3 = raytraceresult == null ? vec3d : raytraceresult.hitVec;
!                             d2 = 0.0D;
                          }
-                     }
-                     else if (raytraceresult != null)
-                     {
-                         double d3 = vec3d.distanceTo(raytraceresult.hitVec);
  
!                         if (d3 < d2 || d2 == 0.0D)
                          {
!                             if (entity1.getLowestRidingEntity() == entity.getLowestRidingEntity())
!                             {
!                                 if (d2 == 0.0D)
!                                 {
!                                     this.pointedEntity = entity1;
!                                     vec3d3 = raytraceresult.hitVec;
!                                 }
!                             }
!                             else
                              {
                                  this.pointedEntity = entity1;
                                  vec3d3 = raytraceresult.hitVec;
-                                 d2 = d3;
                              }
                          }
                      }
                  }
  
!                 if (this.pointedEntity != null && flag && vec3d.distanceTo(vec3d3) > 3.0D)
!                 {
!                     this.pointedEntity = null;
!                     this.mc.objectMouseOver = new RayTraceResult(RayTraceResult.Type.MISS, vec3d3, (EnumFacing)null, new BlockPos(vec3d3));
!                 }
  
!                 if (this.pointedEntity != null && (d2 < d1 || this.mc.objectMouseOver == null))
!                 {
!                     this.mc.objectMouseOver = new RayTraceResult(this.pointedEntity, vec3d3);
  
!                     if (this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame)
!                     {
!                         this.mc.pointedEntity = this.pointedEntity;
!                     }
                  }
- 
-                 this.mc.mcProfiler.endSection();
              }
          }
      }
  
--- 456,564 ----
      {
          Entity entity = this.mc.getRenderViewEntity();
  
!         if (entity != null && this.mc.world != null)
          {
!             this.mc.mcProfiler.startSection("pick");
!             this.mc.pointedEntity = null;
!             double d0 = (double)this.mc.playerController.getBlockReachDistance();
!             this.mc.objectMouseOver = entity.rayTrace(d0, partialTicks);
!             Vec3d vec3d = entity.getPositionEyes(partialTicks);
!             boolean flag = false;
!             int i = 3;
!             double d1 = d0;
! 
!             if (this.mc.playerController.extendedReach())
              {
!                 d1 = 6.0D;
!                 d0 = d1;
!             }
!             else if (d0 > 3.0D)
!             {
!                 flag = true;
!             }
  
!             if (this.mc.objectMouseOver != null)
!             {
!                 d1 = this.mc.objectMouseOver.hitVec.distanceTo(vec3d);
!             }
  
!             Vec3d vec3d1 = entity.getLook(1.0F);
!             Vec3d vec3d2 = vec3d.addVector(vec3d1.xCoord * d0, vec3d1.yCoord * d0, vec3d1.zCoord * d0);
!             this.pointedEntity = null;
!             Vec3d vec3d3 = null;
!             float f = 1.0F;
!             List<Entity> list = this.mc.world.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec3d1.xCoord * d0, vec3d1.yCoord * d0, vec3d1.zCoord * d0).expand(1.0D, 1.0D, 1.0D), Predicates.and(EntitySelectors.NOT_SPECTATING, new Predicate<Entity>()
!             {
!                 public boolean apply(@Nullable Entity p_apply_1_)
                  {
!                     return p_apply_1_ != null && p_apply_1_.canBeCollidedWith();
                  }
+             }));
+             double d2 = d1;
  
!             for (int j = 0; j < list.size(); ++j)
!             {
!                 Entity entity1 = list.get(j);
!                 AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expandXyz((double)entity1.getCollisionBorderSize());
!                 RayTraceResult raytraceresult = axisalignedbb.calculateIntercept(vec3d, vec3d2);
! 
!                 if (axisalignedbb.isVecInside(vec3d))
                  {
!                     if (d2 >= 0.0D)
                      {
!                         this.pointedEntity = entity1;
!                         vec3d3 = raytraceresult == null ? vec3d : raytraceresult.hitVec;
!                         d2 = 0.0D;
                      }
!                 }
!                 else if (raytraceresult != null)
                  {
!                     double d3 = vec3d.distanceTo(raytraceresult.hitVec);
  
!                     if (d3 < d2 || d2 == 0.0D)
                      {
!                         boolean flag1 = false;
! 
!                         if (Reflector.ForgeEntity_canRiderInteract.exists())
                          {
!                             flag1 = Reflector.callBoolean(entity1, Reflector.ForgeEntity_canRiderInteract);
                          }
  
!                         if (!flag1 && entity1.getLowestRidingEntity() == entity.getLowestRidingEntity())
                          {
!                             if (d2 == 0.0D)
                              {
                                  this.pointedEntity = entity1;
                                  vec3d3 = raytraceresult.hitVec;
                              }
                          }
+                         else
+                         {
+                             this.pointedEntity = entity1;
+                             vec3d3 = raytraceresult.hitVec;
+                             d2 = d3;
+                         }
                      }
                  }
+             }
  
!             if (this.pointedEntity != null && flag && vec3d.distanceTo(vec3d3) > 3.0D)
!             {
!                 this.pointedEntity = null;
!                 this.mc.objectMouseOver = new RayTraceResult(RayTraceResult.Type.MISS, vec3d3, (EnumFacing)null, new BlockPos(vec3d3));
!             }
  
!             if (this.pointedEntity != null && (d2 < d1 || this.mc.objectMouseOver == null))
!             {
!                 this.mc.objectMouseOver = new RayTraceResult(this.pointedEntity, vec3d3);
  
!                 if (this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame)
!                 {
!                     this.mc.pointedEntity = this.pointedEntity;
                  }
              }
+ 
+             this.mc.mcProfiler.endSection();
          }
      }
  
***************
*** 553,559 ****
              if (useFOVSetting)
              {
                  f = this.mc.gameSettings.fovSetting;
!                 f = f * (this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * partialTicks);
              }
  
              if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).getHealth() <= 0.0F)
--- 606,647 ----
              if (useFOVSetting)
              {
                  f = this.mc.gameSettings.fovSetting;
! 
!                 if (Config.isDynamicFov())
!                 {
!                     f *= this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * partialTicks;
!                 }
!             }
! 
!             boolean flag = false;
! 
!             if (this.mc.currentScreen == null)
!             {
!                 GameSettings gamesettings = this.mc.gameSettings;
!                 flag = GameSettings.isKeyDown(this.mc.gameSettings.ofKeyBindZoom);
!             }
! 
!             if (flag)
!             {
!                 if (!Config.zoomMode)
!                 {
!                     Config.zoomMode = true;
!                     this.mc.gameSettings.smoothCamera = true;
!                     this.mc.renderGlobal.displayListEntitiesDirty = true;
!                 }
! 
!                 if (Config.zoomMode)
!                 {
!                     f /= 4.0F;
!                 }
!             }
!             else if (Config.zoomMode)
!             {
!                 Config.zoomMode = false;
!                 this.mc.gameSettings.smoothCamera = false;
!                 this.mouseFilterXAxis = new MouseFilter();
!                 this.mouseFilterYAxis = new MouseFilter();
!                 this.mc.renderGlobal.displayListEntitiesDirty = true;
              }
  
              if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).getHealth() <= 0.0F)
***************
*** 569,575 ****
                  f = f * 60.0F / 70.0F;
              }
  
!             return f;
          }
      }
  
--- 657,663 ----
                  f = f * 60.0F / 70.0F;
              }
  
!             return Reflector.ForgeHooksClient_getFOVModifier.exists() ? Reflector.callFloat(Reflector.ForgeHooksClient_getFOVModifier, this, entity, iblockstate, partialTicks, f) : f;
          }
      }
  
***************
*** 641,647 ****
                  IBlockState iblockstate = this.mc.world.getBlockState(blockpos);
                  Block block = iblockstate.getBlock();
  
!                 if (block == Blocks.BED)
                  {
                      int j = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
                      GlStateManager.rotate((float)(j * 90), 0.0F, 1.0F, 0.0F);
--- 729,739 ----
                  IBlockState iblockstate = this.mc.world.getBlockState(blockpos);
                  Block block = iblockstate.getBlock();
  
!                 if (Reflector.ForgeHooksClient_orientBedCamera.exists())
!                 {
!                     Reflector.callVoid(Reflector.ForgeHooksClient_orientBedCamera, this.mc.world, blockpos, iblockstate, entity);
!                 }
!                 else if (block == Blocks.BED)
                  {
                      int j = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
                      GlStateManager.rotate((float)(j * 90), 0.0F, 1.0F, 0.0F);
***************
*** 711,717 ****
              GlStateManager.translate(0.0F, 0.0F, 0.05F);
          }
  
!         if (!this.mc.gameSettings.debugCamEnable)
          {
              GlStateManager.rotate(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks, 1.0F, 0.0F, 0.0F);
  
--- 803,834 ----
              GlStateManager.translate(0.0F, 0.0F, 0.05F);
          }
  
!         if (Reflector.EntityViewRenderEvent_CameraSetup_Constructor.exists())
!         {
!             if (!this.mc.gameSettings.debugCamEnable)
!             {
!                 float f6 = entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0F;
!                 float f7 = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
!                 float f8 = 0.0F;
! 
!                 if (entity instanceof EntityAnimal)
!                 {
!                     EntityAnimal entityanimal1 = (EntityAnimal)entity;
!                     f6 = entityanimal1.prevRotationYawHead + (entityanimal1.rotationYawHead - entityanimal1.prevRotationYawHead) * partialTicks + 180.0F;
!                 }
! 
!                 IBlockState iblockstate1 = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
!                 Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_CameraSetup_Constructor, this, entity, iblockstate1, partialTicks, f6, f7, f8);
!                 Reflector.postForgeBusEvent(object);
!                 f8 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getRoll);
!                 f7 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getPitch);
!                 f6 = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_getYaw);
!                 GlStateManager.rotate(f8, 0.0F, 0.0F, 1.0F);
!                 GlStateManager.rotate(f7, 1.0F, 0.0F, 0.0F);
!                 GlStateManager.rotate(f6, 0.0F, 1.0F, 0.0F);
!             }
!         }
!         else if (!this.mc.gameSettings.debugCamEnable)
          {
              GlStateManager.rotate(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks, 1.0F, 0.0F, 0.0F);
  
***************
*** 736,744 ****
      /**
       * sets up projection, view effects, camera position/rotation
       */
!     private void setupCameraTransform(float partialTicks, int pass)
      {
          this.farPlaneDistance = (float)(this.mc.gameSettings.renderDistanceChunks * 16);
          GlStateManager.matrixMode(5889);
          GlStateManager.loadIdentity();
          float f = 0.07F;
--- 853,872 ----
      /**
       * sets up projection, view effects, camera position/rotation
       */
!     public void setupCameraTransform(float partialTicks, int pass)
      {
          this.farPlaneDistance = (float)(this.mc.gameSettings.renderDistanceChunks * 16);
+ 
+         if (Config.isFogFancy())
+         {
+             this.farPlaneDistance *= 0.95F;
+         }
+ 
+         if (Config.isFogFast())
+         {
+             this.farPlaneDistance *= 0.83F;
+         }
+ 
          GlStateManager.matrixMode(5889);
          GlStateManager.loadIdentity();
          float f = 0.07F;
***************
*** 748,760 ****
              GlStateManager.translate((float)(-(pass * 2 - 1)) * 0.07F, 0.0F, 0.0F);
          }
  
          if (this.cameraZoom != 1.0D)
          {
              GlStateManager.translate((float)this.cameraYaw, (float)(-this.cameraPitch), 0.0F);
              GlStateManager.scale(this.cameraZoom, this.cameraZoom, 1.0D);
          }
  
!         Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
          GlStateManager.matrixMode(5888);
          GlStateManager.loadIdentity();
  
--- 876,895 ----
              GlStateManager.translate((float)(-(pass * 2 - 1)) * 0.07F, 0.0F, 0.0F);
          }
  
+         this.clipDistance = this.farPlaneDistance * 2.0F;
+ 
+         if (this.clipDistance < 173.0F)
+         {
+             this.clipDistance = 173.0F;
+         }
+ 
          if (this.cameraZoom != 1.0D)
          {
              GlStateManager.translate((float)this.cameraYaw, (float)(-this.cameraPitch), 0.0F);
              GlStateManager.scale(this.cameraZoom, this.cameraZoom, 1.0D);
          }
  
!         Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
          GlStateManager.matrixMode(5888);
          GlStateManager.loadIdentity();
  
***************
*** 821,826 ****
--- 956,966 ----
       */
      private void renderHand(float partialTicks, int pass)
      {
+         this.renderHand(partialTicks, pass, true, true, false);
+     }
+ 
+     public void renderHand(float p_renderHand_1_, int p_renderHand_2_, boolean p_renderHand_3_, boolean p_renderHand_4_, boolean p_renderHand_5_)
+     {
          if (!this.debugView)
          {
              GlStateManager.matrixMode(5889);
***************
*** 829,874 ****
  
              if (this.mc.gameSettings.anaglyph)
              {
!                 GlStateManager.translate((float)(-(pass * 2 - 1)) * 0.07F, 0.0F, 0.0F);
              }
  
!             Project.gluPerspective(this.getFOVModifier(partialTicks, false), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
              GlStateManager.matrixMode(5888);
              GlStateManager.loadIdentity();
  
              if (this.mc.gameSettings.anaglyph)
              {
!                 GlStateManager.translate((float)(pass * 2 - 1) * 0.1F, 0.0F, 0.0F);
              }
  
!             GlStateManager.pushMatrix();
!             this.hurtCameraEffect(partialTicks);
  
!             if (this.mc.gameSettings.viewBobbing)
              {
!                 this.setupViewBobbing(partialTicks);
!             }
  
!             boolean flag = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping();
  
!             if (this.mc.gameSettings.thirdPersonView == 0 && !flag && !this.mc.gameSettings.hideGUI && !this.mc.playerController.isSpectator())
              {
!                 this.enableLightmap();
!                 this.itemRenderer.renderItemInFirstPerson(partialTicks);
!                 this.disableLightmap();
              }
  
!             GlStateManager.popMatrix();
  
              if (this.mc.gameSettings.thirdPersonView == 0 && !flag)
              {
!                 this.itemRenderer.renderOverlays(partialTicks);
!                 this.hurtCameraEffect(partialTicks);
              }
  
              if (this.mc.gameSettings.viewBobbing)
              {
!                 this.setupViewBobbing(partialTicks);
              }
          }
      }
--- 969,1041 ----
  
              if (this.mc.gameSettings.anaglyph)
              {
!                 GlStateManager.translate((float)(-(p_renderHand_2_ * 2 - 1)) * 0.07F, 0.0F, 0.0F);
!             }
! 
!             if (Config.isShaders())
!             {
!                 Shaders.applyHandDepth();
              }
  
!             Project.gluPerspective(this.getFOVModifier(p_renderHand_1_, false), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
              GlStateManager.matrixMode(5888);
              GlStateManager.loadIdentity();
  
              if (this.mc.gameSettings.anaglyph)
              {
!                 GlStateManager.translate((float)(p_renderHand_2_ * 2 - 1) * 0.1F, 0.0F, 0.0F);
              }
  
!             boolean flag = false;
  
!             if (p_renderHand_3_)
              {
!                 GlStateManager.pushMatrix();
!                 this.hurtCameraEffect(p_renderHand_1_);
! 
!                 if (this.mc.gameSettings.viewBobbing)
!                 {
!                     this.setupViewBobbing(p_renderHand_1_);
!                 }
! 
!                 flag = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping();
!                 boolean flag1 = !ReflectorForge.renderFirstPersonHand(this.mc.renderGlobal, p_renderHand_1_, p_renderHand_2_);
  
!                 if (flag1 && this.mc.gameSettings.thirdPersonView == 0 && !flag && !this.mc.gameSettings.hideGUI && !this.mc.playerController.isSpectator())
!                 {
!                     this.enableLightmap();
! 
!                     if (Config.isShaders())
!                     {
!                         ShadersRender.renderItemFP(this.itemRenderer, p_renderHand_1_, p_renderHand_5_);
!                     }
!                     else
!                     {
!                         this.itemRenderer.renderItemInFirstPerson(p_renderHand_1_);
!                     }
! 
!                     this.disableLightmap();
!                 }
! 
!                 GlStateManager.popMatrix();
!             }
  
!             if (!p_renderHand_4_)
              {
!                 return;
              }
  
!             this.disableLightmap();
  
              if (this.mc.gameSettings.thirdPersonView == 0 && !flag)
              {
!                 this.itemRenderer.renderOverlays(p_renderHand_1_);
!                 this.hurtCameraEffect(p_renderHand_1_);
              }
  
              if (this.mc.gameSettings.viewBobbing)
              {
!                 this.setupViewBobbing(p_renderHand_1_);
              }
          }
      }
***************
*** 878,883 ****
--- 1045,1055 ----
          GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
          GlStateManager.disableTexture2D();
          GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.disableLightmap();
+         }
      }
  
      public void enableLightmap()
***************
*** 897,902 ****
--- 1069,1079 ----
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          GlStateManager.enableTexture2D();
          GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.enableLightmap();
+         }
      }
  
      /**
***************
*** 919,924 ****
--- 1096,1109 ----
  
              if (world != null)
              {
+                 if (Config.isCustomColors() && CustomColors.updateLightmap(world, this.torchFlickerX, this.lightmapColors, this.mc.player.isPotionActive(MobEffects.NIGHT_VISION)))
+                 {
+                     this.lightmapTexture.updateDynamicTexture();
+                     this.lightmapUpdateNeeded = false;
+                     this.mc.mcProfiler.endSection();
+                     return;
+                 }
+ 
                  float f = world.getSunBrightness(1.0F);
                  float f1 = f * 0.95F + 0.05F;
  
***************
*** 958,963 ****
--- 1143,1161 ----
                          f10 = 0.25F + f7 * 0.75F;
                      }
  
+                     if (Reflector.ForgeWorldProvider_getLightmapColors.exists())
+                     {
+                         float[] afloat = new float[] {f8, f9, f10};
+                         Reflector.call(world.provider, Reflector.ForgeWorldProvider_getLightmapColors, partialTicks, f, f2, f3, afloat);
+                         f8 = afloat[0];
+                         f9 = afloat[1];
+                         f10 = afloat[2];
+                     }
+ 
+                     f8 = MathHelper.clamp(f8, 0.0F, 1.0F);
+                     f9 = MathHelper.clamp(f9, 0.0F, 1.0F);
+                     f10 = MathHelper.clamp(f10, 0.0F, 1.0F);
+ 
                      if (this.mc.player.isPotionActive(MobEffects.NIGHT_VISION))
                      {
                          float f15 = this.getNightVisionBrightness(this.mc.player, partialTicks);
***************
*** 1051,1057 ****
          }
      }
  
!     private float getNightVisionBrightness(EntityLivingBase entitylivingbaseIn, float partialTicks)
      {
          int i = entitylivingbaseIn.getActivePotionEffect(MobEffects.NIGHT_VISION).getDuration();
          return i > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)i - partialTicks) * (float)Math.PI * 0.2F) * 0.3F;
--- 1249,1255 ----
          }
      }
  
!     public float getNightVisionBrightness(EntityLivingBase entitylivingbaseIn, float partialTicks)
      {
          int i = entitylivingbaseIn.getActivePotionEffect(MobEffects.NIGHT_VISION).getDuration();
          return i > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)i - partialTicks) * (float)Math.PI * 0.2F) * 0.3F;
***************
*** 1059,1064 ****
--- 1257,1263 ----
  
      public void updateCameraAndRender(float partialTicks, long nanoTime)
      {
+         this.frameInit();
          boolean flag = Display.isActive();
  
          if (!flag && this.mc.gameSettings.pauseOnLostFocus && (!this.mc.gameSettings.touchscreen || !Mouse.isButtonDown(1)))
***************
*** 1127,1133 ****
              final int l1 = j1 - Mouse.getY() * j1 / this.mc.displayHeight - 1;
              int i2 = this.mc.gameSettings.limitFramerate;
  
!             if (this.mc.world != null)
              {
                  this.mc.mcProfiler.startSection("level");
                  int j = Math.min(Minecraft.getDebugFPS(), i2);
--- 1326,1344 ----
              final int l1 = j1 - Mouse.getY() * j1 / this.mc.displayHeight - 1;
              int i2 = this.mc.gameSettings.limitFramerate;
  
!             if (this.mc.world == null)
!             {
!                 GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
!                 GlStateManager.matrixMode(5889);
!                 GlStateManager.loadIdentity();
!                 GlStateManager.matrixMode(5888);
!                 GlStateManager.loadIdentity();
!                 this.setupOverlayRendering();
!                 this.renderEndNanoTime = System.nanoTime();
!                 TileEntityRendererDispatcher.instance.renderEngine = this.mc.getTextureManager();
!                 TileEntityRendererDispatcher.instance.fontRenderer = this.mc.fontRendererObj;
!             }
!             else
              {
                  this.mc.mcProfiler.startSection("level");
                  int j = Math.min(Minecraft.getDebugFPS(), i2);
***************
*** 1171,1190 ****
                      this.setupOverlayRendering();
                      this.func_190563_a(i1, j1, partialTicks);
                      this.mc.ingameGUI.renderGameOverlay(partialTicks);
                  }
  
                  this.mc.mcProfiler.endSection();
              }
-             else
-             {
-                 GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-                 GlStateManager.matrixMode(5889);
-                 GlStateManager.loadIdentity();
-                 GlStateManager.matrixMode(5888);
-                 GlStateManager.loadIdentity();
-                 this.setupOverlayRendering();
-                 this.renderEndNanoTime = System.nanoTime();
-             }
  
              if (this.mc.currentScreen != null)
              {
--- 1382,1401 ----
                      this.setupOverlayRendering();
                      this.func_190563_a(i1, j1, partialTicks);
                      this.mc.ingameGUI.renderGameOverlay(partialTicks);
+ 
+                     if (this.mc.gameSettings.ofShowFps && !this.mc.gameSettings.showDebugInfo)
+                     {
+                         Config.drawFps();
+                     }
+ 
+                     if (this.mc.gameSettings.showDebugInfo)
+                     {
+                         Lagometer.showLagometer(scaledresolution);
+                     }
                  }
  
                  this.mc.mcProfiler.endSection();
              }
  
              if (this.mc.currentScreen != null)
              {
***************
*** 1192,1202 ****
  
                  try
                  {
!                     this.mc.currentScreen.drawScreen(k1, l1, this.mc.func_193989_ak());
                  }
!                 catch (Throwable throwable)
                  {
!                     CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering screen");
                      CrashReportCategory crashreportcategory = crashreport.makeCategory("Screen render details");
                      crashreportcategory.setDetail("Screen name", new ICrashReportDetail<String>()
                      {
--- 1403,1420 ----
  
                  try
                  {
!                     if (Reflector.ForgeHooksClient_drawScreen.exists())
!                     {
!                         Reflector.callVoid(Reflector.ForgeHooksClient_drawScreen, this.mc.currentScreen, k1, l1, this.mc.getParticleTicks());
!                     }
!                     else
!                     {
!                         this.mc.currentScreen.drawScreen(k1, l1, this.mc.getParticleTicks());
!                     }
                  }
!                 catch (Throwable throwable1)
                  {
!                     CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Rendering screen");
                      CrashReportCategory crashreportcategory = crashreport.makeCategory("Screen render details");
                      crashreportcategory.setDetail("Screen name", new ICrashReportDetail<String>()
                      {
***************
*** 1223,1228 ****
--- 1441,1455 ----
                  }
              }
          }
+ 
+         this.frameFinish();
+         this.waitForServerThread();
+         Lagometer.updateLagometer();
+ 
+         if (this.mc.gameSettings.ofProfiler)
+         {
+             this.mc.gameSettings.showDebugProfilerChart = true;
+         }
      }
  
      private void createWorldIcon()
***************
*** 1253,1261 ****
                  graphics.dispose();
                  ImageIO.write(bufferedimage1, "png", this.mc.getIntegratedServer().getWorldIconFile());
              }
!             catch (IOException ioexception)
              {
!                 LOGGER.warn("Couldn't save auto screenshot", (Throwable)ioexception);
              }
          }
      }
--- 1480,1488 ----
                  graphics.dispose();
                  ImageIO.write(bufferedimage1, "png", this.mc.getIntegratedServer().getWorldIconFile());
              }
!             catch (IOException ioexception1)
              {
!                 LOGGER.warn("Couldn't save auto screenshot", (Throwable)ioexception1);
              }
          }
      }
***************
*** 1283,1293 ****
                  if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK)
                  {
                      BlockPos blockpos = this.mc.objectMouseOver.getBlockPos();
!                     Block block = this.mc.world.getBlockState(blockpos).getBlock();
  
                      if (this.mc.playerController.getCurrentGameType() == GameType.SPECTATOR)
                      {
!                         flag = block.hasTileEntity() && this.mc.world.getTileEntity(blockpos) instanceof IInventory;
                      }
                      else
                      {
--- 1510,1521 ----
                  if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK)
                  {
                      BlockPos blockpos = this.mc.objectMouseOver.getBlockPos();
!                     IBlockState iblockstate = this.mc.world.getBlockState(blockpos);
!                     Block block = iblockstate.getBlock();
  
                      if (this.mc.playerController.getCurrentGameType() == GameType.SPECTATOR)
                      {
!                         flag = ReflectorForge.blockHasTileEntity(iblockstate) && this.mc.world.getTileEntity(blockpos) instanceof IInventory;
                      }
                      else
                      {
***************
*** 1310,1318 ****
          }
  
          this.getMouseOver(partialTicks);
          GlStateManager.enableDepth();
          GlStateManager.enableAlpha();
!         GlStateManager.alphaFunc(516, 0.5F);
          this.mc.mcProfiler.startSection("center");
  
          if (this.mc.gameSettings.anaglyph)
--- 1538,1552 ----
          }
  
          this.getMouseOver(partialTicks);
+ 
+         if (Config.isShaders())
+         {
+             Shaders.beginRender(this.mc, partialTicks, finishTimeNano);
+         }
+ 
          GlStateManager.enableDepth();
          GlStateManager.enableAlpha();
!         GlStateManager.alphaFunc(516, 0.1F);
          this.mc.mcProfiler.startSection("center");
  
          if (this.mc.gameSettings.anaglyph)
***************
*** 1335,1380 ****
  
      private void renderWorldPass(int pass, float partialTicks, long finishTimeNano)
      {
          RenderGlobal renderglobal = this.mc.renderGlobal;
          ParticleManager particlemanager = this.mc.effectRenderer;
!         boolean flag = this.isDrawBlockOutline();
          GlStateManager.enableCull();
          this.mc.mcProfiler.endStartSection("clear");
!         GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
          this.updateFogColor(partialTicks);
          GlStateManager.clear(16640);
          this.mc.mcProfiler.endStartSection("camera");
          this.setupCameraTransform(partialTicks, pass);
          ActiveRenderInfo.updateRenderInfo(this.mc.player, this.mc.gameSettings.thirdPersonView == 2);
          this.mc.mcProfiler.endStartSection("frustum");
!         ClippingHelperImpl.getInstance();
          this.mc.mcProfiler.endStartSection("culling");
!         ICamera icamera = new Frustum();
          Entity entity = this.mc.getRenderViewEntity();
          double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
          double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
          double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
-         icamera.setPosition(d0, d1, d2);
  
!         if (this.mc.gameSettings.renderDistanceChunks >= 4)
          {
              this.setupFog(-1, partialTicks);
              this.mc.mcProfiler.endStartSection("sky");
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
              GlStateManager.matrixMode(5888);
              renderglobal.renderSky(partialTicks, pass);
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
              GlStateManager.matrixMode(5888);
          }
  
          this.setupFog(0, partialTicks);
          GlStateManager.shadeModel(7425);
  
!         if (entity.posY + (double)entity.getEyeHeight() < 128.0D)
          {
              this.renderCloudsCheck(renderglobal, partialTicks, pass, d0, d1, d2);
          }
--- 1569,1666 ----
  
      private void renderWorldPass(int pass, float partialTicks, long finishTimeNano)
      {
+         boolean flag = Config.isShaders();
+ 
+         if (flag)
+         {
+             Shaders.beginRenderPass(pass, partialTicks, finishTimeNano);
+         }
+ 
          RenderGlobal renderglobal = this.mc.renderGlobal;
          ParticleManager particlemanager = this.mc.effectRenderer;
!         boolean flag1 = this.isDrawBlockOutline();
          GlStateManager.enableCull();
          this.mc.mcProfiler.endStartSection("clear");
! 
!         if (flag)
!         {
!             Shaders.setViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
!         }
!         else
!         {
!             GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
!         }
! 
          this.updateFogColor(partialTicks);
          GlStateManager.clear(16640);
+ 
+         if (flag)
+         {
+             Shaders.clearRenderBuffer();
+         }
+ 
          this.mc.mcProfiler.endStartSection("camera");
          this.setupCameraTransform(partialTicks, pass);
+ 
+         if (flag)
+         {
+             Shaders.setCamera(partialTicks);
+         }
+ 
          ActiveRenderInfo.updateRenderInfo(this.mc.player, this.mc.gameSettings.thirdPersonView == 2);
          this.mc.mcProfiler.endStartSection("frustum");
!         ClippingHelper clippinghelper = ClippingHelperImpl.getInstance();
          this.mc.mcProfiler.endStartSection("culling");
!         ICamera icamera = new Frustum(clippinghelper);
          Entity entity = this.mc.getRenderViewEntity();
          double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
          double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
          double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
  
!         if (flag)
!         {
!             ShadersRender.setFrustrumPosition(icamera, d0, d1, d2);
!         }
!         else
!         {
!             icamera.setPosition(d0, d1, d2);
!         }
! 
!         if ((Config.isSkyEnabled() || Config.isSunMoonEnabled() || Config.isStarsEnabled()) && !Shaders.isShadowPass)
          {
              this.setupFog(-1, partialTicks);
              this.mc.mcProfiler.endStartSection("sky");
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
              GlStateManager.matrixMode(5888);
+ 
+             if (flag)
+             {
+                 Shaders.beginSky();
+             }
+ 
              renderglobal.renderSky(partialTicks, pass);
+ 
+             if (flag)
+             {
+                 Shaders.endSky();
+             }
+ 
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
              GlStateManager.matrixMode(5888);
          }
+         else
+         {
+             GlStateManager.disableBlend();
+         }
  
          this.setupFog(0, partialTicks);
          GlStateManager.shadeModel(7425);
  
!         if (entity.posY + (double)entity.getEyeHeight() < 128.0D + (double)(this.mc.gameSettings.ofCloudsHeight * 128.0F))
          {
              this.renderCloudsCheck(renderglobal, partialTicks, pass, d0, d1, d2);
          }
***************
*** 1384,1407 ****
          this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
          RenderHelper.disableStandardItemLighting();
          this.mc.mcProfiler.endStartSection("terrain_setup");
!         renderglobal.setupTerrain(entity, (double)partialTicks, icamera, this.frameCount++, this.mc.player.isSpectator());
  
          if (pass == 0 || pass == 2)
          {
              this.mc.mcProfiler.endStartSection("updatechunks");
              this.mc.renderGlobal.updateChunks(finishTimeNano);
          }
  
          this.mc.mcProfiler.endStartSection("terrain");
          GlStateManager.matrixMode(5888);
          GlStateManager.pushMatrix();
          GlStateManager.disableAlpha();
          renderglobal.renderBlockLayer(BlockRenderLayer.SOLID, (double)partialTicks, pass, entity);
          GlStateManager.enableAlpha();
          renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT_MIPPED, (double)partialTicks, pass, entity);
          this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
          renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT, (double)partialTicks, pass, entity);
          this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
          GlStateManager.shadeModel(7424);
          GlStateManager.alphaFunc(516, 0.1F);
  
--- 1670,1738 ----
          this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
          RenderHelper.disableStandardItemLighting();
          this.mc.mcProfiler.endStartSection("terrain_setup");
!         this.checkLoadVisibleChunks(entity, partialTicks, icamera, this.mc.player.isSpectator());
! 
!         if (flag)
!         {
!             ShadersRender.setupTerrain(renderglobal, entity, (double)partialTicks, icamera, this.frameCount++, this.mc.player.isSpectator());
!         }
!         else
!         {
!             renderglobal.setupTerrain(entity, (double)partialTicks, icamera, this.frameCount++, this.mc.player.isSpectator());
!         }
  
          if (pass == 0 || pass == 2)
          {
              this.mc.mcProfiler.endStartSection("updatechunks");
+             Lagometer.timerChunkUpload.start();
              this.mc.renderGlobal.updateChunks(finishTimeNano);
+             Lagometer.timerChunkUpload.end();
          }
  
          this.mc.mcProfiler.endStartSection("terrain");
+         Lagometer.timerTerrain.start();
+ 
+         if (this.mc.gameSettings.ofSmoothFps && pass > 0)
+         {
+             this.mc.mcProfiler.endStartSection("finish");
+             GL11.glFinish();
+             this.mc.mcProfiler.endStartSection("terrain");
+         }
+ 
          GlStateManager.matrixMode(5888);
          GlStateManager.pushMatrix();
          GlStateManager.disableAlpha();
+ 
+         if (flag)
+         {
+             ShadersRender.beginTerrainSolid();
+         }
+ 
          renderglobal.renderBlockLayer(BlockRenderLayer.SOLID, (double)partialTicks, pass, entity);
          GlStateManager.enableAlpha();
+ 
+         if (flag)
+         {
+             ShadersRender.beginTerrainCutoutMipped();
+         }
+ 
          renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT_MIPPED, (double)partialTicks, pass, entity);
          this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
+ 
+         if (flag)
+         {
+             ShadersRender.beginTerrainCutout();
+         }
+ 
          renderglobal.renderBlockLayer(BlockRenderLayer.CUTOUT, (double)partialTicks, pass, entity);
          this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
+ 
+         if (flag)
+         {
+             ShadersRender.endTerrain();
+         }
+ 
+         Lagometer.timerTerrain.end();
          GlStateManager.shadeModel(7424);
          GlStateManager.alphaFunc(516, 0.1F);
  
***************
*** 1412,1418 ****
--- 1743,1761 ----
              GlStateManager.pushMatrix();
              RenderHelper.enableStandardItemLighting();
              this.mc.mcProfiler.endStartSection("entities");
+ 
+             if (Reflector.ForgeHooksClient_setRenderPass.exists())
+             {
+                 Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, Integer.valueOf(0));
+             }
+ 
              renderglobal.renderEntities(entity, icamera, partialTicks);
+ 
+             if (Reflector.ForgeHooksClient_setRenderPass.exists())
+             {
+                 Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, Integer.valueOf(-1));
+             }
+ 
              RenderHelper.disableStandardItemLighting();
              this.disableLightmap();
          }
***************
*** 1420,1465 ****
          GlStateManager.matrixMode(5888);
          GlStateManager.popMatrix();
  
!         if (flag && this.mc.objectMouseOver != null && !entity.isInsideOfMaterial(Material.WATER))
          {
              EntityPlayer entityplayer = (EntityPlayer)entity;
              GlStateManager.disableAlpha();
              this.mc.mcProfiler.endStartSection("outline");
!             renderglobal.drawSelectionBox(entityplayer, this.mc.objectMouseOver, 0, partialTicks);
              GlStateManager.enableAlpha();
          }
  
          if (this.mc.debugRenderer.shouldRender())
          {
              this.mc.debugRenderer.renderDebug(partialTicks, finishTimeNano);
          }
  
!         this.mc.mcProfiler.endStartSection("destroyProgress");
!         GlStateManager.enableBlend();
!         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!         this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
!         renderglobal.drawBlockDamageTexture(Tessellator.getInstance(), Tessellator.getInstance().getBuffer(), entity, partialTicks);
!         this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
          GlStateManager.disableBlend();
  
          if (!this.debugView)
          {
              this.enableLightmap();
              this.mc.mcProfiler.endStartSection("litParticles");
              particlemanager.renderLitParticles(entity, partialTicks);
              RenderHelper.disableStandardItemLighting();
              this.setupFog(0, partialTicks);
              this.mc.mcProfiler.endStartSection("particles");
              particlemanager.renderParticles(entity, partialTicks);
              this.disableLightmap();
          }
  
          GlStateManager.depthMask(false);
          GlStateManager.enableCull();
          this.mc.mcProfiler.endStartSection("weather");
          this.renderRainSnow(partialTicks);
          GlStateManager.depthMask(true);
          renderglobal.renderWorldBorder(entity, partialTicks);
          GlStateManager.disableBlend();
          GlStateManager.enableCull();
          GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
--- 1763,1859 ----
          GlStateManager.matrixMode(5888);
          GlStateManager.popMatrix();
  
!         if (flag1 && this.mc.objectMouseOver != null && !entity.isInsideOfMaterial(Material.WATER))
          {
              EntityPlayer entityplayer = (EntityPlayer)entity;
              GlStateManager.disableAlpha();
              this.mc.mcProfiler.endStartSection("outline");
! 
!             if (!Reflector.ForgeHooksClient_onDrawBlockHighlight.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, renderglobal, entityplayer, this.mc.objectMouseOver, Integer.valueOf(0), partialTicks))
!             {
!                 renderglobal.drawSelectionBox(entityplayer, this.mc.objectMouseOver, 0, partialTicks);
!             }
! 
              GlStateManager.enableAlpha();
          }
  
          if (this.mc.debugRenderer.shouldRender())
          {
+             boolean flag2 = GlStateManager.isFogEnabled();
+             GlStateManager.disableFog();
              this.mc.debugRenderer.renderDebug(partialTicks, finishTimeNano);
+             GlStateManager.setFogEnabled(flag2);
          }
  
!         if (!renderglobal.damagedBlocks.isEmpty())
!         {
!             this.mc.mcProfiler.endStartSection("destroyProgress");
!             GlStateManager.enableBlend();
!             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!             this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
!             renderglobal.drawBlockDamageTexture(Tessellator.getInstance(), Tessellator.getInstance().getBuffer(), entity, partialTicks);
!             this.mc.getTextureManager().getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
!             GlStateManager.disableBlend();
!         }
! 
!         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
          GlStateManager.disableBlend();
  
          if (!this.debugView)
          {
              this.enableLightmap();
              this.mc.mcProfiler.endStartSection("litParticles");
+ 
+             if (flag)
+             {
+                 Shaders.beginLitParticles();
+             }
+ 
              particlemanager.renderLitParticles(entity, partialTicks);
              RenderHelper.disableStandardItemLighting();
              this.setupFog(0, partialTicks);
              this.mc.mcProfiler.endStartSection("particles");
+ 
+             if (flag)
+             {
+                 Shaders.beginParticles();
+             }
+ 
              particlemanager.renderParticles(entity, partialTicks);
+ 
+             if (flag)
+             {
+                 Shaders.endParticles();
+             }
+ 
              this.disableLightmap();
          }
  
          GlStateManager.depthMask(false);
          GlStateManager.enableCull();
          this.mc.mcProfiler.endStartSection("weather");
+ 
+         if (flag)
+         {
+             Shaders.beginWeather();
+         }
+ 
          this.renderRainSnow(partialTicks);
+ 
+         if (flag)
+         {
+             Shaders.endWeather();
+         }
+ 
          GlStateManager.depthMask(true);
          renderglobal.renderWorldBorder(entity, partialTicks);
+ 
+         if (flag)
+         {
+             ShadersRender.renderHand0(this, partialTicks, pass);
+             Shaders.preWater();
+         }
+ 
          GlStateManager.disableBlend();
          GlStateManager.enableCull();
          GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
***************
*** 1470,1505 ****
          this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
          GlStateManager.shadeModel(7425);
          this.mc.mcProfiler.endStartSection("translucent");
          renderglobal.renderBlockLayer(BlockRenderLayer.TRANSLUCENT, (double)partialTicks, pass, entity);
          GlStateManager.shadeModel(7424);
          GlStateManager.depthMask(true);
          GlStateManager.enableCull();
          GlStateManager.disableBlend();
          GlStateManager.disableFog();
  
!         if (entity.posY + (double)entity.getEyeHeight() >= 128.0D)
          {
              this.mc.mcProfiler.endStartSection("aboveClouds");
              this.renderCloudsCheck(renderglobal, partialTicks, pass, d0, d1, d2);
          }
  
          this.mc.mcProfiler.endStartSection("hand");
  
!         if (this.renderHand)
          {
              GlStateManager.clear(256);
!             this.renderHand(partialTicks, pass);
          }
      }
  
      private void renderCloudsCheck(RenderGlobal renderGlobalIn, float partialTicks, int pass, double p_180437_4_, double p_180437_6_, double p_180437_8_)
      {
!         if (this.mc.gameSettings.shouldRenderClouds() != 0)
          {
              this.mc.mcProfiler.endStartSection("clouds");
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 4.0F);
              GlStateManager.matrixMode(5888);
              GlStateManager.pushMatrix();
              this.setupFog(0, partialTicks);
--- 1864,1947 ----
          this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
          GlStateManager.shadeModel(7425);
          this.mc.mcProfiler.endStartSection("translucent");
+ 
+         if (flag)
+         {
+             Shaders.beginWater();
+         }
+ 
          renderglobal.renderBlockLayer(BlockRenderLayer.TRANSLUCENT, (double)partialTicks, pass, entity);
+ 
+         if (flag)
+         {
+             Shaders.endWater();
+         }
+ 
+         if (Reflector.ForgeHooksClient_setRenderPass.exists() && !this.debugView)
+         {
+             RenderHelper.enableStandardItemLighting();
+             this.mc.mcProfiler.endStartSection("entities");
+             Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, Integer.valueOf(1));
+             this.mc.renderGlobal.renderEntities(entity, icamera, partialTicks);
+             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
+             Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, Integer.valueOf(-1));
+             RenderHelper.disableStandardItemLighting();
+         }
+ 
          GlStateManager.shadeModel(7424);
          GlStateManager.depthMask(true);
          GlStateManager.enableCull();
          GlStateManager.disableBlend();
          GlStateManager.disableFog();
  
!         if (entity.posY + (double)entity.getEyeHeight() >= 128.0D + (double)(this.mc.gameSettings.ofCloudsHeight * 128.0F))
          {
              this.mc.mcProfiler.endStartSection("aboveClouds");
              this.renderCloudsCheck(renderglobal, partialTicks, pass, d0, d1, d2);
          }
  
+         if (Reflector.ForgeHooksClient_dispatchRenderLast.exists())
+         {
+             this.mc.mcProfiler.endStartSection("forge_render_last");
+             Reflector.callVoid(Reflector.ForgeHooksClient_dispatchRenderLast, renderglobal, partialTicks);
+         }
+ 
          this.mc.mcProfiler.endStartSection("hand");
  
!         if (this.renderHand && !Shaders.isShadowPass)
          {
+             if (flag)
+             {
+                 ShadersRender.renderHand1(this, partialTicks, pass);
+                 Shaders.renderCompositeFinal();
+             }
+ 
              GlStateManager.clear(256);
! 
!             if (flag)
!             {
!                 ShadersRender.renderFPOverlay(this, partialTicks, pass);
!             }
!             else
!             {
!                 this.renderHand(partialTicks, pass);
!             }
!         }
! 
!         if (flag)
!         {
!             Shaders.endRender();
          }
      }
  
      private void renderCloudsCheck(RenderGlobal renderGlobalIn, float partialTicks, int pass, double p_180437_4_, double p_180437_6_, double p_180437_8_)
      {
!         if (this.mc.gameSettings.renderDistanceChunks >= 4 && !Config.isCloudsOff() && Shaders.shouldRenderClouds(this.mc.gameSettings))
          {
              this.mc.mcProfiler.endStartSection("clouds");
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance * 4.0F);
              GlStateManager.matrixMode(5888);
              GlStateManager.pushMatrix();
              this.setupFog(0, partialTicks);
***************
*** 1508,1514 ****
              GlStateManager.popMatrix();
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * MathHelper.SQRT_2);
              GlStateManager.matrixMode(5888);
          }
      }
--- 1950,1956 ----
              GlStateManager.popMatrix();
              GlStateManager.matrixMode(5889);
              GlStateManager.loadIdentity();
!             Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
              GlStateManager.matrixMode(5888);
          }
      }
***************
*** 1517,1528 ****
      {
          float f = this.mc.world.getRainStrength(1.0F);
  
!         if (!this.mc.gameSettings.fancyGraphics)
          {
              f /= 2.0F;
          }
  
!         if (f != 0.0F)
          {
              this.random.setSeed((long)this.rendererUpdateCount * 312987231L);
              Entity entity = this.mc.getRenderViewEntity();
--- 1959,1970 ----
      {
          float f = this.mc.world.getRainStrength(1.0F);
  
!         if (!Config.isRainFancy())
          {
              f /= 2.0F;
          }
  
!         if (f != 0.0F && Config.isRainSplash())
          {
              this.random.setSeed((long)this.rendererUpdateCount * 312987231L);
              Entity entity = this.mc.getRenderViewEntity();
***************
*** 1601,1610 ****
       */
      protected void renderRainSnow(float partialTicks)
      {
!         float f = this.mc.world.getRainStrength(partialTicks);
  
!         if (f > 0.0F)
          {
              this.enableLightmap();
              Entity entity = this.mc.getRenderViewEntity();
              World world = this.mc.world;
--- 2043,2069 ----
       */
      protected void renderRainSnow(float partialTicks)
      {
!         if (Reflector.ForgeWorldProvider_getWeatherRenderer.exists())
!         {
!             WorldProvider worldprovider = this.mc.world.provider;
!             Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getWeatherRenderer);
! 
!             if (object != null)
!             {
!                 Reflector.callVoid(object, Reflector.IRenderHandler_render, partialTicks, this.mc.world, this.mc);
!                 return;
!             }
!         }
! 
!         float f5 = this.mc.world.getRainStrength(partialTicks);
  
!         if (f5 > 0.0F)
          {
+             if (Config.isRainOff())
+             {
+                 return;
+             }
+ 
              this.enableLightmap();
              Entity entity = this.mc.getRenderViewEntity();
              World world = this.mc.world;
***************
*** 1624,1636 ****
              int l = MathHelper.floor(d1);
              int i1 = 5;
  
!             if (this.mc.gameSettings.fancyGraphics)
              {
                  i1 = 10;
              }
  
              int j1 = -1;
!             float f1 = (float)this.rendererUpdateCount + partialTicks;
              bufferbuilder.setTranslation(-d0, -d1, -d2);
              GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
              BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
--- 2083,2095 ----
              int l = MathHelper.floor(d1);
              int i1 = 5;
  
!             if (Config.isRainFancy())
              {
                  i1 = 10;
              }
  
              int j1 = -1;
!             float f = (float)this.rendererUpdateCount + partialTicks;
              bufferbuilder.setTranslation(-d0, -d1, -d2);
              GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
              BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
***************
*** 1672,1680 ****
                          {
                              this.random.setSeed((long)(l1 * l1 * 3121 + l1 * 45238971 ^ k1 * k1 * 418711 + k1 * 13761));
                              blockpos$mutableblockpos.setPos(l1, k2, k1);
!                             float f2 = biome.getFloatTemperature(blockpos$mutableblockpos);
  
!                             if (world.getBiomeProvider().getTemperatureAtHeight(f2, j2) >= 0.15F)
                              {
                                  if (j1 != 0)
                                  {
--- 2131,2139 ----
                          {
                              this.random.setSeed((long)(l1 * l1 * 3121 + l1 * 45238971 ^ k1 * k1 * 418711 + k1 * 13761));
                              blockpos$mutableblockpos.setPos(l1, k2, k1);
!                             float f1 = biome.getFloatTemperature(blockpos$mutableblockpos);
  
!                             if (world.getBiomeProvider().getTemperatureAtHeight(f1, j2) >= 0.15F)
                              {
                                  if (j1 != 0)
                                  {
***************
*** 1691,1706 ****
                                  double d5 = -((double)(this.rendererUpdateCount + l1 * l1 * 3121 + l1 * 45238971 + k1 * k1 * 418711 + k1 * 13761 & 31) + (double)partialTicks) / 32.0D * (3.0D + this.random.nextDouble());
                                  double d6 = (double)((float)l1 + 0.5F) - entity.posX;
                                  double d7 = (double)((float)k1 + 0.5F) - entity.posZ;
!                                 float f3 = MathHelper.sqrt(d6 * d6 + d7 * d7) / (float)i1;
!                                 float f4 = ((1.0F - f3 * f3) * 0.5F + 0.5F) * f;
                                  blockpos$mutableblockpos.setPos(l1, i3, k1);
                                  int j3 = world.getCombinedLight(blockpos$mutableblockpos, 0);
                                  int k3 = j3 >> 16 & 65535;
                                  int l3 = j3 & 65535;
!                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
!                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
!                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
!                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f4).lightmap(k3, l3).endVertex();
                              }
                              else
                              {
--- 2150,2165 ----
                                  double d5 = -((double)(this.rendererUpdateCount + l1 * l1 * 3121 + l1 * 45238971 + k1 * k1 * 418711 + k1 * 13761 & 31) + (double)partialTicks) / 32.0D * (3.0D + this.random.nextDouble());
                                  double d6 = (double)((float)l1 + 0.5F) - entity.posX;
                                  double d7 = (double)((float)k1 + 0.5F) - entity.posZ;
!                                 float f2 = MathHelper.sqrt(d6 * d6 + d7 * d7) / (float)i1;
!                                 float f3 = ((1.0F - f2 * f2) * 0.5F + 0.5F) * f5;
                                  blockpos$mutableblockpos.setPos(l1, i3, k1);
                                  int j3 = world.getCombinedLight(blockpos$mutableblockpos, 0);
                                  int k3 = j3 >> 16 & 65535;
                                  int l3 = j3 & 65535;
!                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
!                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
!                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
!                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
                              }
                              else
                              {
***************
*** 1717,1736 ****
                                  }
  
                                  double d8 = (double)(-((float)(this.rendererUpdateCount & 511) + partialTicks) / 512.0F);
!                                 double d9 = this.random.nextDouble() + (double)f1 * 0.01D * (double)((float)this.random.nextGaussian());
!                                 double d10 = this.random.nextDouble() + (double)(f1 * (float)this.random.nextGaussian()) * 0.001D;
                                  double d11 = (double)((float)l1 + 0.5F) - entity.posX;
                                  double d12 = (double)((float)k1 + 0.5F) - entity.posZ;
                                  float f6 = MathHelper.sqrt(d11 * d11 + d12 * d12) / (float)i1;
!                                 float f5 = ((1.0F - f6 * f6) * 0.3F + 0.5F) * f;
                                  blockpos$mutableblockpos.setPos(l1, i3, k1);
                                  int i4 = (world.getCombinedLight(blockpos$mutableblockpos, 0) * 3 + 15728880) / 4;
                                  int j4 = i4 >> 16 & 65535;
                                  int k4 = i4 & 65535;
!                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
!                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
!                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
!                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f5).lightmap(j4, k4).endVertex();
                              }
                          }
                      }
--- 2176,2195 ----
                                  }
  
                                  double d8 = (double)(-((float)(this.rendererUpdateCount & 511) + partialTicks) / 512.0F);
!                                 double d9 = this.random.nextDouble() + (double)f * 0.01D * (double)((float)this.random.nextGaussian());
!                                 double d10 = this.random.nextDouble() + (double)(f * (float)this.random.nextGaussian()) * 0.001D;
                                  double d11 = (double)((float)l1 + 0.5F) - entity.posX;
                                  double d12 = (double)((float)k1 + 0.5F) - entity.posZ;
                                  float f6 = MathHelper.sqrt(d11 * d11 + d12 * d12) / (float)i1;
!                                 float f4 = ((1.0F - f6 * f6) * 0.3F + 0.5F) * f5;
                                  blockpos$mutableblockpos.setPos(l1, i3, k1);
                                  int i4 = (world.getCombinedLight(blockpos$mutableblockpos, 0) * 3 + 15728880) / 4;
                                  int j4 = i4 >> 16 & 65535;
                                  int k4 = i4 & 65535;
!                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
!                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
!                                 bufferbuilder.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
!                                 bufferbuilder.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
                              }
                          }
                      }
***************
*** 1775,1784 ****
--- 2234,2245 ----
          float f = 0.25F + 0.75F * (float)this.mc.gameSettings.renderDistanceChunks / 32.0F;
          f = 1.0F - (float)Math.pow((double)f, 0.25D);
          Vec3d vec3d = world.getSkyColor(this.mc.getRenderViewEntity(), partialTicks);
+         vec3d = CustomColors.getWorldSkyColor(vec3d, world, this.mc.getRenderViewEntity(), partialTicks);
          float f1 = (float)vec3d.xCoord;
          float f2 = (float)vec3d.yCoord;
          float f3 = (float)vec3d.zCoord;
          Vec3d vec3d1 = world.getFogColor(partialTicks);
+         vec3d1 = CustomColors.getWorldFogColor(vec3d1, world, this.mc.getRenderViewEntity(), partialTicks);
          this.fogColorRed = (float)vec3d1.xCoord;
          this.fogColorGreen = (float)vec3d1.yCoord;
          this.fogColorBlue = (float)vec3d1.zCoord;
***************
*** 1832,1847 ****
              this.fogColorBlue *= f11;
          }
  
!         IBlockState iblockstate = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
  
          if (this.cloudFog)
          {
!             Vec3d vec3d3 = world.getCloudColour(partialTicks);
              this.fogColorRed = (float)vec3d3.xCoord;
              this.fogColorGreen = (float)vec3d3.yCoord;
              this.fogColorBlue = (float)vec3d3.zCoord;
          }
!         else if (iblockstate.getMaterial() == Material.WATER)
          {
              float f12 = 0.0F;
  
--- 2293,2318 ----
              this.fogColorBlue *= f11;
          }
  
!         IBlockState iblockstate1 = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
  
          if (this.cloudFog)
          {
!             Vec3d vec3d4 = world.getCloudColour(partialTicks);
!             this.fogColorRed = (float)vec3d4.xCoord;
!             this.fogColorGreen = (float)vec3d4.yCoord;
!             this.fogColorBlue = (float)vec3d4.zCoord;
!         }
!         else if (Reflector.ForgeBlock_getFogColor.exists())
!         {
!             Vec3d vec3d5 = ActiveRenderInfo.projectViewFromEntity(entity, (double)partialTicks);
!             BlockPos blockpos = new BlockPos(vec3d5);
!             IBlockState iblockstate = this.mc.world.getBlockState(blockpos);
!             Vec3d vec3d3 = (Vec3d)Reflector.call(iblockstate.getBlock(), Reflector.ForgeBlock_getFogColor, this.mc.world, blockpos, iblockstate, entity, new Vec3d((double)this.fogColorRed, (double)this.fogColorGreen, (double)this.fogColorBlue), partialTicks);
              this.fogColorRed = (float)vec3d3.xCoord;
              this.fogColorGreen = (float)vec3d3.yCoord;
              this.fogColorBlue = (float)vec3d3.zCoord;
          }
!         else if (iblockstate1.getMaterial() == Material.WATER)
          {
              float f12 = 0.0F;
  
***************
*** 1858,1869 ****
              this.fogColorRed = 0.02F + f12;
              this.fogColorGreen = 0.02F + f12;
              this.fogColorBlue = 0.2F + f12;
          }
!         else if (iblockstate.getMaterial() == Material.LAVA)
          {
              this.fogColorRed = 0.6F;
              this.fogColorGreen = 0.1F;
              this.fogColorBlue = 0.0F;
          }
  
          float f13 = this.fogColor2 + (this.fogColor1 - this.fogColor2) * partialTicks;
--- 2329,2356 ----
              this.fogColorRed = 0.02F + f12;
              this.fogColorGreen = 0.02F + f12;
              this.fogColorBlue = 0.2F + f12;
+             Vec3d vec3d7 = CustomColors.getUnderwaterColor(this.mc.world, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
+ 
+             if (vec3d7 != null)
+             {
+                 this.fogColorRed = (float)vec3d7.xCoord;
+                 this.fogColorGreen = (float)vec3d7.yCoord;
+                 this.fogColorBlue = (float)vec3d7.zCoord;
+             }
          }
!         else if (iblockstate1.getMaterial() == Material.LAVA)
          {
              this.fogColorRed = 0.6F;
              this.fogColorGreen = 0.1F;
              this.fogColorBlue = 0.0F;
+             Vec3d vec3d6 = CustomColors.getUnderlavaColor(this.mc.world, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
+ 
+             if (vec3d6 != null)
+             {
+                 this.fogColorRed = (float)vec3d6.xCoord;
+                 this.fogColorGreen = (float)vec3d6.yCoord;
+                 this.fogColorBlue = (float)vec3d6.zCoord;
+             }
          }
  
          float f13 = this.fogColor2 + (this.fogColor1 - this.fogColor2) * partialTicks;
***************
*** 1937,1943 ****
              this.fogColorBlue = f7;
          }
  
!         GlStateManager.clearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
      }
  
      /**
--- 2424,2439 ----
              this.fogColorBlue = f7;
          }
  
!         if (Reflector.EntityViewRenderEvent_FogColors_Constructor.exists())
!         {
!             Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_FogColors_Constructor, this, entity, iblockstate1, partialTicks, this.fogColorRed, this.fogColorGreen, this.fogColorBlue);
!             Reflector.postForgeBusEvent(object);
!             this.fogColorRed = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_FogColors_getRed);
!             this.fogColorGreen = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_FogColors_getGreen);
!             this.fogColorBlue = Reflector.callFloat(object, Reflector.EntityViewRenderEvent_FogColors_getBlue);
!         }
! 
!         Shaders.setClearColor(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 0.0F);
      }
  
      /**
***************
*** 1946,1993 ****
       */
      private void setupFog(int startCoords, float partialTicks)
      {
          Entity entity = this.mc.getRenderViewEntity();
          this.func_191514_d(false);
          GlStateManager.glNormal3f(0.0F, -1.0F, 0.0F);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          IBlockState iblockstate = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
  
!         if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(MobEffects.BLINDNESS))
          {
!             float f1 = 5.0F;
              int i = ((EntityLivingBase)entity).getActivePotionEffect(MobEffects.BLINDNESS).getDuration();
  
              if (i < 20)
              {
!                 f1 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float)i / 20.0F);
              }
  
!             GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
  
              if (startCoords == -1)
              {
                  GlStateManager.setFogStart(0.0F);
!                 GlStateManager.setFogEnd(f1 * 0.8F);
              }
              else
              {
!                 GlStateManager.setFogStart(f1 * 0.25F);
!                 GlStateManager.setFogEnd(f1);
              }
  
!             if (GLContext.getCapabilities().GL_NV_fog_distance)
              {
                  GlStateManager.glFogi(34138, 34139);
              }
          }
          else if (this.cloudFog)
          {
!             GlStateManager.setFog(GlStateManager.FogMode.EXP);
              GlStateManager.setFogDensity(0.1F);
          }
          else if (iblockstate.getMaterial() == Material.WATER)
          {
!             GlStateManager.setFog(GlStateManager.FogMode.EXP);
  
              if (entity instanceof EntityLivingBase)
              {
--- 2442,2522 ----
       */
      private void setupFog(int startCoords, float partialTicks)
      {
+         this.fogStandard = false;
          Entity entity = this.mc.getRenderViewEntity();
          this.func_191514_d(false);
          GlStateManager.glNormal3f(0.0F, -1.0F, 0.0F);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          IBlockState iblockstate = ActiveRenderInfo.getBlockStateAtEntityViewpoint(this.mc.world, entity, partialTicks);
+         float f = -1.0F;
  
!         if (Reflector.ForgeHooksClient_getFogDensity.exists())
!         {
!             f = Reflector.callFloat(Reflector.ForgeHooksClient_getFogDensity, this, entity, iblockstate, partialTicks, 0.1F);
!         }
! 
!         if (f >= 0.0F)
!         {
!             GlStateManager.setFogDensity(f);
!         }
!         else if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(MobEffects.BLINDNESS))
          {
!             float f2 = 5.0F;
              int i = ((EntityLivingBase)entity).getActivePotionEffect(MobEffects.BLINDNESS).getDuration();
  
              if (i < 20)
              {
!                 f2 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float)i / 20.0F);
              }
  
!             if (Config.isShaders())
!             {
!                 Shaders.setFog(GlStateManager.FogMode.LINEAR);
!             }
!             else
!             {
!                 GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
!             }
  
              if (startCoords == -1)
              {
                  GlStateManager.setFogStart(0.0F);
!                 GlStateManager.setFogEnd(f2 * 0.8F);
              }
              else
              {
!                 GlStateManager.setFogStart(f2 * 0.25F);
!                 GlStateManager.setFogEnd(f2);
              }
  
!             if (GLContext.getCapabilities().GL_NV_fog_distance && Config.isFogFancy())
              {
                  GlStateManager.glFogi(34138, 34139);
              }
          }
          else if (this.cloudFog)
          {
!             if (Config.isShaders())
!             {
!                 Shaders.setFog(GlStateManager.FogMode.EXP);
!             }
!             else
!             {
!                 GlStateManager.setFog(GlStateManager.FogMode.EXP);
!             }
! 
              GlStateManager.setFogDensity(0.1F);
          }
          else if (iblockstate.getMaterial() == Material.WATER)
          {
!             if (Config.isShaders())
!             {
!                 Shaders.setFog(GlStateManager.FogMode.EXP);
!             }
!             else
!             {
!                 GlStateManager.setFog(GlStateManager.FogMode.EXP);
!             }
  
              if (entity instanceof EntityLivingBase)
              {
***************
*** 2004,2040 ****
              {
                  GlStateManager.setFogDensity(0.1F);
              }
          }
          else if (iblockstate.getMaterial() == Material.LAVA)
          {
!             GlStateManager.setFog(GlStateManager.FogMode.EXP);
              GlStateManager.setFogDensity(2.0F);
          }
          else
          {
!             float f = this.farPlaneDistance;
!             GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
  
              if (startCoords == -1)
              {
                  GlStateManager.setFogStart(0.0F);
!                 GlStateManager.setFogEnd(f);
              }
              else
              {
!                 GlStateManager.setFogStart(f * 0.75F);
!                 GlStateManager.setFogEnd(f);
              }
  
              if (GLContext.getCapabilities().GL_NV_fog_distance)
              {
!                 GlStateManager.glFogi(34138, 34139);
              }
  
              if (this.mc.world.provider.doesXZShowFog((int)entity.posX, (int)entity.posZ) || this.mc.ingameGUI.getBossOverlay().shouldCreateFog())
              {
!                 GlStateManager.setFogStart(f * 0.05F);
!                 GlStateManager.setFogEnd(Math.min(f, 192.0F) * 0.5F);
              }
          }
  
--- 2533,2604 ----
              {
                  GlStateManager.setFogDensity(0.1F);
              }
+ 
+             if (Config.isClearWater())
+             {
+                 GlStateManager.setFogDensity(0.02F);
+             }
          }
          else if (iblockstate.getMaterial() == Material.LAVA)
          {
!             if (Config.isShaders())
!             {
!                 Shaders.setFog(GlStateManager.FogMode.EXP);
!             }
!             else
!             {
!                 GlStateManager.setFog(GlStateManager.FogMode.EXP);
!             }
! 
              GlStateManager.setFogDensity(2.0F);
          }
          else
          {
!             float f1 = this.farPlaneDistance;
!             this.fogStandard = true;
! 
!             if (Config.isShaders())
!             {
!                 Shaders.setFog(GlStateManager.FogMode.LINEAR);
!             }
!             else
!             {
!                 GlStateManager.setFog(GlStateManager.FogMode.LINEAR);
!             }
  
              if (startCoords == -1)
              {
                  GlStateManager.setFogStart(0.0F);
!                 GlStateManager.setFogEnd(f1);
              }
              else
              {
!                 GlStateManager.setFogStart(f1 * Config.getFogStart());
!                 GlStateManager.setFogEnd(f1);
              }
  
              if (GLContext.getCapabilities().GL_NV_fog_distance)
              {
!                 if (Config.isFogFancy())
!                 {
!                     GlStateManager.glFogi(34138, 34139);
!                 }
! 
!                 if (Config.isFogFast())
!                 {
!                     GlStateManager.glFogi(34138, 34140);
!                 }
              }
  
              if (this.mc.world.provider.doesXZShowFog((int)entity.posX, (int)entity.posZ) || this.mc.ingameGUI.getBossOverlay().shouldCreateFog())
              {
!                 GlStateManager.setFogStart(f1 * 0.05F);
!                 GlStateManager.setFogEnd(f1);
!             }
! 
!             if (Reflector.ForgeHooksClient_onFogRender.exists())
!             {
!                 Reflector.callVoid(Reflector.ForgeHooksClient_onFogRender, this, entity, iblockstate, partialTicks, startCoords, f1);
              }
          }
  
***************
*** 2060,2065 ****
--- 2624,2634 ----
       */
      private FloatBuffer setFogColorBuffer(float red, float green, float blue, float alpha)
      {
+         if (Config.isShaders())
+         {
+             Shaders.setFogColor(red, green, blue);
+         }
+ 
          this.fogColorBuffer.clear();
          this.fogColorBuffer.put(red).put(green).put(blue).put(alpha);
          this.fogColorBuffer.flip();
***************
*** 2077,2082 ****
--- 2646,2979 ----
          return this.theMapItemRenderer;
      }
  
+     private void waitForServerThread()
+     {
+         this.serverWaitTimeCurrent = 0;
+ 
+         if (Config.isSmoothWorld() && Config.isSingleProcessor())
+         {
+             if (this.mc.isIntegratedServerRunning())
+             {
+                 IntegratedServer integratedserver = this.mc.getIntegratedServer();
+ 
+                 if (integratedserver != null)
+                 {
+                     boolean flag = this.mc.isGamePaused();
+ 
+                     if (!flag && !(this.mc.currentScreen instanceof GuiDownloadTerrain))
+                     {
+                         if (this.serverWaitTime > 0)
+                         {
+                             Lagometer.timerServer.start();
+                             Config.sleep((long)this.serverWaitTime);
+                             Lagometer.timerServer.end();
+                             this.serverWaitTimeCurrent = this.serverWaitTime;
+                         }
+ 
+                         long i = System.nanoTime() / 1000000L;
+ 
+                         if (this.lastServerTime != 0L && this.lastServerTicks != 0)
+                         {
+                             long j = i - this.lastServerTime;
+ 
+                             if (j < 0L)
+                             {
+                                 this.lastServerTime = i;
+                                 j = 0L;
+                             }
+ 
+                             if (j >= 50L)
+                             {
+                                 this.lastServerTime = i;
+                                 int k = integratedserver.getTickCounter();
+                                 int l = k - this.lastServerTicks;
+ 
+                                 if (l < 0)
+                                 {
+                                     this.lastServerTicks = k;
+                                     l = 0;
+                                 }
+ 
+                                 if (l < 1 && this.serverWaitTime < 100)
+                                 {
+                                     this.serverWaitTime += 2;
+                                 }
+ 
+                                 if (l > 1 && this.serverWaitTime > 0)
+                                 {
+                                     --this.serverWaitTime;
+                                 }
+ 
+                                 this.lastServerTicks = k;
+                             }
+                         }
+                         else
+                         {
+                             this.lastServerTime = i;
+                             this.lastServerTicks = integratedserver.getTickCounter();
+                             this.avgServerTickDiff = 1.0F;
+                             this.avgServerTimeDiff = 50.0F;
+                         }
+                     }
+                     else
+                     {
+                         if (this.mc.currentScreen instanceof GuiDownloadTerrain)
+                         {
+                             Config.sleep(20L);
+                         }
+ 
+                         this.lastServerTime = 0L;
+                         this.lastServerTicks = 0;
+                     }
+                 }
+             }
+         }
+         else
+         {
+             this.lastServerTime = 0L;
+             this.lastServerTicks = 0;
+         }
+     }
+ 
+     private void frameInit()
+     {
+         if (!this.initialized)
+         {
+             TextureUtils.registerResourceListener();
+ 
+             if (Config.getBitsOs() == 64 && Config.getBitsJre() == 32)
+             {
+                 Config.setNotify64BitJava(true);
+             }
+ 
+             this.initialized = true;
+         }
+ 
+         Config.checkDisplayMode();
+         World world = this.mc.world;
+ 
+         if (world != null)
+         {
+             if (Config.getNewRelease() != null)
+             {
+                 String s = "HD_U".replace("HD_U", "HD Ultra").replace("L", "Light");
+                 String s1 = s + " " + Config.getNewRelease();
+                 TextComponentString textcomponentstring = new TextComponentString(I18n.format("of.message.newVersion", s1));
+                 this.mc.ingameGUI.getChatGUI().printChatMessage(textcomponentstring);
+                 Config.setNewRelease((String)null);
+             }
+ 
+             if (Config.isNotify64BitJava())
+             {
+                 Config.setNotify64BitJava(false);
+                 TextComponentString textcomponentstring1 = new TextComponentString(I18n.format("of.message.java64Bit"));
+                 this.mc.ingameGUI.getChatGUI().printChatMessage(textcomponentstring1);
+             }
+         }
+ 
+         if (this.mc.currentScreen instanceof GuiMainMenu)
+         {
+             this.updateMainMenu((GuiMainMenu)this.mc.currentScreen);
+         }
+ 
+         if (this.updatedWorld != world)
+         {
+             RandomMobs.worldChanged(this.updatedWorld, world);
+             Config.updateThreadPriorities();
+             this.lastServerTime = 0L;
+             this.lastServerTicks = 0;
+             this.updatedWorld = world;
+         }
+ 
+         if (!this.setFxaaShader(Shaders.configAntialiasingLevel))
+         {
+             Shaders.configAntialiasingLevel = 0;
+         }
+     }
+ 
+     private void frameFinish()
+     {
+         if (this.mc.world != null)
+         {
+             long i = System.currentTimeMillis();
+ 
+             if (i > this.lastErrorCheckTimeMs + 10000L)
+             {
+                 this.lastErrorCheckTimeMs = i;
+                 int j = GlStateManager.glGetError();
+ 
+                 if (j != 0)
+                 {
+                     String s = GLU.gluErrorString(j);
+                     TextComponentString textcomponentstring = new TextComponentString(I18n.format("of.message.openglError", j, s));
+                     this.mc.ingameGUI.getChatGUI().printChatMessage(textcomponentstring);
+                 }
+             }
+         }
+     }
+ 
+     private void updateMainMenu(GuiMainMenu p_updateMainMenu_1_)
+     {
+         try
+         {
+             String s = null;
+             Calendar calendar = Calendar.getInstance();
+             calendar.setTime(new Date());
+             int i = calendar.get(5);
+             int j = calendar.get(2) + 1;
+ 
+             if (i == 8 && j == 4)
+             {
+                 s = "Happy birthday, OptiFine!";
+             }
+ 
+             if (i == 14 && j == 8)
+             {
+                 s = "Happy birthday, sp614x!";
+             }
+ 
+             if (s == null)
+             {
+                 return;
+             }
+ 
+             Reflector.setFieldValue(p_updateMainMenu_1_, Reflector.GuiMainMenu_splashText, s);
+         }
+         catch (Throwable var6)
+         {
+             ;
+         }
+     }
+ 
+     public boolean setFxaaShader(int p_setFxaaShader_1_)
+     {
+         if (!OpenGlHelper.isFramebufferEnabled())
+         {
+             return false;
+         }
+         else if (this.theShaderGroup != null && this.theShaderGroup != this.fxaaShaders[2] && this.theShaderGroup != this.fxaaShaders[4])
+         {
+             return true;
+         }
+         else if (p_setFxaaShader_1_ != 2 && p_setFxaaShader_1_ != 4)
+         {
+             if (this.theShaderGroup == null)
+             {
+                 return true;
+             }
+             else
+             {
+                 this.theShaderGroup.deleteShaderGroup();
+                 this.theShaderGroup = null;
+                 return true;
+             }
+         }
+         else if (this.theShaderGroup != null && this.theShaderGroup == this.fxaaShaders[p_setFxaaShader_1_])
+         {
+             return true;
+         }
+         else if (this.mc.world == null)
+         {
+             return true;
+         }
+         else
+         {
+             this.loadShader(new ResourceLocation("shaders/post/fxaa_of_" + p_setFxaaShader_1_ + "x.json"));
+             this.fxaaShaders[p_setFxaaShader_1_] = this.theShaderGroup;
+             return this.useShader;
+         }
+     }
+ 
+     private void checkLoadVisibleChunks(Entity p_checkLoadVisibleChunks_1_, float p_checkLoadVisibleChunks_2_, ICamera p_checkLoadVisibleChunks_3_, boolean p_checkLoadVisibleChunks_4_)
+     {
+         int i = 201435902;
+ 
+         if (this.loadVisibleChunks)
+         {
+             this.loadVisibleChunks = false;
+             this.loadAllVisibleChunks(p_checkLoadVisibleChunks_1_, (double)p_checkLoadVisibleChunks_2_, p_checkLoadVisibleChunks_3_, p_checkLoadVisibleChunks_4_);
+             this.mc.ingameGUI.getChatGUI().deleteChatLine(i);
+         }
+ 
+         if (Keyboard.isKeyDown(61) && Keyboard.isKeyDown(38))
+         {
+             if (this.mc.gameSettings.field_194146_ao.getKeyCode() == 38)
+             {
+                 if (this.mc.currentScreen instanceof GuiScreenAdvancements)
+                 {
+                     this.mc.displayGuiScreen((GuiScreen)null);
+                 }
+ 
+                 while (Keyboard.next())
+                 {
+                     ;
+                 }
+             }
+ 
+             if (this.mc.currentScreen != null)
+             {
+                 return;
+             }
+ 
+             this.loadVisibleChunks = true;
+             TextComponentString textcomponentstring = new TextComponentString(I18n.format("of.message.loadingVisibleChunks"));
+             this.mc.ingameGUI.getChatGUI().printChatMessageWithOptionalDeletion(textcomponentstring, i);
+             Reflector.Minecraft_actionKeyF3.setValue(this.mc, Boolean.TRUE);
+         }
+     }
+ 
+     private void loadAllVisibleChunks(Entity p_loadAllVisibleChunks_1_, double p_loadAllVisibleChunks_2_, ICamera p_loadAllVisibleChunks_4_, boolean p_loadAllVisibleChunks_5_)
+     {
+         RenderGlobal renderglobal = Config.getRenderGlobal();
+         int i = renderglobal.getCountLoadedChunks();
+         long j = System.currentTimeMillis();
+         Config.dbg("Loading visible chunks");
+         long k = System.currentTimeMillis() + 5000L;
+         int l = 0;
+         boolean flag = false;
+ 
+         while (true)
+         {
+             flag = false;
+ 
+             for (int i1 = 0; i1 < 100; ++i1)
+             {
+                 renderglobal.displayListEntitiesDirty = true;
+                 renderglobal.setupTerrain(p_loadAllVisibleChunks_1_, p_loadAllVisibleChunks_2_, p_loadAllVisibleChunks_4_, this.frameCount++, p_loadAllVisibleChunks_5_);
+ 
+                 if (!renderglobal.hasNoChunkUpdates())
+                 {
+                     flag = true;
+                 }
+ 
+                 l = l + renderglobal.getCountChunksToUpdate();
+                 renderglobal.updateChunks(System.nanoTime() + 1000000000L);
+                 l = l - renderglobal.getCountChunksToUpdate();
+             }
+ 
+             if (renderglobal.getCountLoadedChunks() != i)
+             {
+                 flag = true;
+                 i = renderglobal.getCountLoadedChunks();
+             }
+ 
+             if (System.currentTimeMillis() > k)
+             {
+                 Config.log("Chunks loaded: " + l);
+                 k = System.currentTimeMillis() + 5000L;
+             }
+ 
+             if (!flag)
+             {
+                 break;
+             }
+         }
+ 
+         Config.log("Chunks loaded: " + l);
+         Config.log("Finished loading visible chunks");
+         RenderChunk.renderChunksUpdated = 0;
+     }
+ 
      public static void drawNameplate(FontRenderer fontRendererIn, String str, float x, float y, float z, int verticalShift, float viewerYaw, float viewerPitch, boolean isThirdPersonFrontal, boolean isSneaking)
      {
          GlStateManager.pushMatrix();
diff -rc ./client/renderer/GlStateManager.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/GlStateManager.java
*** ./client/renderer/GlStateManager.java	2018-11-18 13:18:45.829554000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/GlStateManager.java	2017-10-20 21:35:40.119849400 -0700
***************
*** 4,9 ****
--- 4,10 ----
  import java.nio.FloatBuffer;
  import java.nio.IntBuffer;
  import javax.annotation.Nullable;
+ 
  import org.lwjgl.BufferUtils;
  import org.lwjgl.opengl.GL11;
  import org.lwjgl.opengl.GL13;
***************
*** 12,17 ****
--- 13,21 ----
  import org.lwjgl.opengl.GLContext;
  import org.lwjgl.util.vector.Quaternion;
  
+ import optifine.Config;
+ import optifine.GlBlendState;
+ 
  public class GlStateManager
  {
      private static final FloatBuffer BUF_FLOAT_16 = BufferUtils.createFloatBuffer(16);
***************
*** 36,41 ****
--- 40,46 ----
      private static final GlStateManager.BooleanState rescaleNormalState;
      private static final GlStateManager.ColorMask colorMaskState;
      private static final GlStateManager.Color colorState;
+     public static boolean clearEnabled = true;
  
      public static void pushAttrib()
      {
***************
*** 461,473 ****
  
      public static void deleteTexture(int texture)
      {
!         GL11.glDeleteTextures(texture);
! 
!         for (GlStateManager.TextureState glstatemanager$texturestate : textureState)
          {
!             if (glstatemanager$texturestate.textureName == texture)
              {
!                 glstatemanager$texturestate.textureName = -1;
              }
          }
      }
--- 466,481 ----
  
      public static void deleteTexture(int texture)
      {
!         if (texture != 0)
          {
!             GL11.glDeleteTextures(texture);
! 
!             for (GlStateManager.TextureState glstatemanager$texturestate : textureState)
              {
!                 if (glstatemanager$texturestate.textureName == texture)
!                 {
!                     glstatemanager$texturestate.textureName = 0;
!                 }
              }
          }
      }
***************
*** 570,576 ****
  
      public static void clear(int mask)
      {
!         GL11.glClear(mask);
      }
  
      public static void matrixMode(int mode)
--- 578,587 ----
  
      public static void clear(int mask)
      {
!         if (clearEnabled)
!         {
!             GL11.glClear(mask);
!         }
      }
  
      public static void matrixMode(int mode)
***************
*** 835,840 ****
--- 846,921 ----
          p_187440_0_.clean();
      }
  
+     public static int getActiveTextureUnit()
+     {
+         return OpenGlHelper.defaultTexUnit + activeTextureUnit;
+     }
+ 
+     public static void bindCurrentTexture()
+     {
+         GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureState[activeTextureUnit].textureName);
+     }
+ 
+     public static int getBoundTexture()
+     {
+         return textureState[activeTextureUnit].textureName;
+     }
+ 
+     public static void checkBoundTexture()
+     {
+         if (Config.isMinecraftThread())
+         {
+             int i = GL11.glGetInteger(GL13.GL_ACTIVE_TEXTURE);
+             int j = GL11.glGetInteger(GL11.GL_TEXTURE_BINDING_2D);
+             int k = getActiveTextureUnit();
+             int l = getBoundTexture();
+ 
+             if (l > 0)
+             {
+                 if (i != k || j != l)
+                 {
+                     Config.dbg("checkTexture: act: " + k + ", glAct: " + i + ", tex: " + l + ", glTex: " + j);
+                 }
+             }
+         }
+     }
+ 
+     public static void deleteTextures(IntBuffer p_deleteTextures_0_)
+     {
+         p_deleteTextures_0_.rewind();
+ 
+         while (p_deleteTextures_0_.position() < p_deleteTextures_0_.limit())
+         {
+             int i = p_deleteTextures_0_.get();
+             deleteTexture(i);
+         }
+ 
+         p_deleteTextures_0_.rewind();
+     }
+ 
+     public static boolean isFogEnabled()
+     {
+         return fogState.fog.currentState;
+     }
+ 
+     public static void setFogEnabled(boolean p_setFogEnabled_0_)
+     {
+         fogState.fog.setState(p_setFogEnabled_0_);
+     }
+ 
+     public static void getBlendState(GlBlendState p_getBlendState_0_)
+     {
+         p_getBlendState_0_.enabled = blendState.blend.currentState;
+         p_getBlendState_0_.srcFactor = blendState.srcFactor;
+         p_getBlendState_0_.dstFactor = blendState.dstFactor;
+     }
+ 
+     public static void setBlendState(GlBlendState p_setBlendState_0_)
+     {
+         blendState.blend.setState(p_setBlendState_0_.enabled);
+         blendFunc(p_setBlendState_0_.srcFactor, p_setBlendState_0_.dstFactor);
+     }
+ 
      static
      {
          for (int i = 0; i < 8; ++i)
***************
*** 853,861 ****
          clearState = new GlStateManager.ClearState();
          stencilState = new GlStateManager.StencilState();
          normalizeState = new GlStateManager.BooleanState(2977);
!         textureState = new GlStateManager.TextureState[8];
  
!         for (int j = 0; j < 8; ++j)
          {
              textureState[j] = new GlStateManager.TextureState();
          }
--- 934,942 ----
          clearState = new GlStateManager.ClearState();
          stencilState = new GlStateManager.StencilState();
          normalizeState = new GlStateManager.BooleanState(2977);
!         textureState = new GlStateManager.TextureState[32];
  
!         for (int j = 0; j < textureState.length; ++j)
          {
              textureState[j] = new GlStateManager.TextureState();
          }
diff -rc ./client/renderer/ImageBufferDownload.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/ImageBufferDownload.java
*** ./client/renderer/ImageBufferDownload.java	2018-11-18 13:18:45.850542000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/ImageBufferDownload.java	2017-10-20 21:01:20.733597000 -0700
***************
*** 24,63 ****
          {
              this.imageWidth = 64;
              this.imageHeight = 64;
              BufferedImage bufferedimage = new BufferedImage(this.imageWidth, this.imageHeight, 2);
              Graphics graphics = bufferedimage.getGraphics();
              graphics.drawImage(image, 0, 0, (ImageObserver)null);
!             boolean flag = image.getHeight() == 32;
  
              if (flag)
              {
                  graphics.setColor(new Color(0, 0, 0, 0));
!                 graphics.fillRect(0, 32, 64, 32);
!                 graphics.drawImage(bufferedimage, 24, 48, 20, 52, 4, 16, 8, 20, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 28, 48, 24, 52, 8, 16, 12, 20, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 20, 52, 16, 64, 8, 20, 12, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 24, 52, 20, 64, 4, 20, 8, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 28, 52, 24, 64, 0, 20, 4, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 32, 52, 28, 64, 12, 20, 16, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 40, 48, 36, 52, 44, 16, 48, 20, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 44, 48, 40, 52, 48, 16, 52, 20, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 36, 52, 32, 64, 48, 20, 52, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 40, 52, 36, 64, 44, 20, 48, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 44, 52, 40, 64, 40, 20, 44, 32, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 48, 52, 44, 64, 52, 20, 56, 32, (ImageObserver)null);
              }
  
              graphics.dispose();
              this.imageData = ((DataBufferInt)bufferedimage.getRaster().getDataBuffer()).getData();
!             this.setAreaOpaque(0, 0, 32, 16);
  
              if (flag)
              {
!                 this.doTransparencyHack(32, 0, 64, 32);
              }
  
!             this.setAreaOpaque(0, 16, 64, 32);
!             this.setAreaOpaque(16, 48, 48, 64);
              return bufferedimage;
          }
      }
--- 24,73 ----
          {
              this.imageWidth = 64;
              this.imageHeight = 64;
+             int i = image.getWidth();
+             int j = image.getHeight();
+             int k;
+ 
+             for (k = 1; this.imageWidth < i || this.imageHeight < j; k *= 2)
+             {
+                 this.imageWidth *= 2;
+                 this.imageHeight *= 2;
+             }
+ 
              BufferedImage bufferedimage = new BufferedImage(this.imageWidth, this.imageHeight, 2);
              Graphics graphics = bufferedimage.getGraphics();
              graphics.drawImage(image, 0, 0, (ImageObserver)null);
!             boolean flag = image.getHeight() == 32 * k;
  
              if (flag)
              {
                  graphics.setColor(new Color(0, 0, 0, 0));
!                 graphics.fillRect(0 * k, 32 * k, 64 * k, 32 * k);
!                 graphics.drawImage(bufferedimage, 24 * k, 48 * k, 20 * k, 52 * k, 4 * k, 16 * k, 8 * k, 20 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 28 * k, 48 * k, 24 * k, 52 * k, 8 * k, 16 * k, 12 * k, 20 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 20 * k, 52 * k, 16 * k, 64 * k, 8 * k, 20 * k, 12 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 24 * k, 52 * k, 20 * k, 64 * k, 4 * k, 20 * k, 8 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 28 * k, 52 * k, 24 * k, 64 * k, 0 * k, 20 * k, 4 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 32 * k, 52 * k, 28 * k, 64 * k, 12 * k, 20 * k, 16 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 40 * k, 48 * k, 36 * k, 52 * k, 44 * k, 16 * k, 48 * k, 20 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 44 * k, 48 * k, 40 * k, 52 * k, 48 * k, 16 * k, 52 * k, 20 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 36 * k, 52 * k, 32 * k, 64 * k, 48 * k, 20 * k, 52 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 40 * k, 52 * k, 36 * k, 64 * k, 44 * k, 20 * k, 48 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 44 * k, 52 * k, 40 * k, 64 * k, 40 * k, 20 * k, 44 * k, 32 * k, (ImageObserver)null);
!                 graphics.drawImage(bufferedimage, 48 * k, 52 * k, 44 * k, 64 * k, 52 * k, 20 * k, 56 * k, 32 * k, (ImageObserver)null);
              }
  
              graphics.dispose();
              this.imageData = ((DataBufferInt)bufferedimage.getRaster().getDataBuffer()).getData();
!             this.setAreaOpaque(0 * k, 0 * k, 32 * k, 16 * k);
  
              if (flag)
              {
!                 this.doTransparencyHack(32 * k, 0 * k, 64 * k, 32 * k);
              }
  
!             this.setAreaOpaque(0 * k, 16 * k, 64 * k, 32 * k);
!             this.setAreaOpaque(16 * k, 48 * k, 48 * k, 64 * k);
              return bufferedimage;
          }
      }
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer: ItemRenderer.~
diff -rc ./client/renderer/ItemRenderer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/ItemRenderer.java
*** ./client/renderer/ItemRenderer.java	2018-11-18 13:18:45.890533000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/ItemRenderer.java	2017-10-20 21:35:40.247485600 -0700
***************
*** 19,24 ****
--- 19,25 ----
  import net.minecraft.entity.player.EntityPlayer;
  import net.minecraft.init.Items;
  import net.minecraft.item.Item;
+ import net.minecraft.item.ItemMap;
  import net.minecraft.item.ItemStack;
  import net.minecraft.util.BlockRenderLayer;
  import net.minecraft.util.EnumBlockRenderType;
***************
*** 28,33 ****
--- 29,39 ----
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.world.storage.MapData;
+ import optifine.Config;
+ import optifine.DynamicLights;
+ import optifine.Reflector;
+ import optifine.ReflectorForge;
+ import shadersmod.client.Shaders;
  
  public class ItemRenderer
  {
***************
*** 66,72 ****
              GlStateManager.pushMatrix();
              boolean flag = this.itemRenderer.shouldRenderItemIn3D(heldStack) && block.getBlockLayer() == BlockRenderLayer.TRANSLUCENT;
  
!             if (flag)
              {
                  GlStateManager.depthMask(false);
              }
--- 72,78 ----
              GlStateManager.pushMatrix();
              boolean flag = this.itemRenderer.shouldRenderItemIn3D(heldStack) && block.getBlockLayer() == BlockRenderLayer.TRANSLUCENT;
  
!             if (flag && (!Config.isShaders() || !Shaders.renderItemKeepDepthMask))
              {
                  GlStateManager.depthMask(false);
              }
***************
*** 98,103 ****
--- 104,115 ----
      {
          AbstractClientPlayer abstractclientplayer = this.mc.player;
          int i = this.mc.world.getCombinedLight(new BlockPos(abstractclientplayer.posX, abstractclientplayer.posY + (double)abstractclientplayer.getEyeHeight(), abstractclientplayer.posZ), 0);
+ 
+         if (Config.isDynamicLights())
+         {
+             i = DynamicLights.getCombinedLight(this.mc.getRenderViewEntity(), i);
+         }
+ 
          float f = (float)(i & 65535);
          float f1 = (float)(i >> 16);
          OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, f, f1);
***************
*** 221,227 ****
          bufferbuilder.pos(135.0D, -7.0D, 0.0D).tex(1.0D, 0.0D).endVertex();
          bufferbuilder.pos(-7.0D, -7.0D, 0.0D).tex(0.0D, 0.0D).endVertex();
          tessellator.draw();
!         MapData mapdata = Items.FILLED_MAP.getMapData(stack, this.mc.world);
  
          if (mapdata != null)
          {
--- 233,239 ----
          bufferbuilder.pos(135.0D, -7.0D, 0.0D).tex(1.0D, 0.0D).endVertex();
          bufferbuilder.pos(-7.0D, -7.0D, 0.0D).tex(0.0D, 0.0D).endVertex();
          tessellator.draw();
!         MapData mapdata = ReflectorForge.getMapData(Items.FILLED_MAP, stack, this.mc.world);
  
          if (mapdata != null)
          {
***************
*** 320,326 ****
          {
              ItemStack itemstack = abstractclientplayer.getActiveItemStack();
  
!             if (itemstack.getItem() == Items.BOW)
              {
                  EnumHand enumhand1 = abstractclientplayer.getActiveHand();
                  flag = enumhand1 == EnumHand.MAIN_HAND;
--- 332,338 ----
          {
              ItemStack itemstack = abstractclientplayer.getActiveItemStack();
  
!             if (!itemstack.func_190926_b() && itemstack.getItem() == Items.BOW)
              {
                  EnumHand enumhand1 = abstractclientplayer.getActiveHand();
                  flag = enumhand1 == EnumHand.MAIN_HAND;
***************
*** 337,350 ****
          {
              float f3 = enumhand == EnumHand.MAIN_HAND ? f : 0.0F;
              float f5 = 1.0F - (this.prevEquippedProgressMainHand + (this.equippedProgressMainHand - this.prevEquippedProgressMainHand) * partialTicks);
!             this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.MAIN_HAND, f3, this.itemStackMainHand, f5);
          }
  
          if (flag1)
          {
              float f4 = enumhand == EnumHand.OFF_HAND ? f : 0.0F;
              float f6 = 1.0F - (this.prevEquippedProgressOffHand + (this.equippedProgressOffHand - this.prevEquippedProgressOffHand) * partialTicks);
!             this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.OFF_HAND, f4, this.itemStackOffHand, f6);
          }
  
          GlStateManager.disableRescaleNormal();
--- 349,370 ----
          {
              float f3 = enumhand == EnumHand.MAIN_HAND ? f : 0.0F;
              float f5 = 1.0F - (this.prevEquippedProgressMainHand + (this.equippedProgressMainHand - this.prevEquippedProgressMainHand) * partialTicks);
! 
!             if (!Reflector.ForgeHooksClient_renderSpecificFirstPersonHand.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_renderSpecificFirstPersonHand, EnumHand.MAIN_HAND, partialTicks, f1, f3, f5, this.itemStackMainHand))
!             {
!                 this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.MAIN_HAND, f3, this.itemStackMainHand, f5);
!             }
          }
  
          if (flag1)
          {
              float f4 = enumhand == EnumHand.OFF_HAND ? f : 0.0F;
              float f6 = 1.0F - (this.prevEquippedProgressOffHand + (this.equippedProgressOffHand - this.prevEquippedProgressOffHand) * partialTicks);
! 
!             if (!Reflector.ForgeHooksClient_renderSpecificFirstPersonHand.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_renderSpecificFirstPersonHand, EnumHand.OFF_HAND, partialTicks, f1, f4, f6, this.itemStackOffHand))
!             {
!                 this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.OFF_HAND, f4, this.itemStackOffHand, f6);
!             }
          }
  
          GlStateManager.disableRescaleNormal();
***************
*** 353,447 ****
  
      public void renderItemInFirstPerson(AbstractClientPlayer p_187457_1_, float p_187457_2_, float p_187457_3_, EnumHand p_187457_4_, float p_187457_5_, ItemStack p_187457_6_, float p_187457_7_)
      {
!         boolean flag = p_187457_4_ == EnumHand.MAIN_HAND;
!         EnumHandSide enumhandside = flag ? p_187457_1_.getPrimaryHand() : p_187457_1_.getPrimaryHand().opposite();
!         GlStateManager.pushMatrix();
! 
!         if (p_187457_6_.func_190926_b())
          {
!             if (flag && !p_187457_1_.isInvisible())
              {
!                 this.renderArmFirstPerson(p_187457_7_, p_187457_5_, enumhandside);
              }
!         }
!         else if (p_187457_6_.getItem() == Items.FILLED_MAP)
!         {
!             if (flag && this.itemStackOffHand.func_190926_b())
              {
!                 this.renderMapFirstPerson(p_187457_3_, p_187457_7_, p_187457_5_);
              }
              else
              {
!                 this.renderMapFirstPersonSide(p_187457_7_, enumhandside, p_187457_5_, p_187457_6_);
!             }
!         }
!         else
!         {
!             boolean flag1 = enumhandside == EnumHandSide.RIGHT;
  
!             if (p_187457_1_.isHandActive() && p_187457_1_.getItemInUseCount() > 0 && p_187457_1_.getActiveHand() == p_187457_4_)
!             {
!                 int j = flag1 ? 1 : -1;
  
!                 switch (p_187457_6_.getItemUseAction())
                  {
!                     case NONE:
!                         this.transformSideFirstPerson(enumhandside, p_187457_7_);
!                         break;
! 
!                     case EAT:
!                     case DRINK:
!                         this.transformEatFirstPerson(p_187457_2_, enumhandside, p_187457_6_);
!                         this.transformSideFirstPerson(enumhandside, p_187457_7_);
!                         break;
! 
!                     case BLOCK:
!                         this.transformSideFirstPerson(enumhandside, p_187457_7_);
!                         break;
! 
!                     case BOW:
!                         this.transformSideFirstPerson(enumhandside, p_187457_7_);
!                         GlStateManager.translate((float)j * -0.2785682F, 0.18344387F, 0.15731531F);
!                         GlStateManager.rotate(-13.935F, 1.0F, 0.0F, 0.0F);
!                         GlStateManager.rotate((float)j * 35.3F, 0.0F, 1.0F, 0.0F);
!                         GlStateManager.rotate((float)j * -9.785F, 0.0F, 0.0F, 1.0F);
!                         float f5 = (float)p_187457_6_.getMaxItemUseDuration() - ((float)this.mc.player.getItemInUseCount() - p_187457_2_ + 1.0F);
!                         float f6 = f5 / 20.0F;
!                         f6 = (f6 * f6 + f6 * 2.0F) / 3.0F;
! 
!                         if (f6 > 1.0F)
!                         {
!                             f6 = 1.0F;
!                         }
! 
!                         if (f6 > 0.1F)
!                         {
!                             float f7 = MathHelper.sin((f5 - 0.1F) * 1.3F);
!                             float f3 = f6 - 0.1F;
!                             float f4 = f7 * f3;
!                             GlStateManager.translate(f4 * 0.0F, f4 * 0.004F, f4 * 0.0F);
!                         }
! 
!                         GlStateManager.translate(f6 * 0.0F, f6 * 0.0F, f6 * 0.04F);
!                         GlStateManager.scale(1.0F, 1.0F, 1.0F + f6 * 0.2F);
!                         GlStateManager.rotate((float)j * 45.0F, 0.0F, -1.0F, 0.0F);
                  }
!             }
!             else
!             {
!                 float f = -0.4F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * (float)Math.PI);
!                 float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * ((float)Math.PI * 2F));
!                 float f2 = -0.2F * MathHelper.sin(p_187457_5_ * (float)Math.PI);
!                 int i = flag1 ? 1 : -1;
!                 GlStateManager.translate((float)i * f, f1, f2);
!                 this.transformSideFirstPerson(enumhandside, p_187457_7_);
!                 this.transformFirstPerson(enumhandside, p_187457_5_);
              }
  
!             this.renderItemSide(p_187457_1_, p_187457_6_, flag1 ? ItemCameraTransforms.TransformType.FIRST_PERSON_RIGHT_HAND : ItemCameraTransforms.TransformType.FIRST_PERSON_LEFT_HAND, !flag1);
          }
- 
-         GlStateManager.popMatrix();
      }
  
      /**
--- 373,470 ----
  
      public void renderItemInFirstPerson(AbstractClientPlayer p_187457_1_, float p_187457_2_, float p_187457_3_, EnumHand p_187457_4_, float p_187457_5_, ItemStack p_187457_6_, float p_187457_7_)
      {
!         if (!Config.isShaders() || !Shaders.isSkipRenderHand(p_187457_4_))
          {
!             boolean flag = p_187457_4_ == EnumHand.MAIN_HAND;
!             EnumHandSide enumhandside = flag ? p_187457_1_.getPrimaryHand() : p_187457_1_.getPrimaryHand().opposite();
!             GlStateManager.pushMatrix();
! 
!             if (p_187457_6_.func_190926_b())
              {
!                 if (flag && !p_187457_1_.isInvisible())
!                 {
!                     this.renderArmFirstPerson(p_187457_7_, p_187457_5_, enumhandside);
!                 }
              }
!             else if (p_187457_6_.getItem() instanceof ItemMap)
              {
!                 if (flag && this.itemStackOffHand.func_190926_b())
!                 {
!                     this.renderMapFirstPerson(p_187457_3_, p_187457_7_, p_187457_5_);
!                 }
!                 else
!                 {
!                     this.renderMapFirstPersonSide(p_187457_7_, enumhandside, p_187457_5_, p_187457_6_);
!                 }
              }
              else
              {
!                 boolean flag1 = enumhandside == EnumHandSide.RIGHT;
  
!                 if (p_187457_1_.isHandActive() && p_187457_1_.getItemInUseCount() > 0 && p_187457_1_.getActiveHand() == p_187457_4_)
!                 {
!                     int j = flag1 ? 1 : -1;
  
!                     switch (p_187457_6_.getItemUseAction())
!                     {
!                         case NONE:
!                             this.transformSideFirstPerson(enumhandside, p_187457_7_);
!                             break;
! 
!                         case EAT:
!                         case DRINK:
!                             this.transformEatFirstPerson(p_187457_2_, enumhandside, p_187457_6_);
!                             this.transformSideFirstPerson(enumhandside, p_187457_7_);
!                             break;
! 
!                         case BLOCK:
!                             this.transformSideFirstPerson(enumhandside, p_187457_7_);
!                             break;
! 
!                         case BOW:
!                             this.transformSideFirstPerson(enumhandside, p_187457_7_);
!                             GlStateManager.translate((float)j * -0.2785682F, 0.18344387F, 0.15731531F);
!                             GlStateManager.rotate(-13.935F, 1.0F, 0.0F, 0.0F);
!                             GlStateManager.rotate((float)j * 35.3F, 0.0F, 1.0F, 0.0F);
!                             GlStateManager.rotate((float)j * -9.785F, 0.0F, 0.0F, 1.0F);
!                             float f5 = (float)p_187457_6_.getMaxItemUseDuration() - ((float)this.mc.player.getItemInUseCount() - p_187457_2_ + 1.0F);
!                             float f6 = f5 / 20.0F;
!                             f6 = (f6 * f6 + f6 * 2.0F) / 3.0F;
! 
!                             if (f6 > 1.0F)
!                             {
!                                 f6 = 1.0F;
!                             }
! 
!                             if (f6 > 0.1F)
!                             {
!                                 float f7 = MathHelper.sin((f5 - 0.1F) * 1.3F);
!                                 float f3 = f6 - 0.1F;
!                                 float f4 = f7 * f3;
!                                 GlStateManager.translate(f4 * 0.0F, f4 * 0.004F, f4 * 0.0F);
!                             }
! 
!                             GlStateManager.translate(f6 * 0.0F, f6 * 0.0F, f6 * 0.04F);
!                             GlStateManager.scale(1.0F, 1.0F, 1.0F + f6 * 0.2F);
!                             GlStateManager.rotate((float)j * 45.0F, 0.0F, -1.0F, 0.0F);
!                     }
!                 }
!                 else
                  {
!                     float f = -0.4F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * (float)Math.PI);
!                     float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt(p_187457_5_) * ((float)Math.PI * 2F));
!                     float f2 = -0.2F * MathHelper.sin(p_187457_5_ * (float)Math.PI);
!                     int i = flag1 ? 1 : -1;
!                     GlStateManager.translate((float)i * f, f1, f2);
!                     this.transformSideFirstPerson(enumhandside, p_187457_7_);
!                     this.transformFirstPerson(enumhandside, p_187457_5_);
                  }
! 
!                 this.renderItemSide(p_187457_1_, p_187457_6_, flag1 ? ItemCameraTransforms.TransformType.FIRST_PERSON_RIGHT_HAND : ItemCameraTransforms.TransformType.FIRST_PERSON_LEFT_HAND, !flag1);
              }
  
!             GlStateManager.popMatrix();
          }
      }
  
      /**
***************
*** 454,459 ****
--- 477,483 ----
          if (this.mc.player.isEntityInsideOpaqueBlock())
          {
              IBlockState iblockstate = this.mc.world.getBlockState(new BlockPos(this.mc.player));
+             BlockPos blockpos = new BlockPos(this.mc.player);
              EntityPlayer entityplayer = this.mc.player;
  
              for (int i = 0; i < 8; ++i)
***************
*** 461,489 ****
                  double d0 = entityplayer.posX + (double)(((float)((i >> 0) % 2) - 0.5F) * entityplayer.width * 0.8F);
                  double d1 = entityplayer.posY + (double)(((float)((i >> 1) % 2) - 0.5F) * 0.1F);
                  double d2 = entityplayer.posZ + (double)(((float)((i >> 2) % 2) - 0.5F) * entityplayer.width * 0.8F);
!                 BlockPos blockpos = new BlockPos(d0, d1 + (double)entityplayer.getEyeHeight(), d2);
!                 IBlockState iblockstate1 = this.mc.world.getBlockState(blockpos);
  
                  if (iblockstate1.func_191058_s())
                  {
                      iblockstate = iblockstate1;
                  }
              }
  
              if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE)
              {
!                 this.renderBlockInHand(this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(iblockstate));
              }
          }
  
          if (!this.mc.player.isSpectator())
          {
!             if (this.mc.player.isInsideOfMaterial(Material.WATER))
              {
                  this.renderWaterOverlayTexture(partialTicks);
              }
  
!             if (this.mc.player.isBurning())
              {
                  this.renderFireInFirstPerson();
              }
--- 485,519 ----
                  double d0 = entityplayer.posX + (double)(((float)((i >> 0) % 2) - 0.5F) * entityplayer.width * 0.8F);
                  double d1 = entityplayer.posY + (double)(((float)((i >> 1) % 2) - 0.5F) * 0.1F);
                  double d2 = entityplayer.posZ + (double)(((float)((i >> 2) % 2) - 0.5F) * entityplayer.width * 0.8F);
!                 BlockPos blockpos1 = new BlockPos(d0, d1 + (double)entityplayer.getEyeHeight(), d2);
!                 IBlockState iblockstate1 = this.mc.world.getBlockState(blockpos1);
  
                  if (iblockstate1.func_191058_s())
                  {
                      iblockstate = iblockstate1;
+                     blockpos = blockpos1;
                  }
              }
  
              if (iblockstate.getRenderType() != EnumBlockRenderType.INVISIBLE)
              {
!                 Object object = Reflector.getFieldValue(Reflector.RenderBlockOverlayEvent_OverlayType_BLOCK);
! 
!                 if (!Reflector.callBoolean(Reflector.ForgeEventFactory_renderBlockOverlay, this.mc.player, partialTicks, object, iblockstate, blockpos))
!                 {
!                     this.renderBlockInHand(this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(iblockstate));
!                 }
              }
          }
  
          if (!this.mc.player.isSpectator())
          {
!             if (this.mc.player.isInsideOfMaterial(Material.WATER) && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderWaterOverlay, this.mc.player, partialTicks))
              {
                  this.renderWaterOverlayTexture(partialTicks);
              }
  
!             if (this.mc.player.isBurning() && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderFireOverlay, this.mc.player, partialTicks))
              {
                  this.renderFireInFirstPerson();
              }
***************
*** 528,558 ****
       */
      private void renderWaterOverlayTexture(float partialTicks)
      {
!         this.mc.getTextureManager().bindTexture(RES_UNDERWATER_OVERLAY);
!         Tessellator tessellator = Tessellator.getInstance();
!         BufferBuilder bufferbuilder = tessellator.getBuffer();
!         float f = this.mc.player.getBrightness();
!         GlStateManager.color(f, f, f, 0.5F);
!         GlStateManager.enableBlend();
!         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!         GlStateManager.pushMatrix();
!         float f1 = 4.0F;
!         float f2 = -1.0F;
!         float f3 = 1.0F;
!         float f4 = -1.0F;
!         float f5 = 1.0F;
!         float f6 = -0.5F;
!         float f7 = -this.mc.player.rotationYaw / 64.0F;
!         float f8 = this.mc.player.rotationPitch / 64.0F;
!         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
!         bufferbuilder.pos(-1.0D, -1.0D, -0.5D).tex((double)(4.0F + f7), (double)(4.0F + f8)).endVertex();
!         bufferbuilder.pos(1.0D, -1.0D, -0.5D).tex((double)(0.0F + f7), (double)(4.0F + f8)).endVertex();
!         bufferbuilder.pos(1.0D, 1.0D, -0.5D).tex((double)(0.0F + f7), (double)(0.0F + f8)).endVertex();
!         bufferbuilder.pos(-1.0D, 1.0D, -0.5D).tex((double)(4.0F + f7), (double)(0.0F + f8)).endVertex();
!         tessellator.draw();
!         GlStateManager.popMatrix();
!         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!         GlStateManager.disableBlend();
      }
  
      /**
--- 558,591 ----
       */
      private void renderWaterOverlayTexture(float partialTicks)
      {
!         if (!Config.isShaders() || Shaders.isUnderwaterOverlay())
!         {
!             this.mc.getTextureManager().bindTexture(RES_UNDERWATER_OVERLAY);
!             Tessellator tessellator = Tessellator.getInstance();
!             BufferBuilder bufferbuilder = tessellator.getBuffer();
!             float f = this.mc.player.getBrightness();
!             GlStateManager.color(f, f, f, 0.5F);
!             GlStateManager.enableBlend();
!             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!             GlStateManager.pushMatrix();
!             float f1 = 4.0F;
!             float f2 = -1.0F;
!             float f3 = 1.0F;
!             float f4 = -1.0F;
!             float f5 = 1.0F;
!             float f6 = -0.5F;
!             float f7 = -this.mc.player.rotationYaw / 64.0F;
!             float f8 = this.mc.player.rotationPitch / 64.0F;
!             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
!             bufferbuilder.pos(-1.0D, -1.0D, -0.5D).tex((double)(4.0F + f7), (double)(4.0F + f8)).endVertex();
!             bufferbuilder.pos(1.0D, -1.0D, -0.5D).tex((double)(0.0F + f7), (double)(4.0F + f8)).endVertex();
!             bufferbuilder.pos(1.0D, 1.0D, -0.5D).tex((double)(0.0F + f7), (double)(0.0F + f8)).endVertex();
!             bufferbuilder.pos(-1.0D, 1.0D, -0.5D).tex((double)(4.0F + f7), (double)(0.0F + f8)).endVertex();
!             tessellator.draw();
!             GlStateManager.popMatrix();
!             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!             GlStateManager.disableBlend();
!         }
      }
  
      /**
***************
*** 616,633 ****
          else
          {
              float f = entityplayersp.getCooledAttackStrength(1.0F);
!             this.equippedProgressMainHand += MathHelper.clamp((Objects.equals(this.itemStackMainHand, itemstack) ? f * f * f : 0.0F) - this.equippedProgressMainHand, -0.4F, 0.4F);
!             this.equippedProgressOffHand += MathHelper.clamp((float)(Objects.equals(this.itemStackOffHand, itemstack1) ? 1 : 0) - this.equippedProgressOffHand, -0.4F, 0.4F);
          }
  
          if (this.equippedProgressMainHand < 0.1F)
          {
              this.itemStackMainHand = itemstack;
          }
  
          if (this.equippedProgressOffHand < 0.1F)
          {
              this.itemStackOffHand = itemstack1;
          }
      }
  
--- 649,698 ----
          else
          {
              float f = entityplayersp.getCooledAttackStrength(1.0F);
! 
!             if (Reflector.ForgeHooksClient_shouldCauseReequipAnimation.exists())
!             {
!                 boolean flag = Reflector.callBoolean(Reflector.ForgeHooksClient_shouldCauseReequipAnimation, this.itemStackMainHand, itemstack, entityplayersp.inventory.currentItem);
!                 boolean flag1 = Reflector.callBoolean(Reflector.ForgeHooksClient_shouldCauseReequipAnimation, this.itemStackOffHand, itemstack1, Integer.valueOf(-1));
! 
!                 if (!flag && !Objects.equals(this.itemStackMainHand, itemstack))
!                 {
!                     this.itemStackMainHand = itemstack;
!                 }
! 
!                 if (!flag && !Objects.equals(this.itemStackOffHand, itemstack1))
!                 {
!                     this.itemStackOffHand = itemstack1;
!                 }
! 
!                 this.equippedProgressMainHand += MathHelper.clamp((!flag ? f * f * f : 0.0F) - this.equippedProgressMainHand, -0.4F, 0.4F);
!                 this.equippedProgressOffHand += MathHelper.clamp((float)(!flag1 ? 1 : 0) - this.equippedProgressOffHand, -0.4F, 0.4F);
!             }
!             else
!             {
!                 this.equippedProgressMainHand += MathHelper.clamp((Objects.equals(this.itemStackMainHand, itemstack) ? f * f * f : 0.0F) - this.equippedProgressMainHand, -0.4F, 0.4F);
!                 this.equippedProgressOffHand += MathHelper.clamp((float)(Objects.equals(this.itemStackOffHand, itemstack1) ? 1 : 0) - this.equippedProgressOffHand, -0.4F, 0.4F);
!             }
          }
  
          if (this.equippedProgressMainHand < 0.1F)
          {
              this.itemStackMainHand = itemstack;
+ 
+             if (Config.isShaders())
+             {
+                 Shaders.setItemToRenderMain(this.itemStackMainHand);
+             }
          }
  
          if (this.equippedProgressOffHand < 0.1F)
          {
              this.itemStackOffHand = itemstack1;
+ 
+             if (Config.isShaders())
+             {
+                 Shaders.setItemToRenderOff(this.itemStackOffHand);
+             }
          }
      }
  
diff -rc ./client/renderer/OpenGlHelper.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/OpenGlHelper.java
*** ./client/renderer/OpenGlHelper.java	2018-11-18 13:18:45.923499000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/OpenGlHelper.java	2017-10-20 21:35:40.581982800 -0700
***************
*** 11,16 ****
--- 11,18 ----
  import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
  import net.minecraft.client.settings.GameSettings;
  import net.minecraft.util.Util;
+ import optifine.Config;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  import org.lwjgl.Sys;
***************
*** 100,111 ****
--- 102,116 ----
      private static boolean arbVbo;
      public static int GL_ARRAY_BUFFER;
      public static int GL_STATIC_DRAW;
+     public static float lastBrightnessX = 0.0F;
+     public static float lastBrightnessY = 0.0F;
  
      /**
       * Initializes the texture constants to be used when rendering lightmap values
       */
      public static void initializeTextures()
      {
+         Config.initDisplay();
          ContextCapabilities contextcapabilities = GLContext.getCapabilities();
          arbMultitexture = contextcapabilities.GL_ARB_multitexture && !contextcapabilities.OpenGL13;
          arbTextureEnvCombine = contextcapabilities.GL_ARB_texture_env_combine && !contextcapabilities.OpenGL13;
***************
*** 638,644 ****
  
      public static boolean useVbo()
      {
!         return vboSupported && Minecraft.getMinecraft().gameSettings.useVbo;
      }
  
      public static void glBindFramebuffer(int target, int framebufferIn)
--- 643,656 ----
  
      public static boolean useVbo()
      {
!         if (Config.isMultiTexture())
!         {
!             return false;
!         }
!         else
!         {
!             return vboSupported && Minecraft.getMinecraft().gameSettings.useVbo;
!         }
      }
  
      public static void glBindFramebuffer(int target, int framebufferIn)
***************
*** 902,907 ****
--- 914,925 ----
          {
              GL13.glMultiTexCoord2f(target, p_77475_1_, t);
          }
+ 
+         if (target == lightmapTexUnit)
+         {
+             lastBrightnessX = p_77475_1_;
+             lastBrightnessY = t;
+         }
      }
  
      public static void glBlendFunc(int sFactorRGB, int dFactorRGB, int sfactorAlpha, int dfactorAlpha)
***************
*** 925,931 ****
  
      public static boolean isFramebufferEnabled()
      {
!         return framebufferSupported && Minecraft.getMinecraft().gameSettings.fboEnable;
      }
  
      public static String getCpu()
--- 943,960 ----
  
      public static boolean isFramebufferEnabled()
      {
!         if (Config.isFastRender())
!         {
!             return false;
!         }
!         else if (Config.isAntialiasing())
!         {
!             return false;
!         }
!         else
!         {
!             return framebufferSupported && Minecraft.getMinecraft().gameSettings.fboEnable;
!         }
      }
  
      public static String getCpu()
***************
*** 1002,1010 ****
              Object object = oclass.getMethod("getDesktop").invoke((Object)null);
              oclass.getMethod("browse", URI.class).invoke(object, fileIn.toURI());
          }
!         catch (Throwable throwable)
          {
!             LOGGER.error("Couldn't open link", throwable);
              flag = true;
          }
  
--- 1031,1039 ----
              Object object = oclass.getMethod("getDesktop").invoke((Object)null);
              oclass.getMethod("browse", URI.class).invoke(object, fileIn.toURI());
          }
!         catch (Throwable throwable1)
          {
!             LOGGER.error("Couldn't open link", throwable1);
              flag = true;
          }
  
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer: RenderGlobal.#
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer: RenderGlobal.~
diff -rc ./client/renderer/RenderGlobal.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/RenderGlobal.java
*** ./client/renderer/RenderGlobal.java	2018-11-18 13:18:45.970472000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/RenderGlobal.java	2017-10-20 21:35:40.739479100 -0700
***************
*** 2,18 ****
  
  import com.google.common.collect.Lists;
  import com.google.common.collect.Maps;
- import com.google.common.collect.Queues;
  import com.google.common.collect.Sets;
  import com.google.gson.JsonSyntaxException;
  import java.io.IOException;
  import java.util.Collection;
  import java.util.Iterator;
  import java.util.List;
  import java.util.Map;
- import java.util.Queue;
  import java.util.Random;
  import java.util.Set;
  import javax.annotation.Nullable;
  import net.minecraft.block.Block;
  import net.minecraft.block.BlockChest;
--- 2,25 ----
  
  import com.google.common.collect.Lists;
  import com.google.common.collect.Maps;
  import com.google.common.collect.Sets;
  import com.google.gson.JsonSyntaxException;
+ import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
  import java.io.IOException;
+ import java.util.ArrayDeque;
+ import java.util.ArrayList;
+ import java.util.Arrays;
  import java.util.Collection;
+ import java.util.Collections;
+ import java.util.Deque;
+ import java.util.HashSet;
  import java.util.Iterator;
+ import java.util.LinkedHashSet;
  import java.util.List;
  import java.util.Map;
  import java.util.Random;
  import java.util.Set;
+ import java.util.function.Supplier;
  import javax.annotation.Nullable;
  import net.minecraft.block.Block;
  import net.minecraft.block.BlockChest;
***************
*** 25,30 ****
--- 32,38 ----
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.audio.ISound;
  import net.minecraft.client.audio.PositionedSoundRecord;
+ import net.minecraft.client.gui.FontRenderer;
  import net.minecraft.client.multiplayer.WorldClient;
  import net.minecraft.client.particle.Particle;
  import net.minecraft.client.renderer.chunk.ChunkRenderDispatcher;
***************
*** 66,71 ****
--- 74,80 ----
  import net.minecraft.item.ItemRecord;
  import net.minecraft.tileentity.TileEntity;
  import net.minecraft.tileentity.TileEntityChest;
+ import net.minecraft.tileentity.TileEntitySign;
  import net.minecraft.util.BlockRenderLayer;
  import net.minecraft.util.ClassInheritanceMultiMap;
  import net.minecraft.util.EnumFacing;
***************
*** 79,92 ****
--- 88,120 ----
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.util.math.RayTraceResult;
  import net.minecraft.util.math.Vec3d;
+ import net.minecraft.world.DimensionType;
  import net.minecraft.world.IWorldEventListener;
  import net.minecraft.world.World;
+ import net.minecraft.world.WorldProvider;
  import net.minecraft.world.border.WorldBorder;
  import net.minecraft.world.chunk.Chunk;
+ import net.minecraft.world.chunk.IChunkProvider;
+ import optifine.ChunkUtils;
+ import optifine.CloudRenderer;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.CustomSky;
+ import optifine.DynamicLights;
+ import optifine.Lagometer;
+ import optifine.RandomMobs;
+ import optifine.Reflector;
+ import optifine.RenderEnv;
+ import optifine.RenderInfoLazy;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import org.lwjgl.input.Keyboard;
  import org.lwjgl.util.vector.Vector3f;
  import org.lwjgl.util.vector.Vector4f;
+ import shadersmod.client.Shaders;
+ import shadersmod.client.ShadersRender;
+ import shadersmod.client.ShadowUtils;
  
  public class RenderGlobal implements IWorldEventListener, IResourceManagerReloadListener
  {
***************
*** 98,104 ****
      private static final ResourceLocation FORCEFIELD_TEXTURES = new ResourceLocation("textures/misc/forcefield.png");
  
      /** A reference to the Minecraft object. */
!     private final Minecraft mc;
  
      /** The RenderEngine instance used by RenderGlobal */
      private final TextureManager renderEngine;
--- 126,132 ----
      private static final ResourceLocation FORCEFIELD_TEXTURES = new ResourceLocation("textures/misc/forcefield.png");
  
      /** A reference to the Minecraft object. */
!     public final Minecraft mc;
  
      /** The RenderEngine instance used by RenderGlobal */
      private final TextureManager renderEngine;
***************
*** 126,132 ****
       * counts the cloud render updates. Used with mod to stagger some updates
       */
      private int cloudTickCounter;
!     private final Map<Integer, DestroyBlockProgress> damagedBlocks = Maps.<Integer, DestroyBlockProgress>newHashMap();
      private final Map<BlockPos, ISound> mapSoundPositions = Maps.<BlockPos, ISound>newHashMap();
      private final TextureAtlasSprite[] destroyBlockIcons = new TextureAtlasSprite[10];
      private Framebuffer entityOutlineFramebuffer;
--- 154,160 ----
       * counts the cloud render updates. Used with mod to stagger some updates
       */
      private int cloudTickCounter;
!     public final Map<Integer, DestroyBlockProgress> damagedBlocks = Maps.<Integer, DestroyBlockProgress>newHashMap();
      private final Map<BlockPos, ISound> mapSoundPositions = Maps.<BlockPos, ISound>newHashMap();
      private final TextureAtlasSprite[] destroyBlockIcons = new TextureAtlasSprite[10];
      private Framebuffer entityOutlineFramebuffer;
***************
*** 168,179 ****
      private double prevRenderSortX;
      private double prevRenderSortY;
      private double prevRenderSortZ;
!     private boolean displayListEntitiesDirty = true;
      private boolean entityOutlinesRendered;
      private final Set<BlockPos> setLightUpdates = Sets.<BlockPos>newHashSet();
  
      public RenderGlobal(Minecraft mcIn)
      {
          this.mc = mcIn;
          this.renderManager = mcIn.getRenderManager();
          this.renderEngine = mcIn.getTextureManager();
--- 196,235 ----
      private double prevRenderSortX;
      private double prevRenderSortY;
      private double prevRenderSortZ;
!     public boolean displayListEntitiesDirty = true;
      private boolean entityOutlinesRendered;
      private final Set<BlockPos> setLightUpdates = Sets.<BlockPos>newHashSet();
+     private CloudRenderer cloudRenderer;
+     public Entity renderedEntity;
+     public Set chunksToResortTransparency = new LinkedHashSet();
+     public Set chunksToUpdateForced = new LinkedHashSet();
+     private Deque visibilityDeque = new ArrayDeque();
+     private List renderInfosEntities = new ArrayList(1024);
+     private List renderInfosTileEntities = new ArrayList(1024);
+     private List renderInfosNormal = new ArrayList(1024);
+     private List renderInfosEntitiesNormal = new ArrayList(1024);
+     private List renderInfosTileEntitiesNormal = new ArrayList(1024);
+     private List renderInfosShadow = new ArrayList(1024);
+     private List renderInfosEntitiesShadow = new ArrayList(1024);
+     private List renderInfosTileEntitiesShadow = new ArrayList(1024);
+     private int renderDistance = 0;
+     private int renderDistanceSq = 0;
+     private static final Set SET_ALL_FACINGS = Collections.unmodifiableSet(new HashSet(Arrays.asList(EnumFacing.VALUES)));
+     private int countTileEntitiesRendered;
+     private IChunkProvider worldChunkProvider = null;
+     private Long2ObjectMap<Chunk> worldChunkProviderMap = null;
+     private int countLoadedChunksPrev = 0;
+     private RenderEnv renderEnv;
+     public boolean renderOverlayDamaged;
+     public boolean renderOverlayEyes;
+     static Deque<RenderGlobal.ContainerLocalRenderInformation> renderInfoCache = new ArrayDeque<RenderGlobal.ContainerLocalRenderInformation>();
  
      public RenderGlobal(Minecraft mcIn)
      {
+         this.renderEnv = new RenderEnv(this.theWorld, Blocks.AIR.getDefaultState(), new BlockPos(0, 0, 0));
+         this.renderOverlayDamaged = false;
+         this.renderOverlayEyes = false;
+         this.cloudRenderer = new CloudRenderer(mcIn);
          this.mc = mcIn;
          this.renderManager = mcIn.getRenderManager();
          this.renderEngine = mcIn.getTextureManager();
***************
*** 270,276 ****
  
      protected boolean isRenderEntityOutlines()
      {
!         return this.entityOutlineFramebuffer != null && this.entityOutlineShader != null && this.mc.player != null;
      }
  
      private void generateSky2()
--- 326,339 ----
  
      protected boolean isRenderEntityOutlines()
      {
!         if (!Config.isFastRender() && !Config.isShaders() && !Config.isAntialiasing())
!         {
!             return this.entityOutlineFramebuffer != null && this.entityOutlineShader != null && this.mc.player != null;
!         }
!         else
!         {
!             return false;
!         }
      }
  
      private void generateSky2()
***************
*** 473,478 ****
--- 536,546 ----
          this.renderManager.set(worldClientIn);
          this.theWorld = worldClientIn;
  
+         if (Config.isDynamicLights())
+         {
+             DynamicLights.clear();
+         }
+ 
          if (worldClientIn != null)
          {
              worldClientIn.addEventListener(this);
***************
*** 511,519 ****
              }
  
              this.displayListEntitiesDirty = true;
!             Blocks.LEAVES.setGraphicsLevel(this.mc.gameSettings.fancyGraphics);
!             Blocks.LEAVES2.setGraphicsLevel(this.mc.gameSettings.fancyGraphics);
              this.renderDistanceChunks = this.mc.gameSettings.renderDistanceChunks;
              boolean flag = this.vboEnabled;
              this.vboEnabled = OpenGlHelper.useVbo();
  
--- 579,597 ----
              }
  
              this.displayListEntitiesDirty = true;
!             Blocks.LEAVES.setGraphicsLevel(Config.isTreesFancy());
!             Blocks.LEAVES2.setGraphicsLevel(Config.isTreesFancy());
!             BlockModelRenderer.updateAoLightValue();
!             renderInfoCache.clear();
! 
!             if (Config.isDynamicLights())
!             {
!                 DynamicLights.clear();
!             }
! 
              this.renderDistanceChunks = this.mc.gameSettings.renderDistanceChunks;
+             this.renderDistance = this.renderDistanceChunks * 16;
+             this.renderDistanceSq = this.renderDistance * this.renderDistance;
              boolean flag = this.vboEnabled;
              this.vboEnabled = OpenGlHelper.useVbo();
  
***************
*** 571,589 ****
  
      public void createBindEntityOutlineFbs(int width, int height)
      {
!         if (OpenGlHelper.shadersSupported)
          {
!             if (this.entityOutlineShader != null)
!             {
!                 this.entityOutlineShader.createBindFramebuffers(width, height);
!             }
          }
      }
  
      public void renderEntities(Entity renderViewEntity, ICamera camera, float partialTicks)
      {
          if (this.renderEntitiesStartupCounter > 0)
          {
              --this.renderEntitiesStartupCounter;
          }
          else
--- 649,676 ----
  
      public void createBindEntityOutlineFbs(int width, int height)
      {
!         if (OpenGlHelper.shadersSupported && this.entityOutlineShader != null)
          {
!             this.entityOutlineShader.createBindFramebuffers(width, height);
          }
      }
  
      public void renderEntities(Entity renderViewEntity, ICamera camera, float partialTicks)
      {
+         int i = 0;
+ 
+         if (Reflector.MinecraftForgeClient_getRenderPass.exists())
+         {
+             i = Reflector.callInt(Reflector.MinecraftForgeClient_getRenderPass);
+         }
+ 
          if (this.renderEntitiesStartupCounter > 0)
          {
+             if (i > 0)
+             {
+                 return;
+             }
+ 
              --this.renderEntitiesStartupCounter;
          }
          else
***************
*** 594,602 ****
              this.theWorld.theProfiler.startSection("prepare");
              TileEntityRendererDispatcher.instance.prepare(this.theWorld, this.mc.getTextureManager(), this.mc.fontRendererObj, this.mc.getRenderViewEntity(), this.mc.objectMouseOver, partialTicks);
              this.renderManager.cacheActiveRenderInfo(this.theWorld, this.mc.fontRendererObj, this.mc.getRenderViewEntity(), this.mc.pointedEntity, this.mc.gameSettings, partialTicks);
!             this.countEntitiesTotal = 0;
!             this.countEntitiesRendered = 0;
!             this.countEntitiesHidden = 0;
              Entity entity = this.mc.getRenderViewEntity();
              double d3 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
              double d4 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
--- 681,695 ----
              this.theWorld.theProfiler.startSection("prepare");
              TileEntityRendererDispatcher.instance.prepare(this.theWorld, this.mc.getTextureManager(), this.mc.fontRendererObj, this.mc.getRenderViewEntity(), this.mc.objectMouseOver, partialTicks);
              this.renderManager.cacheActiveRenderInfo(this.theWorld, this.mc.fontRendererObj, this.mc.getRenderViewEntity(), this.mc.pointedEntity, this.mc.gameSettings, partialTicks);
! 
!             if (i == 0)
!             {
!                 this.countEntitiesTotal = 0;
!                 this.countEntitiesRendered = 0;
!                 this.countEntitiesHidden = 0;
!                 this.countTileEntitiesRendered = 0;
!             }
! 
              Entity entity = this.mc.getRenderViewEntity();
              double d3 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
              double d4 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
***************
*** 608,659 ****
              this.mc.entityRenderer.enableLightmap();
              this.theWorld.theProfiler.endStartSection("global");
              List<Entity> list = this.theWorld.getLoadedEntityList();
-             this.countEntitiesTotal = list.size();
  
!             for (int i = 0; i < this.theWorld.weatherEffects.size(); ++i)
              {
!                 Entity entity1 = this.theWorld.weatherEffects.get(i);
!                 ++this.countEntitiesRendered;
  
!                 if (entity1.isInRangeToRender3d(d0, d1, d2))
                  {
!                     this.renderManager.renderEntityStatic(entity1, partialTicks, false);
                  }
              }
  
              this.theWorld.theProfiler.endStartSection("entities");
              List<Entity> list1 = Lists.<Entity>newArrayList();
              List<Entity> list2 = Lists.<Entity>newArrayList();
              BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
              {
!                 Chunk chunk = this.theWorld.getChunkFromBlockCoords(renderglobal$containerlocalrenderinformation.renderChunk.getPosition());
                  ClassInheritanceMultiMap<Entity> classinheritancemultimap = chunk.getEntityLists()[renderglobal$containerlocalrenderinformation.renderChunk.getPosition().getY() / 16];
  
                  if (!classinheritancemultimap.isEmpty())
                  {
                      for (Entity entity2 : classinheritancemultimap)
                      {
!                         boolean flag = this.renderManager.shouldRender(entity2, camera, d0, d1, d2) || entity2.isRidingOrBeingRiddenBy(this.mc.player);
! 
!                         if (flag)
                          {
!                             boolean flag1 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
  
!                             if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag1) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.theWorld.isBlockLoaded(blockpos$pooledmutableblockpos.setPos(entity2))))
                              {
!                                 ++this.countEntitiesRendered;
!                                 this.renderManager.renderEntityStatic(entity2, partialTicks, false);
  
!                                 if (this.isOutlineActive(entity2, entity, camera))
                                  {
!                                     list1.add(entity2);
!                                 }
  
!                                 if (this.renderManager.isRenderMultipass(entity2))
!                                 {
!                                     list2.add(entity2);
                                  }
                              }
                          }
--- 701,789 ----
              this.mc.entityRenderer.enableLightmap();
              this.theWorld.theProfiler.endStartSection("global");
              List<Entity> list = this.theWorld.getLoadedEntityList();
  
!             if (i == 0)
!             {
!                 this.countEntitiesTotal = list.size();
!             }
! 
!             if (Config.isFogOff() && this.mc.entityRenderer.fogStandard)
!             {
!                 GlStateManager.disableFog();
!             }
! 
!             boolean flag = Reflector.ForgeEntity_shouldRenderInPass.exists();
!             boolean flag1 = Reflector.ForgeTileEntity_shouldRenderInPass.exists();
! 
!             for (int j = 0; j < this.theWorld.weatherEffects.size(); ++j)
              {
!                 Entity entity1 = this.theWorld.weatherEffects.get(j);
  
!                 if (!flag || Reflector.callBoolean(entity1, Reflector.ForgeEntity_shouldRenderInPass, i))
                  {
!                     ++this.countEntitiesRendered;
! 
!                     if (entity1.isInRangeToRender3d(d0, d1, d2))
!                     {
!                         this.renderManager.renderEntityStatic(entity1, partialTicks, false);
!                     }
                  }
              }
  
              this.theWorld.theProfiler.endStartSection("entities");
+             boolean flag4 = Config.isShaders();
+ 
+             if (flag4)
+             {
+                 Shaders.beginEntities();
+             }
+ 
+             boolean flag5 = this.mc.gameSettings.fancyGraphics;
+             this.mc.gameSettings.fancyGraphics = Config.isDroppedItemsFancy();
              List<Entity> list1 = Lists.<Entity>newArrayList();
              List<Entity> list2 = Lists.<Entity>newArrayList();
              BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!             for (Object renderglobal$containerlocalrenderinformation0 : this.renderInfosEntities)
              {
!             	RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = (RenderGlobal.ContainerLocalRenderInformation) renderglobal$containerlocalrenderinformation0;
!                 Chunk chunk = renderglobal$containerlocalrenderinformation.renderChunk.getChunk(this.theWorld);
                  ClassInheritanceMultiMap<Entity> classinheritancemultimap = chunk.getEntityLists()[renderglobal$containerlocalrenderinformation.renderChunk.getPosition().getY() / 16];
  
                  if (!classinheritancemultimap.isEmpty())
                  {
                      for (Entity entity2 : classinheritancemultimap)
                      {
!                         if (!flag || Reflector.callBoolean(entity2, Reflector.ForgeEntity_shouldRenderInPass, i))
                          {
!                             boolean flag2 = this.renderManager.shouldRender(entity2, camera, d0, d1, d2) || entity2.isRidingOrBeingRiddenBy(this.mc.player);
  
!                             if (flag2)
                              {
!                                 boolean flag3 = this.mc.getRenderViewEntity() instanceof EntityLivingBase ? ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping() : false;
  
!                                 if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag3) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.theWorld.isBlockLoaded(blockpos$pooledmutableblockpos.setPos(entity2))))
                                  {
!                                     ++this.countEntitiesRendered;
!                                     this.renderedEntity = entity2;
  
!                                     if (flag4)
!                                     {
!                                         Shaders.nextEntity(entity2);
!                                     }
! 
!                                     this.renderManager.renderEntityStatic(entity2, partialTicks, false);
!                                     this.renderedEntity = null;
! 
!                                     if (this.isOutlineActive(entity2, entity, camera))
!                                     {
!                                         list1.add(entity2);
!                                     }
! 
!                                     if (this.renderManager.isRenderMultipass(entity2))
!                                     {
!                                         list2.add(entity2);
!                                     }
                                  }
                              }
                          }
***************
*** 667,677 ****
              {
                  for (Entity entity3 : list2)
                  {
!                     this.renderManager.renderMultipass(entity3, partialTicks);
                  }
              }
  
!             if (this.isRenderEntityOutlines() && (!list1.isEmpty() || this.entityOutlinesRendered))
              {
                  this.theWorld.theProfiler.endStartSection("entityOutlines");
                  this.entityOutlineFramebuffer.framebufferClear();
--- 797,815 ----
              {
                  for (Entity entity3 : list2)
                  {
!                     if (!flag || Reflector.callBoolean(entity3, Reflector.ForgeEntity_shouldRenderInPass, i))
!                     {
!                         if (flag4)
!                         {
!                             Shaders.nextEntity(entity3);
!                         }
! 
!                         this.renderManager.renderMultipass(entity3, partialTicks);
!                     }
                  }
              }
  
!             if (i == 0 && this.isRenderEntityOutlines() && (!list1.isEmpty() || this.entityOutlinesRendered))
              {
                  this.theWorld.theProfiler.endStartSection("entityOutlines");
                  this.entityOutlineFramebuffer.framebufferClear();
***************
*** 685,693 ****
                      RenderHelper.disableStandardItemLighting();
                      this.renderManager.setRenderOutlines(true);
  
!                     for (int j = 0; j < list1.size(); ++j)
                      {
!                         this.renderManager.renderEntityStatic(list1.get(j), partialTicks, false);
                      }
  
                      this.renderManager.setRenderOutlines(false);
--- 823,841 ----
                      RenderHelper.disableStandardItemLighting();
                      this.renderManager.setRenderOutlines(true);
  
!                     for (int k = 0; k < list1.size(); ++k)
                      {
!                         Entity entity4 = list1.get(k);
! 
!                         if (!flag || Reflector.callBoolean(entity4, Reflector.ForgeEntity_shouldRenderInPass, i))
!                         {
!                             if (flag4)
!                             {
!                                 Shaders.nextEntity(entity4);
!                             }
! 
!                             this.renderManager.renderEntityStatic(entity4, partialTicks, false);
!                         }
                      }
  
                      this.renderManager.setRenderOutlines(false);
***************
*** 707,724 ****
                  this.mc.getFramebuffer().bindFramebuffer(false);
              }
  
              this.theWorld.theProfiler.endStartSection("blockentities");
              RenderHelper.enableStandardItemLighting();
  
!             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 : this.renderInfos)
              {
                  List<TileEntity> list3 = renderglobal$containerlocalrenderinformation1.renderChunk.getCompiledChunk().getTileEntities();
  
                  if (!list3.isEmpty())
                  {
!                     for (TileEntity tileentity2 : list3)
                      {
!                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity2, partialTicks, -1);
                      }
                  }
              }
--- 855,974 ----
                  this.mc.getFramebuffer().bindFramebuffer(false);
              }
  
+             if (!this.isRenderEntityOutlines() && (!list1.isEmpty() || this.entityOutlinesRendered))
+             {
+                 this.theWorld.theProfiler.endStartSection("entityOutlines");
+                 this.entityOutlinesRendered = !list1.isEmpty();
+ 
+                 if (!list1.isEmpty())
+                 {
+                     GlStateManager.disableFog();
+                     GlStateManager.disableDepth();
+                     this.mc.entityRenderer.disableLightmap();
+                     RenderHelper.disableStandardItemLighting();
+                     this.renderManager.setRenderOutlines(true);
+ 
+                     for (int l = 0; l < list1.size(); ++l)
+                     {
+                         Entity entity5 = list1.get(l);
+ 
+                         if (!flag || Reflector.callBoolean(entity5, Reflector.ForgeEntity_shouldRenderInPass, i))
+                         {
+                             if (flag4)
+                             {
+                                 Shaders.nextEntity(entity5);
+                             }
+ 
+                             this.renderManager.renderEntityStatic(entity5, partialTicks, false);
+                         }
+                     }
+ 
+                     this.renderManager.setRenderOutlines(false);
+                     RenderHelper.enableStandardItemLighting();
+                     this.mc.entityRenderer.enableLightmap();
+                     GlStateManager.enableDepth();
+                     GlStateManager.enableFog();
+                 }
+             }
+ 
+             this.mc.gameSettings.fancyGraphics = flag5;
+             FontRenderer fontrenderer = TileEntityRendererDispatcher.instance.getFontRenderer();
+ 
+             if (flag4)
+             {
+                 Shaders.endEntities();
+                 Shaders.beginBlockEntities();
+             }
+ 
              this.theWorld.theProfiler.endStartSection("blockentities");
              RenderHelper.enableStandardItemLighting();
  
!             if (Reflector.ForgeTileEntity_hasFastRenderer.exists())
!             {
!                 TileEntityRendererDispatcher.instance.preDrawBatch();
!             }
! 
!             label251:
! 
!             for (Object renderglobal$containerlocalrenderinformation10 : this.renderInfosTileEntities)
              {
+             	RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 = (RenderGlobal.ContainerLocalRenderInformation) renderglobal$containerlocalrenderinformation10;
                  List<TileEntity> list3 = renderglobal$containerlocalrenderinformation1.renderChunk.getCompiledChunk().getTileEntities();
  
                  if (!list3.isEmpty())
                  {
!                     Iterator iterator = list3.iterator();
! 
!                     while (true)
                      {
!                         TileEntity tileentity1;
! 
!                         while (true)
!                         {
!                             if (!iterator.hasNext())
!                             {
!                                 continue label251;
!                             }
! 
!                             tileentity1 = (TileEntity)iterator.next();
! 
!                             if (!flag1)
!                             {
!                                 break;
!                             }
! 
!                             if (Reflector.callBoolean(tileentity1, Reflector.ForgeTileEntity_shouldRenderInPass, i))
!                             {
!                                 AxisAlignedBB axisalignedbb = (AxisAlignedBB)Reflector.call(tileentity1, Reflector.ForgeTileEntity_getRenderBoundingBox);
! 
!                                 if (axisalignedbb == null || camera.isBoundingBoxInFrustum(axisalignedbb))
!                                 {
!                                     break;
!                                 }
!                             }
!                         }
! 
!                         Class oclass = tileentity1.getClass();
! 
!                         if (oclass == TileEntitySign.class && !Config.zoomMode)
!                         {
!                             EntityPlayer entityplayer = this.mc.player;
!                             double d6 = tileentity1.getDistanceSq(entityplayer.posX, entityplayer.posY, entityplayer.posZ);
! 
!                             if (d6 > 256.0D)
!                             {
!                                 fontrenderer.enabled = false;
!                             }
!                         }
! 
!                         if (flag4)
!                         {
!                             Shaders.nextBlockEntity(tileentity1);
!                         }
! 
!                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity1, partialTicks, -1);
!                         ++this.countTileEntitiesRendered;
!                         fontrenderer.enabled = true;
                      }
                  }
              }
***************
*** 727,736 ****
              {
                  for (TileEntity tileentity : this.setTileEntities)
                  {
!                     TileEntityRendererDispatcher.instance.renderTileEntity(tileentity, partialTicks, -1);
                  }
              }
  
              this.preRenderDamagedBlocks();
  
              for (DestroyBlockProgress destroyblockprogress : this.damagedBlocks.values())
--- 977,1000 ----
              {
                  for (TileEntity tileentity : this.setTileEntities)
                  {
!                     if (!flag1 || Reflector.callBoolean(tileentity, Reflector.ForgeTileEntity_shouldRenderInPass, i))
!                     {
!                         if (flag4)
!                         {
!                             Shaders.nextBlockEntity(tileentity);
!                         }
! 
!                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity, partialTicks, -1);
!                     }
                  }
              }
  
+             if (Reflector.ForgeTileEntity_hasFastRenderer.exists())
+             {
+                 TileEntityRendererDispatcher.instance.drawBatch(i);
+             }
+ 
+             this.renderOverlayDamaged = true;
              this.preRenderDamagedBlocks();
  
              for (DestroyBlockProgress destroyblockprogress : this.damagedBlocks.values())
***************
*** 739,772 ****
  
                  if (this.theWorld.getBlockState(blockpos).getBlock().hasTileEntity())
                  {
!                     TileEntity tileentity1 = this.theWorld.getTileEntity(blockpos);
  
!                     if (tileentity1 instanceof TileEntityChest)
                      {
!                         TileEntityChest tileentitychest = (TileEntityChest)tileentity1;
  
                          if (tileentitychest.adjacentChestXNeg != null)
                          {
                              blockpos = blockpos.offset(EnumFacing.WEST);
!                             tileentity1 = this.theWorld.getTileEntity(blockpos);
                          }
                          else if (tileentitychest.adjacentChestZNeg != null)
                          {
                              blockpos = blockpos.offset(EnumFacing.NORTH);
!                             tileentity1 = this.theWorld.getTileEntity(blockpos);
                          }
                      }
  
                      IBlockState iblockstate = this.theWorld.getBlockState(blockpos);
  
!                     if (tileentity1 != null && iblockstate.func_191057_i())
                      {
!                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity1, partialTicks, destroyblockprogress.getPartialBlockDamage());
                      }
                  }
              }
  
              this.postRenderDamagedBlocks();
              this.mc.entityRenderer.disableLightmap();
              this.mc.mcProfiler.endSection();
          }
--- 1003,1042 ----
  
                  if (this.theWorld.getBlockState(blockpos).getBlock().hasTileEntity())
                  {
!                     TileEntity tileentity2 = this.theWorld.getTileEntity(blockpos);
  
!                     if (tileentity2 instanceof TileEntityChest)
                      {
!                         TileEntityChest tileentitychest = (TileEntityChest)tileentity2;
  
                          if (tileentitychest.adjacentChestXNeg != null)
                          {
                              blockpos = blockpos.offset(EnumFacing.WEST);
!                             tileentity2 = this.theWorld.getTileEntity(blockpos);
                          }
                          else if (tileentitychest.adjacentChestZNeg != null)
                          {
                              blockpos = blockpos.offset(EnumFacing.NORTH);
!                             tileentity2 = this.theWorld.getTileEntity(blockpos);
                          }
                      }
  
                      IBlockState iblockstate = this.theWorld.getBlockState(blockpos);
  
!                     if (tileentity2 != null && iblockstate.func_191057_i())
                      {
!                         if (flag4)
!                         {
!                             Shaders.nextBlockEntity(tileentity2);
!                         }
! 
!                         TileEntityRendererDispatcher.instance.renderTileEntity(tileentity2, partialTicks, destroyblockprogress.getPartialBlockDamage());
                      }
                  }
              }
  
              this.postRenderDamagedBlocks();
+             this.renderOverlayDamaged = false;
              this.mc.entityRenderer.disableLightmap();
              this.mc.mcProfiler.endSection();
          }
***************
*** 826,832 ****
       */
      public String getDebugInfoEntities()
      {
!         return "E: " + this.countEntitiesRendered + "/" + this.countEntitiesTotal + ", B: " + this.countEntitiesHidden;
      }
  
      public void setupTerrain(Entity viewEntity, double partialTicks, ICamera camera, int frameCount, boolean playerSpectator)
--- 1096,1102 ----
       */
      public String getDebugInfoEntities()
      {
!         return "E: " + this.countEntitiesRendered + "/" + this.countEntitiesTotal + ", B: " + this.countEntitiesHidden + ", " + Config.getVersionDebug();
      }
  
      public void setupTerrain(Entity viewEntity, double partialTicks, ICamera camera, int frameCount, boolean playerSpectator)
***************
*** 852,857 ****
--- 1122,1132 ----
              this.viewFrustum.updateChunkPositions(viewEntity.posX, viewEntity.posZ);
          }
  
+         if (Config.isDynamicLights())
+         {
+             DynamicLights.update(this);
+         }
+ 
          this.theWorld.theProfiler.endStartSection("renderlistcamera");
          double d3 = viewEntity.lastTickPosX + (viewEntity.posX - viewEntity.lastTickPosX) * partialTicks;
          double d4 = viewEntity.lastTickPosY + (viewEntity.posY - viewEntity.lastTickPosY) * partialTicks;
***************
*** 869,875 ****
          this.mc.mcProfiler.endStartSection("culling");
          BlockPos blockpos1 = new BlockPos(d3, d4 + (double)viewEntity.getEyeHeight(), d5);
          RenderChunk renderchunk = this.viewFrustum.getRenderChunk(blockpos1);
!         BlockPos blockpos = new BlockPos(MathHelper.floor(d3 / 16.0D) * 16, MathHelper.floor(d4 / 16.0D) * 16, MathHelper.floor(d5 / 16.0D) * 16);
          this.displayListEntitiesDirty = this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || viewEntity.posX != this.lastViewEntityX || viewEntity.posY != this.lastViewEntityY || viewEntity.posZ != this.lastViewEntityZ || (double)viewEntity.rotationPitch != this.lastViewEntityPitch || (double)viewEntity.rotationYaw != this.lastViewEntityYaw;
          this.lastViewEntityX = viewEntity.posX;
          this.lastViewEntityY = viewEntity.posY;
--- 1144,1150 ----
          this.mc.mcProfiler.endStartSection("culling");
          BlockPos blockpos1 = new BlockPos(d3, d4 + (double)viewEntity.getEyeHeight(), d5);
          RenderChunk renderchunk = this.viewFrustum.getRenderChunk(blockpos1);
!         new BlockPos(MathHelper.floor(d3 / 16.0D) * 16, MathHelper.floor(d4 / 16.0D) * 16, MathHelper.floor(d5 / 16.0D) * 16);
          this.displayListEntitiesDirty = this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || viewEntity.posX != this.lastViewEntityX || viewEntity.posY != this.lastViewEntityY || viewEntity.posZ != this.lastViewEntityZ || (double)viewEntity.rotationPitch != this.lastViewEntityPitch || (double)viewEntity.rotationYaw != this.lastViewEntityYaw;
          this.lastViewEntityX = viewEntity.posX;
          this.lastViewEntityY = viewEntity.posY;
***************
*** 878,897 ****
          this.lastViewEntityYaw = (double)viewEntity.rotationYaw;
          boolean flag = this.debugFixedClippingHelper != null;
          this.mc.mcProfiler.endStartSection("update");
  
!         if (!flag && this.displayListEntitiesDirty)
          {
              this.displayListEntitiesDirty = false;
!             this.renderInfos = Lists.<RenderGlobal.ContainerLocalRenderInformation>newArrayList();
!             Queue<RenderGlobal.ContainerLocalRenderInformation> queue = Queues.<RenderGlobal.ContainerLocalRenderInformation>newArrayDeque();
              Entity.setRenderDistanceWeight(MathHelper.clamp((double)this.mc.gameSettings.renderDistanceChunks / 8.0D, 1.0D, 2.5D));
!             boolean flag1 = this.mc.renderChunksMany;
  
              if (renderchunk != null)
              {
!                 boolean flag2 = false;
                  RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation3 = new RenderGlobal.ContainerLocalRenderInformation(renderchunk, (EnumFacing)null, 0);
!                 Set<EnumFacing> set1 = this.getVisibleFacings(blockpos1);
  
                  if (set1.size() == 1)
                  {
--- 1153,1238 ----
          this.lastViewEntityYaw = (double)viewEntity.rotationYaw;
          boolean flag = this.debugFixedClippingHelper != null;
          this.mc.mcProfiler.endStartSection("update");
+         Lagometer.timerVisibility.start();
+         int i = this.getCountLoadedChunks();
+ 
+         if (i != this.countLoadedChunksPrev)
+         {
+             this.countLoadedChunksPrev = i;
+             this.displayListEntitiesDirty = true;
+         }
+ 
+         if (Shaders.isShadowPass)
+         {
+             this.renderInfos = this.renderInfosShadow;
+             this.renderInfosEntities = this.renderInfosEntitiesShadow;
+             this.renderInfosTileEntities = this.renderInfosTileEntitiesShadow;
+ 
+             if (!flag && this.displayListEntitiesDirty)
+             {
+                 this.renderInfos.clear();
+                 this.renderInfosEntities.clear();
+                 this.renderInfosTileEntities.clear();
+                 RenderInfoLazy renderinfolazy = new RenderInfoLazy();
+                 Iterator<RenderChunk> iterator = ShadowUtils.makeShadowChunkIterator(this.theWorld, partialTicks, viewEntity, this.renderDistanceChunks, this.viewFrustum);
+ 
+                 while (iterator.hasNext())
+                 {
+                     RenderChunk renderchunk1 = iterator.next();
+ 
+                     if (renderchunk1 != null)
+                     {
+                         renderinfolazy.setRenderChunk(renderchunk1);
+ 
+                         if (!renderchunk1.compiledChunk.isEmpty() || renderchunk1.isNeedsUpdate())
+                         {
+                             this.renderInfos.add(renderinfolazy.getRenderInfo());
+                         }
+ 
+                         BlockPos blockpos = renderchunk1.getPosition();
+ 
+                         if (ChunkUtils.hasEntities(this.theWorld.getChunkFromBlockCoords(blockpos)))
+                         {
+                             this.renderInfosEntities.add(renderinfolazy.getRenderInfo());
+                         }
+ 
+                         if (renderchunk1.getCompiledChunk().getTileEntities().size() > 0)
+                         {
+                             this.renderInfosTileEntities.add(renderinfolazy.getRenderInfo());
+                         }
+                     }
+                 }
+             }
+         }
+         else
+         {
+             this.renderInfos = this.renderInfosNormal;
+             this.renderInfosEntities = this.renderInfosEntitiesNormal;
+             this.renderInfosTileEntities = this.renderInfosTileEntitiesNormal;
+         }
  
!         if (!flag && this.displayListEntitiesDirty && !Shaders.isShadowPass)
          {
              this.displayListEntitiesDirty = false;
! 
!             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 : this.renderInfos)
!             {
!                 this.freeRenderInformation(renderglobal$containerlocalrenderinformation1);
!             }
! 
!             this.renderInfos.clear();
!             this.renderInfosEntities.clear();
!             this.renderInfosTileEntities.clear();
!             this.visibilityDeque.clear();
!             Deque deque = this.visibilityDeque;
              Entity.setRenderDistanceWeight(MathHelper.clamp((double)this.mc.gameSettings.renderDistanceChunks / 8.0D, 1.0D, 2.5D));
!             boolean flag2 = this.mc.renderChunksMany;
  
              if (renderchunk != null)
              {
!                 boolean flag3 = false;
                  RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation3 = new RenderGlobal.ContainerLocalRenderInformation(renderchunk, (EnumFacing)null, 0);
!                 Set set1 = SET_ALL_FACINGS;
  
                  if (set1.size() == 1)
                  {
***************
*** 902,911 ****
  
                  if (set1.isEmpty())
                  {
!                     flag2 = true;
                  }
  
!                 if (flag2 && !playerSpectator)
                  {
                      this.renderInfos.add(renderglobal$containerlocalrenderinformation3);
                  }
--- 1243,1252 ----
  
                  if (set1.isEmpty())
                  {
!                     flag3 = true;
                  }
  
!                 if (flag3 && !playerSpectator)
                  {
                      this.renderInfos.add(renderglobal$containerlocalrenderinformation3);
                  }
***************
*** 913,964 ****
                  {
                      if (playerSpectator && this.theWorld.getBlockState(blockpos1).isOpaqueCube())
                      {
!                         flag1 = false;
                      }
  
                      renderchunk.setFrameIndex(frameCount);
!                     queue.add(renderglobal$containerlocalrenderinformation3);
                  }
              }
              else
              {
!                 int i = blockpos1.getY() > 0 ? 248 : 8;
  
!                 for (int j = -this.renderDistanceChunks; j <= this.renderDistanceChunks; ++j)
                  {
!                     for (int k = -this.renderDistanceChunks; k <= this.renderDistanceChunks; ++k)
                      {
!                         RenderChunk renderchunk1 = this.viewFrustum.getRenderChunk(new BlockPos((j << 4) + 8, i, (k << 4) + 8));
  
!                         if (renderchunk1 != null && camera.isBoundingBoxInFrustum(renderchunk1.boundingBox))
                          {
!                             renderchunk1.setFrameIndex(frameCount);
!                             queue.add(new RenderGlobal.ContainerLocalRenderInformation(renderchunk1, (EnumFacing)null, 0));
                          }
                      }
                  }
              }
  
              this.mc.mcProfiler.startSection("iteration");
  
!             while (!queue.isEmpty())
              {
!                 RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 = queue.poll();
!                 RenderChunk renderchunk3 = renderglobal$containerlocalrenderinformation1.renderChunk;
!                 EnumFacing enumfacing2 = renderglobal$containerlocalrenderinformation1.facing;
!                 this.renderInfos.add(renderglobal$containerlocalrenderinformation1);
  
!                 for (EnumFacing enumfacing1 : EnumFacing.values())
                  {
!                     RenderChunk renderchunk2 = this.getRenderChunkOffset(blockpos, renderchunk3, enumfacing1);
  
!                     if ((!flag1 || !renderglobal$containerlocalrenderinformation1.hasDirection(enumfacing1.getOpposite())) && (!flag1 || enumfacing2 == null || renderchunk3.getCompiledChunk().isVisible(enumfacing2.getOpposite(), enumfacing1)) && renderchunk2 != null && renderchunk2.setFrameIndex(frameCount) && camera.isBoundingBoxInFrustum(renderchunk2.boundingBox))
                      {
!                         RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = new RenderGlobal.ContainerLocalRenderInformation(renderchunk2, enumfacing1, renderglobal$containerlocalrenderinformation1.counter + 1);
!                         renderglobal$containerlocalrenderinformation.setDirection(renderglobal$containerlocalrenderinformation1.setFacing, enumfacing1);
!                         queue.add(renderglobal$containerlocalrenderinformation);
                      }
                  }
              }
  
              this.mc.mcProfiler.endSection();
--- 1254,1336 ----
                  {
                      if (playerSpectator && this.theWorld.getBlockState(blockpos1).isOpaqueCube())
                      {
!                         flag2 = false;
                      }
  
                      renderchunk.setFrameIndex(frameCount);
!                     deque.add(renderglobal$containerlocalrenderinformation3);
                  }
              }
              else
              {
!                 int i1 = blockpos1.getY() > 0 ? 248 : 8;
  
!                 for (int j1 = -this.renderDistanceChunks; j1 <= this.renderDistanceChunks; ++j1)
                  {
!                     for (int j = -this.renderDistanceChunks; j <= this.renderDistanceChunks; ++j)
                      {
!                         RenderChunk renderchunk2 = this.viewFrustum.getRenderChunk(new BlockPos((j1 << 4) + 8, i1, (j << 4) + 8));
  
!                         if (renderchunk2 != null && camera.isBoundingBoxInFrustum(renderchunk2.boundingBox))
                          {
!                             renderchunk2.setFrameIndex(frameCount);
!                             deque.add(new RenderGlobal.ContainerLocalRenderInformation(renderchunk2, (EnumFacing)null, 0));
                          }
                      }
                  }
              }
  
              this.mc.mcProfiler.startSection("iteration");
+             EnumFacing[] aenumfacing = EnumFacing.VALUES;
+             int k1 = aenumfacing.length;
  
!             while (!deque.isEmpty())
              {
!                 RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation4 = (RenderGlobal.ContainerLocalRenderInformation)deque.poll();
!                 RenderChunk renderchunk5 = renderglobal$containerlocalrenderinformation4.renderChunk;
!                 EnumFacing enumfacing2 = renderglobal$containerlocalrenderinformation4.facing;
!                 boolean flag1 = false;
!                 CompiledChunk compiledchunk = renderchunk5.compiledChunk;
! 
!                 if (!compiledchunk.isEmpty() || renderchunk5.isNeedsUpdate())
!                 {
!                     this.renderInfos.add(renderglobal$containerlocalrenderinformation4);
!                     flag1 = true;
!                 }
! 
!                 if (ChunkUtils.hasEntities(renderchunk5.getChunk(this.theWorld)))
!                 {
!                     this.renderInfosEntities.add(renderglobal$containerlocalrenderinformation4);
!                     flag1 = true;
!                 }
! 
!                 if (compiledchunk.getTileEntities().size() > 0)
!                 {
!                     this.renderInfosTileEntities.add(renderglobal$containerlocalrenderinformation4);
!                     flag1 = true;
!                 }
  
!                 for (int k = 0; k < k1; ++k)
                  {
!                     EnumFacing enumfacing1 = aenumfacing[k];
  
!                     if ((!flag2 || !renderglobal$containerlocalrenderinformation4.hasDirection(enumfacing1.getOpposite())) && (!flag2 || enumfacing2 == null || compiledchunk.isVisible(enumfacing2.getOpposite(), enumfacing1)))
                      {
!                         RenderChunk renderchunk3 = this.getRenderChunkOffset(blockpos1, renderchunk5, enumfacing1);
! 
!                         if (renderchunk3 != null && renderchunk3.setFrameIndex(frameCount) && camera.isBoundingBoxInFrustum(renderchunk3.boundingBox))
!                         {
!                             int l = renderglobal$containerlocalrenderinformation4.setFacing | 1 << enumfacing1.ordinal();
!                             RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = this.allocateRenderInformation(renderchunk3, enumfacing1, l);
!                             deque.add(renderglobal$containerlocalrenderinformation);
!                         }
                      }
                  }
+ 
+                 if (!flag1)
+                 {
+                     this.freeRenderInformation(renderglobal$containerlocalrenderinformation4);
+                 }
              }
  
              this.mc.mcProfiler.endSection();
***************
*** 972,1007 ****
              this.debugFixTerrainFrustum = false;
          }
  
!         this.mc.mcProfiler.endStartSection("rebuildNear");
!         Set<RenderChunk> set = this.chunksToUpdate;
!         this.chunksToUpdate = Sets.<RenderChunk>newLinkedHashSet();
  
!         for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation2 : this.renderInfos)
          {
!             RenderChunk renderchunk4 = renderglobal$containerlocalrenderinformation2.renderChunk;
  
!             if (renderchunk4.isNeedsUpdate() || set.contains(renderchunk4))
              {
!                 this.displayListEntitiesDirty = true;
!                 BlockPos blockpos2 = renderchunk4.getPosition().add(8, 8, 8);
!                 boolean flag3 = blockpos2.distanceSq(blockpos1) < 768.0D;
  
!                 if (!renderchunk4.isNeedsUpdateCustom() && !flag3)
!                 {
!                     this.chunksToUpdate.add(renderchunk4);
!                 }
!                 else
                  {
!                     this.mc.mcProfiler.startSection("build near");
!                     this.renderDispatcher.updateChunkNow(renderchunk4);
!                     renderchunk4.clearNeedsUpdate();
!                     this.mc.mcProfiler.endSection();
                  }
              }
-         }
  
!         this.chunksToUpdate.addAll(set);
!         this.mc.mcProfiler.endSection();
      }
  
      private Set<EnumFacing> getVisibleFacings(BlockPos pos)
--- 1344,1394 ----
              this.debugFixTerrainFrustum = false;
          }
  
!         Lagometer.timerVisibility.end();
  
!         if (Shaders.isShadowPass)
          {
!             Shaders.mcProfilerEndSection();
!         }
!         else
!         {
!             this.mc.mcProfiler.endStartSection("rebuildNear");
!             Set<RenderChunk> set = this.chunksToUpdate;
!             this.chunksToUpdate = Sets.<RenderChunk>newLinkedHashSet();
!             Lagometer.timerChunkUpdate.start();
  
!             for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation2 : this.renderInfos)
              {
!                 RenderChunk renderchunk4 = renderglobal$containerlocalrenderinformation2.renderChunk;
  
!                 if (renderchunk4.isNeedsUpdate() || set.contains(renderchunk4))
                  {
!                     this.displayListEntitiesDirty = true;
!                     BlockPos blockpos2 = renderchunk4.getPosition();
!                     boolean flag4 = blockpos1.distanceSq((double)(blockpos2.getX() + 8), (double)(blockpos2.getY() + 8), (double)(blockpos2.getZ() + 8)) < 768.0D;
! 
!                     if (!flag4)
!                     {
!                         this.chunksToUpdate.add(renderchunk4);
!                     }
!                     else if (!renderchunk4.isPlayerUpdate())
!                     {
!                         this.chunksToUpdateForced.add(renderchunk4);
!                     }
!                     else
!                     {
!                         this.mc.mcProfiler.startSection("build near");
!                         this.renderDispatcher.updateChunkNow(renderchunk4);
!                         renderchunk4.clearNeedsUpdate();
!                         this.mc.mcProfiler.endSection();
!                     }
                  }
              }
  
!             Lagometer.timerChunkUpdate.end();
!             this.chunksToUpdate.addAll(set);
!             this.mc.mcProfiler.endSection();
!         }
      }
  
      private Set<EnumFacing> getVisibleFacings(BlockPos pos)
***************
*** 1030,1042 ****
      {
          BlockPos blockpos = renderChunkBase.getBlockPosOffset16(facing);
  
!         if (MathHelper.abs(playerPos.getX() - blockpos.getX()) > this.renderDistanceChunks * 16)
!         {
!             return null;
!         }
!         else if (blockpos.getY() >= 0 && blockpos.getY() < 256)
          {
!             return MathHelper.abs(playerPos.getZ() - blockpos.getZ()) > this.renderDistanceChunks * 16 ? null : this.viewFrustum.getRenderChunk(blockpos);
          }
          else
          {
--- 1417,1445 ----
      {
          BlockPos blockpos = renderChunkBase.getBlockPosOffset16(facing);
  
!         if (blockpos.getY() >= 0 && blockpos.getY() < 256)
          {
!             int i = playerPos.getX() - blockpos.getX();
!             int j = playerPos.getZ() - blockpos.getZ();
! 
!             if (Config.isFogOff())
!             {
!                 if (Math.abs(i) > this.renderDistance || Math.abs(j) > this.renderDistance)
!                 {
!                     return null;
!                 }
!             }
!             else
!             {
!                 int k = i * i + j * j;
! 
!                 if (k > this.renderDistanceSq)
!                 {
!                     return null;
!                 }
!             }
! 
!             return renderChunkBase.getRenderChunkOffset16(this.viewFrustum, facing);
          }
          else
          {
***************
*** 1111,1122 ****
                  this.prevRenderSortY = entityIn.posY;
                  this.prevRenderSortZ = entityIn.posZ;
                  int k = 0;
  
                  for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
                  {
                      if (renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk.isLayerStarted(blockLayerIn) && k++ < 15)
                      {
!                         this.renderDispatcher.updateTransparencyLater(renderglobal$containerlocalrenderinformation.renderChunk);
                      }
                  }
              }
--- 1514,1526 ----
                  this.prevRenderSortY = entityIn.posY;
                  this.prevRenderSortZ = entityIn.posZ;
                  int k = 0;
+                 this.chunksToResortTransparency.clear();
  
                  for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
                  {
                      if (renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk.isLayerStarted(blockLayerIn) && k++ < 15)
                      {
!                         this.chunksToResortTransparency.add(renderglobal$containerlocalrenderinformation.renderChunk);
                      }
                  }
              }
***************
*** 1142,1154 ****
              }
          }
  
!         this.mc.mcProfiler.endStartSection("render_" + blockLayerIn);
!         this.renderBlockLayer(blockLayerIn);
!         this.mc.mcProfiler.endSection();
!         return l;
      }
  
-     @SuppressWarnings("incomplete-switch")
      private void renderBlockLayer(BlockRenderLayer blockLayerIn)
      {
          this.mc.entityRenderer.enableLightmap();
--- 1546,1570 ----
              }
          }
  
!         if (l == 0)
!         {
!             this.mc.mcProfiler.endSection();
!             return l;
!         }
!         else
!         {
!             if (Config.isFogOff() && this.mc.entityRenderer.fogStandard)
!             {
!                 GlStateManager.disableFog();
!             }
! 
!             this.mc.mcProfiler.endStartSection("render_" + blockLayerIn);
!             this.renderBlockLayer(blockLayerIn);
!             this.mc.mcProfiler.endSection();
!             return l;
!         }
      }
  
      private void renderBlockLayer(BlockRenderLayer blockLayerIn)
      {
          this.mc.entityRenderer.enableLightmap();
***************
*** 1164,1177 ****
              GlStateManager.glEnableClientState(32886);
          }
  
          this.renderContainer.renderChunkLayer(blockLayerIn);
  
          if (OpenGlHelper.useVbo())
          {
              for (VertexFormatElement vertexformatelement : DefaultVertexFormats.BLOCK.getElements())
              {
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
!                 int i = vertexformatelement.getIndex();
  
                  switch (vertexformatelement$enumusage)
                  {
--- 1580,1603 ----
              GlStateManager.glEnableClientState(32886);
          }
  
+         if (Config.isShaders())
+         {
+             ShadersRender.preRenderChunkLayer(blockLayerIn);
+         }
+ 
          this.renderContainer.renderChunkLayer(blockLayerIn);
  
+         if (Config.isShaders())
+         {
+             ShadersRender.postRenderChunkLayer(blockLayerIn);
+         }
+ 
          if (OpenGlHelper.useVbo())
          {
              for (VertexFormatElement vertexformatelement : DefaultVertexFormats.BLOCK.getElements())
              {
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
!                 int k1 = vertexformatelement.getIndex();
  
                  switch (vertexformatelement$enumusage)
                  {
***************
*** 1180,1186 ****
                          break;
  
                      case UV:
!                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + i);
                          GlStateManager.glDisableClientState(32888);
                          OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
                          break;
--- 1606,1612 ----
                          break;
  
                      case UV:
!                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + k1);
                          GlStateManager.glDisableClientState(32888);
                          OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
                          break;
***************
*** 1200,1208 ****
          while (iteratorIn.hasNext())
          {
              DestroyBlockProgress destroyblockprogress = iteratorIn.next();
!             int i = destroyblockprogress.getCreationCloudUpdateTick();
  
!             if (this.cloudTickCounter - i > 400)
              {
                  iteratorIn.remove();
              }
--- 1626,1634 ----
          while (iteratorIn.hasNext())
          {
              DestroyBlockProgress destroyblockprogress = iteratorIn.next();
!             int k1 = destroyblockprogress.getCreationCloudUpdateTick();
  
!             if (this.cloudTickCounter - k1 > 400)
              {
                  iteratorIn.remove();
              }
***************
*** 1211,1216 ****
--- 1637,1649 ----
  
      public void updateClouds()
      {
+         if (Config.isShaders() && Keyboard.isKeyDown(61) && Keyboard.isKeyDown(19))
+         {
+             Shaders.uninit();
+             Shaders.loadShaderPack();
+             Reflector.Minecraft_actionKeyF3.setValue(this.mc, Boolean.TRUE);
+         }
+ 
          ++this.cloudTickCounter;
  
          if (this.cloudTickCounter % 20 == 0)
***************
*** 1226,1304 ****
              {
                  BlockPos blockpos = iterator.next();
                  iterator.remove();
!                 int i = blockpos.getX();
!                 int j = blockpos.getY();
!                 int k = blockpos.getZ();
!                 this.markBlocksForUpdate(i - 1, j - 1, k - 1, i + 1, j + 1, k + 1, false);
              }
          }
      }
  
      private void renderSkyEnd()
      {
!         GlStateManager.disableFog();
!         GlStateManager.disableAlpha();
!         GlStateManager.enableBlend();
!         GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!         RenderHelper.disableStandardItemLighting();
!         GlStateManager.depthMask(false);
!         this.renderEngine.bindTexture(END_SKY_TEXTURES);
!         Tessellator tessellator = Tessellator.getInstance();
!         BufferBuilder bufferbuilder = tessellator.getBuffer();
! 
!         for (int i = 0; i < 6; ++i)
          {
!             GlStateManager.pushMatrix();
  
!             if (i == 1)
              {
!                 GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
!             }
  
!             if (i == 2)
!             {
!                 GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
!             }
  
!             if (i == 3)
!             {
!                 GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
!             }
  
!             if (i == 4)
!             {
!                 GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
!             }
  
!             if (i == 5)
!             {
!                 GlStateManager.rotate(-90.0F, 0.0F, 0.0F, 1.0F);
              }
  
!             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!             bufferbuilder.pos(-100.0D, -100.0D, -100.0D).tex(0.0D, 0.0D).color(40, 40, 40, 255).endVertex();
!             bufferbuilder.pos(-100.0D, -100.0D, 100.0D).tex(0.0D, 16.0D).color(40, 40, 40, 255).endVertex();
!             bufferbuilder.pos(100.0D, -100.0D, 100.0D).tex(16.0D, 16.0D).color(40, 40, 40, 255).endVertex();
!             bufferbuilder.pos(100.0D, -100.0D, -100.0D).tex(16.0D, 0.0D).color(40, 40, 40, 255).endVertex();
!             tessellator.draw();
!             GlStateManager.popMatrix();
          }
- 
-         GlStateManager.depthMask(true);
-         GlStateManager.enableTexture2D();
-         GlStateManager.enableAlpha();
      }
  
      public void renderSky(float partialTicks, int pass)
      {
!         if (this.mc.world.provider.getDimensionType().getId() == 1)
          {
              this.renderSkyEnd();
          }
          else if (this.mc.world.provider.isSurfaceWorld())
          {
              GlStateManager.disableTexture2D();
              Vec3d vec3d = this.theWorld.getSkyColor(this.mc.getRenderViewEntity(), partialTicks);
              float f = (float)vec3d.xCoord;
              float f1 = (float)vec3d.yCoord;
              float f2 = (float)vec3d.zCoord;
--- 1659,1780 ----
              {
                  BlockPos blockpos = iterator.next();
                  iterator.remove();
!                 int k1 = blockpos.getX();
!                 int l1 = blockpos.getY();
!                 int i2 = blockpos.getZ();
!                 this.markBlocksForUpdate(k1 - 1, l1 - 1, i2 - 1, k1 + 1, l1 + 1, i2 + 1, false);
              }
          }
      }
  
      private void renderSkyEnd()
      {
!         if (Config.isSkyEnabled())
          {
!             GlStateManager.disableFog();
!             GlStateManager.disableAlpha();
!             GlStateManager.enableBlend();
!             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!             RenderHelper.disableStandardItemLighting();
!             GlStateManager.depthMask(false);
!             this.renderEngine.bindTexture(END_SKY_TEXTURES);
!             Tessellator tessellator = Tessellator.getInstance();
!             BufferBuilder bufferbuilder = tessellator.getBuffer();
  
!             for (int k1 = 0; k1 < 6; ++k1)
              {
!                 GlStateManager.pushMatrix();
  
!                 if (k1 == 1)
!                 {
!                     GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
!                 }
  
!                 if (k1 == 2)
!                 {
!                     GlStateManager.rotate(-90.0F, 1.0F, 0.0F, 0.0F);
!                 }
  
!                 if (k1 == 3)
!                 {
!                     GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
!                 }
  
!                 if (k1 == 4)
!                 {
!                     GlStateManager.rotate(90.0F, 0.0F, 0.0F, 1.0F);
!                 }
! 
!                 if (k1 == 5)
!                 {
!                     GlStateManager.rotate(-90.0F, 0.0F, 0.0F, 1.0F);
!                 }
! 
!                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
!                 int l1 = 40;
!                 int i2 = 40;
!                 int j2 = 40;
! 
!                 if (Config.isCustomColors())
!                 {
!                     Vec3d vec3d = new Vec3d((double)l1 / 255.0D, (double)i2 / 255.0D, (double)j2 / 255.0D);
!                     vec3d = CustomColors.getWorldSkyColor(vec3d, this.theWorld, this.mc.getRenderViewEntity(), 0.0F);
!                     l1 = (int)(vec3d.xCoord * 255.0D);
!                     i2 = (int)(vec3d.yCoord * 255.0D);
!                     j2 = (int)(vec3d.zCoord * 255.0D);
!                 }
! 
!                 bufferbuilder.pos(-100.0D, -100.0D, -100.0D).tex(0.0D, 0.0D).color(l1, i2, j2, 255).endVertex();
!                 bufferbuilder.pos(-100.0D, -100.0D, 100.0D).tex(0.0D, 16.0D).color(l1, i2, j2, 255).endVertex();
!                 bufferbuilder.pos(100.0D, -100.0D, 100.0D).tex(16.0D, 16.0D).color(l1, i2, j2, 255).endVertex();
!                 bufferbuilder.pos(100.0D, -100.0D, -100.0D).tex(16.0D, 0.0D).color(l1, i2, j2, 255).endVertex();
!                 tessellator.draw();
!                 GlStateManager.popMatrix();
              }
  
!             GlStateManager.depthMask(true);
!             GlStateManager.enableTexture2D();
!             GlStateManager.enableAlpha();
!             GlStateManager.disableBlend();
          }
      }
  
      public void renderSky(float partialTicks, int pass)
      {
!         if (Reflector.ForgeWorldProvider_getSkyRenderer.exists())
!         {
!             WorldProvider worldprovider = this.mc.world.provider;
!             Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getSkyRenderer);
! 
!             if (object != null)
!             {
!                 Reflector.callVoid(object, Reflector.IRenderHandler_render, partialTicks, this.theWorld, this.mc);
!                 return;
!             }
!         }
! 
!         if (this.mc.world.provider.getDimensionType() == DimensionType.THE_END)
          {
              this.renderSkyEnd();
          }
          else if (this.mc.world.provider.isSurfaceWorld())
          {
              GlStateManager.disableTexture2D();
+             boolean flag1 = Config.isShaders();
+ 
+             if (flag1)
+             {
+                 Shaders.disableTexture2D();
+             }
+ 
              Vec3d vec3d = this.theWorld.getSkyColor(this.mc.getRenderViewEntity(), partialTicks);
+             vec3d = CustomColors.getSkyColor(vec3d, this.mc.world, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
+ 
+             if (flag1)
+             {
+                 Shaders.setSkyColor(vec3d);
+             }
+ 
              float f = (float)vec3d.xCoord;
              float f1 = (float)vec3d.yCoord;
              float f2 = (float)vec3d.zCoord;
***************
*** 1318,1349 ****
              BufferBuilder bufferbuilder = tessellator.getBuffer();
              GlStateManager.depthMask(false);
              GlStateManager.enableFog();
              GlStateManager.color(f, f1, f2);
  
!             if (this.vboEnabled)
              {
!                 this.skyVBO.bindBuffer();
!                 GlStateManager.glEnableClientState(32884);
!                 GlStateManager.glVertexPointer(3, 5126, 12, 0);
!                 this.skyVBO.drawArrays(7);
!                 this.skyVBO.unbindBuffer();
!                 GlStateManager.glDisableClientState(32884);
              }
!             else
              {
!                 GlStateManager.callList(this.glSkyList);
              }
  
              GlStateManager.disableFog();
              GlStateManager.disableAlpha();
              GlStateManager.enableBlend();
              GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              RenderHelper.disableStandardItemLighting();
              float[] afloat = this.theWorld.provider.calcSunriseSunsetColors(this.theWorld.getCelestialAngle(partialTicks), partialTicks);
  
!             if (afloat != null)
              {
                  GlStateManager.disableTexture2D();
                  GlStateManager.shadeModel(7425);
                  GlStateManager.pushMatrix();
                  GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
--- 1794,1851 ----
              BufferBuilder bufferbuilder = tessellator.getBuffer();
              GlStateManager.depthMask(false);
              GlStateManager.enableFog();
+ 
+             if (flag1)
+             {
+                 Shaders.enableFog();
+             }
+ 
              GlStateManager.color(f, f1, f2);
  
!             if (flag1)
              {
!                 Shaders.preSkyList();
              }
! 
!             if (Config.isSkyEnabled())
              {
!                 if (this.vboEnabled)
!                 {
!                     this.skyVBO.bindBuffer();
!                     GlStateManager.glEnableClientState(32884);
!                     GlStateManager.glVertexPointer(3, 5126, 12, 0);
!                     this.skyVBO.drawArrays(7);
!                     this.skyVBO.unbindBuffer();
!                     GlStateManager.glDisableClientState(32884);
!                 }
!                 else
!                 {
!                     GlStateManager.callList(this.glSkyList);
!                 }
              }
  
              GlStateManager.disableFog();
+ 
+             if (flag1)
+             {
+                 Shaders.disableFog();
+             }
+ 
              GlStateManager.disableAlpha();
              GlStateManager.enableBlend();
              GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              RenderHelper.disableStandardItemLighting();
              float[] afloat = this.theWorld.provider.calcSunriseSunsetColors(this.theWorld.getCelestialAngle(partialTicks), partialTicks);
  
!             if (afloat != null && Config.isSunMoonEnabled())
              {
                  GlStateManager.disableTexture2D();
+ 
+                 if (flag1)
+                 {
+                     Shaders.disableTexture2D();
+                 }
+ 
                  GlStateManager.shadeModel(7425);
                  GlStateManager.pushMatrix();
                  GlStateManager.rotate(90.0F, 1.0F, 0.0F, 0.0F);
***************
*** 1365,1377 ****
  
                  bufferbuilder.begin(6, DefaultVertexFormats.POSITION_COLOR);
                  bufferbuilder.pos(0.0D, 100.0D, 0.0D).color(f6, f7, f8, afloat[3]).endVertex();
!                 int j = 16;
  
!                 for (int l = 0; l <= 16; ++l)
                  {
!                     float f21 = (float)l * ((float)Math.PI * 2F) / 16.0F;
!                     float f12 = MathHelper.sin(f21);
!                     float f13 = MathHelper.cos(f21);
                      bufferbuilder.pos((double)(f12 * 120.0F), (double)(f13 * 120.0F), (double)(-f13 * 40.0F * afloat[3])).color(afloat[0], afloat[1], afloat[2], 0.0F).endVertex();
                  }
  
--- 1867,1879 ----
  
                  bufferbuilder.begin(6, DefaultVertexFormats.POSITION_COLOR);
                  bufferbuilder.pos(0.0D, 100.0D, 0.0D).color(f6, f7, f8, afloat[3]).endVertex();
!                 int l1 = 16;
  
!                 for (int j2 = 0; j2 <= 16; ++j2)
                  {
!                     float f18 = (float)j2 * ((float)Math.PI * 2F) / 16.0F;
!                     float f12 = MathHelper.sin(f18);
!                     float f13 = MathHelper.cos(f18);
                      bufferbuilder.pos((double)(f12 * 120.0F), (double)(f13 * 120.0F), (double)(-f13 * 40.0F * afloat[3])).color(afloat[0], afloat[1], afloat[2], 0.0F).endVertex();
                  }
  
***************
*** 1381,1421 ****
              }
  
              GlStateManager.enableTexture2D();
              GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              GlStateManager.pushMatrix();
!             float f16 = 1.0F - this.theWorld.getRainStrength(partialTicks);
!             GlStateManager.color(1.0F, 1.0F, 1.0F, f16);
              GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
              GlStateManager.rotate(this.theWorld.getCelestialAngle(partialTicks) * 360.0F, 1.0F, 0.0F, 0.0F);
!             float f17 = 30.0F;
!             this.renderEngine.bindTexture(SUN_TEXTURES);
!             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
!             bufferbuilder.pos((double)(-f17), 100.0D, (double)(-f17)).tex(0.0D, 0.0D).endVertex();
!             bufferbuilder.pos((double)f17, 100.0D, (double)(-f17)).tex(1.0D, 0.0D).endVertex();
!             bufferbuilder.pos((double)f17, 100.0D, (double)f17).tex(1.0D, 1.0D).endVertex();
!             bufferbuilder.pos((double)(-f17), 100.0D, (double)f17).tex(0.0D, 1.0D).endVertex();
!             tessellator.draw();
!             f17 = 20.0F;
!             this.renderEngine.bindTexture(MOON_PHASES_TEXTURES);
!             int i = this.theWorld.getMoonPhase();
!             int k = i % 4;
!             int i1 = i / 4 % 2;
!             float f22 = (float)(k + 0) / 4.0F;
!             float f23 = (float)(i1 + 0) / 2.0F;
!             float f24 = (float)(k + 1) / 4.0F;
!             float f14 = (float)(i1 + 1) / 2.0F;
!             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
!             bufferbuilder.pos((double)(-f17), -100.0D, (double)f17).tex((double)f24, (double)f14).endVertex();
!             bufferbuilder.pos((double)f17, -100.0D, (double)f17).tex((double)f22, (double)f14).endVertex();
!             bufferbuilder.pos((double)f17, -100.0D, (double)(-f17)).tex((double)f22, (double)f23).endVertex();
!             bufferbuilder.pos((double)(-f17), -100.0D, (double)(-f17)).tex((double)f24, (double)f23).endVertex();
!             tessellator.draw();
              GlStateManager.disableTexture2D();
-             float f15 = this.theWorld.getStarBrightness(partialTicks) * f16;
  
!             if (f15 > 0.0F)
              {
!                 GlStateManager.color(f15, f15, f15, f15);
  
                  if (this.vboEnabled)
                  {
--- 1883,1958 ----
              }
  
              GlStateManager.enableTexture2D();
+ 
+             if (flag1)
+             {
+                 Shaders.enableTexture2D();
+             }
+ 
              GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              GlStateManager.pushMatrix();
!             float f15 = 1.0F - this.theWorld.getRainStrength(partialTicks);
!             GlStateManager.color(1.0F, 1.0F, 1.0F, f15);
              GlStateManager.rotate(-90.0F, 0.0F, 1.0F, 0.0F);
+             CustomSky.renderSky(this.theWorld, this.renderEngine, partialTicks);
+ 
+             if (flag1)
+             {
+                 Shaders.preCelestialRotate();
+             }
+ 
              GlStateManager.rotate(this.theWorld.getCelestialAngle(partialTicks) * 360.0F, 1.0F, 0.0F, 0.0F);
! 
!             if (flag1)
!             {
!                 Shaders.postCelestialRotate();
!             }
! 
!             float f16 = 30.0F;
! 
!             if (Config.isSunTexture())
!             {
!                 this.renderEngine.bindTexture(SUN_TEXTURES);
!                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
!                 bufferbuilder.pos((double)(-f16), 100.0D, (double)(-f16)).tex(0.0D, 0.0D).endVertex();
!                 bufferbuilder.pos((double)f16, 100.0D, (double)(-f16)).tex(1.0D, 0.0D).endVertex();
!                 bufferbuilder.pos((double)f16, 100.0D, (double)f16).tex(1.0D, 1.0D).endVertex();
!                 bufferbuilder.pos((double)(-f16), 100.0D, (double)f16).tex(0.0D, 1.0D).endVertex();
!                 tessellator.draw();
!             }
! 
!             f16 = 20.0F;
! 
!             if (Config.isMoonTexture())
!             {
!                 this.renderEngine.bindTexture(MOON_PHASES_TEXTURES);
!                 int k1 = this.theWorld.getMoonPhase();
!                 int i2 = k1 % 4;
!                 int k2 = k1 / 4 % 2;
!                 float f19 = (float)(i2 + 0) / 4.0F;
!                 float f21 = (float)(k2 + 0) / 2.0F;
!                 float f23 = (float)(i2 + 1) / 4.0F;
!                 float f14 = (float)(k2 + 1) / 2.0F;
!                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
!                 bufferbuilder.pos((double)(-f16), -100.0D, (double)f16).tex((double)f23, (double)f14).endVertex();
!                 bufferbuilder.pos((double)f16, -100.0D, (double)f16).tex((double)f19, (double)f14).endVertex();
!                 bufferbuilder.pos((double)f16, -100.0D, (double)(-f16)).tex((double)f19, (double)f21).endVertex();
!                 bufferbuilder.pos((double)(-f16), -100.0D, (double)(-f16)).tex((double)f23, (double)f21).endVertex();
!                 tessellator.draw();
!             }
! 
              GlStateManager.disableTexture2D();
  
!             if (flag1)
!             {
!                 Shaders.disableTexture2D();
!             }
! 
!             float f17 = this.theWorld.getStarBrightness(partialTicks) * f15;
! 
!             if (f17 > 0.0F && Config.isStarsEnabled() && !CustomSky.hasSkyLayers(this.theWorld))
              {
!                 GlStateManager.color(f17, f17, f17, f17);
  
                  if (this.vboEnabled)
                  {
***************
*** 1436,1447 ****
              GlStateManager.disableBlend();
              GlStateManager.enableAlpha();
              GlStateManager.enableFog();
              GlStateManager.popMatrix();
              GlStateManager.disableTexture2D();
              GlStateManager.color(0.0F, 0.0F, 0.0F);
!             double d0 = this.mc.player.getPositionEyes(partialTicks).yCoord - this.theWorld.getHorizon();
  
!             if (d0 < 0.0D)
              {
                  GlStateManager.pushMatrix();
                  GlStateManager.translate(0.0F, 12.0F, 0.0F);
--- 1973,1996 ----
              GlStateManager.disableBlend();
              GlStateManager.enableAlpha();
              GlStateManager.enableFog();
+ 
+             if (flag1)
+             {
+                 Shaders.enableFog();
+             }
+ 
              GlStateManager.popMatrix();
              GlStateManager.disableTexture2D();
+ 
+             if (flag1)
+             {
+                 Shaders.disableTexture2D();
+             }
+ 
              GlStateManager.color(0.0F, 0.0F, 0.0F);
!             double d3 = this.mc.player.getPositionEyes(partialTicks).yCoord - this.theWorld.getHorizon();
  
!             if (d3 < 0.0D)
              {
                  GlStateManager.pushMatrix();
                  GlStateManager.translate(0.0F, 12.0F, 0.0F);
***************
*** 1461,1484 ****
                  }
  
                  GlStateManager.popMatrix();
!                 float f18 = 1.0F;
!                 float f19 = -((float)(d0 + 65.0D));
!                 float f20 = -1.0F;
                  bufferbuilder.begin(7, DefaultVertexFormats.POSITION_COLOR);
!                 bufferbuilder.pos(-1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(-1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(-1.0D, (double)f19, -1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(-1.0D, (double)f19, 1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
--- 2010,2033 ----
                  }
  
                  GlStateManager.popMatrix();
!                 float f20 = 1.0F;
!                 float f22 = -((float)(d3 + 65.0D));
!                 float f24 = -1.0F;
                  bufferbuilder.begin(7, DefaultVertexFormats.POSITION_COLOR);
!                 bufferbuilder.pos(-1.0D, (double)f22, 1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(1.0D, (double)f22, 1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(1.0D, (double)f22, -1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(-1.0D, (double)f22, -1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(1.0D, (double)f22, 1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(1.0D, (double)f22, -1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(-1.0D, (double)f22, -1.0D).color(0, 0, 0, 255).endVertex();
!                 bufferbuilder.pos(-1.0D, (double)f22, 1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(-1.0D, -1.0D, 1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
                  bufferbuilder.pos(-1.0D, -1.0D, -1.0D).color(0, 0, 0, 255).endVertex();
***************
*** 1497,1571 ****
                  GlStateManager.color(f, f1, f2);
              }
  
              GlStateManager.pushMatrix();
!             GlStateManager.translate(0.0F, -((float)(d0 - 16.0D)), 0.0F);
!             GlStateManager.callList(this.glSkyList2);
              GlStateManager.popMatrix();
              GlStateManager.enableTexture2D();
              GlStateManager.depthMask(true);
          }
      }
  
      public void renderClouds(float partialTicks, int pass, double p_180447_3_, double p_180447_5_, double p_180447_7_)
      {
!         if (this.mc.world.provider.isSurfaceWorld())
          {
!             if (this.mc.gameSettings.shouldRenderClouds() == 2)
              {
!                 this.renderCloudsFancy(partialTicks, pass, p_180447_3_, p_180447_5_, p_180447_7_);
              }
-             else
-             {
-                 GlStateManager.disableCull();
-                 int i = 32;
-                 int j = 8;
-                 Tessellator tessellator = Tessellator.getInstance();
-                 BufferBuilder bufferbuilder = tessellator.getBuffer();
-                 this.renderEngine.bindTexture(CLOUDS_TEXTURES);
-                 GlStateManager.enableBlend();
-                 GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-                 Vec3d vec3d = this.theWorld.getCloudColour(partialTicks);
-                 float f = (float)vec3d.xCoord;
-                 float f1 = (float)vec3d.yCoord;
-                 float f2 = (float)vec3d.zCoord;
  
!                 if (pass != 2)
                  {
!                     float f3 = (f * 30.0F + f1 * 59.0F + f2 * 11.0F) / 100.0F;
!                     float f4 = (f * 30.0F + f1 * 70.0F) / 100.0F;
!                     float f5 = (f * 30.0F + f2 * 70.0F) / 100.0F;
!                     f = f3;
!                     f1 = f4;
!                     f2 = f5;
!                 }
! 
!                 float f9 = 4.8828125E-4F;
!                 double d2 = (double)((float)this.cloudTickCounter + partialTicks);
!                 double d0 = p_180447_3_ + d2 * 0.029999999329447746D;
!                 int k = MathHelper.floor(d0 / 2048.0D);
!                 int l = MathHelper.floor(p_180447_7_ / 2048.0D);
!                 d0 = d0 - (double)(k * 2048);
!                 double lvt_22_1_ = p_180447_7_ - (double)(l * 2048);
!                 float f6 = this.theWorld.provider.getCloudHeight() - (float)p_180447_5_ + 0.33F;
!                 float f7 = (float)(d0 * 4.8828125E-4D);
!                 float f8 = (float)(lvt_22_1_ * 4.8828125E-4D);
!                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
  
!                 for (int i1 = -256; i1 < 256; i1 += 32)
                  {
!                     for (int j1 = -256; j1 < 256; j1 += 32)
                      {
!                         bufferbuilder.pos((double)(i1 + 0), (double)f6, (double)(j1 + 32)).tex((double)((float)(i1 + 0) * 4.8828125E-4F + f7), (double)((float)(j1 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
!                         bufferbuilder.pos((double)(i1 + 32), (double)f6, (double)(j1 + 32)).tex((double)((float)(i1 + 32) * 4.8828125E-4F + f7), (double)((float)(j1 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
!                         bufferbuilder.pos((double)(i1 + 32), (double)f6, (double)(j1 + 0)).tex((double)((float)(i1 + 32) * 4.8828125E-4F + f7), (double)((float)(j1 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
!                         bufferbuilder.pos((double)(i1 + 0), (double)f6, (double)(j1 + 0)).tex((double)((float)(i1 + 0) * 4.8828125E-4F + f7), (double)((float)(j1 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
                      }
                  }
  
!                 tessellator.draw();
!                 GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!                 GlStateManager.disableBlend();
!                 GlStateManager.enableCull();
              }
          }
      }
--- 2046,2173 ----
                  GlStateManager.color(f, f1, f2);
              }
  
+             if (this.mc.gameSettings.renderDistanceChunks <= 4)
+             {
+                 GlStateManager.color(this.mc.entityRenderer.fogColorRed, this.mc.entityRenderer.fogColorGreen, this.mc.entityRenderer.fogColorBlue);
+             }
+ 
              GlStateManager.pushMatrix();
!             GlStateManager.translate(0.0F, -((float)(d3 - 16.0D)), 0.0F);
! 
!             if (Config.isSkyEnabled())
!             {
!                 GlStateManager.callList(this.glSkyList2);
!             }
! 
              GlStateManager.popMatrix();
              GlStateManager.enableTexture2D();
+ 
+             if (flag1)
+             {
+                 Shaders.enableTexture2D();
+             }
+ 
              GlStateManager.depthMask(true);
          }
      }
  
      public void renderClouds(float partialTicks, int pass, double p_180447_3_, double p_180447_5_, double p_180447_7_)
      {
!         if (!Config.isCloudsOff())
          {
!             if (Reflector.ForgeWorldProvider_getCloudRenderer.exists())
              {
!                 WorldProvider worldprovider = this.mc.world.provider;
!                 Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getCloudRenderer);
! 
!                 if (object != null)
!                 {
!                     Reflector.callVoid(object, Reflector.IRenderHandler_render, partialTicks, this.theWorld, this.mc);
!                     return;
!                 }
              }
  
!             if (this.mc.world.provider.isSurfaceWorld())
!             {
!                 if (Config.isShaders())
                  {
!                     Shaders.beginClouds();
!                 }
  
!                 if (Config.isCloudsFancy())
                  {
!                     this.renderCloudsFancy(partialTicks, pass, p_180447_3_, p_180447_5_, p_180447_7_);
!                 }
!                 else
!                 {
!                     float f9 = partialTicks;
!                     partialTicks = 0.0F;
!                     GlStateManager.disableCull();
!                     int l2 = 32;
!                     int k1 = 8;
!                     Tessellator tessellator = Tessellator.getInstance();
!                     BufferBuilder bufferbuilder = tessellator.getBuffer();
!                     this.renderEngine.bindTexture(CLOUDS_TEXTURES);
!                     GlStateManager.enableBlend();
!                     GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!                     Vec3d vec3d = this.theWorld.getCloudColour(partialTicks);
!                     float f = (float)vec3d.xCoord;
!                     float f1 = (float)vec3d.yCoord;
!                     float f2 = (float)vec3d.zCoord;
!                     this.cloudRenderer.prepareToRender(false, this.cloudTickCounter, f9, vec3d);
! 
!                     if (this.cloudRenderer.shouldUpdateGlList())
                      {
!                         this.cloudRenderer.startUpdateGlList();
! 
!                         if (pass != 2)
!                         {
!                             float f3 = (f * 30.0F + f1 * 59.0F + f2 * 11.0F) / 100.0F;
!                             float f4 = (f * 30.0F + f1 * 70.0F) / 100.0F;
!                             float f5 = (f * 30.0F + f2 * 70.0F) / 100.0F;
!                             f = f3;
!                             f1 = f4;
!                             f2 = f5;
!                         }
! 
!                         float f10 = 4.8828125E-4F;
!                         double d5 = (double)((float)this.cloudTickCounter + partialTicks);
!                         double d3 = p_180447_3_ + d5 * 0.029999999329447746D;
!                         int l1 = MathHelper.floor(d3 / 2048.0D);
!                         int i2 = MathHelper.floor(p_180447_7_ / 2048.0D);
!                         d3 = d3 - (double)(l1 * 2048);
!                         double d4 = p_180447_7_ - (double)(i2 * 2048);
!                         float f6 = this.theWorld.provider.getCloudHeight() - (float)p_180447_5_ + 0.33F;
!                         f6 = f6 + this.mc.gameSettings.ofCloudsHeight * 128.0F;
!                         float f7 = (float)(d3 * 4.8828125E-4D);
!                         float f8 = (float)(d4 * 4.8828125E-4D);
!                         bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
! 
!                         for (int j2 = -256; j2 < 256; j2 += 32)
!                         {
!                             for (int k2 = -256; k2 < 256; k2 += 32)
!                             {
!                                 bufferbuilder.pos((double)(j2 + 0), (double)f6, (double)(k2 + 32)).tex((double)((float)(j2 + 0) * 4.8828125E-4F + f7), (double)((float)(k2 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
!                                 bufferbuilder.pos((double)(j2 + 32), (double)f6, (double)(k2 + 32)).tex((double)((float)(j2 + 32) * 4.8828125E-4F + f7), (double)((float)(k2 + 32) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
!                                 bufferbuilder.pos((double)(j2 + 32), (double)f6, (double)(k2 + 0)).tex((double)((float)(j2 + 32) * 4.8828125E-4F + f7), (double)((float)(k2 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
!                                 bufferbuilder.pos((double)(j2 + 0), (double)f6, (double)(k2 + 0)).tex((double)((float)(j2 + 0) * 4.8828125E-4F + f7), (double)((float)(k2 + 0) * 4.8828125E-4F + f8)).color(f, f1, f2, 0.8F).endVertex();
!                             }
!                         }
! 
!                         tessellator.draw();
!                         this.cloudRenderer.endUpdateGlList();
                      }
+ 
+                     this.cloudRenderer.renderGlList();
+                     GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+                     GlStateManager.disableBlend();
+                     GlStateManager.enableCull();
                  }
  
!                 if (Config.isShaders())
!                 {
!                     Shaders.endClouds();
!                 }
              }
          }
      }
***************
*** 1580,1605 ****
  
      private void renderCloudsFancy(float partialTicks, int pass, double p_180445_3_, double p_180445_5_, double p_180445_7_)
      {
          GlStateManager.disableCull();
          Tessellator tessellator = Tessellator.getInstance();
          BufferBuilder bufferbuilder = tessellator.getBuffer();
          float f = 12.0F;
          float f1 = 4.0F;
!         double d0 = (double)((float)this.cloudTickCounter + partialTicks);
!         double d1 = (p_180445_3_ + d0 * 0.029999999329447746D) / 12.0D;
!         double d2 = p_180445_7_ / 12.0D + 0.33000001311302185D;
          float f2 = this.theWorld.provider.getCloudHeight() - (float)p_180445_5_ + 0.33F;
!         int i = MathHelper.floor(d1 / 2048.0D);
!         int j = MathHelper.floor(d2 / 2048.0D);
!         d1 = d1 - (double)(i * 2048);
!         d2 = d2 - (double)(j * 2048);
          this.renderEngine.bindTexture(CLOUDS_TEXTURES);
          GlStateManager.enableBlend();
          GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!         Vec3d vec3d = this.theWorld.getCloudColour(partialTicks);
          float f3 = (float)vec3d.xCoord;
          float f4 = (float)vec3d.yCoord;
          float f5 = (float)vec3d.zCoord;
  
          if (pass != 2)
          {
--- 2182,2210 ----
  
      private void renderCloudsFancy(float partialTicks, int pass, double p_180445_3_, double p_180445_5_, double p_180445_7_)
      {
+         float f251 = 0.0F;
          GlStateManager.disableCull();
          Tessellator tessellator = Tessellator.getInstance();
          BufferBuilder bufferbuilder = tessellator.getBuffer();
          float f = 12.0F;
          float f1 = 4.0F;
!         double d3 = (double)((float)this.cloudTickCounter + f251);
!         double d4 = (p_180445_3_ + d3 * 0.029999999329447746D) / 12.0D;
!         double d5 = p_180445_7_ / 12.0D + 0.33000001311302185D;
          float f2 = this.theWorld.provider.getCloudHeight() - (float)p_180445_5_ + 0.33F;
!         f2 = f2 + this.mc.gameSettings.ofCloudsHeight * 128.0F;
!         int k1 = MathHelper.floor(d4 / 2048.0D);
!         int l1 = MathHelper.floor(d5 / 2048.0D);
!         d4 = d4 - (double)(k1 * 2048);
!         d5 = d5 - (double)(l1 * 2048);
          this.renderEngine.bindTexture(CLOUDS_TEXTURES);
          GlStateManager.enableBlend();
          GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
!         Vec3d vec3d = this.theWorld.getCloudColour(f251);
          float f3 = (float)vec3d.xCoord;
          float f4 = (float)vec3d.yCoord;
          float f5 = (float)vec3d.zCoord;
+         this.cloudRenderer.prepareToRender(true, this.cloudTickCounter, partialTicks, vec3d);
  
          if (pass != 2)
          {
***************
*** 1611,1619 ****
              f5 = f8;
          }
  
!         float f25 = f3 * 0.9F;
!         float f26 = f4 * 0.9F;
!         float f27 = f5 * 0.9F;
          float f9 = f3 * 0.7F;
          float f10 = f4 * 0.7F;
          float f11 = f5 * 0.7F;
--- 2216,2224 ----
              f5 = f8;
          }
  
!         float f26 = f3 * 0.9F;
!         float f27 = f4 * 0.9F;
!         float f28 = f5 * 0.9F;
          float f9 = f3 * 0.7F;
          float f10 = f4 * 0.7F;
          float f11 = f5 * 0.7F;
***************
*** 1621,1638 ****
          float f13 = f4 * 0.8F;
          float f14 = f5 * 0.8F;
          float f15 = 0.00390625F;
!         float f16 = (float)MathHelper.floor(d1) * 0.00390625F;
!         float f17 = (float)MathHelper.floor(d2) * 0.00390625F;
!         float f18 = (float)(d1 - (double)MathHelper.floor(d1));
!         float f19 = (float)(d2 - (double)MathHelper.floor(d2));
!         int k = 8;
!         int l = 4;
          float f20 = 9.765625E-4F;
          GlStateManager.scale(12.0F, 1.0F, 12.0F);
  
!         for (int i1 = 0; i1 < 2; ++i1)
          {
!             if (i1 == 0)
              {
                  GlStateManager.colorMask(false, false, false, false);
              }
--- 2226,2243 ----
          float f13 = f4 * 0.8F;
          float f14 = f5 * 0.8F;
          float f15 = 0.00390625F;
!         float f16 = (float)MathHelper.floor(d4) * 0.00390625F;
!         float f17 = (float)MathHelper.floor(d5) * 0.00390625F;
!         float f18 = (float)(d4 - (double)MathHelper.floor(d4));
!         float f19 = (float)(d5 - (double)MathHelper.floor(d5));
!         int i2 = 8;
!         int j2 = 4;
          float f20 = 9.765625E-4F;
          GlStateManager.scale(12.0F, 1.0F, 12.0F);
  
!         for (int k2 = 0; k2 < 2; ++k2)
          {
!             if (k2 == 0)
              {
                  GlStateManager.colorMask(false, false, false, false);
              }
***************
*** 1653,1665 ****
                  }
              }
  
!             for (int j1 = -3; j1 <= 4; ++j1)
              {
!                 for (int k1 = -3; k1 <= 4; ++k1)
                  {
                      bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
!                     float f21 = (float)(j1 * 8);
!                     float f22 = (float)(k1 * 8);
                      float f23 = f21 - f18;
                      float f24 = f22 - f19;
  
--- 2258,2277 ----
                  }
              }
  
!             this.cloudRenderer.renderGlList();
!         }
! 
!         if (this.cloudRenderer.shouldUpdateGlList())
!         {
!             this.cloudRenderer.startUpdateGlList();
! 
!             for (int j3 = -3; j3 <= 4; ++j3)
              {
!                 for (int l2 = -3; l2 <= 4; ++l2)
                  {
                      bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR_NORMAL);
!                     float f21 = (float)(j3 * 8);
!                     float f22 = (float)(l2 * 8);
                      float f23 = f21 - f18;
                      float f24 = f22 - f19;
  
***************
*** 1679,1731 ****
                          bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F - 9.765625E-4F), (double)(f24 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f3, f4, f5, 0.8F).normal(0.0F, 1.0F, 0.0F).endVertex();
                      }
  
!                     if (j1 > -1)
                      {
!                         for (int l1 = 0; l1 < 8; ++l1)
                          {
!                             bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)l1 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)l1 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
                          }
                      }
  
!                     if (j1 <= 1)
                      {
!                         for (int i2 = 0; i2 < 8; ++i2)
                          {
!                             bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)i2 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)i2 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f25, f26, f27, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
                          }
                      }
  
!                     if (k1 > -1)
                      {
!                         for (int j2 = 0; j2 < 8; ++j2)
                          {
!                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)j2 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)j2 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)j2 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)j2 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)j2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
                          }
                      }
  
!                     if (k1 <= 1)
                      {
!                         for (int k2 = 0; k2 < 8; ++k2)
                          {
!                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)k2 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)k2 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
                          }
                      }
  
                      tessellator.draw();
                  }
              }
          }
  
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
--- 2291,2345 ----
                          bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F - 9.765625E-4F), (double)(f24 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f3, f4, f5, 0.8F).normal(0.0F, 1.0F, 0.0F).endVertex();
                      }
  
!                     if (j3 > -1)
                      {
!                         for (int i3 = 0; i3 < 8; ++i3)
                          {
!                             bufferbuilder.pos((double)(f23 + (float)i3 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)i3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)i3 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)i3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)i3 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)i3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)i3 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)i3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(-1.0F, 0.0F, 0.0F).endVertex();
                          }
                      }
  
!                     if (j3 <= 1)
                      {
!                         for (int k3 = 0; k3 < 8; ++k3)
                          {
!                             bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 8.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 8.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 4.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + (float)k3 + 1.0F - 9.765625E-4F), (double)(f2 + 0.0F), (double)(f24 + 0.0F)).tex((double)((f21 + (float)k3 + 0.5F) * 0.00390625F + f16), (double)((f22 + 0.0F) * 0.00390625F + f17)).color(f26, f27, f28, 0.8F).normal(1.0F, 0.0F, 0.0F).endVertex();
                          }
                      }
  
!                     if (l2 > -1)
                      {
!                         for (int l3 = 0; l3 < 8; ++l3)
                          {
!                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)l3 + 0.0F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)l3 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, -1.0F).endVertex();
                          }
                      }
  
!                     if (l2 <= 1)
                      {
!                         for (int i4 = 0; i4 < 8; ++i4)
                          {
!                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 4.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 4.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 8.0F), (double)(f2 + 0.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 8.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
!                             bufferbuilder.pos((double)(f23 + 0.0F), (double)(f2 + 0.0F), (double)(f24 + (float)i4 + 1.0F - 9.765625E-4F)).tex((double)((f21 + 0.0F) * 0.00390625F + f16), (double)((f22 + (float)i4 + 0.5F) * 0.00390625F + f17)).color(f12, f13, f14, 0.8F).normal(0.0F, 0.0F, 1.0F).endVertex();
                          }
                      }
  
                      tessellator.draw();
                  }
              }
+ 
+             this.cloudRenderer.endUpdateGlList();
          }
  
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
***************
*** 1735,1770 ****
  
      public void updateChunks(long finishTimeNano)
      {
          this.displayListEntitiesDirty |= this.renderDispatcher.runChunkUploads(finishTimeNano);
  
!         if (!this.chunksToUpdate.isEmpty())
          {
!             Iterator<RenderChunk> iterator = this.chunksToUpdate.iterator();
  
              while (iterator.hasNext())
              {
!                 RenderChunk renderchunk = iterator.next();
!                 boolean flag;
  
!                 if (renderchunk.isNeedsUpdateCustom())
                  {
!                     flag = this.renderDispatcher.updateChunkNow(renderchunk);
                  }
                  else
                  {
!                     flag = this.renderDispatcher.updateChunkLater(renderchunk);
                  }
  
!                 if (!flag)
                  {
                      break;
                  }
  
!                 renderchunk.clearNeedsUpdate();
!                 iterator.remove();
!                 long i = finishTimeNano - System.nanoTime();
  
!                 if (i < 0L)
                  {
                      break;
                  }
--- 2349,2430 ----
  
      public void updateChunks(long finishTimeNano)
      {
+         finishTimeNano = (long)((double)finishTimeNano + 1.0E8D);
          this.displayListEntitiesDirty |= this.renderDispatcher.runChunkUploads(finishTimeNano);
  
!         if (this.chunksToUpdateForced.size() > 0)
          {
!             Iterator iterator = this.chunksToUpdateForced.iterator();
  
              while (iterator.hasNext())
              {
!                 RenderChunk renderchunk1 = (RenderChunk)iterator.next();
  
!                 if (!this.renderDispatcher.updateChunkLater(renderchunk1))
                  {
!                     break;
!                 }
! 
!                 renderchunk1.clearNeedsUpdate();
!                 iterator.remove();
!                 this.chunksToUpdate.remove(renderchunk1);
!                 this.chunksToResortTransparency.remove(renderchunk1);
!             }
!         }
! 
!         if (this.chunksToResortTransparency.size() > 0)
!         {
!             Iterator iterator2 = this.chunksToResortTransparency.iterator();
! 
!             if (iterator2.hasNext())
!             {
!                 RenderChunk renderchunk3 = (RenderChunk)iterator2.next();
! 
!                 if (this.renderDispatcher.updateTransparencyLater(renderchunk3))
!                 {
!                     iterator2.remove();
!                 }
!             }
!         }
! 
!         int l1 = 0;
!         int i2 = Config.getUpdatesPerFrame();
!         int k1 = i2 * 2;
! 
!         if (!this.chunksToUpdate.isEmpty())
!         {
!             Iterator<RenderChunk> iterator1 = this.chunksToUpdate.iterator();
! 
!             while (iterator1.hasNext())
!             {
!                 RenderChunk renderchunk2 = iterator1.next();
!                 boolean flag1;
! 
!                 if (renderchunk2.isNeedsUpdateCustom())
!                 {
!                     flag1 = this.renderDispatcher.updateChunkNow(renderchunk2);
                  }
                  else
                  {
!                     flag1 = this.renderDispatcher.updateChunkLater(renderchunk2);
                  }
  
!                 if (!flag1)
                  {
                      break;
                  }
  
!                 renderchunk2.clearNeedsUpdate();
!                 iterator1.remove();
  
!                 if (renderchunk2.getCompiledChunk().isEmpty() && i2 < k1)
!                 {
!                     ++i2;
!                 }
! 
!                 ++l1;
! 
!                 if (l1 >= i2)
                  {
                      break;
                  }
***************
*** 1777,1801 ****
          Tessellator tessellator = Tessellator.getInstance();
          BufferBuilder bufferbuilder = tessellator.getBuffer();
          WorldBorder worldborder = this.theWorld.getWorldBorder();
!         double d0 = (double)(this.mc.gameSettings.renderDistanceChunks * 16);
  
!         if (entityIn.posX >= worldborder.maxX() - d0 || entityIn.posX <= worldborder.minX() + d0 || entityIn.posZ >= worldborder.maxZ() - d0 || entityIn.posZ <= worldborder.minZ() + d0)
          {
!             double d1 = 1.0D - worldborder.getClosestDistance(entityIn) / d0;
!             d1 = Math.pow(d1, 4.0D);
!             double d2 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
!             double d3 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
!             double d4 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
              GlStateManager.enableBlend();
              GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              this.renderEngine.bindTexture(FORCEFIELD_TEXTURES);
              GlStateManager.depthMask(false);
              GlStateManager.pushMatrix();
!             int i = worldborder.getStatus().getID();
!             float f = (float)(i >> 16 & 255) / 255.0F;
!             float f1 = (float)(i >> 8 & 255) / 255.0F;
!             float f2 = (float)(i & 255) / 255.0F;
!             GlStateManager.color(f, f1, f2, (float)d1);
              GlStateManager.doPolygonOffset(-3.0F, -3.0F);
              GlStateManager.enablePolygonOffset();
              GlStateManager.alphaFunc(516, 0.1F);
--- 2437,2461 ----
          Tessellator tessellator = Tessellator.getInstance();
          BufferBuilder bufferbuilder = tessellator.getBuffer();
          WorldBorder worldborder = this.theWorld.getWorldBorder();
!         double d3 = (double)(this.mc.gameSettings.renderDistanceChunks * 16);
  
!         if (entityIn.posX >= worldborder.maxX() - d3 || entityIn.posX <= worldborder.minX() + d3 || entityIn.posZ >= worldborder.maxZ() - d3 || entityIn.posZ <= worldborder.minZ() + d3)
          {
!             double d4 = 1.0D - worldborder.getClosestDistance(entityIn) / d3;
!             d4 = Math.pow(d4, 4.0D);
!             double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
!             double d6 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
!             double d7 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
              GlStateManager.enableBlend();
              GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              this.renderEngine.bindTexture(FORCEFIELD_TEXTURES);
              GlStateManager.depthMask(false);
              GlStateManager.pushMatrix();
!             int k1 = worldborder.getStatus().getID();
!             float f = (float)(k1 >> 16 & 255) / 255.0F;
!             float f1 = (float)(k1 >> 8 & 255) / 255.0F;
!             float f2 = (float)(k1 & 255) / 255.0F;
!             GlStateManager.color(f, f1, f2, (float)d4);
              GlStateManager.doPolygonOffset(-3.0F, -3.0F);
              GlStateManager.enablePolygonOffset();
              GlStateManager.alphaFunc(516, 0.1F);
***************
*** 1806,1879 ****
              float f5 = 0.0F;
              float f6 = 128.0F;
              bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
!             bufferbuilder.setTranslation(-d2, -d3, -d4);
!             double d5 = Math.max((double)MathHelper.floor(d4 - d0), worldborder.minZ());
!             double d6 = Math.min((double)MathHelper.ceil(d4 + d0), worldborder.maxZ());
  
!             if (d2 > worldborder.maxX() - d0)
              {
                  float f7 = 0.0F;
  
!                 for (double d7 = d5; d7 < d6; f7 += 0.5F)
                  {
!                     double d8 = Math.min(1.0D, d6 - d7);
!                     float f8 = (float)d8 * 0.5F;
!                     bufferbuilder.pos(worldborder.maxX(), 256.0D, d7).tex((double)(f3 + f7), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.maxX(), 256.0D, d7 + d8).tex((double)(f3 + f8 + f7), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.maxX(), 0.0D, d7 + d8).tex((double)(f3 + f8 + f7), (double)(f3 + 128.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.maxX(), 0.0D, d7).tex((double)(f3 + f7), (double)(f3 + 128.0F)).endVertex();
!                     ++d7;
                  }
              }
  
!             if (d2 < worldborder.minX() + d0)
              {
                  float f9 = 0.0F;
  
!                 for (double d9 = d5; d9 < d6; f9 += 0.5F)
                  {
!                     double d12 = Math.min(1.0D, d6 - d9);
!                     float f12 = (float)d12 * 0.5F;
!                     bufferbuilder.pos(worldborder.minX(), 256.0D, d9).tex((double)(f3 + f9), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.minX(), 256.0D, d9 + d12).tex((double)(f3 + f12 + f9), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.minX(), 0.0D, d9 + d12).tex((double)(f3 + f12 + f9), (double)(f3 + 128.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.minX(), 0.0D, d9).tex((double)(f3 + f9), (double)(f3 + 128.0F)).endVertex();
!                     ++d9;
                  }
              }
  
!             d5 = Math.max((double)MathHelper.floor(d2 - d0), worldborder.minX());
!             d6 = Math.min((double)MathHelper.ceil(d2 + d0), worldborder.maxX());
  
!             if (d4 > worldborder.maxZ() - d0)
              {
                  float f10 = 0.0F;
  
!                 for (double d10 = d5; d10 < d6; f10 += 0.5F)
                  {
!                     double d13 = Math.min(1.0D, d6 - d10);
!                     float f13 = (float)d13 * 0.5F;
!                     bufferbuilder.pos(d10, 256.0D, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(d10 + d13, 256.0D, worldborder.maxZ()).tex((double)(f3 + f13 + f10), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(d10 + d13, 0.0D, worldborder.maxZ()).tex((double)(f3 + f13 + f10), (double)(f3 + 128.0F)).endVertex();
!                     bufferbuilder.pos(d10, 0.0D, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 128.0F)).endVertex();
!                     ++d10;
                  }
              }
  
!             if (d4 < worldborder.minZ() + d0)
              {
                  float f11 = 0.0F;
  
!                 for (double d11 = d5; d11 < d6; f11 += 0.5F)
                  {
!                     double d14 = Math.min(1.0D, d6 - d11);
!                     float f14 = (float)d14 * 0.5F;
!                     bufferbuilder.pos(d11, 256.0D, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(d11 + d14, 256.0D, worldborder.minZ()).tex((double)(f3 + f14 + f11), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(d11 + d14, 0.0D, worldborder.minZ()).tex((double)(f3 + f14 + f11), (double)(f3 + 128.0F)).endVertex();
!                     bufferbuilder.pos(d11, 0.0D, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 128.0F)).endVertex();
!                     ++d11;
                  }
              }
  
--- 2466,2539 ----
              float f5 = 0.0F;
              float f6 = 128.0F;
              bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
!             bufferbuilder.setTranslation(-d5, -d6, -d7);
!             double d8 = Math.max((double)MathHelper.floor(d7 - d3), worldborder.minZ());
!             double d9 = Math.min((double)MathHelper.ceil(d7 + d3), worldborder.maxZ());
  
!             if (d5 > worldborder.maxX() - d3)
              {
                  float f7 = 0.0F;
  
!                 for (double d10 = d8; d10 < d9; f7 += 0.5F)
                  {
!                     double d11 = Math.min(1.0D, d9 - d10);
!                     float f8 = (float)d11 * 0.5F;
!                     bufferbuilder.pos(worldborder.maxX(), 256.0D, d10).tex((double)(f3 + f7), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.maxX(), 256.0D, d10 + d11).tex((double)(f3 + f8 + f7), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.maxX(), 0.0D, d10 + d11).tex((double)(f3 + f8 + f7), (double)(f3 + 128.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.maxX(), 0.0D, d10).tex((double)(f3 + f7), (double)(f3 + 128.0F)).endVertex();
!                     ++d10;
                  }
              }
  
!             if (d5 < worldborder.minX() + d3)
              {
                  float f9 = 0.0F;
  
!                 for (double d12 = d8; d12 < d9; f9 += 0.5F)
                  {
!                     double d15 = Math.min(1.0D, d9 - d12);
!                     float f12 = (float)d15 * 0.5F;
!                     bufferbuilder.pos(worldborder.minX(), 256.0D, d12).tex((double)(f3 + f9), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.minX(), 256.0D, d12 + d15).tex((double)(f3 + f12 + f9), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.minX(), 0.0D, d12 + d15).tex((double)(f3 + f12 + f9), (double)(f3 + 128.0F)).endVertex();
!                     bufferbuilder.pos(worldborder.minX(), 0.0D, d12).tex((double)(f3 + f9), (double)(f3 + 128.0F)).endVertex();
!                     ++d12;
                  }
              }
  
!             d8 = Math.max((double)MathHelper.floor(d5 - d3), worldborder.minX());
!             d9 = Math.min((double)MathHelper.ceil(d5 + d3), worldborder.maxX());
  
!             if (d7 > worldborder.maxZ() - d3)
              {
                  float f10 = 0.0F;
  
!                 for (double d13 = d8; d13 < d9; f10 += 0.5F)
                  {
!                     double d16 = Math.min(1.0D, d9 - d13);
!                     float f13 = (float)d16 * 0.5F;
!                     bufferbuilder.pos(d13, 256.0D, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(d13 + d16, 256.0D, worldborder.maxZ()).tex((double)(f3 + f13 + f10), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(d13 + d16, 0.0D, worldborder.maxZ()).tex((double)(f3 + f13 + f10), (double)(f3 + 128.0F)).endVertex();
!                     bufferbuilder.pos(d13, 0.0D, worldborder.maxZ()).tex((double)(f3 + f10), (double)(f3 + 128.0F)).endVertex();
!                     ++d13;
                  }
              }
  
!             if (d7 < worldborder.minZ() + d3)
              {
                  float f11 = 0.0F;
  
!                 for (double d14 = d8; d14 < d9; f11 += 0.5F)
                  {
!                     double d17 = Math.min(1.0D, d9 - d14);
!                     float f14 = (float)d17 * 0.5F;
!                     bufferbuilder.pos(d14, 256.0D, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(d14 + d17, 256.0D, worldborder.minZ()).tex((double)(f3 + f14 + f11), (double)(f3 + 0.0F)).endVertex();
!                     bufferbuilder.pos(d14 + d17, 0.0D, worldborder.minZ()).tex((double)(f3 + f14 + f11), (double)(f3 + 128.0F)).endVertex();
!                     bufferbuilder.pos(d14, 0.0D, worldborder.minZ()).tex((double)(f3 + f11), (double)(f3 + 128.0F)).endVertex();
!                     ++d14;
                  }
              }
  
***************
*** 1884,1889 ****
--- 2544,2550 ----
              GlStateManager.doPolygonOffset(0.0F, 0.0F);
              GlStateManager.disablePolygonOffset();
              GlStateManager.enableAlpha();
+             GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              GlStateManager.disableBlend();
              GlStateManager.popMatrix();
              GlStateManager.depthMask(true);
***************
*** 1900,1905 ****
--- 2561,2571 ----
          GlStateManager.alphaFunc(516, 0.1F);
          GlStateManager.enableAlpha();
          GlStateManager.pushMatrix();
+ 
+         if (Config.isShaders())
+         {
+             ShadersRender.beginBlockDamage();
+         }
      }
  
      private void postRenderDamagedBlocks()
***************
*** 1910,1929 ****
          GlStateManager.enableAlpha();
          GlStateManager.depthMask(true);
          GlStateManager.popMatrix();
      }
  
      public void drawBlockDamageTexture(Tessellator tessellatorIn, BufferBuilder worldRendererIn, Entity entityIn, float partialTicks)
      {
!         double d0 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
!         double d1 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
!         double d2 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
  
          if (!this.damagedBlocks.isEmpty())
          {
              this.renderEngine.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
              this.preRenderDamagedBlocks();
              worldRendererIn.begin(7, DefaultVertexFormats.BLOCK);
!             worldRendererIn.setTranslation(-d0, -d1, -d2);
              worldRendererIn.noColor();
              Iterator<DestroyBlockProgress> iterator = this.damagedBlocks.values().iterator();
  
--- 2576,2600 ----
          GlStateManager.enableAlpha();
          GlStateManager.depthMask(true);
          GlStateManager.popMatrix();
+ 
+         if (Config.isShaders())
+         {
+             ShadersRender.endBlockDamage();
+         }
      }
  
      public void drawBlockDamageTexture(Tessellator tessellatorIn, BufferBuilder worldRendererIn, Entity entityIn, float partialTicks)
      {
!         double d3 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
!         double d4 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
!         double d5 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
  
          if (!this.damagedBlocks.isEmpty())
          {
              this.renderEngine.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
              this.preRenderDamagedBlocks();
              worldRendererIn.begin(7, DefaultVertexFormats.BLOCK);
!             worldRendererIn.setTranslation(-d3, -d4, -d5);
              worldRendererIn.noColor();
              Iterator<DestroyBlockProgress> iterator = this.damagedBlocks.values().iterator();
  
***************
*** 1931,1944 ****
              {
                  DestroyBlockProgress destroyblockprogress = iterator.next();
                  BlockPos blockpos = destroyblockprogress.getPosition();
!                 double d3 = (double)blockpos.getX() - d0;
!                 double d4 = (double)blockpos.getY() - d1;
!                 double d5 = (double)blockpos.getZ() - d2;
                  Block block = this.theWorld.getBlockState(blockpos).getBlock();
  
!                 if (!(block instanceof BlockChest) && !(block instanceof BlockEnderChest) && !(block instanceof BlockSign) && !(block instanceof BlockSkull))
                  {
!                     if (d3 * d3 + d4 * d4 + d5 * d5 > 1024.0D)
                      {
                          iterator.remove();
                      }
--- 2602,2637 ----
              {
                  DestroyBlockProgress destroyblockprogress = iterator.next();
                  BlockPos blockpos = destroyblockprogress.getPosition();
!                 double d6 = (double)blockpos.getX() - d3;
!                 double d7 = (double)blockpos.getY() - d4;
!                 double d8 = (double)blockpos.getZ() - d5;
                  Block block = this.theWorld.getBlockState(blockpos).getBlock();
+                 boolean flag1;
  
!                 if (Reflector.ForgeTileEntity_canRenderBreaking.exists())
                  {
!                     boolean flag2 = block instanceof BlockChest || block instanceof BlockEnderChest || block instanceof BlockSign || block instanceof BlockSkull;
! 
!                     if (!flag2)
!                     {
!                         TileEntity tileentity = this.theWorld.getTileEntity(blockpos);
! 
!                         if (tileentity != null)
!                         {
!                             flag2 = Reflector.callBoolean(tileentity, Reflector.ForgeTileEntity_canRenderBreaking);
!                         }
!                     }
! 
!                     flag1 = !flag2;
!                 }
!                 else
!                 {
!                     flag1 = !(block instanceof BlockChest) && !(block instanceof BlockEnderChest) && !(block instanceof BlockSign) && !(block instanceof BlockSkull);
!                 }
! 
!                 if (flag1)
!                 {
!                     if (d6 * d6 + d7 * d7 + d8 * d8 > 1024.0D)
                      {
                          iterator.remove();
                      }
***************
*** 1948,1955 ****
  
                          if (iblockstate.getMaterial() != Material.AIR)
                          {
!                             int i = destroyblockprogress.getPartialBlockDamage();
!                             TextureAtlasSprite textureatlassprite = this.destroyBlockIcons[i];
                              BlockRendererDispatcher blockrendererdispatcher = this.mc.getBlockRendererDispatcher();
                              blockrendererdispatcher.renderBlockDamage(iblockstate, blockpos, textureatlassprite, this.theWorld);
                          }
--- 2641,2648 ----
  
                          if (iblockstate.getMaterial() != Material.AIR)
                          {
!                             int k1 = destroyblockprogress.getPartialBlockDamage();
!                             TextureAtlasSprite textureatlassprite = this.destroyBlockIcons[k1];
                              BlockRendererDispatcher blockrendererdispatcher = this.mc.getBlockRendererDispatcher();
                              blockrendererdispatcher.renderBlockDamage(iblockstate, blockpos, textureatlassprite, this.theWorld);
                          }
***************
*** 1974,1993 ****
              GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              GlStateManager.glLineWidth(2.0F);
              GlStateManager.disableTexture2D();
              GlStateManager.depthMask(false);
              BlockPos blockpos = movingObjectPositionIn.getBlockPos();
              IBlockState iblockstate = this.theWorld.getBlockState(blockpos);
  
              if (iblockstate.getMaterial() != Material.AIR && this.theWorld.getWorldBorder().contains(blockpos))
              {
!                 double d0 = player.lastTickPosX + (player.posX - player.lastTickPosX) * (double)partialTicks;
!                 double d1 = player.lastTickPosY + (player.posY - player.lastTickPosY) * (double)partialTicks;
!                 double d2 = player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * (double)partialTicks;
!                 drawSelectionBoundingBox(iblockstate.getSelectedBoundingBox(this.theWorld, blockpos).expandXyz(0.0020000000949949026D).offset(-d0, -d1, -d2), 0.0F, 0.0F, 0.0F, 0.4F);
              }
  
              GlStateManager.depthMask(true);
              GlStateManager.enableTexture2D();
              GlStateManager.disableBlend();
          }
      }
--- 2667,2698 ----
              GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              GlStateManager.glLineWidth(2.0F);
              GlStateManager.disableTexture2D();
+ 
+             if (Config.isShaders())
+             {
+                 Shaders.disableTexture2D();
+             }
+ 
              GlStateManager.depthMask(false);
              BlockPos blockpos = movingObjectPositionIn.getBlockPos();
              IBlockState iblockstate = this.theWorld.getBlockState(blockpos);
  
              if (iblockstate.getMaterial() != Material.AIR && this.theWorld.getWorldBorder().contains(blockpos))
              {
!                 double d3 = player.lastTickPosX + (player.posX - player.lastTickPosX) * (double)partialTicks;
!                 double d4 = player.lastTickPosY + (player.posY - player.lastTickPosY) * (double)partialTicks;
!                 double d5 = player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * (double)partialTicks;
!                 drawSelectionBoundingBox(iblockstate.getSelectedBoundingBox(this.theWorld, blockpos).expandXyz(0.0020000000949949026D).offset(-d3, -d4, -d5), 0.0F, 0.0F, 0.0F, 0.4F);
              }
  
              GlStateManager.depthMask(true);
              GlStateManager.enableTexture2D();
+ 
+             if (Config.isShaders())
+             {
+                 Shaders.enableTexture2D();
+             }
+ 
              GlStateManager.disableBlend();
          }
      }
***************
*** 2008,2014 ****
  
      public static void drawBoundingBox(BufferBuilder buffer, double minX, double minY, double minZ, double maxX, double maxY, double maxZ, float red, float green, float blue, float alpha)
      {
-         buffer.pos(minX, minY, minZ).color(red, green, blue, 0.0F).endVertex();
          buffer.pos(minX, minY, minZ).color(red, green, blue, alpha).endVertex();
          buffer.pos(maxX, minY, minZ).color(red, green, blue, alpha).endVertex();
          buffer.pos(maxX, minY, maxZ).color(red, green, blue, alpha).endVertex();
--- 2713,2718 ----
***************
*** 2018,2031 ****
          buffer.pos(maxX, maxY, minZ).color(red, green, blue, alpha).endVertex();
          buffer.pos(maxX, maxY, maxZ).color(red, green, blue, alpha).endVertex();
          buffer.pos(minX, maxY, maxZ).color(red, green, blue, alpha).endVertex();
!         buffer.pos(minX, maxY, minZ).color(red, green, blue, alpha).endVertex();
!         buffer.pos(minX, maxY, maxZ).color(red, green, blue, 0.0F).endVertex();
          buffer.pos(minX, minY, maxZ).color(red, green, blue, alpha).endVertex();
!         buffer.pos(maxX, maxY, maxZ).color(red, green, blue, 0.0F).endVertex();
!         buffer.pos(maxX, minY, maxZ).color(red, green, blue, alpha).endVertex();
          buffer.pos(maxX, maxY, minZ).color(red, green, blue, 0.0F).endVertex();
          buffer.pos(maxX, minY, minZ).color(red, green, blue, alpha).endVertex();
-         buffer.pos(maxX, minY, minZ).color(red, green, blue, 0.0F).endVertex();
      }
  
      public static void renderFilledBox(AxisAlignedBB p_189696_0_, float p_189696_1_, float p_189696_2_, float p_189696_3_, float p_189696_4_)
--- 2722,2734 ----
          buffer.pos(maxX, maxY, minZ).color(red, green, blue, alpha).endVertex();
          buffer.pos(maxX, maxY, maxZ).color(red, green, blue, alpha).endVertex();
          buffer.pos(minX, maxY, maxZ).color(red, green, blue, alpha).endVertex();
!         buffer.pos(minX, maxY, minZ).color(red, green, blue, 0.0F).endVertex();
!         buffer.pos(minX, maxY, maxZ).color(red, green, blue, alpha).endVertex();
          buffer.pos(minX, minY, maxZ).color(red, green, blue, alpha).endVertex();
!         buffer.pos(maxX, minY, maxZ).color(red, green, blue, 0.0F).endVertex();
!         buffer.pos(maxX, maxY, maxZ).color(red, green, blue, alpha).endVertex();
          buffer.pos(maxX, maxY, minZ).color(red, green, blue, 0.0F).endVertex();
          buffer.pos(maxX, minY, minZ).color(red, green, blue, alpha).endVertex();
      }
  
      public static void renderFilledBox(AxisAlignedBB p_189696_0_, float p_189696_1_, float p_189696_2_, float p_189696_3_, float p_189696_4_)
***************
*** 2083,2092 ****
  
      public void notifyBlockUpdate(World worldIn, BlockPos pos, IBlockState oldState, IBlockState newState, int flags)
      {
!         int i = pos.getX();
!         int j = pos.getY();
!         int k = pos.getZ();
!         this.markBlocksForUpdate(i - 1, j - 1, k - 1, i + 1, j + 1, k + 1, (flags & 8) != 0);
      }
  
      public void notifyLightSet(BlockPos pos)
--- 2786,2795 ----
  
      public void notifyBlockUpdate(World worldIn, BlockPos pos, IBlockState oldState, IBlockState newState, int flags)
      {
!         int k1 = pos.getX();
!         int l1 = pos.getY();
!         int i2 = pos.getZ();
!         this.markBlocksForUpdate(k1 - 1, l1 - 1, i2 - 1, k1 + 1, l1 + 1, i2 + 1, (flags & 8) != 0);
      }
  
      public void notifyLightSet(BlockPos pos)
***************
*** 2121,2129 ****
                  this.mc.ingameGUI.setRecordPlayingMessage(itemrecord.getRecordNameLocal());
              }
  
!             ISound positionedsoundrecord = PositionedSoundRecord.getRecordSoundRecord(soundIn, (float)pos.getX(), (float)pos.getY(), (float)pos.getZ());
!             this.mapSoundPositions.put(pos, positionedsoundrecord);
!             this.mc.getSoundHandler().playSound(positionedsoundrecord);
          }
  
          this.func_193054_a(this.theWorld, pos, soundIn != null);
--- 2824,2832 ----
                  this.mc.ingameGUI.setRecordPlayingMessage(itemrecord.getRecordNameLocal());
              }
  
!             ISound isound1 = PositionedSoundRecord.getRecordSoundRecord(soundIn, (float)pos.getX(), (float)pos.getY(), (float)pos.getZ());
!             this.mapSoundPositions.put(pos, isound1);
!             this.mc.getSoundHandler().playSound(isound1);
          }
  
          this.func_193054_a(this.theWorld, pos, soundIn != null);
***************
*** 2192,2213 ****
  
          if (this.mc != null && entity != null && this.mc.effectRenderer != null)
          {
!             int i = this.func_190572_a(p_190571_3_);
!             double d0 = entity.posX - p_190571_4_;
!             double d1 = entity.posY - p_190571_6_;
!             double d2 = entity.posZ - p_190571_8_;
  
!             if (p_190571_2_)
              {
!                 return this.mc.effectRenderer.spawnEffectParticle(p_190571_1_, p_190571_4_, p_190571_6_, p_190571_8_, p_190571_10_, p_190571_12_, p_190571_14_, p_190571_16_);
              }
!             else if (d0 * d0 + d1 * d1 + d2 * d2 > 1024.0D)
              {
                  return null;
              }
              else
              {
!                 return i > 1 ? null : this.mc.effectRenderer.spawnEffectParticle(p_190571_1_, p_190571_4_, p_190571_6_, p_190571_8_, p_190571_10_, p_190571_12_, p_190571_14_, p_190571_16_);
              }
          }
          else
--- 2895,3032 ----
  
          if (this.mc != null && entity != null && this.mc.effectRenderer != null)
          {
!             int k1 = this.func_190572_a(p_190571_3_);
!             double d3 = entity.posX - p_190571_4_;
!             double d4 = entity.posY - p_190571_6_;
!             double d5 = entity.posZ - p_190571_8_;
  
!             if (p_190571_1_ == EnumParticleTypes.EXPLOSION_HUGE.getParticleID() && !Config.isAnimatedExplosion())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.EXPLOSION_LARGE.getParticleID() && !Config.isAnimatedExplosion())
              {
!                 return null;
              }
!             else if (p_190571_1_ == EnumParticleTypes.EXPLOSION_NORMAL.getParticleID() && !Config.isAnimatedExplosion())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.SUSPENDED.getParticleID() && !Config.isWaterParticles())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.SUSPENDED_DEPTH.getParticleID() && !Config.isVoidParticles())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.SMOKE_NORMAL.getParticleID() && !Config.isAnimatedSmoke())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.SMOKE_LARGE.getParticleID() && !Config.isAnimatedSmoke())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.SPELL_MOB.getParticleID() && !Config.isPotionParticles())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.SPELL_MOB_AMBIENT.getParticleID() && !Config.isPotionParticles())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.SPELL.getParticleID() && !Config.isPotionParticles())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.SPELL_INSTANT.getParticleID() && !Config.isPotionParticles())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.SPELL_WITCH.getParticleID() && !Config.isPotionParticles())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.PORTAL.getParticleID() && !Config.isAnimatedPortal())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.FLAME.getParticleID() && !Config.isAnimatedFlame())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.REDSTONE.getParticleID() && !Config.isAnimatedRedstone())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.DRIP_WATER.getParticleID() && !Config.isDrippingWaterLava())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.DRIP_LAVA.getParticleID() && !Config.isDrippingWaterLava())
!             {
!                 return null;
!             }
!             else if (p_190571_1_ == EnumParticleTypes.FIREWORKS_SPARK.getParticleID() && !Config.isFireworkParticles())
              {
                  return null;
              }
              else
              {
!                 if (!p_190571_2_)
!                 {
!                     double d6 = 1024.0D;
! 
!                     if (p_190571_1_ == EnumParticleTypes.CRIT.getParticleID())
!                     {
!                         d6 = 38416.0D;
!                     }
! 
!                     if (d3 * d3 + d4 * d4 + d5 * d5 > d6)
!                     {
!                         return null;
!                     }
! 
!                     if (k1 > 1)
!                     {
!                         return null;
!                     }
!                 }
! 
!                 Particle particle = this.mc.effectRenderer.spawnEffectParticle(p_190571_1_, p_190571_4_, p_190571_6_, p_190571_8_, p_190571_10_, p_190571_12_, p_190571_14_, p_190571_16_);
! 
!                 if (p_190571_1_ == EnumParticleTypes.WATER_BUBBLE.getParticleID())
!                 {
!                     CustomColors.updateWaterFX(particle, this.theWorld, p_190571_4_, p_190571_6_, p_190571_8_, this.renderEnv);
!                 }
! 
!                 if (p_190571_1_ == EnumParticleTypes.WATER_SPLASH.getParticleID())
!                 {
!                     CustomColors.updateWaterFX(particle, this.theWorld, p_190571_4_, p_190571_6_, p_190571_8_, this.renderEnv);
!                 }
! 
!                 if (p_190571_1_ == EnumParticleTypes.WATER_DROP.getParticleID())
!                 {
!                     CustomColors.updateWaterFX(particle, this.theWorld, p_190571_4_, p_190571_6_, p_190571_8_, this.renderEnv);
!                 }
! 
!                 if (p_190571_1_ == EnumParticleTypes.TOWN_AURA.getParticleID())
!                 {
!                     CustomColors.updateMyceliumFX(particle);
!                 }
! 
!                 if (p_190571_1_ == EnumParticleTypes.PORTAL.getParticleID())
!                 {
!                     CustomColors.updatePortalFX(particle);
!                 }
! 
!                 if (p_190571_1_ == EnumParticleTypes.REDSTONE.getParticleID())
!                 {
!                     CustomColors.updateReddustFX(particle, this.theWorld, p_190571_4_, p_190571_6_, p_190571_8_);
!                 }
! 
!                 return particle;
              }
          }
          else
***************
*** 2218,2236 ****
  
      private int func_190572_a(boolean p_190572_1_)
      {
!         int i = this.mc.gameSettings.particleSetting;
  
!         if (p_190572_1_ && i == 2 && this.theWorld.rand.nextInt(10) == 0)
          {
!             i = 1;
          }
  
!         if (i == 1 && this.theWorld.rand.nextInt(3) == 0)
          {
!             i = 2;
          }
  
!         return i;
      }
  
      /**
--- 3037,3055 ----
  
      private int func_190572_a(boolean p_190572_1_)
      {
!         int k1 = this.mc.gameSettings.particleSetting;
  
!         if (p_190572_1_ && k1 == 2 && this.theWorld.rand.nextInt(10) == 0)
          {
!             k1 = 1;
          }
  
!         if (k1 == 1 && this.theWorld.rand.nextInt(3) == 0)
          {
!             k1 = 2;
          }
  
!         return k1;
      }
  
      /**
***************
*** 2239,2244 ****
--- 3058,3069 ----
       */
      public void onEntityAdded(Entity entityIn)
      {
+         RandomMobs.entityLoaded(entityIn, this.theWorld);
+ 
+         if (Config.isDynamicLights())
+         {
+             DynamicLights.entityAdded(entityIn, this);
+         }
      }
  
      /**
***************
*** 2247,2252 ****
--- 3072,3081 ----
       */
      public void onEntityRemoved(Entity entityIn)
      {
+         if (Config.isDynamicLights())
+         {
+             DynamicLights.entityRemoved(entityIn, this);
+         }
      }
  
      /**
***************
*** 2267,2298 ****
  
                  if (entity != null)
                  {
!                     double d0 = (double)pos.getX() - entity.posX;
!                     double d1 = (double)pos.getY() - entity.posY;
!                     double d2 = (double)pos.getZ() - entity.posZ;
!                     double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
!                     double d4 = entity.posX;
!                     double d5 = entity.posY;
!                     double d6 = entity.posZ;
! 
!                     if (d3 > 0.0D)
!                     {
!                         d4 += d0 / d3 * 2.0D;
!                         d5 += d1 / d3 * 2.0D;
!                         d6 += d2 / d3 * 2.0D;
                      }
  
                      if (soundID == 1023)
                      {
!                         this.theWorld.playSound(d4, d5, d6, SoundEvents.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
                      }
                      else if (soundID == 1038)
                      {
!                         this.theWorld.playSound(d4, d5, d6, SoundEvents.field_193782_bq, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
                      }
                      else
                      {
!                         this.theWorld.playSound(d4, d5, d6, SoundEvents.ENTITY_ENDERDRAGON_DEATH, SoundCategory.HOSTILE, 5.0F, 1.0F, false);
                      }
                  }
  
--- 3096,3127 ----
  
                  if (entity != null)
                  {
!                     double d3 = (double)pos.getX() - entity.posX;
!                     double d4 = (double)pos.getY() - entity.posY;
!                     double d5 = (double)pos.getZ() - entity.posZ;
!                     double d6 = Math.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
!                     double d7 = entity.posX;
!                     double d8 = entity.posY;
!                     double d9 = entity.posZ;
! 
!                     if (d6 > 0.0D)
!                     {
!                         d7 += d3 / d6 * 2.0D;
!                         d8 += d4 / d6 * 2.0D;
!                         d9 += d5 / d6 * 2.0D;
                      }
  
                      if (soundID == 1023)
                      {
!                         this.theWorld.playSound(d7, d8, d9, SoundEvents.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
                      }
                      else if (soundID == 1038)
                      {
!                         this.theWorld.playSound(d7, d8, d9, SoundEvents.field_193782_bq, SoundCategory.HOSTILE, 1.0F, 1.0F, false);
                      }
                      else
                      {
!                         this.theWorld.playSound(d7, d8, d9, SoundEvents.ENTITY_ENDERDRAGON_DEATH, SoundCategory.HOSTILE, 5.0F, 1.0F, false);
                      }
                  }
  
***************
*** 2459,2480 ****
                  break;
  
              case 2000:
!                 int l = data % 3 - 1;
!                 int i = data / 3 % 3 - 1;
!                 double d8 = (double)blockPosIn.getX() + (double)l * 0.6D + 0.5D;
!                 double d10 = (double)blockPosIn.getY() + 0.5D;
!                 double d12 = (double)blockPosIn.getZ() + (double)i * 0.6D + 0.5D;
! 
!                 for (int j1 = 0; j1 < 10; ++j1)
!                 {
!                     double d13 = random.nextDouble() * 0.2D + 0.01D;
!                     double d16 = d8 + (double)l * 0.01D + (random.nextDouble() - 0.5D) * (double)i * 0.5D;
!                     double d19 = d10 + (random.nextDouble() - 0.5D) * 0.5D;
!                     double d22 = d12 + (double)i * 0.01D + (random.nextDouble() - 0.5D) * (double)l * 0.5D;
!                     double d24 = (double)l * d13 + random.nextGaussian() * 0.01D;
!                     double d26 = -0.03D + random.nextGaussian() * 0.01D;
!                     double d27 = (double)i * d13 + random.nextGaussian() * 0.01D;
!                     this.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d16, d19, d22, d24, d26, d27);
                  }
  
                  return;
--- 3288,3309 ----
                  break;
  
              case 2000:
!                 int k1 = data % 3 - 1;
!                 int l1 = data / 3 % 3 - 1;
!                 double d3 = (double)blockPosIn.getX() + (double)k1 * 0.6D + 0.5D;
!                 double d4 = (double)blockPosIn.getY() + 0.5D;
!                 double d5 = (double)blockPosIn.getZ() + (double)l1 * 0.6D + 0.5D;
! 
!                 for (int k2 = 0; k2 < 10; ++k2)
!                 {
!                     double d18 = random.nextDouble() * 0.2D + 0.01D;
!                     double d19 = d3 + (double)k1 * 0.01D + (random.nextDouble() - 0.5D) * (double)l1 * 0.5D;
!                     double d20 = d4 + (random.nextDouble() - 0.5D) * 0.5D;
!                     double d21 = d5 + (double)l1 * 0.01D + (random.nextDouble() - 0.5D) * (double)k1 * 0.5D;
!                     double d22 = (double)k1 * d18 + random.nextGaussian() * 0.01D;
!                     double d23 = -0.03D + random.nextGaussian() * 0.01D;
!                     double d24 = (double)l1 * d18 + random.nextGaussian() * 0.01D;
!                     this.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d19, d20, d21, d22, d23, d24);
                  }
  
                  return;
***************
*** 2485,2490 ****
--- 3314,3325 ----
                  if (block.getDefaultState().getMaterial() != Material.AIR)
                  {
                      SoundType soundtype = block.getSoundType();
+ 
+                     if (Reflector.ForgeBlock_getSoundType.exists())
+                     {
+                         soundtype = (SoundType)Reflector.call(block, Reflector.ForgeBlock_getSoundType, Block.getStateById(data), this.theWorld, blockPosIn, null);
+                     }
+ 
                      this.theWorld.playSound(blockPosIn, soundtype.getBreakSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F, false);
                  }
  
***************
*** 2495,2505 ****
              case 2007:
                  double d6 = (double)blockPosIn.getX();
                  double d7 = (double)blockPosIn.getY();
!                 double d9 = (double)blockPosIn.getZ();
  
!                 for (int i1 = 0; i1 < 8; ++i1)
                  {
!                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d6, d7, d9, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, Item.getIdFromItem(Items.SPLASH_POTION));
                  }
  
                  float f5 = (float)(data >> 16 & 255) / 255.0F;
--- 3330,3340 ----
              case 2007:
                  double d6 = (double)blockPosIn.getX();
                  double d7 = (double)blockPosIn.getY();
!                 double d8 = (double)blockPosIn.getZ();
  
!                 for (int i2 = 0; i2 < 8; ++i2)
                  {
!                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d6, d7, d8, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, Item.getIdFromItem(Items.SPLASH_POTION));
                  }
  
                  float f5 = (float)(data >> 16 & 255) / 255.0F;
***************
*** 2507,2526 ****
                  float f1 = (float)(data >> 0 & 255) / 255.0F;
                  EnumParticleTypes enumparticletypes = type == 2007 ? EnumParticleTypes.SPELL_INSTANT : EnumParticleTypes.SPELL;
  
!                 for (int l1 = 0; l1 < 100; ++l1)
                  {
!                     double d15 = random.nextDouble() * 4.0D;
!                     double d18 = random.nextDouble() * Math.PI * 2.0D;
!                     double d21 = Math.cos(d18) * d15;
!                     double d23 = 0.01D + random.nextDouble() * 0.5D;
!                     double d25 = Math.sin(d18) * d15;
!                     Particle particle1 = this.spawnEntityFX(enumparticletypes.getParticleID(), enumparticletypes.getShouldIgnoreRange(), d6 + d21 * 0.1D, d7 + 0.3D, d9 + d25 * 0.1D, d21, d23, d25);
  
                      if (particle1 != null)
                      {
                          float f4 = 0.75F + random.nextFloat() * 0.25F;
                          particle1.setRBGColorF(f5 * f4, f * f4, f1 * f4);
!                         particle1.multiplyVelocity((float)d15);
                      }
                  }
  
--- 3342,3361 ----
                  float f1 = (float)(data >> 0 & 255) / 255.0F;
                  EnumParticleTypes enumparticletypes = type == 2007 ? EnumParticleTypes.SPELL_INSTANT : EnumParticleTypes.SPELL;
  
!                 for (int l2 = 0; l2 < 100; ++l2)
                  {
!                     double d10 = random.nextDouble() * 4.0D;
!                     double d12 = random.nextDouble() * Math.PI * 2.0D;
!                     double d14 = Math.cos(d12) * d10;
!                     double d27 = 0.01D + random.nextDouble() * 0.5D;
!                     double d29 = Math.sin(d12) * d10;
!                     Particle particle1 = this.spawnEntityFX(enumparticletypes.getParticleID(), enumparticletypes.getShouldIgnoreRange(), d6 + d14 * 0.1D, d7 + 0.3D, d8 + d29 * 0.1D, d14, d27, d29);
  
                      if (particle1 != null)
                      {
                          float f4 = 0.75F + random.nextFloat() * 0.25F;
                          particle1.setRBGColorF(f5 * f4, f * f4, f1 * f4);
!                         particle1.multiplyVelocity((float)d10);
                      }
                  }
  
***************
*** 2528,2558 ****
                  break;
  
              case 2003:
!                 double d0 = (double)blockPosIn.getX() + 0.5D;
!                 double d1 = (double)blockPosIn.getY();
!                 double d2 = (double)blockPosIn.getZ() + 0.5D;
  
!                 for (int j = 0; j < 8; ++j)
                  {
!                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d0, d1, d2, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, Item.getIdFromItem(Items.ENDER_EYE));
                  }
  
!                 for (double d11 = 0.0D; d11 < (Math.PI * 2D); d11 += 0.15707963267948966D)
                  {
!                     this.spawnParticle(EnumParticleTypes.PORTAL, d0 + Math.cos(d11) * 5.0D, d1 - 0.4D, d2 + Math.sin(d11) * 5.0D, Math.cos(d11) * -5.0D, 0.0D, Math.sin(d11) * -5.0D);
!                     this.spawnParticle(EnumParticleTypes.PORTAL, d0 + Math.cos(d11) * 5.0D, d1 - 0.4D, d2 + Math.sin(d11) * 5.0D, Math.cos(d11) * -7.0D, 0.0D, Math.sin(d11) * -7.0D);
                  }
  
                  return;
  
              case 2004:
!                 for (int k1 = 0; k1 < 20; ++k1)
                  {
!                     double d14 = (double)blockPosIn.getX() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     double d17 = (double)blockPosIn.getY() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     double d20 = (double)blockPosIn.getZ() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     this.theWorld.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d14, d17, d20, 0.0D, 0.0D, 0.0D, new int[0]);
!                     this.theWorld.spawnParticle(EnumParticleTypes.FLAME, d14, d17, d20, 0.0D, 0.0D, 0.0D, new int[0]);
                  }
  
                  return;
--- 3363,3393 ----
                  break;
  
              case 2003:
!                 double d9 = (double)blockPosIn.getX() + 0.5D;
!                 double d11 = (double)blockPosIn.getY();
!                 double d13 = (double)blockPosIn.getZ() + 0.5D;
  
!                 for (int j3 = 0; j3 < 8; ++j3)
                  {
!                     this.spawnParticle(EnumParticleTypes.ITEM_CRACK, d9, d11, d13, random.nextGaussian() * 0.15D, random.nextDouble() * 0.2D, random.nextGaussian() * 0.15D, Item.getIdFromItem(Items.ENDER_EYE));
                  }
  
!                 for (double d25 = 0.0D; d25 < (Math.PI * 2D); d25 += 0.15707963267948966D)
                  {
!                     this.spawnParticle(EnumParticleTypes.PORTAL, d9 + Math.cos(d25) * 5.0D, d11 - 0.4D, d13 + Math.sin(d25) * 5.0D, Math.cos(d25) * -5.0D, 0.0D, Math.sin(d25) * -5.0D);
!                     this.spawnParticle(EnumParticleTypes.PORTAL, d9 + Math.cos(d25) * 5.0D, d11 - 0.4D, d13 + Math.sin(d25) * 5.0D, Math.cos(d25) * -7.0D, 0.0D, Math.sin(d25) * -7.0D);
                  }
  
                  return;
  
              case 2004:
!                 for (int i3 = 0; i3 < 20; ++i3)
                  {
!                     double d26 = (double)blockPosIn.getX() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     double d28 = (double)blockPosIn.getY() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     double d30 = (double)blockPosIn.getZ() + 0.5D + ((double)this.theWorld.rand.nextFloat() - 0.5D) * 2.0D;
!                     this.theWorld.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d26, d28, d30, 0.0D, 0.0D, 0.0D, new int[0]);
!                     this.theWorld.spawnParticle(EnumParticleTypes.FLAME, d26, d28, d30, 0.0D, 0.0D, 0.0D, new int[0]);
                  }
  
                  return;
***************
*** 2562,2575 ****
                  break;
  
              case 2006:
!                 for (int k = 0; k < 200; ++k)
                  {
                      float f2 = random.nextFloat() * 4.0F;
                      float f3 = random.nextFloat() * ((float)Math.PI * 2F);
!                     double d3 = (double)(MathHelper.cos(f3) * f2);
!                     double d4 = 0.01D + random.nextDouble() * 0.5D;
!                     double d5 = (double)(MathHelper.sin(f3) * f2);
!                     Particle particle = this.spawnEntityFX(EnumParticleTypes.DRAGON_BREATH.getParticleID(), false, (double)blockPosIn.getX() + d3 * 0.1D, (double)blockPosIn.getY() + 0.3D, (double)blockPosIn.getZ() + d5 * 0.1D, d3, d4, d5);
  
                      if (particle != null)
                      {
--- 3397,3410 ----
                  break;
  
              case 2006:
!                 for (int j2 = 0; j2 < 200; ++j2)
                  {
                      float f2 = random.nextFloat() * 4.0F;
                      float f3 = random.nextFloat() * ((float)Math.PI * 2F);
!                     double d15 = (double)(MathHelper.cos(f3) * f2);
!                     double d16 = 0.01D + random.nextDouble() * 0.5D;
!                     double d17 = (double)(MathHelper.sin(f3) * f2);
!                     Particle particle = this.spawnEntityFX(EnumParticleTypes.DRAGON_BREATH.getParticleID(), false, (double)blockPosIn.getX() + d15 * 0.1D, (double)blockPosIn.getY() + 0.3D, (double)blockPosIn.getZ() + d17 * 0.1D, d15, d16, d17);
  
                      if (particle != null)
                      {
***************
*** 2621,2626 ****
--- 3456,3528 ----
          this.displayListEntitiesDirty = true;
      }
  
+     public void resetClouds()
+     {
+         this.cloudRenderer.reset();
+     }
+ 
+     public int getCountRenderers()
+     {
+         return this.viewFrustum.renderChunks.length;
+     }
+ 
+     public int getCountActiveRenderers()
+     {
+         return this.renderInfos.size();
+     }
+ 
+     public int getCountEntitiesRendered()
+     {
+         return this.countEntitiesRendered;
+     }
+ 
+     public int getCountTileEntitiesRendered()
+     {
+         return this.countTileEntitiesRendered;
+     }
+ 
+     public int getCountLoadedChunks()
+     {
+         if (this.theWorld == null)
+         {
+             return 0;
+         }
+         else
+         {
+             IChunkProvider ichunkprovider = this.theWorld.getChunkProvider();
+ 
+             if (ichunkprovider == null)
+             {
+                 return 0;
+             }
+             else
+             {
+                 if (ichunkprovider != this.worldChunkProvider)
+                 {
+                     this.worldChunkProvider = ichunkprovider;
+                     this.worldChunkProviderMap = (Long2ObjectMap)Reflector.getFieldValue(ichunkprovider, Reflector.ChunkProviderClient_chunkMapping);
+                 }
+ 
+                 return this.worldChunkProviderMap == null ? 0 : this.worldChunkProviderMap.size();
+             }
+         }
+     }
+ 
+     public int getCountChunksToUpdate()
+     {
+         return this.chunksToUpdate.size();
+     }
+ 
+     public RenderChunk getRenderChunk(BlockPos p_getRenderChunk_1_)
+     {
+         return this.viewFrustum.getRenderChunk(p_getRenderChunk_1_);
+     }
+ 
+     public WorldClient getWorld()
+     {
+         return this.theWorld;
+     }
+ 
      public void updateTileEntities(Collection<TileEntity> tileEntitiesToRemove, Collection<TileEntity> tileEntitiesToAdd)
      {
          synchronized (this.setTileEntities)
***************
*** 2630,2657 ****
          }
      }
  
!     class ContainerLocalRenderInformation
      {
!         final RenderChunk renderChunk;
!         final EnumFacing facing;
!         byte setFacing;
!         final int counter;
! 
!         private ContainerLocalRenderInformation(RenderChunk renderChunkIn, EnumFacing facingIn, @Nullable int counterIn)
!         {
!             this.renderChunk = renderChunkIn;
!             this.facing = facingIn;
!             this.counter = counterIn;
          }
  
          public void setDirection(byte p_189561_1_, EnumFacing p_189561_2_)
          {
!             this.setFacing = (byte)(this.setFacing | p_189561_1_ | 1 << p_189561_2_.ordinal());
          }
  
          public boolean hasDirection(EnumFacing p_189560_1_)
          {
              return (this.setFacing & 1 << p_189560_1_.ordinal()) > 0;
          }
      }
  }
--- 3532,3592 ----
          }
      }
  
!     private RenderGlobal.ContainerLocalRenderInformation allocateRenderInformation(RenderChunk p_allocateRenderInformation_1_, EnumFacing p_allocateRenderInformation_2_, int p_allocateRenderInformation_3_)
!     {
!         RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1;
! 
!         if (renderInfoCache.isEmpty())
!         {
!             renderglobal$containerlocalrenderinformation1 = new RenderGlobal.ContainerLocalRenderInformation(p_allocateRenderInformation_1_, p_allocateRenderInformation_2_, p_allocateRenderInformation_3_);
!         }
!         else
!         {
!             renderglobal$containerlocalrenderinformation1 = renderInfoCache.pollLast();
!             renderglobal$containerlocalrenderinformation1.initialize(p_allocateRenderInformation_1_, p_allocateRenderInformation_2_, p_allocateRenderInformation_3_);
!         }
! 
!         renderglobal$containerlocalrenderinformation1.cacheable = true;
!         return renderglobal$containerlocalrenderinformation1;
!     }
! 
!     private void freeRenderInformation(RenderGlobal.ContainerLocalRenderInformation p_freeRenderInformation_1_)
      {
!         if (p_freeRenderInformation_1_.cacheable)
!         {
!             renderInfoCache.add(p_freeRenderInformation_1_);
!         }
!     }
! 
!     public static class ContainerLocalRenderInformation
!     {
!         RenderChunk renderChunk;
!         EnumFacing facing;
!         int setFacing;
!         boolean cacheable = false;
! 
!         public ContainerLocalRenderInformation(RenderChunk p_i1_1_, EnumFacing p_i1_2_, int p_i1_3_)
!         {
!             this.renderChunk = p_i1_1_;
!             this.facing = p_i1_2_;
!             this.setFacing = p_i1_3_;
          }
  
          public void setDirection(byte p_189561_1_, EnumFacing p_189561_2_)
          {
!             this.setFacing = this.setFacing | p_189561_1_ | 1 << p_189561_2_.ordinal();
          }
  
          public boolean hasDirection(EnumFacing p_189560_1_)
          {
              return (this.setFacing & 1 << p_189560_1_.ordinal()) > 0;
          }
+ 
+         private void initialize(RenderChunk p_initialize_1_, EnumFacing p_initialize_2_, int p_initialize_3_)
+         {
+             this.renderChunk = p_initialize_1_;
+             this.facing = p_initialize_2_;
+             this.setFacing = p_initialize_3_;
+         }
      }
  }
diff -rc ./client/renderer/RenderItem.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/RenderItem.java
*** ./client/renderer/RenderItem.java	2018-11-18 13:18:45.995458000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/RenderItem.java	2018-11-27 20:14:50.981821900 -0800
***************
*** 49,60 ****
--- 49,68 ----
  import net.minecraft.item.ItemFishFood;
  import net.minecraft.item.ItemStack;
  import net.minecraft.tileentity.TileEntityStructure;
+ import net.minecraft.util.BlockRenderLayer;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.util.math.Vec3i;
  import net.minecraft.world.World;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.CustomItems;
+ import optifine.Reflector;
+ import optifine.ReflectorForge;
+ import shadersmod.client.Shaders;
+ import shadersmod.client.ShadersRender;
  
  public class RenderItem implements IResourceManagerReloadListener
  {
***************
*** 68,78 ****
      private final ItemModelMesher itemModelMesher;
      private final TextureManager textureManager;
      private final ItemColors itemColors;
  
      public RenderItem(TextureManager p_i46552_1_, ModelManager p_i46552_2_, ItemColors p_i46552_3_)
      {
          this.textureManager = p_i46552_1_;
!         this.itemModelMesher = new ItemModelMesher(p_i46552_2_);
          this.registerItems();
          this.itemColors = p_i46552_3_;
      }
--- 76,99 ----
      private final ItemModelMesher itemModelMesher;
      private final TextureManager textureManager;
      private final ItemColors itemColors;
+     private ResourceLocation modelLocation = null;
+     private boolean renderItemGui = false;
+     public ModelManager modelManager = null;
  
      public RenderItem(TextureManager p_i46552_1_, ModelManager p_i46552_2_, ItemColors p_i46552_3_)
      {
          this.textureManager = p_i46552_1_;
!         this.modelManager = p_i46552_2_;
! 
!         if (Reflector.ItemModelMesherForge_Constructor.exists())
!         {
!             this.itemModelMesher = (ItemModelMesher)Reflector.newInstance(Reflector.ItemModelMesherForge_Constructor, p_i46552_2_);
!         }
!         else
!         {
!             this.itemModelMesher = new ItemModelMesher(p_i46552_2_);
!         }
! 
          this.registerItems();
          this.itemColors = p_i46552_3_;
      }
***************
*** 92,103 ****
          this.registerItem(Item.getItemFromBlock(blk), subType, identifier);
      }
  
!     private void registerBlock(Block blk, String identifier)
      {
          this.registerBlock(blk, 0, identifier);
      }
  
!     private void registerItem(Item itm, String identifier)
      {
          this.registerItem(itm, 0, identifier);
      }
--- 113,124 ----
          this.registerItem(Item.getItemFromBlock(blk), subType, identifier);
      }
  
!     public void registerBlock(Block blk, String identifier)
      {
          this.registerBlock(blk, 0, identifier);
      }
  
!     public void registerItem(Item itm, String identifier)
      {
          this.registerItem(itm, 0, identifier);
      }
***************
*** 107,113 ****
          this.func_191967_a(p_191961_1_, -1, p_191961_2_);
      }
  
!     private void func_191965_a(IBakedModel p_191965_1_, int p_191965_2_)
      {
          this.func_191967_a(p_191965_1_, p_191965_2_, ItemStack.field_190927_a);
      }
--- 128,134 ----
          this.func_191967_a(p_191961_1_, -1, p_191961_2_);
      }
  
!     public void func_191965_a(IBakedModel p_191965_1_, int p_191965_2_)
      {
          this.func_191967_a(p_191965_1_, p_191965_2_, ItemStack.field_190927_a);
      }
***************
*** 116,130 ****
      {
          Tessellator tessellator = Tessellator.getInstance();
          BufferBuilder bufferbuilder = tessellator.getBuffer();
          bufferbuilder.begin(7, DefaultVertexFormats.ITEM);
  
!         for (EnumFacing enumfacing : EnumFacing.values())
          {
              this.func_191970_a(bufferbuilder, p_191967_1_.getQuads((IBlockState)null, enumfacing, 0L), p_191967_2_, p_191967_3_);
          }
  
          this.func_191970_a(bufferbuilder, p_191967_1_.getQuads((IBlockState)null, (EnumFacing)null, 0L), p_191967_2_, p_191967_3_);
          tessellator.draw();
      }
  
      public void renderItem(ItemStack stack, IBakedModel model)
--- 137,165 ----
      {
          Tessellator tessellator = Tessellator.getInstance();
          BufferBuilder bufferbuilder = tessellator.getBuffer();
+         boolean flag = Minecraft.getMinecraft().getTextureMapBlocks().isTextureBound();
+         boolean flag1 = Config.isMultiTexture() && flag;
+ 
+         if (flag1)
+         {
+             bufferbuilder.setBlockLayer(BlockRenderLayer.SOLID);
+         }
+ 
          bufferbuilder.begin(7, DefaultVertexFormats.ITEM);
  
!         for (EnumFacing enumfacing : EnumFacing.VALUES)
          {
              this.func_191970_a(bufferbuilder, p_191967_1_.getQuads((IBlockState)null, enumfacing, 0L), p_191967_2_, p_191967_3_);
          }
  
          this.func_191970_a(bufferbuilder, p_191967_1_.getQuads((IBlockState)null, (EnumFacing)null, 0L), p_191967_2_, p_191967_3_);
          tessellator.draw();
+ 
+         if (flag1)
+         {
+             bufferbuilder.setBlockLayer((BlockRenderLayer)null);
+             GlStateManager.bindCurrentTexture();
+         }
      }
  
      public void renderItem(ItemStack stack, IBakedModel model)
***************
*** 142,150 ****
              }
              else
              {
                  this.func_191961_a(model, stack);
  
!                 if (stack.hasEffect())
                  {
                      this.func_191966_a(model);
                  }
--- 177,191 ----
              }
              else
              {
+                 if (Config.isCustomItems())
+                 {
+                     model = CustomItems.getCustomItemModel(stack, model, this.modelLocation, false);
+                     this.modelLocation = null;
+                 }
+ 
                  this.func_191961_a(model, stack);
  
!                 if (stack.hasEffect() && (!Config.isCustomItems() || !CustomItems.renderCustomEffect(this, stack, model)))
                  {
                      this.func_191966_a(model);
                  }
***************
*** 156,187 ****
  
      private void func_191966_a(IBakedModel p_191966_1_)
      {
!         GlStateManager.depthMask(false);
!         GlStateManager.depthFunc(514);
!         GlStateManager.disableLighting();
!         GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_COLOR, GlStateManager.DestFactor.ONE);
!         this.textureManager.bindTexture(RES_ITEM_GLINT);
!         GlStateManager.matrixMode(5890);
!         GlStateManager.pushMatrix();
!         GlStateManager.scale(8.0F, 8.0F, 8.0F);
!         float f = (float)(Minecraft.getSystemTime() % 3000L) / 3000.0F / 8.0F;
!         GlStateManager.translate(f, 0.0F, 0.0F);
!         GlStateManager.rotate(-50.0F, 0.0F, 0.0F, 1.0F);
!         this.func_191965_a(p_191966_1_, -8372020);
!         GlStateManager.popMatrix();
!         GlStateManager.pushMatrix();
!         GlStateManager.scale(8.0F, 8.0F, 8.0F);
!         float f1 = (float)(Minecraft.getSystemTime() % 4873L) / 4873.0F / 8.0F;
!         GlStateManager.translate(-f1, 0.0F, 0.0F);
!         GlStateManager.rotate(10.0F, 0.0F, 0.0F, 1.0F);
!         this.func_191965_a(p_191966_1_, -8372020);
!         GlStateManager.popMatrix();
!         GlStateManager.matrixMode(5888);
!         GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
!         GlStateManager.enableLighting();
!         GlStateManager.depthFunc(515);
!         GlStateManager.depthMask(true);
!         this.textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
      }
  
      private void putQuadNormal(BufferBuilder renderer, BakedQuad quad)
--- 197,245 ----
  
      private void func_191966_a(IBakedModel p_191966_1_)
      {
!         if (!Config.isCustomItems() || CustomItems.isUseGlint())
!         {
!             if (!Config.isShaders() || !Shaders.isShadowPass)
!             {
!                 GlStateManager.depthMask(false);
!                 GlStateManager.depthFunc(514);
!                 GlStateManager.disableLighting();
!                 GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_COLOR, GlStateManager.DestFactor.ONE);
!                 this.textureManager.bindTexture(RES_ITEM_GLINT);
! 
!                 if (Config.isShaders() && !this.renderItemGui)
!                 {
!                     ShadersRender.renderEnchantedGlintBegin();
!                 }
! 
!                 GlStateManager.matrixMode(5890);
!                 GlStateManager.pushMatrix();
!                 GlStateManager.scale(8.0F, 8.0F, 8.0F);
!                 float f = (float)(Minecraft.getSystemTime() % 3000L) / 3000.0F / 8.0F;
!                 GlStateManager.translate(f, 0.0F, 0.0F);
!                 GlStateManager.rotate(-50.0F, 0.0F, 0.0F, 1.0F);
!                 this.func_191965_a(p_191966_1_, -8372020);
!                 GlStateManager.popMatrix();
!                 GlStateManager.pushMatrix();
!                 GlStateManager.scale(8.0F, 8.0F, 8.0F);
!                 float f1 = (float)(Minecraft.getSystemTime() % 4873L) / 4873.0F / 8.0F;
!                 GlStateManager.translate(-f1, 0.0F, 0.0F);
!                 GlStateManager.rotate(10.0F, 0.0F, 0.0F, 1.0F);
!                 this.func_191965_a(p_191966_1_, -8372020);
!                 GlStateManager.popMatrix();
!                 GlStateManager.matrixMode(5888);
!                 GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
!                 GlStateManager.enableLighting();
!                 GlStateManager.depthFunc(515);
!                 GlStateManager.depthMask(true);
!                 this.textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
! 
!                 if (Config.isShaders() && !this.renderItemGui)
!                 {
!                     ShadersRender.renderEnchantedGlintEnd();
!                 }
!             }
!         }
      }
  
      private void putQuadNormal(BufferBuilder renderer, BakedQuad quad)
***************
*** 192,199 ****
  
      private void func_191969_a(BufferBuilder p_191969_1_, BakedQuad p_191969_2_, int p_191969_3_)
      {
!         p_191969_1_.addVertexData(p_191969_2_.getVertexData());
!         p_191969_1_.putColor4(p_191969_3_);
          this.putQuadNormal(p_191969_1_, p_191969_2_);
      }
  
--- 250,274 ----
  
      private void func_191969_a(BufferBuilder p_191969_1_, BakedQuad p_191969_2_, int p_191969_3_)
      {
!         if (p_191969_1_.isMultiTexture())
!         {
!             p_191969_1_.addVertexData(p_191969_2_.getVertexDataSingle());
!             p_191969_1_.putSprite(p_191969_2_.getSprite());
!         }
!         else
!         {
!             p_191969_1_.addVertexData(p_191969_2_.getVertexData());
!         }
! 
!         if (Reflector.ForgeHooksClient_putQuadColor.exists())
!         {
!             Reflector.call(Reflector.ForgeHooksClient_putQuadColor, p_191969_1_, p_191969_2_, p_191969_3_);
!         }
!         else
!         {
!             p_191969_1_.putColor4(p_191969_3_);
!         }
! 
          this.putQuadNormal(p_191969_1_, p_191969_2_);
      }
  
***************
*** 211,216 ****
--- 286,296 ----
              {
                  k = this.itemColors.getColorFromItemstack(p_191970_4_, bakedquad.getTintIndex());
  
+                 if (Config.isCustomColors())
+                 {
+                     k = CustomColors.getColorFromItemStack(p_191970_4_, bakedquad.getTintIndex(), k);
+                 }
+ 
                  if (EntityRenderer.anaglyphEnable)
                  {
                      k = TextureUtil.anaglyphColor(k);
***************
*** 243,249 ****
          IBakedModel ibakedmodel = this.itemModelMesher.getItemModel(stack);
          Item item = stack.getItem();
  
!         if (item != null && item.hasCustomProperties())
          {
              ResourceLocation resourcelocation = ibakedmodel.getOverrides().applyOverride(stack, worldIn, entitylivingbaseIn);
              return resourcelocation == null ? ibakedmodel : this.itemModelMesher.getModelManager().getModel(new ModelResourceLocation(resourcelocation, "inventory"));
--- 323,348 ----
          IBakedModel ibakedmodel = this.itemModelMesher.getItemModel(stack);
          Item item = stack.getItem();
  
!         if (Config.isCustomItems())
!         {
!             if (item != null && item.hasCustomProperties())
!             {
!                 this.modelLocation = ibakedmodel.getOverrides().applyOverride(stack, worldIn, entitylivingbaseIn);
!             }
! 
!             IBakedModel ibakedmodel1 = CustomItems.getCustomItemModel(stack, ibakedmodel, this.modelLocation, true);
! 
!             if (ibakedmodel1 != ibakedmodel)
!             {
!                 return ibakedmodel1;
!             }
!         }
! 
!         if (Reflector.ForgeItemOverrideList_handleItemState.exists())
!         {
!             return (IBakedModel)Reflector.call(ibakedmodel.getOverrides(), Reflector.ForgeItemOverrideList_handleItemState, ibakedmodel, stack, worldIn, entitylivingbaseIn);
!         }
!         else if (item != null && item.hasCustomProperties())
          {
              ResourceLocation resourcelocation = ibakedmodel.getOverrides().applyOverride(stack, worldIn, entitylivingbaseIn);
              return resourcelocation == null ? ibakedmodel : this.itemModelMesher.getModelManager().getModel(new ModelResourceLocation(resourcelocation, "inventory"));
***************
*** 275,289 ****
              GlStateManager.enableBlend();
              GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              GlStateManager.pushMatrix();
-             ItemCameraTransforms itemcameratransforms = bakedmodel.getItemCameraTransforms();
-             ItemCameraTransforms.applyTransformSide(itemcameratransforms.getTransform(transform), leftHanded);
  
!             if (this.isThereOneNegativeScale(itemcameratransforms.getTransform(transform)))
              {
!                 GlStateManager.cullFace(GlStateManager.CullFace.FRONT);
              }
  
              this.renderItem(stack, bakedmodel);
              GlStateManager.cullFace(GlStateManager.CullFace.BACK);
              GlStateManager.popMatrix();
              GlStateManager.disableRescaleNormal();
--- 374,398 ----
              GlStateManager.enableBlend();
              GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
              GlStateManager.pushMatrix();
  
!             if (Reflector.ForgeHooksClient_handleCameraTransforms.exists())
              {
!                 bakedmodel = (IBakedModel)Reflector.call(Reflector.ForgeHooksClient_handleCameraTransforms, bakedmodel, transform, leftHanded);
              }
+             else
+             {
+                 ItemCameraTransforms itemcameratransforms = bakedmodel.getItemCameraTransforms();
+                 ItemCameraTransforms.applyTransformSide(itemcameratransforms.getTransform(transform), leftHanded);
  
+                 if (this.isThereOneNegativeScale(itemcameratransforms.getTransform(transform)))
+                 {
+                     GlStateManager.cullFace(GlStateManager.CullFace.FRONT);
+                 }
+             }
+ 
+             CustomItems.setRenderOffHand(leftHanded);
              this.renderItem(stack, bakedmodel);
+             CustomItems.setRenderOffHand(false);
              GlStateManager.cullFace(GlStateManager.CullFace.BACK);
              GlStateManager.popMatrix();
              GlStateManager.disableRescaleNormal();
***************
*** 308,313 ****
--- 417,423 ----
  
      protected void func_191962_a(ItemStack p_191962_1_, int p_191962_2_, int p_191962_3_, IBakedModel p_191962_4_)
      {
+         this.renderItemGui = true;
          GlStateManager.pushMatrix();
          this.textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
          this.textureManager.getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).setBlurMipmap(false, false);
***************
*** 318,324 ****
          GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          this.setupGuiTransform(p_191962_2_, p_191962_3_, p_191962_4_.isGui3d());
!         p_191962_4_.getItemCameraTransforms().applyTransform(ItemCameraTransforms.TransformType.GUI);
          this.renderItem(p_191962_1_, p_191962_4_);
          GlStateManager.disableAlpha();
          GlStateManager.disableRescaleNormal();
--- 428,443 ----
          GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
          GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
          this.setupGuiTransform(p_191962_2_, p_191962_3_, p_191962_4_.isGui3d());
! 
!         if (Reflector.ForgeHooksClient_handleCameraTransforms.exists())
!         {
!             p_191962_4_ = (IBakedModel)Reflector.call(Reflector.ForgeHooksClient_handleCameraTransforms, p_191962_4_, ItemCameraTransforms.TransformType.GUI, false);
!         }
!         else
!         {
!             p_191962_4_.getItemCameraTransforms().applyTransform(ItemCameraTransforms.TransformType.GUI);
!         }
! 
          this.renderItem(p_191962_1_, p_191962_4_);
          GlStateManager.disableAlpha();
          GlStateManager.disableRescaleNormal();
***************
*** 326,331 ****
--- 445,451 ----
          GlStateManager.popMatrix();
          this.textureManager.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
          this.textureManager.getTexture(TextureMap.LOCATION_BLOCKS_TEXTURE).restoreLastBlurMipmap();
+         this.renderItemGui = false;
      }
  
      private void setupGuiTransform(int xPosition, int yPosition, boolean isGui3d)
***************
*** 411,428 ****
      {
          if (!stack.func_190926_b())
          {
!             if (stack.func_190916_E() != 1 || text != null)
              {
!                 String s = text == null ? String.valueOf(stack.func_190916_E()) : text;
                  GlStateManager.disableLighting();
                  GlStateManager.disableDepth();
                  GlStateManager.disableBlend();
                  fr.drawStringWithShadow(s, (float)(xPosition + 19 - 2 - fr.getStringWidth(s)), (float)(yPosition + 6 + 3), 16777215);
                  GlStateManager.enableLighting();
                  GlStateManager.enableDepth();
              }
  
!             if (stack.isItemDamaged())
              {
                  GlStateManager.disableLighting();
                  GlStateManager.disableDepth();
--- 531,549 ----
      {
          if (!stack.func_190926_b())
          {
!             if (stack.getCount() != 1 || text != null)
              {
!                 String s = text == null ? String.valueOf(stack.getCount()) : text;
                  GlStateManager.disableLighting();
                  GlStateManager.disableDepth();
                  GlStateManager.disableBlend();
                  fr.drawStringWithShadow(s, (float)(xPosition + 19 - 2 - fr.getStringWidth(s)), (float)(yPosition + 6 + 3), 16777215);
                  GlStateManager.enableLighting();
                  GlStateManager.enableDepth();
+                 GlStateManager.enableBlend();
              }
  
!             if (ReflectorForge.isItemDamaged(stack))
              {
                  GlStateManager.disableLighting();
                  GlStateManager.disableDepth();
***************
*** 436,441 ****
--- 557,589 ----
                  float f2 = Math.max(0.0F, (f1 - f) / f1);
                  int i = Math.round(13.0F - f * 13.0F / f1);
                  int j = MathHelper.hsvToRGB(f2 / 3.0F, 1.0F, 1.0F);
+ 
+                 if (Reflector.ForgeItem_getDurabilityForDisplay.exists() && Reflector.ForgeItem_getRGBDurabilityForDisplay.exists())
+                 {
+                     double d0 = Reflector.callDouble(stack.getItem(), Reflector.ForgeItem_getDurabilityForDisplay, stack);
+                     int k = Reflector.callInt(stack.getItem(), Reflector.ForgeItem_getRGBDurabilityForDisplay, stack);
+                     i = Math.round(13.0F - (float)d0 * 13.0F);
+                     j = k;
+                 }
+ 
+                 if (Config.isCustomColors())
+                 {
+                     j = CustomColors.getDurabilityColor(f2, j);
+                 }
+ 
+                 if (Reflector.ForgeItem_getDurabilityForDisplay.exists() && Reflector.ForgeItem_getRGBDurabilityForDisplay.exists())
+                 {
+                     double d1 = Reflector.callDouble(stack.getItem(), Reflector.ForgeItem_getDurabilityForDisplay, stack);
+                     int l = Reflector.callInt(stack.getItem(), Reflector.ForgeItem_getRGBDurabilityForDisplay, stack);
+                     i = Math.round(13.0F - (float)d1 * 13.0F);
+                     j = l;
+                 }
+ 
+                 if (Config.isCustomColors())
+                 {
+                     j = CustomColors.getDurabilityColor(f2, j);
+                 }
+ 
                  this.draw(bufferbuilder, xPosition + 2, yPosition + 13, 13, 2, 0, 0, 0, 255);
                  this.draw(bufferbuilder, xPosition + 2, yPosition + 13, i, 1, j >> 16 & 255, j >> 8 & 255, j & 255, 255);
                  GlStateManager.enableBlend();
***************
*** 1109,1114 ****
--- 1257,1267 ----
          this.registerBlock(Blocks.STRUCTURE_BLOCK, TileEntityStructure.Mode.LOAD.getModeId(), "structure_block");
          this.registerBlock(Blocks.STRUCTURE_BLOCK, TileEntityStructure.Mode.CORNER.getModeId(), "structure_block");
          this.registerBlock(Blocks.STRUCTURE_BLOCK, TileEntityStructure.Mode.DATA.getModeId(), "structure_block");
+ 
+         if (Reflector.ModelLoader_onRegisterItems.exists())
+         {
+             Reflector.call(Reflector.ModelLoader_onRegisterItems, this.itemModelMesher);
+         }
      }
  
      public void onResourceManagerReload(IResourceManager resourceManager)
diff -rc ./client/renderer/RenderList.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/RenderList.java
*** ./client/renderer/RenderList.java	2018-11-18 13:18:46.008461000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/RenderList.java	2017-10-20 21:35:40.783954300 -0700
***************
*** 3,8 ****
--- 3,9 ----
  import net.minecraft.client.renderer.chunk.ListedRenderChunk;
  import net.minecraft.client.renderer.chunk.RenderChunk;
  import net.minecraft.util.BlockRenderLayer;
+ import optifine.Config;
  
  public class RenderList extends ChunkRenderContainer
  {
***************
*** 10,15 ****
--- 11,21 ----
      {
          if (this.initialized)
          {
+             if (this.renderChunks.size() == 0)
+             {
+                 return;
+             }
+ 
              for (RenderChunk renderchunk : this.renderChunks)
              {
                  ListedRenderChunk listedrenderchunk = (ListedRenderChunk)renderchunk;
***************
*** 19,24 ****
--- 25,35 ----
                  GlStateManager.popMatrix();
              }
  
+             if (Config.isMultiTexture())
+             {
+                 GlStateManager.bindCurrentTexture();
+             }
+ 
              GlStateManager.resetColor();
              this.renderChunks.clear();
          }
diff -rc ./client/renderer/texture/AbstractTexture.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/AbstractTexture.java
*** ./client/renderer/texture/AbstractTexture.java	2018-11-18 13:18:48.760483000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/AbstractTexture.java	2017-10-20 21:01:22.213549000 -0700
***************
*** 1,6 ****
--- 1,8 ----
  package net.minecraft.client.renderer.texture;
  
  import net.minecraft.client.renderer.GlStateManager;
+ import shadersmod.client.MultiTexID;
+ import shadersmod.client.ShadersTex;
  
  public abstract class AbstractTexture implements ITextureObject
  {
***************
*** 9,14 ****
--- 11,17 ----
      protected boolean mipmap;
      protected boolean blurLast;
      protected boolean mipmapLast;
+     public MultiTexID multiTex;
  
      public void setBlurMipmapDirect(boolean blurIn, boolean mipmapIn)
      {
***************
*** 28,33 ****
--- 31,37 ----
              j = 9728;
          }
  
+         GlStateManager.bindTexture(this.getGlTextureId());
          GlStateManager.glTexParameteri(3553, 10241, i);
          GlStateManager.glTexParameteri(3553, 10240, j);
      }
***************
*** 56,65 ****
--- 60,76 ----
  
      public void deleteGlTexture()
      {
+         ShadersTex.deleteTextures(this, this.glTextureId);
+ 
          if (this.glTextureId != -1)
          {
              TextureUtil.deleteTexture(this.glTextureId);
              this.glTextureId = -1;
          }
      }
+ 
+     public MultiTexID getMultiTexID()
+     {
+         return ShadersTex.getMultiTexID(this);
+     }
  }
diff -rc ./client/renderer/texture/DynamicTexture.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/DynamicTexture.java
*** ./client/renderer/texture/DynamicTexture.java	2018-11-18 13:18:48.774476000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/DynamicTexture.java	2017-10-20 21:35:39.980784400 -0700
***************
*** 3,8 ****
--- 3,10 ----
  import java.awt.image.BufferedImage;
  import java.io.IOException;
  import net.minecraft.client.resources.IResourceManager;
+ import optifine.Config;
+ import shadersmod.client.ShadersTex;
  
  public class DynamicTexture extends AbstractTexture
  {
***************
*** 13,18 ****
--- 15,21 ----
  
      /** height of this icon in pixels */
      private final int height;
+     private boolean shadersInitialized;
  
      public DynamicTexture(BufferedImage bufferedImage)
      {
***************
*** 23,32 ****
  
      public DynamicTexture(int textureWidth, int textureHeight)
      {
          this.width = textureWidth;
          this.height = textureHeight;
!         this.dynamicTextureData = new int[textureWidth * textureHeight];
!         TextureUtil.allocateTexture(this.getGlTextureId(), textureWidth, textureHeight);
      }
  
      public void loadTexture(IResourceManager resourceManager) throws IOException
--- 26,45 ----
  
      public DynamicTexture(int textureWidth, int textureHeight)
      {
+         this.shadersInitialized = false;
          this.width = textureWidth;
          this.height = textureHeight;
!         this.dynamicTextureData = new int[textureWidth * textureHeight * 3];
! 
!         if (Config.isShaders())
!         {
!             ShadersTex.initDynamicTexture(this.getGlTextureId(), textureWidth, textureHeight, this);
!             this.shadersInitialized = true;
!         }
!         else
!         {
!             TextureUtil.allocateTexture(this.getGlTextureId(), textureWidth, textureHeight);
!         }
      }
  
      public void loadTexture(IResourceManager resourceManager) throws IOException
***************
*** 35,41 ****
  
      public void updateDynamicTexture()
      {
!         TextureUtil.uploadTexture(this.getGlTextureId(), this.dynamicTextureData, this.width, this.height);
      }
  
      public int[] getTextureData()
--- 48,67 ----
  
      public void updateDynamicTexture()
      {
!         if (Config.isShaders())
!         {
!             if (!this.shadersInitialized)
!             {
!                 ShadersTex.initDynamicTexture(this.getGlTextureId(), this.width, this.height, this);
!                 this.shadersInitialized = true;
!             }
! 
!             ShadersTex.updateDynamicTexture(this.getGlTextureId(), this.dynamicTextureData, this.width, this.height, this);
!         }
!         else
!         {
!             TextureUtil.uploadTexture(this.getGlTextureId(), this.dynamicTextureData, this.width, this.height);
!         }
      }
  
      public int[] getTextureData()
diff -rc ./client/renderer/texture/ITextureObject.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/ITextureObject.java
*** ./client/renderer/texture/ITextureObject.java	2018-11-18 13:18:48.796463000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/ITextureObject.java	2017-10-20 21:01:22.236050000 -0700
***************
*** 2,7 ****
--- 2,8 ----
  
  import java.io.IOException;
  import net.minecraft.client.resources.IResourceManager;
+ import shadersmod.client.MultiTexID;
  
  public interface ITextureObject
  {
***************
*** 12,15 ****
--- 13,18 ----
      void loadTexture(IResourceManager resourceManager) throws IOException;
  
      int getGlTextureId();
+ 
+     MultiTexID getMultiTexID();
  }
diff -rc ./client/renderer/texture/SimpleTexture.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/SimpleTexture.java
*** ./client/renderer/texture/SimpleTexture.java	2018-11-18 13:18:48.878416000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/SimpleTexture.java	2017-10-20 21:35:40.967454500 -0700
***************
*** 7,15 ****
--- 7,18 ----
  import net.minecraft.client.resources.IResourceManager;
  import net.minecraft.client.resources.data.TextureMetadataSection;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ 
  import org.apache.commons.io.IOUtils;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import shadersmod.client.ShadersTex;
  
  public class SimpleTexture extends AbstractTexture
  {
***************
*** 45,57 ****
                          flag1 = texturemetadatasection.getTextureClamp();
                      }
                  }
!                 catch (RuntimeException runtimeexception)
                  {
!                     LOG.warn("Failed reading metadata of: {}", this.textureLocation, runtimeexception);
                  }
              }
  
!             TextureUtil.uploadTextureImageAllocate(this.getGlTextureId(), bufferedimage, flag, flag1);
          }
          finally
          {
--- 48,67 ----
                          flag1 = texturemetadatasection.getTextureClamp();
                      }
                  }
!                 catch (RuntimeException runtimeexception1)
                  {
!                     LOG.warn("Failed reading metadata of: {}", this.textureLocation, runtimeexception1);
                  }
              }
  
!             if (Config.isShaders())
!             {
!                 ShadersTex.loadSimpleTexture(this.getGlTextureId(), bufferedimage, flag, flag1, resourceManager, this.textureLocation, this.getMultiTexID());
!             }
!             else
!             {
!                 TextureUtil.uploadTextureImageAllocate(this.getGlTextureId(), bufferedimage, flag, flag1);
!             }
          }
          finally
          {
diff -rc ./client/renderer/texture/Stitcher.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/Stitcher.java
*** ./client/renderer/texture/Stitcher.java	2018-11-18 13:18:48.892407000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/Stitcher.java	2017-10-20 21:35:40.982954500 -0700
***************
*** 7,12 ****
--- 7,13 ----
  import java.util.Set;
  import net.minecraft.client.renderer.StitcherException;
  import net.minecraft.util.math.MathHelper;
+ import optifine.MathUtils;
  
  public class Stitcher
  {
***************
*** 54,66 ****
      public void doStitch()
      {
          Stitcher.Holder[] astitcher$holder = (Stitcher.Holder[])this.setStitchHolders.toArray(new Stitcher.Holder[this.setStitchHolders.size()]);
!         Arrays.sort((Object[])astitcher$holder);
  
          for (Stitcher.Holder stitcher$holder : astitcher$holder)
          {
              if (!this.allocateSlot(stitcher$holder))
              {
!                 String s = String.format("Unable to fit: %s - size: %dx%d - Maybe try a lowerresolution resourcepack?", stitcher$holder.getAtlasSprite().getIconName(), stitcher$holder.getAtlasSprite().getIconWidth(), stitcher$holder.getAtlasSprite().getIconHeight());
                  throw new StitcherException(stitcher$holder, s);
              }
          }
--- 55,67 ----
      public void doStitch()
      {
          Stitcher.Holder[] astitcher$holder = (Stitcher.Holder[])this.setStitchHolders.toArray(new Stitcher.Holder[this.setStitchHolders.size()]);
!         Arrays.sort(astitcher$holder);
  
          for (Stitcher.Holder stitcher$holder : astitcher$holder)
          {
              if (!this.allocateSlot(stitcher$holder))
              {
!                 String s = String.format("Unable to fit: %s, size: %dx%d, atlas: %dx%d, atlasMax: %dx%d - Maybe try a lower resolution resourcepack?", stitcher$holder.getAtlasSprite().getIconName(), stitcher$holder.getAtlasSprite().getIconWidth(), stitcher$holder.getAtlasSprite().getIconHeight(), this.currentWidth, this.currentHeight, this.maxWidth, this.maxHeight);
                  throw new StitcherException(stitcher$holder, s);
              }
          }
***************
*** 138,168 ****
          int l = MathHelper.smallestEncompassingPowerOfTwo(this.currentHeight);
          int i1 = MathHelper.smallestEncompassingPowerOfTwo(this.currentWidth + i);
          int j1 = MathHelper.smallestEncompassingPowerOfTwo(this.currentHeight + i);
!         boolean flag1 = i1 <= this.maxWidth;
!         boolean flag2 = j1 <= this.maxHeight;
  
!         if (!flag1 && !flag2)
          {
              return false;
          }
          else
          {
!             boolean flag3 = flag1 && k != i1;
!             boolean flag4 = flag2 && l != j1;
!             boolean flag;
  
!             if (flag3 ^ flag4)
              {
!                 flag = flag3;
!             }
!             else
!             {
!                 flag = flag1 && k <= l;
              }
  
              Stitcher.Slot stitcher$slot;
  
!             if (flag)
              {
                  if (p_94311_1_.getWidth() > p_94311_1_.getHeight())
                  {
--- 139,164 ----
          int l = MathHelper.smallestEncompassingPowerOfTwo(this.currentHeight);
          int i1 = MathHelper.smallestEncompassingPowerOfTwo(this.currentWidth + i);
          int j1 = MathHelper.smallestEncompassingPowerOfTwo(this.currentHeight + i);
!         boolean flag = i1 <= this.maxWidth;
!         boolean flag1 = j1 <= this.maxHeight;
  
!         if (!flag && !flag1)
          {
              return false;
          }
          else
          {
!             int k1 = MathUtils.roundDownToPowerOfTwo(this.currentHeight);
!             boolean flag2 = flag && i1 <= 2 * k1;
  
!             if (this.currentWidth == 0 && this.currentHeight == 0)
              {
!                 flag2 = true;
              }
  
              Stitcher.Slot stitcher$slot;
  
!             if (flag2)
              {
                  if (p_94311_1_.getWidth() > p_94311_1_.getHeight())
                  {
***************
*** 244,250 ****
  
          public String toString()
          {
!             return "Holder{width=" + this.width + ", height=" + this.height + '}';
          }
  
          public int compareTo(Stitcher.Holder p_compareTo_1_)
--- 240,246 ----
  
          public String toString()
          {
!             return "Holder{width=" + this.width + ", height=" + this.height + ", name=" + this.theTexture.getIconName() + '}';
          }
  
          public int compareTo(Stitcher.Holder p_compareTo_1_)
diff -rc ./client/renderer/texture/TextureAtlasSprite.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/TextureAtlasSprite.java
*** ./client/renderer/texture/TextureAtlasSprite.java	2018-11-18 13:18:48.912396000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/TextureAtlasSprite.java	2017-10-20 21:35:40.999453700 -0700
***************
*** 1,11 ****
--- 1,16 ----
  package net.minecraft.client.renderer.texture;
  
+ import com.google.common.collect.ImmutableList;
  import com.google.common.collect.Lists;
  import java.awt.image.BufferedImage;
  import java.io.IOException;
+ import java.util.ArrayList;
+ import java.util.Collection;
  import java.util.Iterator;
  import java.util.List;
+ import java.util.function.Function;
  import net.minecraft.client.resources.IResource;
+ import net.minecraft.client.resources.IResourceManager;
  import net.minecraft.client.resources.data.AnimationFrame;
  import net.minecraft.client.resources.data.AnimationMetadataSection;
  import net.minecraft.crash.CrashReport;
***************
*** 13,18 ****
--- 18,26 ----
  import net.minecraft.crash.ICrashReportDetail;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.TextureUtils;
+ import shadersmod.client.Shaders;
  
  public class TextureAtlasSprite
  {
***************
*** 31,40 ****
--- 39,72 ----
      private float maxV;
      protected int frameCounter;
      protected int tickCounter;
+     private int indexInMap = -1;
+     public float baseU;
+     public float baseV;
+     public int sheetWidth;
+     public int sheetHeight;
+     public int glSpriteTextureId = -1;
+     public TextureAtlasSprite spriteSingle = null;
+     public boolean isSpriteSingle = false;
+     public int mipmapLevels = 0;
+     public TextureAtlasSprite spriteNormal = null;
+     public TextureAtlasSprite spriteSpecular = null;
+     public boolean isShadersSprite = false;
+     public boolean isDependencyParent = false;
+ 
+     private TextureAtlasSprite(TextureAtlasSprite p_i2_1_)
+     {
+         this.iconName = p_i2_1_.iconName;
+         this.isSpriteSingle = true;
+     }
  
      protected TextureAtlasSprite(String spriteName)
      {
          this.iconName = spriteName;
+ 
+         if (Config.isMultiTexture())
+         {
+             this.spriteSingle = new TextureAtlasSprite(this);
+         }
      }
  
      protected static TextureAtlasSprite makeAtlasSprite(ResourceLocation spriteResourceLocation)
***************
*** 53,58 ****
--- 85,97 ----
          this.maxU = (float)(originInX + this.width) / (float)((double)inX) - f;
          this.minV = (float)originInY / (float)inY + f1;
          this.maxV = (float)(originInY + this.height) / (float)inY - f1;
+         this.baseU = Math.min(this.minU, this.maxU);
+         this.baseV = Math.min(this.minV, this.maxV);
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.initSprite(this.width, this.height, 0, 0, false);
+         }
      }
  
      public void copyFrom(TextureAtlasSprite atlasSpirit)
***************
*** 66,71 ****
--- 105,115 ----
          this.maxU = atlasSpirit.maxU;
          this.minV = atlasSpirit.minV;
          this.maxV = atlasSpirit.maxV;
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.initSprite(this.width, this.height, 0, 0, false);
+         }
      }
  
      /**
***************
*** 175,198 ****
  
      public void updateAnimation()
      {
!         ++this.tickCounter;
! 
!         if (this.tickCounter >= this.animationMetadata.getFrameTimeSingle(this.frameCounter))
          {
!             int i = this.animationMetadata.getFrameIndex(this.frameCounter);
!             int j = this.animationMetadata.getFrameCount() == 0 ? this.framesTextureData.size() : this.animationMetadata.getFrameCount();
!             this.frameCounter = (this.frameCounter + 1) % j;
!             this.tickCounter = 0;
!             int k = this.animationMetadata.getFrameIndex(this.frameCounter);
  
!             if (i != k && k >= 0 && k < this.framesTextureData.size())
              {
!                 TextureUtil.uploadTextureMipmap(this.framesTextureData.get(k), this.width, this.height, this.originX, this.originY, false, false);
              }
-         }
-         else if (this.animationMetadata.isInterpolate())
-         {
-             this.updateAnimationInterpolated();
          }
      }
  
--- 219,247 ----
  
      public void updateAnimation()
      {
!         if (this.animationMetadata != null)
          {
!             ++this.tickCounter;
  
!             if (this.tickCounter >= this.animationMetadata.getFrameTimeSingle(this.frameCounter))
              {
!                 int i = this.animationMetadata.getFrameIndex(this.frameCounter);
!                 int j = this.animationMetadata.getFrameCount() == 0 ? this.framesTextureData.size() : this.animationMetadata.getFrameCount();
!                 this.frameCounter = (this.frameCounter + 1) % j;
!                 this.tickCounter = 0;
!                 int k = this.animationMetadata.getFrameIndex(this.frameCounter);
!                 boolean flag = false;
!                 boolean flag1 = this.isSpriteSingle;
! 
!                 if (i != k && k >= 0 && k < this.framesTextureData.size())
!                 {
!                     TextureUtil.uploadTextureMipmap(this.framesTextureData.get(k), this.width, this.height, this.originX, this.originY, flag, flag1);
!                 }
!             }
!             else if (this.animationMetadata.isInterpolate())
!             {
!                 this.updateAnimationInterpolated();
              }
          }
      }
  
***************
*** 256,266 ****
--- 305,325 ----
      public void setIconWidth(int newWidth)
      {
          this.width = newWidth;
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.setIconWidth(this.width);
+         }
      }
  
      public void setIconHeight(int newHeight)
      {
          this.height = newHeight;
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.setIconHeight(this.height);
+         }
      }
  
      public void loadSprite(PngSizeInfo sizeInfo, boolean p_188538_2_) throws IOException
***************
*** 277,287 ****
--- 336,358 ----
          {
              throw new RuntimeException("broken aspect ratio and not an animation");
          }
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.width = this.width;
+             this.spriteSingle.height = this.height;
+         }
      }
  
      public void loadSpriteFrames(IResource resource, int mipmaplevels) throws IOException
      {
          BufferedImage bufferedimage = TextureUtil.readBufferedImage(resource.getInputStream());
+ 
+         if (this.width != bufferedimage.getWidth())
+         {
+             bufferedimage = TextureUtils.scaleImage(bufferedimage, this.width);
+         }
+ 
          AnimationMetadataSection animationmetadatasection = (AnimationMetadataSection)resource.getMetadata("animation");
          int[][] aint = new int[mipmaplevels][];
          aint[0] = new int[bufferedimage.getWidth() * bufferedimage.getHeight()];
***************
*** 297,307 ****
  
              if (animationmetadatasection.getFrameCount() > 0)
              {
!                 Iterator lvt_7_1_ = animationmetadatasection.getFrameIndexSet().iterator();
  
!                 while (lvt_7_1_.hasNext())
                  {
!                     int j = ((Integer)lvt_7_1_.next()).intValue();
  
                      if (j >= i)
                      {
--- 368,378 ----
  
              if (animationmetadatasection.getFrameCount() > 0)
              {
!                 Iterator iterator = animationmetadatasection.getFrameIndexSet().iterator();
  
!                 while (iterator.hasNext())
                  {
!                     int j = ((Integer)iterator.next()).intValue();
  
                      if (j >= i)
                      {
***************
*** 318,332 ****
              {
                  List<AnimationFrame> list = Lists.<AnimationFrame>newArrayList();
  
!                 for (int k = 0; k < i; ++k)
                  {
!                     this.framesTextureData.add(getFrameTextureData(aint, this.width, this.width, k));
!                     list.add(new AnimationFrame(k, -1));
                  }
  
                  this.animationMetadata = new AnimationMetadataSection(list, this.width, this.height, animationmetadatasection.getFrameTime(), animationmetadatasection.isInterpolate());
              }
          }
      }
  
      public void generateMipmaps(int level)
--- 389,431 ----
              {
                  List<AnimationFrame> list = Lists.<AnimationFrame>newArrayList();
  
!                 for (int l = 0; l < i; ++l)
                  {
!                     this.framesTextureData.add(getFrameTextureData(aint, this.width, this.width, l));
!                     list.add(new AnimationFrame(l, -1));
                  }
  
                  this.animationMetadata = new AnimationMetadataSection(list, this.width, this.height, animationmetadatasection.getFrameTime(), animationmetadatasection.isInterpolate());
              }
          }
+ 
+         if (!this.isShadersSprite)
+         {
+             if (Config.isShaders())
+             {
+                 this.loadShadersSprites();
+             }
+ 
+             for (int k = 0; k < this.framesTextureData.size(); ++k)
+             {
+                 int[][] aint2 = this.framesTextureData.get(k);
+ 
+                 if (aint2 != null && !this.iconName.startsWith("minecraft:blocks/leaves_"))
+                 {
+                     for (int i1 = 0; i1 < aint2.length; ++i1)
+                     {
+                         int[] aint1 = aint2[i1];
+                         this.fixTransparentColor(aint1);
+                     }
+                 }
+             }
+ 
+             if (this.spriteSingle != null)
+             {
+                 IResource iresource = Config.getResourceManager().getResource(resource.getResourceLocation());
+                 this.spriteSingle.loadSpriteFrames(iresource, mipmaplevels);
+             }
+         }
      }
  
      public void generateMipmaps(int level)
***************
*** 373,378 ****
--- 472,482 ----
          }
  
          this.setFramesTextureData(list);
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.generateMipmaps(level);
+         }
      }
  
      private void allocateFrameTextureData(int index)
***************
*** 384,389 ****
--- 488,498 ----
                  this.framesTextureData.add(null);
              }
          }
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.allocateFrameTextureData(index);
+         }
      }
  
      private static int[][] getFrameTextureData(int[][] data, int rows, int columns, int p_147962_3_)
***************
*** 407,412 ****
--- 516,526 ----
      public void clearFramesTextureData()
      {
          this.framesTextureData.clear();
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.clearFramesTextureData();
+         }
      }
  
      public boolean hasAnimationMetadata()
***************
*** 414,422 ****
          return this.animationMetadata != null;
      }
  
!     public void setFramesTextureData(List<int[][]> newFramesTextureData)
      {
!         this.framesTextureData = newFramesTextureData;
      }
  
      private void resetSprite()
--- 528,541 ----
          return this.animationMetadata != null;
      }
  
!     public void setFramesTextureData(List<int[][]> arrayList)
      {
!         this.framesTextureData = arrayList;
! 
!         if (this.spriteSingle != null)
!         {
!             this.spriteSingle.setFramesTextureData(arrayList);
!         }
      }
  
      private void resetSprite()
***************
*** 425,434 ****
--- 544,729 ----
          this.setFramesTextureData(Lists.newArrayList());
          this.frameCounter = 0;
          this.tickCounter = 0;
+ 
+         if (this.spriteSingle != null)
+         {
+             this.spriteSingle.resetSprite();
+         }
      }
  
      public String toString()
      {
          return "TextureAtlasSprite{name='" + this.iconName + '\'' + ", frameCount=" + this.framesTextureData.size() + ", rotated=" + this.rotated + ", x=" + this.originX + ", y=" + this.originY + ", height=" + this.height + ", width=" + this.width + ", u0=" + this.minU + ", u1=" + this.maxU + ", v0=" + this.minV + ", v1=" + this.maxV + '}';
      }
+ 
+     public boolean hasCustomLoader(IResourceManager p_hasCustomLoader_1_, ResourceLocation p_hasCustomLoader_2_)
+     {
+         return false;
+     }
+ 
+     public boolean load(IResourceManager p_load_1_, ResourceLocation p_load_2_, Function<ResourceLocation, TextureAtlasSprite> p_load_3_)
+     {
+         return true;
+     }
+ 
+     public Collection<ResourceLocation> getDependencies()
+     {
+         return ImmutableList.<ResourceLocation>of();
+     }
+ 
+     public int getIndexInMap()
+     {
+         return this.indexInMap;
+     }
+ 
+     public void setIndexInMap(int p_setIndexInMap_1_)
+     {
+         this.indexInMap = p_setIndexInMap_1_;
+     }
+ 
+     private void fixTransparentColor(int[] p_fixTransparentColor_1_)
+     {
+         if (p_fixTransparentColor_1_ != null)
+         {
+             long i = 0L;
+             long j = 0L;
+             long k = 0L;
+             long l = 0L;
+ 
+             for (int i1 = 0; i1 < p_fixTransparentColor_1_.length; ++i1)
+             {
+                 int j1 = p_fixTransparentColor_1_[i1];
+                 int k1 = j1 >> 24 & 255;
+ 
+                 if (k1 >= 16)
+                 {
+                     int l1 = j1 >> 16 & 255;
+                     int i2 = j1 >> 8 & 255;
+                     int j2 = j1 & 255;
+                     i += (long)l1;
+                     j += (long)i2;
+                     k += (long)j2;
+                     ++l;
+                 }
+             }
+ 
+             if (l > 0L)
+             {
+                 int l2 = (int)(i / l);
+                 int i3 = (int)(j / l);
+                 int j3 = (int)(k / l);
+                 int k3 = l2 << 16 | i3 << 8 | j3;
+ 
+                 for (int l3 = 0; l3 < p_fixTransparentColor_1_.length; ++l3)
+                 {
+                     int i4 = p_fixTransparentColor_1_[l3];
+                     int k2 = i4 >> 24 & 255;
+ 
+                     if (k2 <= 16)
+                     {
+                         p_fixTransparentColor_1_[l3] = k3;
+                     }
+                 }
+             }
+         }
+     }
+ 
+     public double getSpriteU16(float p_getSpriteU16_1_)
+     {
+         float f = this.maxU - this.minU;
+         return (double)((p_getSpriteU16_1_ - this.minU) / f * 16.0F);
+     }
+ 
+     public double getSpriteV16(float p_getSpriteV16_1_)
+     {
+         float f = this.maxV - this.minV;
+         return (double)((p_getSpriteV16_1_ - this.minV) / f * 16.0F);
+     }
+ 
+     public void bindSpriteTexture()
+     {
+         if (this.glSpriteTextureId < 0)
+         {
+             this.glSpriteTextureId = TextureUtil.glGenTextures();
+             TextureUtil.allocateTextureImpl(this.glSpriteTextureId, this.mipmapLevels, this.width, this.height);
+             TextureUtils.applyAnisotropicLevel();
+         }
+ 
+         TextureUtils.bindTexture(this.glSpriteTextureId);
+     }
+ 
+     public void deleteSpriteTexture()
+     {
+         if (this.glSpriteTextureId >= 0)
+         {
+             TextureUtil.deleteTexture(this.glSpriteTextureId);
+             this.glSpriteTextureId = -1;
+         }
+     }
+ 
+     public float toSingleU(float p_toSingleU_1_)
+     {
+         p_toSingleU_1_ = p_toSingleU_1_ - this.baseU;
+         float f = (float)this.sheetWidth / (float)this.width;
+         p_toSingleU_1_ = p_toSingleU_1_ * f;
+         return p_toSingleU_1_;
+     }
+ 
+     public float toSingleV(float p_toSingleV_1_)
+     {
+         p_toSingleV_1_ = p_toSingleV_1_ - this.baseV;
+         float f = (float)this.sheetHeight / (float)this.height;
+         p_toSingleV_1_ = p_toSingleV_1_ * f;
+         return p_toSingleV_1_;
+     }
+ 
+     public List<int[][]> getFramesTextureData()
+     {
+         List<int[][]> list = new ArrayList<int[][]>();
+         list.addAll(this.framesTextureData);
+         return list;
+     }
+ 
+     public AnimationMetadataSection getAnimationMetadata()
+     {
+         return this.animationMetadata;
+     }
+ 
+     public void setAnimationMetadata(AnimationMetadataSection p_setAnimationMetadata_1_)
+     {
+         this.animationMetadata = p_setAnimationMetadata_1_;
+     }
+ 
+     private void loadShadersSprites()
+     {
+         if (Shaders.configNormalMap)
+         {
+             String s = this.iconName + "_n";
+             ResourceLocation resourcelocation = new ResourceLocation(s);
+             resourcelocation = Config.getTextureMap().completeResourceLocation(resourcelocation);
+ 
+             if (Config.hasResource(resourcelocation))
+             {
+                 this.spriteNormal = new TextureAtlasSprite(s);
+                 this.spriteNormal.isShadersSprite = true;
+                 this.spriteNormal.copyFrom(this);
+                 Config.getTextureMap().generateMipmaps(Config.getResourceManager(), this.spriteNormal);
+             }
+         }
+ 
+         if (Shaders.configSpecularMap)
+         {
+             String s1 = this.iconName + "_s";
+             ResourceLocation resourcelocation1 = new ResourceLocation(s1);
+             resourcelocation1 = Config.getTextureMap().completeResourceLocation(resourcelocation1);
+ 
+             if (Config.hasResource(resourcelocation1))
+             {
+                 this.spriteSpecular = new TextureAtlasSprite(s1);
+                 this.spriteSpecular.isShadersSprite = true;
+                 this.spriteSpecular.copyFrom(this);
+                 Config.getTextureMap().generateMipmaps(Config.getResourceManager(), this.spriteSpecular);
+             }
+         }
+     }
  }
diff -rc ./client/renderer/texture/TextureManager.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/TextureManager.java
*** ./client/renderer/texture/TextureManager.java	2018-11-18 13:18:48.935383000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/TextureManager.java	2017-10-20 21:35:41.010454800 -0700
***************
*** 14,21 ****
--- 14,26 ----
  import net.minecraft.crash.ICrashReportDetail;
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.CustomGuis;
+ import optifine.RandomMobs;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import shadersmod.client.ShadersTex;
  
  public class TextureManager implements ITickable, IResourceManagerReloadListener
  {
***************
*** 33,38 ****
--- 38,53 ----
  
      public void bindTexture(ResourceLocation resource)
      {
+         if (Config.isRandomMobs())
+         {
+             resource = RandomMobs.getTextureLocation(resource);
+         }
+ 
+         if (Config.isCustomGuis())
+         {
+             resource = CustomGuis.getTextureLocation(resource);
+         }
+ 
          ITextureObject itextureobject = this.mapTextureObjects.get(resource);
  
          if (itextureobject == null)
***************
*** 41,47 ****
              this.loadTexture(resource, itextureobject);
          }
  
!         TextureUtil.bindTexture(itextureobject.getGlTextureId());
      }
  
      public boolean loadTickableTexture(ResourceLocation textureLocation, ITickableTextureObject textureObj)
--- 56,69 ----
              this.loadTexture(resource, itextureobject);
          }
  
!         if (Config.isShaders())
!         {
!             ShadersTex.bindTexture(itextureobject);
!         }
!         else
!         {
!             TextureUtil.bindTexture(itextureobject.getGlTextureId());
!         }
      }
  
      public boolean loadTickableTexture(ResourceLocation textureLocation, ITickableTextureObject textureObj)
***************
*** 103,108 ****
--- 125,135 ----
  
      public ResourceLocation getDynamicTextureLocation(String name, DynamicTexture texture)
      {
+         if (name.equals("logo"))
+         {
+             texture = Config.getMojangLogoTexture(texture);
+         }
+ 
          Integer integer = this.mapTextureCounters.get(name);
  
          if (integer == null)
***************
*** 134,159 ****
  
          if (itextureobject != null)
          {
              TextureUtil.deleteTexture(itextureobject.getGlTextureId());
          }
      }
  
      public void onResourceManagerReload(IResourceManager resourceManager)
      {
!         Iterator<Entry<ResourceLocation, ITextureObject>> iterator = this.mapTextureObjects.entrySet().iterator();
  
          while (iterator.hasNext())
          {
!             Entry<ResourceLocation, ITextureObject> entry = (Entry)iterator.next();
!             ITextureObject itextureobject = entry.getValue();
  
!             if (itextureobject == TextureUtil.MISSING_TEXTURE)
              {
                  iterator.remove();
              }
              else
              {
!                 this.loadTexture(entry.getKey(), itextureobject);
              }
          }
      }
--- 161,224 ----
  
          if (itextureobject != null)
          {
+             this.mapTextureObjects.remove(textureLocation);
              TextureUtil.deleteTexture(itextureobject.getGlTextureId());
          }
      }
  
      public void onResourceManagerReload(IResourceManager resourceManager)
      {
!         Config.dbg("*** Reloading textures ***");
!         Config.log("Resource packs: " + Config.getResourcePackNames());
!         Iterator iterator = this.mapTextureObjects.keySet().iterator();
  
          while (iterator.hasNext())
          {
!             ResourceLocation resourcelocation = (ResourceLocation)iterator.next();
!             String s = resourcelocation.getResourcePath();
  
!             if (s.startsWith("mcpatcher/") || s.startsWith("optifine/"))
              {
+                 ITextureObject itextureobject = this.mapTextureObjects.get(resourcelocation);
+ 
+                 if (itextureobject instanceof AbstractTexture)
+                 {
+                     AbstractTexture abstracttexture = (AbstractTexture)itextureobject;
+                     abstracttexture.deleteGlTexture();
+                 }
+ 
                  iterator.remove();
              }
+         }
+ 
+         Iterator<Entry<ResourceLocation, ITextureObject>> iterator1 = this.mapTextureObjects.entrySet().iterator();
+ 
+         while (iterator1.hasNext())
+         {
+             Entry<ResourceLocation, ITextureObject> entry = (Entry)iterator1.next();
+             ITextureObject itextureobject1 = entry.getValue();
+ 
+             if (itextureobject1 == TextureUtil.MISSING_TEXTURE)
+             {
+                 iterator1.remove();
+             }
              else
              {
!                 this.loadTexture(entry.getKey(), itextureobject1);
!             }
!         }
!     }
! 
!     public void reloadBannerTextures()
!     {
!         for (Entry<ResourceLocation, ITextureObject> entry : this.mapTextureObjects.entrySet())
!         {
!             ResourceLocation resourcelocation = entry.getKey();
!             ITextureObject itextureobject = entry.getValue();
! 
!             if (itextureobject instanceof LayeredColorMaskTexture)
!             {
!                 this.loadTexture(resourcelocation, itextureobject);
              }
          }
      }
diff -rc ./client/renderer/texture/TextureMap.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/TextureMap.java
*** ./client/renderer/texture/TextureMap.java	2018-11-18 13:18:48.946376000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/TextureMap.java	2017-10-20 21:35:41.023953600 -0700
***************
*** 2,14 ****
  
  import com.google.common.collect.Lists;
  import com.google.common.collect.Maps;
  import java.io.Closeable;
  import java.io.IOException;
  import java.util.List;
  import java.util.Map;
  import java.util.Map.Entry;
  import javax.annotation.Nullable;
! import net.minecraft.client.Minecraft;
  import net.minecraft.client.renderer.StitcherException;
  import net.minecraft.client.resources.IResource;
  import net.minecraft.client.resources.IResourceManager;
--- 2,23 ----
  
  import com.google.common.collect.Lists;
  import com.google.common.collect.Maps;
+ import java.awt.Dimension;
+ import java.awt.image.BufferedImage;
  import java.io.Closeable;
  import java.io.IOException;
+ import java.io.InputStream;
+ import java.util.ArrayList;
+ import java.util.HashMap;
+ import java.util.Iterator;
  import java.util.List;
  import java.util.Map;
+ import java.util.Set;
+ import java.util.TreeSet;
  import java.util.Map.Entry;
+ import java.util.function.Function;
  import javax.annotation.Nullable;
! import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.StitcherException;
  import net.minecraft.client.resources.IResource;
  import net.minecraft.client.resources.IResourceManager;
***************
*** 18,26 ****
--- 27,45 ----
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.math.MathHelper;
+ import optifine.BetterGrass;
+ import optifine.Config;
+ import optifine.ConnectedTextures;
+ import optifine.CustomItems;
+ import optifine.Reflector;
+ import optifine.ReflectorForge;
+ import optifine.SpriteDependencies;
+ import optifine.TextureUtils;
+ 
  import org.apache.commons.io.IOUtils;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import shadersmod.client.ShadersTex;
  
  public class TextureMap extends AbstractTexture implements ITickableTextureObject
  {
***************
*** 34,67 ****
      private final ITextureMapPopulator iconCreator;
      private int mipmapLevels;
      private final TextureAtlasSprite missingImage;
  
      public TextureMap(String basePathIn)
      {
          this(basePathIn, (ITextureMapPopulator)null);
      }
  
      public TextureMap(String basePathIn, @Nullable ITextureMapPopulator iconCreatorIn)
      {
          this.listAnimatedSprites = Lists.<TextureAtlasSprite>newArrayList();
          this.mapRegisteredSprites = Maps.<String, TextureAtlasSprite>newHashMap();
          this.mapUploadedSprites = Maps.<String, TextureAtlasSprite>newHashMap();
          this.missingImage = new TextureAtlasSprite("missingno");
!         this.basePath = basePathIn;
!         this.iconCreator = iconCreatorIn;
      }
  
      private void initMissingImage()
      {
!         int[] aint = TextureUtil.MISSING_TEXTURE_DATA;
!         this.missingImage.setIconWidth(16);
!         this.missingImage.setIconHeight(16);
          int[][] aint1 = new int[this.mipmapLevels + 1][];
          aint1[0] = aint;
!         this.missingImage.setFramesTextureData(Lists.<int[][]>newArrayList(aint1));
      }
  
      public void loadTexture(IResourceManager resourceManager) throws IOException
      {
          if (this.iconCreator != null)
          {
              this.loadSprites(resourceManager, this.iconCreator);
--- 53,118 ----
      private final ITextureMapPopulator iconCreator;
      private int mipmapLevels;
      private final TextureAtlasSprite missingImage;
+     private TextureAtlasSprite[] iconGrid;
+     private int iconGridSize;
+     private int iconGridCountX;
+     private int iconGridCountY;
+     private double iconGridSizeU;
+     private double iconGridSizeV;
+     private int counterIndexInMap;
+     public int atlasWidth;
+     public int atlasHeight;
  
      public TextureMap(String basePathIn)
      {
          this(basePathIn, (ITextureMapPopulator)null);
      }
  
+     public TextureMap(String p_i3_1_, boolean p_i3_2_)
+     {
+         this(p_i3_1_, (ITextureMapPopulator)null, p_i3_2_);
+     }
+ 
      public TextureMap(String basePathIn, @Nullable ITextureMapPopulator iconCreatorIn)
      {
+         this(basePathIn, iconCreatorIn, false);
+     }
+ 
+     public TextureMap(String p_i4_1_, ITextureMapPopulator p_i4_2_, boolean p_i4_3_)
+     {
+         this.iconGrid = null;
+         this.iconGridSize = -1;
+         this.iconGridCountX = -1;
+         this.iconGridCountY = -1;
+         this.iconGridSizeU = -1.0D;
+         this.iconGridSizeV = -1.0D;
+         this.counterIndexInMap = 0;
+         this.atlasWidth = 0;
+         this.atlasHeight = 0;
          this.listAnimatedSprites = Lists.<TextureAtlasSprite>newArrayList();
          this.mapRegisteredSprites = Maps.<String, TextureAtlasSprite>newHashMap();
          this.mapUploadedSprites = Maps.<String, TextureAtlasSprite>newHashMap();
          this.missingImage = new TextureAtlasSprite("missingno");
!         this.basePath = p_i4_1_;
!         this.iconCreator = p_i4_2_;
      }
  
      private void initMissingImage()
      {
!         int i = this.getMinSpriteSize();
!         int[] aint = this.getMissingImageData(i);
!         this.missingImage.setIconWidth(i);
!         this.missingImage.setIconHeight(i);
          int[][] aint1 = new int[this.mipmapLevels + 1][];
          aint1[0] = aint;
!         this.missingImage.setFramesTextureData(Lists.newArrayList(new int[][][] {aint1}));
!         this.missingImage.setIndexInMap(this.counterIndexInMap++);
      }
  
      public void loadTexture(IResourceManager resourceManager) throws IOException
      {
+         ShadersTex.resManager = resourceManager;
+ 
          if (this.iconCreator != null)
          {
              this.loadSprites(resourceManager, this.iconCreator);
***************
*** 71,77 ****
--- 122,137 ----
      public void loadSprites(IResourceManager resourceManager, ITextureMapPopulator iconCreatorIn)
      {
          this.mapRegisteredSprites.clear();
+         this.counterIndexInMap = 0;
+         Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPre, this);
          iconCreatorIn.registerSprites(this);
+ 
+         if (this.mipmapLevels >= 4)
+         {
+             this.mipmapLevels = this.detectMaxMipmapLevel(this.mapRegisteredSprites, resourceManager);
+             Config.log("Mipmap levels: " + this.mipmapLevels);
+         }
+ 
          this.initMissingImage();
          this.deleteGlTexture();
          this.loadTextureAtlas(resourceManager);
***************
*** 79,138 ****
  
      public void loadTextureAtlas(IResourceManager resourceManager)
      {
!         int i = Minecraft.getGLMaximumTextureSize();
!         Stitcher stitcher = new Stitcher(i, i, 0, this.mipmapLevels);
          this.mapUploadedSprites.clear();
          this.listAnimatedSprites.clear();
!         int j = Integer.MAX_VALUE;
          int k = 1 << this.mipmapLevels;
  
!         for (Entry<String, TextureAtlasSprite> entry : this.mapRegisteredSprites.entrySet())
          {
!             TextureAtlasSprite textureatlassprite = entry.getValue();
!             ResourceLocation resourcelocation = this.getResourceLocation(textureatlassprite);
              IResource iresource = null;
  
!             try
              {
!                 PngSizeInfo pngsizeinfo = PngSizeInfo.makeFromResource(resourceManager.getResource(resourcelocation));
!                 iresource = resourceManager.getResource(resourcelocation);
!                 boolean flag = iresource.getMetadata("animation") != null;
!                 textureatlassprite.loadSprite(pngsizeinfo, flag);
              }
!             catch (RuntimeException runtimeexception)
              {
!                 LOGGER.error("Unable to parse metadata from {}", resourcelocation, runtimeexception);
!                 continue;
!             }
!             catch (IOException ioexception)
              {
!                 LOGGER.error("Using missing texture, unable to load {}", resourcelocation, ioexception);
!                 continue;
              }
!             finally
              {
!                 IOUtils.closeQuietly((Closeable)iresource);
              }
  
!             j = Math.min(j, Math.min(textureatlassprite.getIconWidth(), textureatlassprite.getIconHeight()));
!             int j1 = Math.min(Integer.lowestOneBit(textureatlassprite.getIconWidth()), Integer.lowestOneBit(textureatlassprite.getIconHeight()));
  
!             if (j1 < k)
              {
!                 LOGGER.warn("Texture {} with size {}x{} limits mip level from {} to {}", resourcelocation, Integer.valueOf(textureatlassprite.getIconWidth()), Integer.valueOf(textureatlassprite.getIconHeight()), Integer.valueOf(MathHelper.log2(k)), Integer.valueOf(MathHelper.log2(j1)));
!                 k = j1;
!             }
  
!             stitcher.addSprite(textureatlassprite);
          }
  
!         int l = Math.min(j, k);
!         int i1 = MathHelper.log2(l);
  
!         if (i1 < this.mipmapLevels)
          {
!             LOGGER.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", this.basePath, Integer.valueOf(this.mipmapLevels), Integer.valueOf(i1), Integer.valueOf(l));
!             this.mipmapLevels = i1;
          }
  
          this.missingImage.generateMipmaps(this.mipmapLevels);
--- 139,285 ----
  
      public void loadTextureAtlas(IResourceManager resourceManager)
      {
!         ShadersTex.resManager = resourceManager;
!         Config.dbg("Multitexture: " + Config.isMultiTexture());
! 
!         if (Config.isMultiTexture())
!         {
!             for (TextureAtlasSprite textureatlassprite : this.mapUploadedSprites.values())
!             {
!                 textureatlassprite.deleteSpriteTexture();
!             }
!         }
! 
!         ConnectedTextures.updateIcons(this);
!         CustomItems.updateIcons(this);
!         BetterGrass.updateIcons(this);
!         int k1 = TextureUtils.getGLMaximumTextureSize();
!         Stitcher stitcher = new Stitcher(k1, k1, 0, this.mipmapLevels);
          this.mapUploadedSprites.clear();
          this.listAnimatedSprites.clear();
!         int i = Integer.MAX_VALUE;
!         int j = this.getMinSpriteSize();
!         this.iconGridSize = j;
          int k = 1 << this.mipmapLevels;
+         List<TextureAtlasSprite> list = new ArrayList<TextureAtlasSprite>(this.mapRegisteredSprites.values());
  
!         for (int l = 0; l < list.size(); ++l)
          {
!             TextureAtlasSprite textureatlassprite1 = SpriteDependencies.resolveDependencies(list, l, this);
!             ResourceLocation resourcelocation = this.getResourceLocation(textureatlassprite1);
              IResource iresource = null;
  
!             if (textureatlassprite1.getIndexInMap() < 0)
              {
!                 textureatlassprite1.setIndexInMap(this.counterIndexInMap++);
              }
! 
!             if (textureatlassprite1.hasCustomLoader(resourceManager, resourcelocation))
              {
!                 if (textureatlassprite1.load(resourceManager, resourcelocation, (p_lambda$loadTextureAtlas$0_1_) ->
              {
!                 return this.mapRegisteredSprites.get(p_lambda$loadTextureAtlas$0_1_.toString());
!                 }))
!                 {
!                     Config.dbg("Custom loader (skipped): " + textureatlassprite1);
!                     continue;
!                 }
!                 Config.dbg("Custom loader: " + textureatlassprite1);
              }
!             else
              {
!                 try
!                 {
!                     PngSizeInfo pngsizeinfo = PngSizeInfo.makeFromResource(resourceManager.getResource(resourcelocation));
! 
!                     if (Config.isShaders())
!                     {
!                         iresource = ShadersTex.loadResource(resourceManager, resourcelocation);
!                     }
!                     else
!                     {
!                         iresource = resourceManager.getResource(resourcelocation);
!                     }
! 
!                     boolean flag = iresource.getMetadata("animation") != null;
!                     textureatlassprite1.loadSprite(pngsizeinfo, flag);
!                 }
!                 catch (RuntimeException runtimeexception)
!                 {
!                     LOGGER.error("Unable to parse metadata from {}", resourcelocation, runtimeexception);
!                     ReflectorForge.FMLClientHandler_trackBrokenTexture(resourcelocation, runtimeexception.getMessage());
!                     continue;
!                 }
!                 catch (IOException ioexception)
!                 {
!                     LOGGER.error("Using missing texture, unable to load " + resourcelocation + ", " + ioexception.getClass().getName());
!                     ReflectorForge.FMLClientHandler_trackMissingTexture(resourcelocation);
!                     continue;
!                 }
!                 finally
!                 {
!                     IOUtils.closeQuietly((Closeable)iresource);
!                 }
              }
  
!             int k2 = textureatlassprite1.getIconWidth();
!             int i3 = textureatlassprite1.getIconHeight();
  
!             if (k2 >= 1 && i3 >= 1)
              {
!                 if (k2 < j || this.mipmapLevels > 0)
!                 {
!                     int i1 = this.mipmapLevels > 0 ? TextureUtils.scaleToPowerOfTwo(k2, j) : TextureUtils.scaleMinTo(k2, j);
  
!                     if (i1 != k2)
!                     {
!                         if (!TextureUtils.isPowerOfTwo(k2))
!                         {
!                             Config.log("Scaled non power of 2: " + textureatlassprite1.getIconName() + ", " + k2 + " -> " + i1);
!                         }
!                         else
!                         {
!                             Config.log("Scaled too small texture: " + textureatlassprite1.getIconName() + ", " + k2 + " -> " + i1);
!                         }
! 
!                         int j1 = i3 * i1 / k2;
!                         textureatlassprite1.setIconWidth(i1);
!                         textureatlassprite1.setIconHeight(j1);
!                     }
!                 }
! 
!                 i = Math.min(i, Math.min(textureatlassprite1.getIconWidth(), textureatlassprite1.getIconHeight()));
!                 int j3 = Math.min(Integer.lowestOneBit(textureatlassprite1.getIconWidth()), Integer.lowestOneBit(textureatlassprite1.getIconHeight()));
! 
!                 if (j3 < k)
!                 {
!                     LOGGER.warn("Texture {} with size {}x{} limits mip level from {} to {}", resourcelocation, Integer.valueOf(textureatlassprite1.getIconWidth()), Integer.valueOf(textureatlassprite1.getIconHeight()), Integer.valueOf(MathHelper.log2(k)), Integer.valueOf(MathHelper.log2(j3)));
!                     k = j3;
!                 }
! 
!                 if (this.generateMipmaps(resourceManager, textureatlassprite1))
!                 {
!                     stitcher.addSprite(textureatlassprite1);
!                 }
!             }
!             else
!             {
!                 Config.warn("Invalid sprite size: " + textureatlassprite1);
!             }
          }
  
!         int l1 = Math.min(i, k);
!         int i2 = MathHelper.log2(l1);
! 
!         if (i2 < 0)
!         {
!             i2 = 0;
!         }
  
!         if (i2 < this.mipmapLevels)
          {
!             LOGGER.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", this.basePath, Integer.valueOf(this.mipmapLevels), Integer.valueOf(i2), Integer.valueOf(l1));
!             this.mipmapLevels = i2;
          }
  
          this.missingImage.generateMipmaps(this.mipmapLevels);
***************
*** 148,221 ****
          }
  
          LOGGER.info("Created: {}x{} {}-atlas", Integer.valueOf(stitcher.getCurrentWidth()), Integer.valueOf(stitcher.getCurrentHeight()), this.basePath);
!         TextureUtil.allocateTextureImpl(this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
          Map<String, TextureAtlasSprite> map = Maps.<String, TextureAtlasSprite>newHashMap(this.mapRegisteredSprites);
  
!         for (TextureAtlasSprite textureatlassprite1 : stitcher.getStichSlots())
          {
!             if (textureatlassprite1 == this.missingImage || this.generateMipmaps(resourceManager, textureatlassprite1))
              {
!                 String s = textureatlassprite1.getIconName();
!                 map.remove(s);
!                 this.mapUploadedSprites.put(s, textureatlassprite1);
  
!                 try
                  {
!                     TextureUtil.uploadTextureMipmap(textureatlassprite1.getFrameTextureData(0), textureatlassprite1.getIconWidth(), textureatlassprite1.getIconHeight(), textureatlassprite1.getOriginX(), textureatlassprite1.getOriginY(), false, false);
                  }
!                 catch (Throwable throwable)
                  {
!                     CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Stitching texture atlas");
!                     CrashReportCategory crashreportcategory = crashreport.makeCategory("Texture being stitched together");
!                     crashreportcategory.addCrashSection("Atlas path", this.basePath);
!                     crashreportcategory.addCrashSection("Sprite", textureatlassprite1);
!                     throw new ReportedException(crashreport);
                  }
  
!                 if (textureatlassprite1.hasAnimationMetadata())
                  {
!                     this.listAnimatedSprites.add(textureatlassprite1);
                  }
              }
          }
  
!         for (TextureAtlasSprite textureatlassprite2 : map.values())
          {
!             textureatlassprite2.copyFrom(this.missingImage);
          }
      }
  
!     private boolean generateMipmaps(IResourceManager resourceManager, final TextureAtlasSprite texture)
      {
!         ResourceLocation resourcelocation = this.getResourceLocation(texture);
!         IResource iresource = null;
!         label62:
!         {
!             boolean flag;
  
!             try
!             {
!                 iresource = resourceManager.getResource(resourcelocation);
!                 texture.loadSpriteFrames(iresource, this.mipmapLevels + 1);
!                 break label62;
!             }
!             catch (RuntimeException runtimeexception)
!             {
!                 LOGGER.error("Unable to parse metadata from {}", resourcelocation, runtimeexception);
!                 flag = false;
!             }
!             catch (IOException ioexception)
!             {
!                 LOGGER.error("Using missing texture, unable to load {}", resourcelocation, ioexception);
!                 flag = false;
!                 return flag;
!             }
!             finally
              {
!                 IOUtils.closeQuietly((Closeable)iresource);
!             }
  
!             return flag;
          }
  
          try
--- 295,451 ----
          }
  
          LOGGER.info("Created: {}x{} {}-atlas", Integer.valueOf(stitcher.getCurrentWidth()), Integer.valueOf(stitcher.getCurrentHeight()), this.basePath);
! 
!         if (Config.isShaders())
!         {
!             ShadersTex.allocateTextureMap(this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight(), stitcher, this);
!         }
!         else
!         {
!             TextureUtil.allocateTextureImpl(this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
!         }
! 
          Map<String, TextureAtlasSprite> map = Maps.<String, TextureAtlasSprite>newHashMap(this.mapRegisteredSprites);
  
!         for (TextureAtlasSprite textureatlassprite2 : stitcher.getStichSlots())
          {
!             if (Config.isShaders())
              {
!                 ShadersTex.setIconName(ShadersTex.setSprite(textureatlassprite2).getIconName());
!             }
  
!             String s = textureatlassprite2.getIconName();
!             map.remove(s);
!             this.mapUploadedSprites.put(s, textureatlassprite2);
! 
!             try
!             {
!                 if (Config.isShaders())
                  {
!                     ShadersTex.uploadTexSubForLoadAtlas(textureatlassprite2.getFrameTextureData(0), textureatlassprite2.getIconWidth(), textureatlassprite2.getIconHeight(), textureatlassprite2.getOriginX(), textureatlassprite2.getOriginY(), false, false);
                  }
!                 else
                  {
!                     TextureUtil.uploadTextureMipmap(textureatlassprite2.getFrameTextureData(0), textureatlassprite2.getIconWidth(), textureatlassprite2.getIconHeight(), textureatlassprite2.getOriginX(), textureatlassprite2.getOriginY(), false, false);
                  }
+             }
+             catch (Throwable throwable)
+             {
+                 CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Stitching texture atlas");
+                 CrashReportCategory crashreportcategory = crashreport.makeCategory("Texture being stitched together");
+                 crashreportcategory.addCrashSection("Atlas path", this.basePath);
+                 crashreportcategory.addCrashSection("Sprite", textureatlassprite2);
+                 throw new ReportedException(crashreport);
+             }
+ 
+             if (textureatlassprite2.hasAnimationMetadata())
+             {
+                 this.listAnimatedSprites.add(textureatlassprite2);
+             }
+         }
  
!         for (TextureAtlasSprite textureatlassprite3 : map.values())
!         {
!             textureatlassprite3.copyFrom(this.missingImage);
!         }
! 
!         if (Config.isMultiTexture())
!         {
!             int j2 = stitcher.getCurrentWidth();
!             int l2 = stitcher.getCurrentHeight();
! 
!             for (TextureAtlasSprite textureatlassprite4 : stitcher.getStichSlots())
!             {
!                 textureatlassprite4.sheetWidth = j2;
!                 textureatlassprite4.sheetHeight = l2;
!                 textureatlassprite4.mipmapLevels = this.mipmapLevels;
!                 TextureAtlasSprite textureatlassprite5 = textureatlassprite4.spriteSingle;
! 
!                 if (textureatlassprite5 != null)
                  {
!                     if (textureatlassprite5.getIconWidth() <= 0)
!                     {
!                         textureatlassprite5.setIconWidth(textureatlassprite4.getIconWidth());
!                         textureatlassprite5.setIconHeight(textureatlassprite4.getIconHeight());
!                         textureatlassprite5.initSprite(textureatlassprite4.getIconWidth(), textureatlassprite4.getIconHeight(), 0, 0, false);
!                         textureatlassprite5.clearFramesTextureData();
!                         List<int[][]> list1 = textureatlassprite4.getFramesTextureData();
!                         textureatlassprite5.setFramesTextureData(list1);
!                         textureatlassprite5.setAnimationMetadata(textureatlassprite4.getAnimationMetadata());
!                     }
! 
!                     textureatlassprite5.sheetWidth = j2;
!                     textureatlassprite5.sheetHeight = l2;
!                     textureatlassprite5.mipmapLevels = this.mipmapLevels;
!                     textureatlassprite4.bindSpriteTexture();
!                     boolean flag2 = false;
!                     boolean flag1 = true;
! 
!                     try
!                     {
!                         TextureUtil.uploadTextureMipmap(textureatlassprite5.getFrameTextureData(0), textureatlassprite5.getIconWidth(), textureatlassprite5.getIconHeight(), textureatlassprite5.getOriginX(), textureatlassprite5.getOriginY(), flag2, flag1);
!                     }
!                     catch (Exception exception)
!                     {
!                         Config.dbg("Error uploading sprite single: " + textureatlassprite5 + ", parent: " + textureatlassprite4);
!                         exception.printStackTrace();
!                     }
                  }
              }
+ 
+             Config.getMinecraft().getTextureManager().bindTexture(LOCATION_BLOCKS_TEXTURE);
          }
  
!         Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPost, this);
!         this.updateIconGrid(stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
! 
!         if (Config.equals(System.getProperty("saveTextureMap"), "true"))
          {
!             Config.dbg("Exporting texture map: " + this.basePath);
!             TextureUtils.saveGlTexture("debug/" + this.basePath.replaceAll("/", "_"), this.getGlTextureId(), this.mipmapLevels, stitcher.getCurrentWidth(), stitcher.getCurrentHeight());
          }
      }
  
!     public boolean generateMipmaps(IResourceManager resourceManager, final TextureAtlasSprite texture)
      {
!         ResourceLocation resourcelocation1 = this.getResourceLocation(texture);
!         IResource iresource1 = null;
  
!         if (texture.hasCustomLoader(resourceManager, resourcelocation1))
!         {
!             TextureUtils.generateCustomMipmaps(texture, this.mipmapLevels);
!         }
!         else
!         {
!             label60:
              {
!                 boolean flag4;
  
!                 try
!                 {
!                     iresource1 = resourceManager.getResource(resourcelocation1);
!                     texture.loadSpriteFrames(iresource1, this.mipmapLevels + 1);
!                     break label60;
!                 }
!                 catch (RuntimeException runtimeexception1)
!                 {
!                     LOGGER.error("Unable to parse metadata from {}", resourcelocation1, runtimeexception1);
!                     flag4 = false;
!                 }
!                 catch (IOException ioexception1)
!                 {
!                     LOGGER.error("Using missing texture, unable to load {}", resourcelocation1, ioexception1);
!                     flag4 = false;
!                     boolean crashreportcategory = flag4;
!                     return crashreportcategory;
!                 }
!                 finally
!                 {
!                     IOUtils.closeQuietly((Closeable)iresource1);
!                 }
! 
!                 return flag4;
!             }
          }
  
          try
***************
*** 223,283 ****
              texture.generateMipmaps(this.mipmapLevels);
              return true;
          }
!         catch (Throwable throwable)
          {
!             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Applying mipmap");
!             CrashReportCategory crashreportcategory = crashreport.makeCategory("Sprite being mipmapped");
!             crashreportcategory.setDetail("Sprite name", new ICrashReportDetail<String>()
              {
                  public String call() throws Exception
                  {
                      return texture.getIconName();
                  }
              });
!             crashreportcategory.setDetail("Sprite size", new ICrashReportDetail<String>()
              {
                  public String call() throws Exception
                  {
                      return texture.getIconWidth() + " x " + texture.getIconHeight();
                  }
              });
!             crashreportcategory.setDetail("Sprite frames", new ICrashReportDetail<String>()
              {
                  public String call() throws Exception
                  {
                      return texture.getFrameCount() + " frames";
                  }
              });
!             crashreportcategory.addCrashSection("Mipmap levels", Integer.valueOf(this.mipmapLevels));
!             throw new ReportedException(crashreport);
          }
      }
  
!     private ResourceLocation getResourceLocation(TextureAtlasSprite p_184396_1_)
      {
!         ResourceLocation resourcelocation = new ResourceLocation(p_184396_1_.getIconName());
!         return new ResourceLocation(resourcelocation.getResourceDomain(), String.format("%s/%s%s", this.basePath, resourcelocation.getResourcePath(), ".png"));
      }
  
      public TextureAtlasSprite getAtlasSprite(String iconName)
      {
!         TextureAtlasSprite textureatlassprite = this.mapUploadedSprites.get(iconName);
  
!         if (textureatlassprite == null)
          {
!             textureatlassprite = this.missingImage;
          }
  
!         return textureatlassprite;
      }
  
      public void updateAnimations()
      {
          TextureUtil.bindTexture(this.getGlTextureId());
  
!         for (TextureAtlasSprite textureatlassprite : this.listAnimatedSprites)
          {
!             textureatlassprite.updateAnimation();
          }
      }
  
--- 453,611 ----
              texture.generateMipmaps(this.mipmapLevels);
              return true;
          }
!         catch (Throwable throwable1)
          {
!             CrashReport crashreport1 = CrashReport.makeCrashReport(throwable1, "Applying mipmap");
!             CrashReportCategory crashreportcategory1 = crashreport1.makeCategory("Sprite being mipmapped");
!             crashreportcategory1.setDetail("Sprite name", new ICrashReportDetail<String>()
              {
                  public String call() throws Exception
                  {
                      return texture.getIconName();
                  }
              });
!             crashreportcategory1.setDetail("Sprite size", new ICrashReportDetail<String>()
              {
                  public String call() throws Exception
                  {
                      return texture.getIconWidth() + " x " + texture.getIconHeight();
                  }
              });
!             crashreportcategory1.setDetail("Sprite frames", new ICrashReportDetail<String>()
              {
                  public String call() throws Exception
                  {
                      return texture.getFrameCount() + " frames";
                  }
              });
!             crashreportcategory1.addCrashSection("Mipmap levels", Integer.valueOf(this.mipmapLevels));
!             throw new ReportedException(crashreport1);
          }
      }
  
!     public ResourceLocation getResourceLocation(TextureAtlasSprite p_184396_1_)
      {
!         ResourceLocation resourcelocation1 = new ResourceLocation(p_184396_1_.getIconName());
!         return this.completeResourceLocation(resourcelocation1);
!     }
! 
!     public ResourceLocation completeResourceLocation(ResourceLocation p_completeResourceLocation_1_)
!     {
!         return this.isAbsoluteLocation(p_completeResourceLocation_1_) ? new ResourceLocation(p_completeResourceLocation_1_.getResourceDomain(), p_completeResourceLocation_1_.getResourcePath() + ".png") : new ResourceLocation(p_completeResourceLocation_1_.getResourceDomain(), String.format("%s/%s%s", this.basePath, p_completeResourceLocation_1_.getResourcePath(), ".png"));
      }
  
      public TextureAtlasSprite getAtlasSprite(String iconName)
      {
!         TextureAtlasSprite textureatlassprite6 = this.mapUploadedSprites.get(iconName);
  
!         if (textureatlassprite6 == null)
          {
!             textureatlassprite6 = this.missingImage;
          }
  
!         return textureatlassprite6;
      }
  
      public void updateAnimations()
      {
+         if (Config.isShaders())
+         {
+             ShadersTex.updatingTex = this.getMultiTexID();
+         }
+ 
+         boolean flag3 = false;
+         boolean flag4 = false;
          TextureUtil.bindTexture(this.getGlTextureId());
  
!         for (TextureAtlasSprite textureatlassprite6 : this.listAnimatedSprites)
!         {
!             if (this.isTerrainAnimationActive(textureatlassprite6))
!             {
!                 textureatlassprite6.updateAnimation();
! 
!                 if (textureatlassprite6.spriteNormal != null)
!                 {
!                     flag3 = true;
!                 }
! 
!                 if (textureatlassprite6.spriteSpecular != null)
!                 {
!                     flag4 = true;
!                 }
!             }
!         }
! 
!         if (Config.isMultiTexture())
!         {
!             for (TextureAtlasSprite textureatlassprite8 : this.listAnimatedSprites)
!             {
!                 if (this.isTerrainAnimationActive(textureatlassprite8))
!                 {
!                     TextureAtlasSprite textureatlassprite7 = textureatlassprite8.spriteSingle;
! 
!                     if (textureatlassprite7 != null)
!                     {
!                         if (textureatlassprite8 == TextureUtils.iconClock || textureatlassprite8 == TextureUtils.iconCompass)
!                         {
!                             textureatlassprite7.frameCounter = textureatlassprite8.frameCounter;
!                         }
! 
!                         textureatlassprite8.bindSpriteTexture();
!                         textureatlassprite7.updateAnimation();
!                     }
!                 }
!             }
! 
!             TextureUtil.bindTexture(this.getGlTextureId());
!         }
! 
!         if (Config.isShaders())
!         {
!             if (flag3)
!             {
!                 TextureUtil.bindTexture(this.getMultiTexID().norm);
! 
!                 for (TextureAtlasSprite textureatlassprite9 : this.listAnimatedSprites)
!                 {
!                     if (textureatlassprite9.spriteNormal != null && this.isTerrainAnimationActive(textureatlassprite9))
!                     {
!                         if (textureatlassprite9 == TextureUtils.iconClock || textureatlassprite9 == TextureUtils.iconCompass)
!                         {
!                             textureatlassprite9.spriteNormal.frameCounter = textureatlassprite9.frameCounter;
!                         }
! 
!                         textureatlassprite9.spriteNormal.updateAnimation();
!                     }
!                 }
!             }
! 
!             if (flag4)
!             {
!                 TextureUtil.bindTexture(this.getMultiTexID().spec);
! 
!                 for (TextureAtlasSprite textureatlassprite10 : this.listAnimatedSprites)
!                 {
!                     if (textureatlassprite10.spriteSpecular != null && this.isTerrainAnimationActive(textureatlassprite10))
!                     {
!                         if (textureatlassprite10 == TextureUtils.iconClock || textureatlassprite10 == TextureUtils.iconCompass)
!                         {
!                             textureatlassprite10.spriteNormal.frameCounter = textureatlassprite10.frameCounter;
!                         }
! 
!                         textureatlassprite10.spriteSpecular.updateAnimation();
!                     }
!                 }
!             }
! 
!             if (flag3 || flag4)
!             {
!                 TextureUtil.bindTexture(this.getGlTextureId());
!             }
!         }
! 
!         if (Config.isShaders())
          {
!             ShadersTex.updatingTex = null;
          }
      }
  
***************
*** 289,303 ****
          }
          else
          {
!             TextureAtlasSprite textureatlassprite = this.mapRegisteredSprites.get(location);
  
!             if (textureatlassprite == null)
              {
!                 textureatlassprite = TextureAtlasSprite.makeAtlasSprite(location);
!                 this.mapRegisteredSprites.put(location.toString(), textureatlassprite);
              }
  
!             return textureatlassprite;
          }
      }
  
--- 617,636 ----
          }
          else
          {
!             TextureAtlasSprite textureatlassprite6 = this.mapRegisteredSprites.get(location.toString());
  
!             if (textureatlassprite6 == null)
              {
!                 textureatlassprite6 = TextureAtlasSprite.makeAtlasSprite(location);
!                 this.mapRegisteredSprites.put(location.toString(), textureatlassprite6);
! 
!                 if (textureatlassprite6.getIndexInMap() < 0)
!                 {
!                     textureatlassprite6.setIndexInMap(this.counterIndexInMap++);
!                 }
              }
  
!             return textureatlassprite6;
          }
      }
  
***************
*** 315,318 ****
--- 648,957 ----
      {
          return this.missingImage;
      }
+ 
+     @Nullable
+     public TextureAtlasSprite getTextureExtry(String p_getTextureExtry_1_)
+     {
+         return this.mapRegisteredSprites.get(p_getTextureExtry_1_);
+     }
+ 
+     public boolean setTextureEntry(TextureAtlasSprite p_setTextureEntry_1_)
+     {
+         String s1 = p_setTextureEntry_1_.getIconName();
+ 
+         if (!this.mapRegisteredSprites.containsKey(s1))
+         {
+             this.mapRegisteredSprites.put(s1, p_setTextureEntry_1_);
+ 
+             if (p_setTextureEntry_1_.getIndexInMap() < 0)
+             {
+                 p_setTextureEntry_1_.setIndexInMap(this.counterIndexInMap++);
+             }
+ 
+             return true;
+         }
+         else
+         {
+             return false;
+         }
+     }
+ 
+     public String getBasePath()
+     {
+         return this.basePath;
+     }
+ 
+     public int getMipmapLevels()
+     {
+         return this.mipmapLevels;
+     }
+ 
+     private boolean isAbsoluteLocation(ResourceLocation p_isAbsoluteLocation_1_)
+     {
+         String s1 = p_isAbsoluteLocation_1_.getResourcePath();
+         return this.isAbsoluteLocationPath(s1);
+     }
+ 
+     private boolean isAbsoluteLocationPath(String p_isAbsoluteLocationPath_1_)
+     {
+         String s1 = p_isAbsoluteLocationPath_1_.toLowerCase();
+         return s1.startsWith("mcpatcher/") || s1.startsWith("optifine/");
+     }
+ 
+     public TextureAtlasSprite getSpriteSafe(String p_getSpriteSafe_1_)
+     {
+         ResourceLocation resourcelocation1 = new ResourceLocation(p_getSpriteSafe_1_);
+         return this.mapRegisteredSprites.get(resourcelocation1.toString());
+     }
+ 
+     public TextureAtlasSprite getRegisteredSprite(ResourceLocation p_getRegisteredSprite_1_)
+     {
+         return this.mapRegisteredSprites.get(p_getRegisteredSprite_1_.toString());
+     }
+ 
+     private boolean isTerrainAnimationActive(TextureAtlasSprite p_isTerrainAnimationActive_1_)
+     {
+         if (p_isTerrainAnimationActive_1_ != TextureUtils.iconWaterStill && p_isTerrainAnimationActive_1_ != TextureUtils.iconWaterFlow)
+         {
+             if (p_isTerrainAnimationActive_1_ != TextureUtils.iconLavaStill && p_isTerrainAnimationActive_1_ != TextureUtils.iconLavaFlow)
+             {
+                 if (p_isTerrainAnimationActive_1_ != TextureUtils.iconFireLayer0 && p_isTerrainAnimationActive_1_ != TextureUtils.iconFireLayer1)
+                 {
+                     if (p_isTerrainAnimationActive_1_ == TextureUtils.iconPortal)
+                     {
+                         return Config.isAnimatedPortal();
+                     }
+                     else
+                     {
+                         return p_isTerrainAnimationActive_1_ != TextureUtils.iconClock && p_isTerrainAnimationActive_1_ != TextureUtils.iconCompass ? Config.isAnimatedTerrain() : true;
+                     }
+                 }
+                 else
+                 {
+                     return Config.isAnimatedFire();
+                 }
+             }
+             else
+             {
+                 return Config.isAnimatedLava();
+             }
+         }
+         else
+         {
+             return Config.isAnimatedWater();
+         }
+     }
+ 
+     public int getCountRegisteredSprites()
+     {
+         return this.counterIndexInMap;
+     }
+ 
+     private int detectMaxMipmapLevel(Map p_detectMaxMipmapLevel_1_, IResourceManager p_detectMaxMipmapLevel_2_)
+     {
+         int k3 = this.detectMinimumSpriteSize(p_detectMaxMipmapLevel_1_, p_detectMaxMipmapLevel_2_, 20);
+ 
+         if (k3 < 16)
+         {
+             k3 = 16;
+         }
+ 
+         k3 = MathHelper.smallestEncompassingPowerOfTwo(k3);
+ 
+         if (k3 > 16)
+         {
+             Config.log("Sprite size: " + k3);
+         }
+ 
+         int l3 = MathHelper.log2(k3);
+ 
+         if (l3 < 4)
+         {
+             l3 = 4;
+         }
+ 
+         return l3;
+     }
+ 
+     private int detectMinimumSpriteSize(Map p_detectMinimumSpriteSize_1_, IResourceManager p_detectMinimumSpriteSize_2_, int p_detectMinimumSpriteSize_3_)
+     {
+         Map map1 = new HashMap();
+ 
+         for (Object entry : p_detectMinimumSpriteSize_1_.entrySet())
+         {
+             TextureAtlasSprite textureatlassprite6 = (TextureAtlasSprite)((Entry) entry).getValue();
+             ResourceLocation resourcelocation1 = new ResourceLocation(textureatlassprite6.getIconName());
+             ResourceLocation resourcelocation2 = this.completeResourceLocation(resourcelocation1);
+ 
+             if (!textureatlassprite6.hasCustomLoader(p_detectMinimumSpriteSize_2_, resourcelocation1))
+             {
+                 try
+                 {
+                     IResource iresource1 = p_detectMinimumSpriteSize_2_.getResource(resourcelocation2);
+ 
+                     if (iresource1 != null)
+                     {
+                         InputStream inputstream = iresource1.getInputStream();
+ 
+                         if (inputstream != null)
+                         {
+                             Dimension dimension = TextureUtils.getImageSize(inputstream, "png");
+ 
+                             if (dimension != null)
+                             {
+                                 int k3 = dimension.width;
+                                 int l3 = MathHelper.smallestEncompassingPowerOfTwo(k3);
+ 
+                                 if (!map1.containsKey(Integer.valueOf(l3)))
+                                 {
+                                     map1.put(Integer.valueOf(l3), Integer.valueOf(1));
+                                 }
+                                 else
+                                 {
+                                     int i4 = ((Integer)map1.get(Integer.valueOf(l3))).intValue();
+                                     map1.put(Integer.valueOf(l3), Integer.valueOf(i4 + 1));
+                                 }
+                             }
+                         }
+                     }
+                 }
+                 catch (Exception var17)
+                 {
+                     ;
+                 }
+             }
+         }
+ 
+         int j4 = 0;
+         Set set = map1.keySet();
+         Set set1 = new TreeSet(set);
+         int j5;
+ 
+         for (Iterator iterator = set1.iterator(); iterator.hasNext(); j4 += j5)
+         {
+             int l4 = ((Integer)iterator.next()).intValue();
+             j5 = ((Integer)map1.get(Integer.valueOf(l4))).intValue();
+         }
+ 
+         int k4 = 16;
+         int i5 = 0;
+         j5 = j4 * p_detectMinimumSpriteSize_3_ / 100;
+         Iterator iterator1 = set1.iterator();
+ 
+         while (iterator1.hasNext())
+         {
+             int k5 = ((Integer)iterator1.next()).intValue();
+             int l5 = ((Integer)map1.get(Integer.valueOf(k5))).intValue();
+             i5 += l5;
+ 
+             if (k5 > k4)
+             {
+                 k4 = k5;
+             }
+ 
+             if (i5 > j5)
+             {
+                 return k4;
+             }
+         }
+ 
+         return k4;
+     }
+ 
+     private int getMinSpriteSize()
+     {
+         int k3 = 1 << this.mipmapLevels;
+ 
+         if (k3 < 8)
+         {
+             k3 = 8;
+         }
+ 
+         return k3;
+     }
+ 
+     private int[] getMissingImageData(int p_getMissingImageData_1_)
+     {
+         BufferedImage bufferedimage = new BufferedImage(16, 16, 2);
+         bufferedimage.setRGB(0, 0, 16, 16, TextureUtil.MISSING_TEXTURE_DATA, 0, 16);
+         BufferedImage bufferedimage1 = TextureUtils.scaleToPowerOfTwo(bufferedimage, p_getMissingImageData_1_);
+         int[] aint = new int[p_getMissingImageData_1_ * p_getMissingImageData_1_];
+         bufferedimage1.getRGB(0, 0, p_getMissingImageData_1_, p_getMissingImageData_1_, aint, 0, p_getMissingImageData_1_);
+         return aint;
+     }
+ 
+     public boolean isTextureBound()
+     {
+         int k3 = GlStateManager.getBoundTexture();
+         int l3 = this.getGlTextureId();
+         return k3 == l3;
+     }
+ 
+     private void updateIconGrid(int p_updateIconGrid_1_, int p_updateIconGrid_2_)
+     {
+         this.iconGridCountX = -1;
+         this.iconGridCountY = -1;
+         this.iconGrid = null;
+ 
+         if (this.iconGridSize > 0)
+         {
+             this.iconGridCountX = p_updateIconGrid_1_ / this.iconGridSize;
+             this.iconGridCountY = p_updateIconGrid_2_ / this.iconGridSize;
+             this.iconGrid = new TextureAtlasSprite[this.iconGridCountX * this.iconGridCountY];
+             this.iconGridSizeU = 1.0D / (double)this.iconGridCountX;
+             this.iconGridSizeV = 1.0D / (double)this.iconGridCountY;
+ 
+             for (TextureAtlasSprite textureatlassprite6 : this.mapUploadedSprites.values())
+             {
+                 double d0 = 0.5D / (double)p_updateIconGrid_1_;
+                 double d1 = 0.5D / (double)p_updateIconGrid_2_;
+                 double d2 = (double)Math.min(textureatlassprite6.getMinU(), textureatlassprite6.getMaxU()) + d0;
+                 double d3 = (double)Math.min(textureatlassprite6.getMinV(), textureatlassprite6.getMaxV()) + d1;
+                 double d4 = (double)Math.max(textureatlassprite6.getMinU(), textureatlassprite6.getMaxU()) - d0;
+                 double d5 = (double)Math.max(textureatlassprite6.getMinV(), textureatlassprite6.getMaxV()) - d1;
+                 int k3 = (int)(d2 / this.iconGridSizeU);
+                 int l3 = (int)(d3 / this.iconGridSizeV);
+                 int i4 = (int)(d4 / this.iconGridSizeU);
+                 int j4 = (int)(d5 / this.iconGridSizeV);
+ 
+                 for (int k4 = k3; k4 <= i4; ++k4)
+                 {
+                     if (k4 >= 0 && k4 < this.iconGridCountX)
+                     {
+                         for (int l4 = l3; l4 <= j4; ++l4)
+                         {
+                             if (l4 >= 0 && l4 < this.iconGridCountX)
+                             {
+                                 int i5 = l4 * this.iconGridCountX + k4;
+                                 this.iconGrid[i5] = textureatlassprite6;
+                             }
+                             else
+                             {
+                                 Config.warn("Invalid grid V: " + l4 + ", icon: " + textureatlassprite6.getIconName());
+                             }
+                         }
+                     }
+                     else
+                     {
+                         Config.warn("Invalid grid U: " + k4 + ", icon: " + textureatlassprite6.getIconName());
+                     }
+                 }
+             }
+         }
+     }
+ 
+     public TextureAtlasSprite getIconByUV(double p_getIconByUV_1_, double p_getIconByUV_3_)
+     {
+         if (this.iconGrid == null)
+         {
+             return null;
+         }
+         else
+         {
+             int k3 = (int)(p_getIconByUV_1_ / this.iconGridSizeU);
+             int l3 = (int)(p_getIconByUV_3_ / this.iconGridSizeV);
+             int i4 = l3 * this.iconGridCountX + k3;
+             return i4 >= 0 && i4 <= this.iconGrid.length ? this.iconGrid[i4] : null;
+         }
+     }
  }
diff -rc ./client/renderer/texture/TextureUtil.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/TextureUtil.java
*** ./client/renderer/texture/TextureUtil.java	2018-11-18 13:18:48.962367000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/texture/TextureUtil.java	2017-10-20 21:35:41.031954200 -0700
***************
*** 12,17 ****
--- 12,21 ----
  import net.minecraft.client.resources.IResource;
  import net.minecraft.client.resources.IResourceManager;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import optifine.Mipmaps;
+ import optifine.Reflector;
+ 
  import org.apache.commons.io.IOUtils;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
***************
*** 102,153 ****
  
      private static int blendColors(int p_147943_0_, int p_147943_1_, int p_147943_2_, int p_147943_3_, boolean p_147943_4_)
      {
!         if (p_147943_4_)
!         {
!             MIPMAP_BUFFER[0] = p_147943_0_;
!             MIPMAP_BUFFER[1] = p_147943_1_;
!             MIPMAP_BUFFER[2] = p_147943_2_;
!             MIPMAP_BUFFER[3] = p_147943_3_;
!             float f = 0.0F;
!             float f1 = 0.0F;
!             float f2 = 0.0F;
!             float f3 = 0.0F;
! 
!             for (int i1 = 0; i1 < 4; ++i1)
!             {
!                 if (MIPMAP_BUFFER[i1] >> 24 != 0)
!                 {
!                     f += getColorGamma(MIPMAP_BUFFER[i1] >> 24);
!                     f1 += getColorGamma(MIPMAP_BUFFER[i1] >> 16);
!                     f2 += getColorGamma(MIPMAP_BUFFER[i1] >> 8);
!                     f3 += getColorGamma(MIPMAP_BUFFER[i1] >> 0);
!                 }
!             }
! 
!             f = f / 4.0F;
!             f1 = f1 / 4.0F;
!             f2 = f2 / 4.0F;
!             f3 = f3 / 4.0F;
!             int i2 = (int)(Math.pow((double)f, 0.45454545454545453D) * 255.0D);
!             int j1 = (int)(Math.pow((double)f1, 0.45454545454545453D) * 255.0D);
!             int k1 = (int)(Math.pow((double)f2, 0.45454545454545453D) * 255.0D);
!             int l1 = (int)(Math.pow((double)f3, 0.45454545454545453D) * 255.0D);
! 
!             if (i2 < 96)
!             {
!                 i2 = 0;
!             }
! 
!             return i2 << 24 | j1 << 16 | k1 << 8 | l1;
!         }
!         else
!         {
!             int i = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 24);
!             int j = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 16);
!             int k = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 8);
!             int l = blendColorComponent(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_, 0);
!             return i << 24 | j << 16 | k << 8 | l;
!         }
      }
  
      private static int blendColorComponent(int p_147944_0_, int p_147944_1_, int p_147944_2_, int p_147944_3_, int p_147944_4_)
--- 106,112 ----
  
      private static int blendColors(int p_147943_0_, int p_147943_1_, int p_147943_2_, int p_147943_3_, boolean p_147943_4_)
      {
!         return Mipmaps.alphaBlend(p_147943_0_, p_147943_1_, p_147943_2_, p_147943_3_);
      }
  
      private static int blendColorComponent(int p_147944_0_, int p_147944_1_, int p_147944_2_, int p_147944_3_, int p_147944_4_)
***************
*** 174,188 ****
          int i = 4194304 / p_147947_2_;
          setTextureBlurMipmap(p_147947_6_, p_147947_8_);
          setTextureClamped(p_147947_7_);
!         int l;
  
!         for (int j = 0; j < p_147947_2_ * p_147947_3_; j += p_147947_2_ * l)
          {
!             int k = j / p_147947_2_;
!             l = Math.min(i, p_147947_3_ - k);
!             int i1 = p_147947_2_ * l;
!             copyToBufferPos(p_147947_1_, j, i1);
!             GlStateManager.glTexSubImage2D(3553, p_147947_0_, p_147947_4_, p_147947_5_ + k, p_147947_2_, l, 32993, 33639, DATA_BUFFER);
          }
      }
  
--- 133,147 ----
          int i = 4194304 / p_147947_2_;
          setTextureBlurMipmap(p_147947_6_, p_147947_8_);
          setTextureClamped(p_147947_7_);
!         int j;
  
!         for (int k = 0; k < p_147947_2_ * p_147947_3_; k += p_147947_2_ * j)
          {
!             int l = k / p_147947_2_;
!             j = Math.min(i, p_147947_3_ - l);
!             int i1 = p_147947_2_ * j;
!             copyToBufferPos(p_147947_1_, k, i1);
!             GlStateManager.glTexSubImage2D(3553, p_147947_0_, p_147947_4_, p_147947_5_ + l, p_147947_2_, j, 32993, 33639, DATA_BUFFER);
          }
      }
  
***************
*** 199,206 ****
  
      public static void allocateTextureImpl(int glTextureId, int mipmapLevels, int width, int height)
      {
!         deleteTexture(glTextureId);
!         bindTexture(glTextureId);
  
          if (mipmapLevels >= 0)
          {
--- 158,175 ----
  
      public static void allocateTextureImpl(int glTextureId, int mipmapLevels, int width, int height)
      {
!         Object object = TextureUtil.class;
! 
!         if (Reflector.SplashScreen.exists())
!         {
!             object = Reflector.SplashScreen.getTargetClass();
!         }
! 
!         synchronized (object)
!         {
!             deleteTexture(glTextureId);
!             bindTexture(glTextureId);
!         }
  
          if (mipmapLevels >= 0)
          {
***************
*** 243,254 ****
          }
      }
  
!     private static void setTextureClamped(boolean p_110997_0_)
      {
          if (p_110997_0_)
          {
!             GlStateManager.glTexParameteri(3553, 10242, 10496);
!             GlStateManager.glTexParameteri(3553, 10243, 10496);
          }
          else
          {
--- 212,223 ----
          }
      }
  
!     public static void setTextureClamped(boolean p_110997_0_)
      {
          if (p_110997_0_)
          {
!             GlStateManager.glTexParameteri(3553, 10242, 33071);
!             GlStateManager.glTexParameteri(3553, 10243, 33071);
          }
          else
          {
***************
*** 262,268 ****
          setTextureBlurMipmap(p_147951_0_, false);
      }
  
!     private static void setTextureBlurMipmap(boolean p_147954_0_, boolean p_147954_1_)
      {
          if (p_147954_0_)
          {
--- 231,237 ----
          setTextureBlurMipmap(p_147951_0_, false);
      }
  
!     public static void setTextureBlurMipmap(boolean p_147954_0_, boolean p_147954_1_)
      {
          if (p_147954_0_)
          {
***************
*** 271,277 ****
          }
          else
          {
!             GlStateManager.glTexParameteri(3553, 10241, p_147954_1_ ? 9986 : 9728);
              GlStateManager.glTexParameteri(3553, 10240, 9728);
          }
      }
--- 240,247 ----
          }
          else
          {
!             int i = Config.getMipmapType();
!             GlStateManager.glTexParameteri(3553, 10241, p_147954_1_ ? i : 9728);
              GlStateManager.glTexParameteri(3553, 10240, 9728);
          }
      }
***************
*** 303,342 ****
      public static int[] readImageData(IResourceManager resourceManager, ResourceLocation imageLocation) throws IOException
      {
          IResource iresource = null;
!         int[] aint1;
  
          try
          {
              iresource = resourceManager.getResource(imageLocation);
              BufferedImage bufferedimage = readBufferedImage(iresource.getInputStream());
!             int i = bufferedimage.getWidth();
!             int j = bufferedimage.getHeight();
!             int[] aint = new int[i * j];
!             bufferedimage.getRGB(0, 0, i, j, aint, 0, i);
!             aint1 = aint;
          }
          finally
          {
              IOUtils.closeQuietly((Closeable)iresource);
          }
  
!         return aint1;
      }
  
      public static BufferedImage readBufferedImage(InputStream imageStream) throws IOException
      {
!         BufferedImage bufferedimage;
! 
!         try
          {
!             bufferedimage = ImageIO.read(imageStream);
          }
!         finally
          {
!             IOUtils.closeQuietly(imageStream);
!         }
  
!         return bufferedimage;
      }
  
      public static int[] updateAnaglyph(int[] p_110985_0_)
--- 273,326 ----
      public static int[] readImageData(IResourceManager resourceManager, ResourceLocation imageLocation) throws IOException
      {
          IResource iresource = null;
!         Object i;
  
          try
          {
              iresource = resourceManager.getResource(imageLocation);
              BufferedImage bufferedimage = readBufferedImage(iresource.getInputStream());
! 
!             if (bufferedimage != null)
!             {
!                 int j = bufferedimage.getWidth();
!                 int i1 = bufferedimage.getHeight();
!                 int[] aint1 = new int[j * i1];
!                 bufferedimage.getRGB(0, 0, j, i1, aint1, 0, j);
!                 int[] aint = aint1;
!                 return aint;
!             }
! 
!             i = null;
          }
          finally
          {
              IOUtils.closeQuietly((Closeable)iresource);
          }
  
!         return (int[])i;
      }
  
      public static BufferedImage readBufferedImage(InputStream imageStream) throws IOException
      {
!         if (imageStream == null)
          {
!             return null;
          }
!         else
          {
!             BufferedImage bufferedimage;
  
!             try
!             {
!                 bufferedimage = ImageIO.read(imageStream);
!             }
!             finally
!             {
!                 IOUtils.closeQuietly(imageStream);
!             }
! 
!             return bufferedimage;
!         }
      }
  
      public static int[] updateAnaglyph(int[] p_110985_0_)
diff -rc ./client/renderer/ThreadDownloadImageData.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/ThreadDownloadImageData.java
*** ./client/renderer/ThreadDownloadImageData.java	2018-11-18 13:18:46.039435000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/ThreadDownloadImageData.java	2018-11-30 21:22:51.109605100 -0800
***************
*** 1,10 ****
--- 1,13 ----
  package net.minecraft.client.renderer;
  
  import java.awt.image.BufferedImage;
+ import java.io.ByteArrayInputStream;
  import java.io.File;
  import java.io.IOException;
  import java.net.HttpURLConnection;
+ import java.net.Proxy;
  import java.net.URL;
+ import java.net.Proxy.Type;
  import java.util.concurrent.atomic.AtomicInteger;
  import javax.annotation.Nullable;
  import javax.imageio.ImageIO;
***************
*** 13,18 ****
--- 16,27 ----
  import net.minecraft.client.renderer.texture.TextureUtil;
  import net.minecraft.client.resources.IResourceManager;
  import net.minecraft.util.ResourceLocation;
+ import optifine.CapeImageBuffer;
+ import optifine.Config;
+ import optifine.HttpPipeline;
+ import optifine.HttpRequest;
+ import optifine.HttpResponse;
+ 
  import org.apache.commons.io.FileUtils;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
***************
*** 31,36 ****
--- 40,47 ----
      @Nullable
      private Thread imageThread;
      private boolean textureUploaded;
+     public Boolean imageFound = null;
+     public boolean pipeline = false;
  
      public ThreadDownloadImageData(@Nullable File cacheFileIn, String imageUrlIn, ResourceLocation textureResourceLocation, @Nullable IImageBuffer imageBufferIn)
      {
***************
*** 42,59 ****
  
      private void checkTextureUploaded()
      {
!         if (!this.textureUploaded)
          {
!             if (this.bufferedImage != null)
!             {
!                 if (this.textureLocation != null)
!                 {
!                     this.deleteGlTexture();
!                 }
  
!                 TextureUtil.uploadTextureImage(super.getGlTextureId(), this.bufferedImage);
!                 this.textureUploaded = true;
              }
          }
      }
  
--- 53,68 ----
  
      private void checkTextureUploaded()
      {
!         if (!this.textureUploaded && this.bufferedImage != null)
          {
!             this.textureUploaded = true;
  
!             if (this.textureLocation != null)
!             {
!                 this.deleteGlTexture();
              }
+ 
+             TextureUtil.uploadTextureImage(super.getGlTextureId(), this.bufferedImage);
          }
      }
  
***************
*** 71,76 ****
--- 80,87 ----
          {
              this.imageBuffer.skinAvailable();
          }
+ 
+         this.imageFound = this.bufferedImage != null;
      }
  
      public void loadTexture(IResourceManager resourceManager) throws IOException
***************
*** 94,99 ****
--- 105,112 ----
                      {
                          this.setBufferedImage(this.imageBuffer.parseUserSkin(this.bufferedImage));
                      }
+ 
+                     this.loadingFinished();
                  }
                  catch (IOException ioexception)
                  {
***************
*** 117,131 ****
                  HttpURLConnection httpurlconnection = null;
                  ThreadDownloadImageData.LOGGER.debug("Downloading http texture from {} to {}", ThreadDownloadImageData.this.imageUrl, ThreadDownloadImageData.this.cacheFile);
  
!                 try
                  {
!                     httpurlconnection = (HttpURLConnection)(new URL(ThreadDownloadImageData.this.imageUrl)).openConnection(Minecraft.getMinecraft().getProxy());
!                     httpurlconnection.setDoInput(true);
!                     httpurlconnection.setDoOutput(false);
!                     httpurlconnection.connect();
! 
!                     if (httpurlconnection.getResponseCode() / 100 == 2)
                      {
                          BufferedImage bufferedimage;
  
                          if (ThreadDownloadImageData.this.cacheFile != null)
--- 130,158 ----
                  HttpURLConnection httpurlconnection = null;
                  ThreadDownloadImageData.LOGGER.debug("Downloading http texture from {} to {}", ThreadDownloadImageData.this.imageUrl, ThreadDownloadImageData.this.cacheFile);
  
!                 if (ThreadDownloadImageData.this.shouldPipeline())
                  {
!                     ThreadDownloadImageData.this.loadPipelined();
!                 }
!                 else
!                 {
!                     try
                      {
+                         httpurlconnection = (HttpURLConnection)(new URL(ThreadDownloadImageData.this.imageUrl)).openConnection(Minecraft.getMinecraft().getProxy());
+                         httpurlconnection.setDoInput(true);
+                         httpurlconnection.setDoOutput(false);
+                         httpurlconnection.connect();
+ 
+                         if (httpurlconnection.getResponseCode() / 100 != 2)
+                         {
+                             if (httpurlconnection.getErrorStream() != null)
+                             {
+                                 Config.readAll(httpurlconnection.getErrorStream());
+                             }
+ 
+                             return;
+                         }
+ 
                          BufferedImage bufferedimage;
  
                          if (ThreadDownloadImageData.this.cacheFile != null)
***************
*** 144,162 ****
                          }
  
                          ThreadDownloadImageData.this.setBufferedImage(bufferedimage);
                          return;
                      }
!                 }
!                 catch (Exception exception)
!                 {
!                     ThreadDownloadImageData.LOGGER.error("Couldn't download http texture", (Throwable)exception);
!                     return;
!                 }
!                 finally
!                 {
!                     if (httpurlconnection != null)
                      {
!                         httpurlconnection.disconnect();
                      }
                  }
              }
--- 171,190 ----
                          }
  
                          ThreadDownloadImageData.this.setBufferedImage(bufferedimage);
+                     }
+                     catch (Exception exception1)
+                     {
+                         ThreadDownloadImageData.LOGGER.error("Couldn't download http texture: " + exception1.getMessage());
                          return;
                      }
!                     finally
                      {
!                         if (httpurlconnection != null)
!                         {
!                             httpurlconnection.disconnect();
!                         }
! 
!                         ThreadDownloadImageData.this.loadingFinished();
                      }
                  }
              }
***************
*** 164,167 ****
--- 192,271 ----
          this.imageThread.setDaemon(true);
          this.imageThread.start();
      }
+ 
+     private boolean shouldPipeline()
+     {
+         if (!this.pipeline)
+         {
+             return false;
+         }
+         else
+         {
+             Proxy proxy = Minecraft.getMinecraft().getProxy();
+ 
+             if (proxy.type() != Type.DIRECT && proxy.type() != Type.SOCKS)
+             {
+                 return false;
+             }
+             else
+             {
+                 return this.imageUrl.startsWith("http://");
+             }
+         }
+     }
+ 
+     private void loadPipelined()
+     {
+         try
+         {
+             HttpRequest httprequest = HttpPipeline.makeRequest(this.imageUrl, Minecraft.getMinecraft().getProxy());
+             HttpResponse httpresponse = HttpPipeline.executeRequest(httprequest);
+ 
+             if (httpresponse.getStatus() / 100 != 2)
+             {
+                 return;
+             }
+ 
+             byte[] abyte = httpresponse.getBody();
+             ByteArrayInputStream bytearrayinputstream = new ByteArrayInputStream(abyte);
+             BufferedImage bufferedimage;
+ 
+             if (this.cacheFile != null)
+             {
+                 FileUtils.copyInputStreamToFile(bytearrayinputstream, this.cacheFile);
+                 bufferedimage = ImageIO.read(this.cacheFile);
+             }
+             else
+             {
+                 bufferedimage = TextureUtil.readBufferedImage(bytearrayinputstream);
+             }
+ 
+             if (this.imageBuffer != null)
+             {
+                 bufferedimage = this.imageBuffer.parseUserSkin(bufferedimage);
+             }
+ 
+             this.setBufferedImage(bufferedimage);
+         }
+         catch (Exception exception)
+         {
+             LOGGER.error("Couldn't download http texture: " + exception.getClass().getName() + ": " + exception.getMessage());
+             return;
+         }
+         finally
+         {
+             this.loadingFinished();
+         }
+     }
+ 
+     private void loadingFinished()
+     {
+         this.imageFound = this.bufferedImage != null;
+ 
+         if (this.imageBuffer instanceof CapeImageBuffer)
+         {
+             CapeImageBuffer capeimagebuffer = (CapeImageBuffer)this.imageBuffer;
+             capeimagebuffer.cleanup();
+         }
+     }
  }
diff -rc ./client/renderer/tileentity/TileEntityBeaconRenderer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity/TileEntityBeaconRenderer.java
*** ./client/renderer/tileentity/TileEntityBeaconRenderer.java	2018-11-18 13:18:49.000347000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity/TileEntityBeaconRenderer.java	2017-10-20 21:35:41.077953300 -0700
***************
*** 8,13 ****
--- 8,15 ----
  import net.minecraft.tileentity.TileEntityBeacon;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.math.MathHelper;
+ import optifine.Config;
+ import shadersmod.client.Shaders;
  
  public class TileEntityBeaconRenderer extends TileEntitySpecialRenderer<TileEntityBeacon>
  {
***************
*** 20,41 ****
  
      public void renderBeacon(double p_188206_1_, double p_188206_3_, double p_188206_5_, double p_188206_7_, double p_188206_9_, List<TileEntityBeacon.BeamSegment> p_188206_11_, double p_188206_12_)
      {
!         GlStateManager.alphaFunc(516, 0.1F);
!         this.bindTexture(TEXTURE_BEACON_BEAM);
! 
!         if (p_188206_9_ > 0.0D)
          {
!             GlStateManager.disableFog();
!             int i = 0;
  
!             for (int j = 0; j < p_188206_11_.size(); ++j)
              {
!                 TileEntityBeacon.BeamSegment tileentitybeacon$beamsegment = p_188206_11_.get(j);
!                 renderBeamSegment(p_188206_1_, p_188206_3_, p_188206_5_, p_188206_7_, p_188206_9_, p_188206_12_, i, tileentitybeacon$beamsegment.getHeight(), tileentitybeacon$beamsegment.getColors());
!                 i += tileentitybeacon$beamsegment.getHeight();
              }
  
!             GlStateManager.enableFog();
          }
      }
  
--- 22,56 ----
  
      public void renderBeacon(double p_188206_1_, double p_188206_3_, double p_188206_5_, double p_188206_7_, double p_188206_9_, List<TileEntityBeacon.BeamSegment> p_188206_11_, double p_188206_12_)
      {
!         if (p_188206_9_ > 0.0D && p_188206_11_.size() > 0)
          {
!             if (Config.isShaders())
!             {
!                 Shaders.beginBeacon();
!             }
! 
!             GlStateManager.alphaFunc(516, 0.1F);
!             this.bindTexture(TEXTURE_BEACON_BEAM);
  
!             if (p_188206_9_ > 0.0D)
              {
!                 GlStateManager.disableFog();
!                 int i = 0;
! 
!                 for (int j = 0; j < p_188206_11_.size(); ++j)
!                 {
!                     TileEntityBeacon.BeamSegment tileentitybeacon$beamsegment = p_188206_11_.get(j);
!                     renderBeamSegment(p_188206_1_, p_188206_3_, p_188206_5_, p_188206_7_, p_188206_9_, p_188206_12_, i, tileentitybeacon$beamsegment.getHeight(), tileentitybeacon$beamsegment.getColors());
!                     i += tileentitybeacon$beamsegment.getHeight();
!                 }
! 
!                 GlStateManager.enableFog();
              }
  
!             if (Config.isShaders())
!             {
!                 Shaders.endBeacon();
!             }
          }
      }
  
diff -rc ./client/renderer/tileentity/TileEntityEndPortalRenderer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity/TileEntityEndPortalRenderer.java
*** ./client/renderer/tileentity/TileEntityEndPortalRenderer.java	2018-11-18 13:18:49.061309000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity/TileEntityEndPortalRenderer.java	2017-10-20 21:35:41.084454400 -0700
***************
*** 11,16 ****
--- 11,18 ----
  import net.minecraft.tileentity.TileEntityEndPortal;
  import net.minecraft.util.EnumFacing;
  import net.minecraft.util.ResourceLocation;
+ import optifine.Config;
+ import shadersmod.client.ShadersRender;
  
  public class TileEntityEndPortalRenderer extends TileEntitySpecialRenderer<TileEntityEndPortal>
  {
***************
*** 23,154 ****
  
      public void func_192841_a(TileEntityEndPortal p_192841_1_, double p_192841_2_, double p_192841_4_, double p_192841_6_, float p_192841_8_, int p_192841_9_, float p_192841_10_)
      {
!         GlStateManager.disableLighting();
!         RANDOM.setSeed(31100L);
!         GlStateManager.getFloat(2982, MODELVIEW);
!         GlStateManager.getFloat(2983, PROJECTION);
!         double d0 = p_192841_2_ * p_192841_2_ + p_192841_4_ * p_192841_4_ + p_192841_6_ * p_192841_6_;
!         int i = this.func_191286_a(d0);
!         float f = this.func_191287_c();
!         boolean flag = false;
! 
!         for (int j = 0; j < i; ++j)
          {
!             GlStateManager.pushMatrix();
!             float f1 = 2.0F / (float)(18 - j);
! 
!             if (j == 0)
!             {
                  this.bindTexture(END_SKY_TEXTURE);
-                 f1 = 0.15F;
-                 GlStateManager.enableBlend();
-                 GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
-             }
- 
-             if (j >= 1)
-             {
-                 this.bindTexture(END_PORTAL_TEXTURE);
-                 flag = true;
-                 Minecraft.getMinecraft().entityRenderer.func_191514_d(true);
              }
  
!             if (j == 1)
!             {
!                 GlStateManager.enableBlend();
!                 GlStateManager.blendFunc(GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
!             }
! 
!             GlStateManager.texGen(GlStateManager.TexGen.S, 9216);
!             GlStateManager.texGen(GlStateManager.TexGen.T, 9216);
!             GlStateManager.texGen(GlStateManager.TexGen.R, 9216);
!             GlStateManager.texGen(GlStateManager.TexGen.S, 9474, this.getBuffer(1.0F, 0.0F, 0.0F, 0.0F));
!             GlStateManager.texGen(GlStateManager.TexGen.T, 9474, this.getBuffer(0.0F, 1.0F, 0.0F, 0.0F));
!             GlStateManager.texGen(GlStateManager.TexGen.R, 9474, this.getBuffer(0.0F, 0.0F, 1.0F, 0.0F));
!             GlStateManager.enableTexGenCoord(GlStateManager.TexGen.S);
!             GlStateManager.enableTexGenCoord(GlStateManager.TexGen.T);
!             GlStateManager.enableTexGenCoord(GlStateManager.TexGen.R);
!             GlStateManager.popMatrix();
!             GlStateManager.matrixMode(5890);
!             GlStateManager.pushMatrix();
!             GlStateManager.loadIdentity();
!             GlStateManager.translate(0.5F, 0.5F, 0.0F);
!             GlStateManager.scale(0.5F, 0.5F, 1.0F);
!             float f2 = (float)(j + 1);
!             GlStateManager.translate(17.0F / f2, (2.0F + f2 / 1.5F) * ((float)Minecraft.getSystemTime() % 800000.0F / 800000.0F), 0.0F);
!             GlStateManager.rotate((f2 * f2 * 4321.0F + f2 * 9.0F) * 2.0F, 0.0F, 0.0F, 1.0F);
!             GlStateManager.scale(4.5F - f2 / 4.0F, 4.5F - f2 / 4.0F, 1.0F);
!             GlStateManager.multMatrix(PROJECTION);
!             GlStateManager.multMatrix(MODELVIEW);
!             Tessellator tessellator = Tessellator.getInstance();
!             BufferBuilder bufferbuilder = tessellator.getBuffer();
!             bufferbuilder.begin(7, DefaultVertexFormats.POSITION_COLOR);
!             float f3 = (RANDOM.nextFloat() * 0.5F + 0.1F) * f1;
!             float f4 = (RANDOM.nextFloat() * 0.5F + 0.4F) * f1;
!             float f5 = (RANDOM.nextFloat() * 0.5F + 0.5F) * f1;
! 
!             if (p_192841_1_.shouldRenderFace(EnumFacing.SOUTH))
!             {
!                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!             }
! 
!             if (p_192841_1_.shouldRenderFace(EnumFacing.NORTH))
!             {
!                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!             }
  
!             if (p_192841_1_.shouldRenderFace(EnumFacing.EAST))
              {
!                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
              }
- 
-             if (p_192841_1_.shouldRenderFace(EnumFacing.WEST))
-             {
-                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
-                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
-                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
-                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
-             }
- 
-             if (p_192841_1_.shouldRenderFace(EnumFacing.DOWN))
-             {
-                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
-                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
-                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
-                 bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
-             }
- 
-             if (p_192841_1_.shouldRenderFace(EnumFacing.UP))
-             {
-                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + (double)f, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
-                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + (double)f, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
-                 bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + (double)f, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
-                 bufferbuilder.pos(p_192841_2_, p_192841_4_ + (double)f, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
-             }
- 
-             tessellator.draw();
-             GlStateManager.popMatrix();
-             GlStateManager.matrixMode(5888);
-             this.bindTexture(END_SKY_TEXTURE);
-         }
- 
-         GlStateManager.disableBlend();
-         GlStateManager.disableTexGenCoord(GlStateManager.TexGen.S);
-         GlStateManager.disableTexGenCoord(GlStateManager.TexGen.T);
-         GlStateManager.disableTexGenCoord(GlStateManager.TexGen.R);
-         GlStateManager.enableLighting();
- 
-         if (flag)
-         {
-             Minecraft.getMinecraft().entityRenderer.func_191514_d(false);
          }
      }
  
--- 25,159 ----
  
      public void func_192841_a(TileEntityEndPortal p_192841_1_, double p_192841_2_, double p_192841_4_, double p_192841_6_, float p_192841_8_, int p_192841_9_, float p_192841_10_)
      {
!         if (!Config.isShaders() || !ShadersRender.renderEndPortal(p_192841_1_, p_192841_2_, p_192841_4_, p_192841_6_, p_192841_8_, p_192841_9_, this.func_191287_c()))
          {
!             GlStateManager.disableLighting();
!             RANDOM.setSeed(31100L);
!             GlStateManager.getFloat(2982, MODELVIEW);
!             GlStateManager.getFloat(2983, PROJECTION);
!             double d0 = p_192841_2_ * p_192841_2_ + p_192841_4_ * p_192841_4_ + p_192841_6_ * p_192841_6_;
!             int i = this.func_191286_a(d0);
!             float f = this.func_191287_c();
!             boolean flag = false;
! 
!             for (int j = 0; j < i; ++j)
!             {
!                 GlStateManager.pushMatrix();
!                 float f1 = 2.0F / (float)(18 - j);
! 
!                 if (j == 0)
!                 {
!                     this.bindTexture(END_SKY_TEXTURE);
!                     f1 = 0.15F;
!                     GlStateManager.enableBlend();
!                     GlStateManager.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
!                 }
! 
!                 if (j >= 1)
!                 {
!                     this.bindTexture(END_PORTAL_TEXTURE);
!                     flag = true;
!                     Minecraft.getMinecraft().entityRenderer.func_191514_d(true);
!                 }
! 
!                 if (j == 1)
!                 {
!                     GlStateManager.enableBlend();
!                     GlStateManager.blendFunc(GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
!                 }
! 
!                 GlStateManager.texGen(GlStateManager.TexGen.S, 9216);
!                 GlStateManager.texGen(GlStateManager.TexGen.T, 9216);
!                 GlStateManager.texGen(GlStateManager.TexGen.R, 9216);
!                 GlStateManager.texGen(GlStateManager.TexGen.S, 9474, this.getBuffer(1.0F, 0.0F, 0.0F, 0.0F));
!                 GlStateManager.texGen(GlStateManager.TexGen.T, 9474, this.getBuffer(0.0F, 1.0F, 0.0F, 0.0F));
!                 GlStateManager.texGen(GlStateManager.TexGen.R, 9474, this.getBuffer(0.0F, 0.0F, 1.0F, 0.0F));
!                 GlStateManager.enableTexGenCoord(GlStateManager.TexGen.S);
!                 GlStateManager.enableTexGenCoord(GlStateManager.TexGen.T);
!                 GlStateManager.enableTexGenCoord(GlStateManager.TexGen.R);
!                 GlStateManager.popMatrix();
!                 GlStateManager.matrixMode(5890);
!                 GlStateManager.pushMatrix();
!                 GlStateManager.loadIdentity();
!                 GlStateManager.translate(0.5F, 0.5F, 0.0F);
!                 GlStateManager.scale(0.5F, 0.5F, 1.0F);
!                 float f2 = (float)(j + 1);
!                 GlStateManager.translate(17.0F / f2, (2.0F + f2 / 1.5F) * ((float)Minecraft.getSystemTime() % 800000.0F / 800000.0F), 0.0F);
!                 GlStateManager.rotate((f2 * f2 * 4321.0F + f2 * 9.0F) * 2.0F, 0.0F, 0.0F, 1.0F);
!                 GlStateManager.scale(4.5F - f2 / 4.0F, 4.5F - f2 / 4.0F, 1.0F);
!                 GlStateManager.multMatrix(PROJECTION);
!                 GlStateManager.multMatrix(MODELVIEW);
!                 Tessellator tessellator = Tessellator.getInstance();
!                 BufferBuilder bufferbuilder = tessellator.getBuffer();
!                 bufferbuilder.begin(7, DefaultVertexFormats.POSITION_COLOR);
!                 float f3 = (RANDOM.nextFloat() * 0.5F + 0.1F) * f1;
!                 float f4 = (RANDOM.nextFloat() * 0.5F + 0.4F) * f1;
!                 float f5 = (RANDOM.nextFloat() * 0.5F + 0.5F) * f1;
! 
!                 if (p_192841_1_.shouldRenderFace(EnumFacing.SOUTH))
!                 {
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                 }
! 
!                 if (p_192841_1_.shouldRenderFace(EnumFacing.NORTH))
!                 {
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                 }
! 
!                 if (p_192841_1_.shouldRenderFace(EnumFacing.EAST))
!                 {
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                 }
! 
!                 if (p_192841_1_.shouldRenderFace(EnumFacing.WEST))
!                 {
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + 1.0D, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                 }
! 
!                 if (p_192841_1_.shouldRenderFace(EnumFacing.DOWN))
!                 {
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                 }
! 
!                 if (p_192841_1_.shouldRenderFace(EnumFacing.UP))
!                 {
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + (double)f, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + (double)f, p_192841_6_ + 1.0D).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_ + 1.0D, p_192841_4_ + (double)f, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                     bufferbuilder.pos(p_192841_2_, p_192841_4_ + (double)f, p_192841_6_).color(f3, f4, f5, 1.0F).endVertex();
!                 }
! 
!                 tessellator.draw();
!                 GlStateManager.popMatrix();
!                 GlStateManager.matrixMode(5888);
                  this.bindTexture(END_SKY_TEXTURE);
              }
  
!             GlStateManager.disableBlend();
!             GlStateManager.disableTexGenCoord(GlStateManager.TexGen.S);
!             GlStateManager.disableTexGenCoord(GlStateManager.TexGen.T);
!             GlStateManager.disableTexGenCoord(GlStateManager.TexGen.R);
!             GlStateManager.enableLighting();
  
!             if (flag)
              {
!                 Minecraft.getMinecraft().entityRenderer.func_191514_d(false);
              }
          }
      }
  
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity: TileEntityRen#
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity: TileEntityRen~
diff -rc ./client/renderer/tileentity/TileEntityRendererDispatcher.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.java
*** ./client/renderer/tileentity/TileEntityRendererDispatcher.java	2018-11-18 13:18:49.111282000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity/TileEntityRendererDispatcher.java	2017-10-20 21:35:41.092953300 -0700
***************
*** 3,14 ****
--- 3,18 ----
  import com.google.common.collect.Maps;
  import java.util.Map;
  import javax.annotation.Nullable;
+ import net.minecraft.client.Minecraft;
  import net.minecraft.client.gui.FontRenderer;
  import net.minecraft.client.model.ModelShulker;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.OpenGlHelper;
  import net.minecraft.client.renderer.RenderHelper;
+ import net.minecraft.client.renderer.Tessellator;
  import net.minecraft.client.renderer.texture.TextureManager;
+ import net.minecraft.client.renderer.texture.TextureMap;
+ import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
  import net.minecraft.crash.CrashReport;
  import net.minecraft.crash.CrashReportCategory;
  import net.minecraft.entity.Entity;
***************
*** 31,42 ****
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.RayTraceResult;
  import net.minecraft.world.World;
  
  public class TileEntityRendererDispatcher
  {
!     private final Map < Class <? extends TileEntity > , TileEntitySpecialRenderer <? extends TileEntity >> mapSpecialRenderers = Maps. < Class <? extends TileEntity > , TileEntitySpecialRenderer <? extends TileEntity >> newHashMap();
      public static TileEntityRendererDispatcher instance = new TileEntityRendererDispatcher();
!     private FontRenderer fontRenderer;
  
      /** The player's current X position (same as playerX) */
      public static double staticPlayerX;
--- 35,47 ----
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.RayTraceResult;
  import net.minecraft.world.World;
+ import optifine.Reflector;
  
  public class TileEntityRendererDispatcher
  {
!     public final Map<Class, TileEntitySpecialRenderer> mapSpecialRenderers = Maps.newHashMap();
      public static TileEntityRendererDispatcher instance = new TileEntityRendererDispatcher();
!     public FontRenderer fontRenderer;
  
      /** The player's current X position (same as playerX) */
      public static double staticPlayerX;
***************
*** 55,60 ****
--- 60,68 ----
      public double entityX;
      public double entityY;
      public double entityZ;
+     public TileEntity tileEntityRendered;
+     private Tessellator batchBuffer = new Tessellator(2097152);
+     private boolean drawingBatch = false;
  
      private TileEntityRendererDispatcher()
      {
***************
*** 85,91 ****
  
          if (tileentityspecialrenderer == null && teClass != TileEntity.class)
          {
!             tileentityspecialrenderer = this.getSpecialRendererByClass((Class <? extends TileEntity >)teClass.getSuperclass());
              this.mapSpecialRenderers.put(teClass, tileentityspecialrenderer);
          }
  
--- 93,99 ----
  
          if (tileentityspecialrenderer == null && teClass != TileEntity.class)
          {
!             tileentityspecialrenderer = this.getSpecialRendererByClass((Class<? extends TileEntity>) teClass.getSuperclass());
              this.mapSpecialRenderers.put(teClass, tileentityspecialrenderer);
          }
  
***************
*** 121,131 ****
          if (tileentityIn.getDistanceSq(this.entityX, this.entityY, this.entityZ) < tileentityIn.getMaxRenderDistanceSquared())
          {
              RenderHelper.enableStandardItemLighting();
!             int i = this.worldObj.getCombinedLight(tileentityIn.getPos(), 0);
!             int j = i % 65536;
!             int k = i / 65536;
!             OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j, (float)k);
!             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
              BlockPos blockpos = tileentityIn.getPos();
              this.func_192854_a(tileentityIn, (double)blockpos.getX() - staticPlayerX, (double)blockpos.getY() - staticPlayerY, (double)blockpos.getZ() - staticPlayerZ, partialTicks, destroyStage, 1.0F);
          }
--- 129,150 ----
          if (tileentityIn.getDistanceSq(this.entityX, this.entityY, this.entityZ) < tileentityIn.getMaxRenderDistanceSquared())
          {
              RenderHelper.enableStandardItemLighting();
!             boolean flag = true;
! 
!             if (Reflector.ForgeTileEntity_hasFastRenderer.exists())
!             {
!                 flag = !this.drawingBatch || !Reflector.callBoolean(tileentityIn, Reflector.ForgeTileEntity_hasFastRenderer);
!             }
! 
!             if (flag)
!             {
!                 int i = this.worldObj.getCombinedLight(tileentityIn.getPos(), 0);
!                 int j = i % 65536;
!                 int k = i / 65536;
!                 OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j, (float)k);
!                 GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
!             }
! 
              BlockPos blockpos = tileentityIn.getPos();
              this.func_192854_a(tileentityIn, (double)blockpos.getX() - staticPlayerX, (double)blockpos.getY() - staticPlayerY, (double)blockpos.getZ() - staticPlayerZ, partialTicks, destroyStage, 1.0F);
          }
***************
*** 152,158 ****
          {
              try
              {
!                 tileentityspecialrenderer.func_192841_a(p_192854_1_, p_192854_2_, p_192854_4_, p_192854_6_, p_192854_8_, p_192854_9_, p_192854_10_);
              }
              catch (Throwable throwable)
              {
--- 171,188 ----
          {
              try
              {
!                 this.tileEntityRendered = p_192854_1_;
! 
!                 if (this.drawingBatch && Reflector.callBoolean(p_192854_1_, Reflector.ForgeTileEntity_hasFastRenderer))
!                 {
!                     tileentityspecialrenderer.renderTileEntityFast(p_192854_1_, p_192854_2_, p_192854_4_, p_192854_6_, p_192854_8_, p_192854_9_, p_192854_10_, this.batchBuffer.getBuffer());
!                 }
!                 else
!                 {
!                     tileentityspecialrenderer.func_192841_a(p_192854_1_, p_192854_2_, p_192854_4_, p_192854_6_, p_192854_8_, p_192854_9_, p_192854_10_);
!                 }
! 
!                 this.tileEntityRendered = null;
              }
              catch (Throwable throwable)
              {
***************
*** 178,181 ****
--- 208,244 ----
      {
          return this.fontRenderer;
      }
+ 
+     public void preDrawBatch()
+     {
+         this.batchBuffer.getBuffer().begin(7, DefaultVertexFormats.BLOCK);
+         this.drawingBatch = true;
+     }
+ 
+     public void drawBatch(int p_drawBatch_1_)
+     {
+         this.renderEngine.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
+         RenderHelper.disableStandardItemLighting();
+         GlStateManager.blendFunc(770, 771);
+         GlStateManager.enableBlend();
+         GlStateManager.disableCull();
+ 
+         if (Minecraft.isAmbientOcclusionEnabled())
+         {
+             GlStateManager.shadeModel(7425);
+         }
+         else
+         {
+             GlStateManager.shadeModel(7424);
+         }
+ 
+         if (p_drawBatch_1_ > 0)
+         {
+             this.batchBuffer.getBuffer().sortVertexData(0.0F, 0.0F, 0.0F);
+         }
+ 
+         this.batchBuffer.draw();
+         RenderHelper.enableStandardItemLighting();
+         this.drawingBatch = false;
+     }
  }
diff -rc ./client/renderer/tileentity/TileEntitySignRenderer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity/TileEntitySignRenderer.java
*** ./client/renderer/tileentity/TileEntitySignRenderer.java	2018-11-18 13:18:49.136268000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity/TileEntitySignRenderer.java	2017-10-20 21:35:41.096953000 -0700
***************
*** 10,15 ****
--- 10,17 ----
  import net.minecraft.tileentity.TileEntitySign;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.text.ITextComponent;
+ import optifine.Config;
+ import optifine.CustomColors;
  
  public class TileEntitySignRenderer extends TileEntitySpecialRenderer<TileEntitySign>
  {
***************
*** 84,89 ****
--- 86,96 ----
          GlStateManager.depthMask(false);
          int i = 0;
  
+         if (Config.isCustomColors())
+         {
+             i = CustomColors.getSignTextColor(i);
+         }
+ 
          if (p_192841_9_ < 0)
          {
              for (int j = 0; j < p_192841_1_.signText.length; ++j)
***************
*** 97,107 ****
                      if (j == p_192841_1_.lineBeingEdited)
                      {
                          s = "> " + s + " <";
!                         fontrenderer.drawString(s, -fontrenderer.getStringWidth(s) / 2, j * 10 - p_192841_1_.signText.length * 5, 0);
                      }
                      else
                      {
!                         fontrenderer.drawString(s, -fontrenderer.getStringWidth(s) / 2, j * 10 - p_192841_1_.signText.length * 5, 0);
                      }
                  }
              }
--- 104,114 ----
                      if (j == p_192841_1_.lineBeingEdited)
                      {
                          s = "> " + s + " <";
!                         fontrenderer.drawString(s, -fontrenderer.getStringWidth(s) / 2, j * 10 - p_192841_1_.signText.length * 5, i);
                      }
                      else
                      {
!                         fontrenderer.drawString(s, -fontrenderer.getStringWidth(s) / 2, j * 10 - p_192841_1_.signText.length * 5, i);
                      }
                  }
              }
diff -rc ./client/renderer/tileentity/TileEntitySpecialRenderer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity/TileEntitySpecialRenderer.java
*** ./client/renderer/tileentity/TileEntitySpecialRenderer.java	2018-11-18 13:18:49.160254000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/tileentity/TileEntitySpecialRenderer.java	2017-10-20 21:01:22.451049000 -0700
***************
*** 1,6 ****
--- 1,7 ----
  package net.minecraft.client.renderer.tileentity;
  
  import net.minecraft.client.gui.FontRenderer;
+ import net.minecraft.client.renderer.BufferBuilder;
  import net.minecraft.client.renderer.EntityRenderer;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.OpenGlHelper;
***************
*** 10,20 ****
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.text.ITextComponent;
  import net.minecraft.world.World;
  
! public abstract class TileEntitySpecialRenderer<T extends TileEntity>
  {
      protected static final ResourceLocation[] DESTROY_STAGES = new ResourceLocation[] {new ResourceLocation("textures/blocks/destroy_stage_0.png"), new ResourceLocation("textures/blocks/destroy_stage_1.png"), new ResourceLocation("textures/blocks/destroy_stage_2.png"), new ResourceLocation("textures/blocks/destroy_stage_3.png"), new ResourceLocation("textures/blocks/destroy_stage_4.png"), new ResourceLocation("textures/blocks/destroy_stage_5.png"), new ResourceLocation("textures/blocks/destroy_stage_6.png"), new ResourceLocation("textures/blocks/destroy_stage_7.png"), new ResourceLocation("textures/blocks/destroy_stage_8.png"), new ResourceLocation("textures/blocks/destroy_stage_9.png")};
      protected TileEntityRendererDispatcher rendererDispatcher;
  
      public void func_192841_a(T p_192841_1_, double p_192841_2_, double p_192841_4_, double p_192841_6_, float p_192841_8_, int p_192841_9_, float p_192841_10_)
      {
--- 11,24 ----
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.text.ITextComponent;
  import net.minecraft.world.World;
+ import net.optifine.entity.model.IEntityRenderer;
  
! public abstract class TileEntitySpecialRenderer<T extends TileEntity> implements IEntityRenderer
  {
      protected static final ResourceLocation[] DESTROY_STAGES = new ResourceLocation[] {new ResourceLocation("textures/blocks/destroy_stage_0.png"), new ResourceLocation("textures/blocks/destroy_stage_1.png"), new ResourceLocation("textures/blocks/destroy_stage_2.png"), new ResourceLocation("textures/blocks/destroy_stage_3.png"), new ResourceLocation("textures/blocks/destroy_stage_4.png"), new ResourceLocation("textures/blocks/destroy_stage_5.png"), new ResourceLocation("textures/blocks/destroy_stage_6.png"), new ResourceLocation("textures/blocks/destroy_stage_7.png"), new ResourceLocation("textures/blocks/destroy_stage_8.png"), new ResourceLocation("textures/blocks/destroy_stage_9.png")};
      protected TileEntityRendererDispatcher rendererDispatcher;
+     private Class tileEntityClass = null;
+     private ResourceLocation locationTextureCustom = null;
  
      public void func_192841_a(T p_192841_1_, double p_192841_2_, double p_192841_4_, double p_192841_6_, float p_192841_8_, int p_192841_9_, float p_192841_10_)
      {
***************
*** 91,94 ****
--- 95,122 ----
              EntityRenderer.drawNameplate(this.getFontRenderer(), str, (float)x + 0.5F, (float)y + 1.5F, (float)z + 0.5F, 0, f, f1, false, false);
          }
      }
+ 
+     public void renderTileEntityFast(T p_renderTileEntityFast_1_, double p_renderTileEntityFast_2_, double p_renderTileEntityFast_4_, double p_renderTileEntityFast_6_, float p_renderTileEntityFast_8_, int p_renderTileEntityFast_9_, float p_renderTileEntityFast_10_, BufferBuilder p_renderTileEntityFast_11_)
+     {
+     }
+ 
+     public Class getEntityClass()
+     {
+         return this.tileEntityClass;
+     }
+ 
+     public void setEntityClass(Class p_setEntityClass_1_)
+     {
+         this.tileEntityClass = p_setEntityClass_1_;
+     }
+ 
+     public ResourceLocation getLocationTextureCustom()
+     {
+         return this.locationTextureCustom;
+     }
+ 
+     public void setLocationTextureCustom(ResourceLocation p_setLocationTextureCustom_1_)
+     {
+         this.locationTextureCustom = p_setLocationTextureCustom_1_;
+     }
  }
diff -rc ./client/renderer/VboRenderList.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/VboRenderList.java
*** ./client/renderer/VboRenderList.java	2018-11-18 13:18:46.047429000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/VboRenderList.java	2017-10-20 21:35:41.109982600 -0700
***************
*** 3,8 ****
--- 3,10 ----
  import net.minecraft.client.renderer.chunk.RenderChunk;
  import net.minecraft.client.renderer.vertex.VertexBuffer;
  import net.minecraft.util.BlockRenderLayer;
+ import optifine.Config;
+ import shadersmod.client.ShadersRender;
  
  public class VboRenderList extends ChunkRenderContainer
  {
***************
*** 30,40 ****
  
      private void setupArrayPointers()
      {
!         GlStateManager.glVertexPointer(3, 5126, 28, 0);
!         GlStateManager.glColorPointer(4, 5121, 28, 12);
!         GlStateManager.glTexCoordPointer(2, 5126, 28, 16);
!         OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
!         GlStateManager.glTexCoordPointer(2, 5122, 28, 24);
!         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
      }
  }
--- 32,49 ----
  
      private void setupArrayPointers()
      {
!         if (Config.isShaders())
!         {
!             ShadersRender.setupArrayPointersVbo();
!         }
!         else
!         {
!             GlStateManager.glVertexPointer(3, 5126, 28, 0);
!             GlStateManager.glColorPointer(4, 5121, 28, 12);
!             GlStateManager.glTexCoordPointer(2, 5126, 28, 16);
!             OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
!             GlStateManager.glTexCoordPointer(2, 5122, 28, 24);
!             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
!         }
      }
  }
diff -rc ./client/renderer/vertex/DefaultVertexFormats.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/vertex/DefaultVertexFormats.java
*** ./client/renderer/vertex/DefaultVertexFormats.java	2018-11-18 13:18:49.183239000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/vertex/DefaultVertexFormats.java	2017-10-20 21:35:39.973781200 -0700
***************
*** 1,9 ****
  package net.minecraft.client.renderer.vertex;
  
  public class DefaultVertexFormats
  {
!     public static final VertexFormat BLOCK = new VertexFormat();
!     public static final VertexFormat ITEM = new VertexFormat();
      public static final VertexFormat OLDMODEL_POSITION_TEX_NORMAL = new VertexFormat();
      public static final VertexFormat PARTICLE_POSITION_TEX_COLOR_LMAP = new VertexFormat();
      public static final VertexFormat POSITION = new VertexFormat();
--- 1,15 ----
  package net.minecraft.client.renderer.vertex;
  
+ import optifine.Config;
+ import optifine.Reflector;
+ import shadersmod.client.SVertexFormat;
+ 
  public class DefaultVertexFormats
  {
!     public static VertexFormat BLOCK = new VertexFormat();
!     public static VertexFormat ITEM = new VertexFormat();
!     private static final VertexFormat BLOCK_VANILLA = BLOCK;
!     private static final VertexFormat ITEM_VANILLA = ITEM;
      public static final VertexFormat OLDMODEL_POSITION_TEX_NORMAL = new VertexFormat();
      public static final VertexFormat PARTICLE_POSITION_TEX_COLOR_LMAP = new VertexFormat();
      public static final VertexFormat POSITION = new VertexFormat();
***************
*** 21,26 ****
--- 27,58 ----
      public static final VertexFormatElement NORMAL_3B = new VertexFormatElement(0, VertexFormatElement.EnumType.BYTE, VertexFormatElement.EnumUsage.NORMAL, 3);
      public static final VertexFormatElement PADDING_1B = new VertexFormatElement(0, VertexFormatElement.EnumType.BYTE, VertexFormatElement.EnumUsage.PADDING, 1);
  
+     public static void updateVertexFormats()
+     {
+         if (Config.isShaders())
+         {
+             BLOCK = SVertexFormat.makeDefVertexFormatBlock();
+             ITEM = SVertexFormat.makeDefVertexFormatItem();
+         }
+         else
+         {
+             BLOCK = BLOCK_VANILLA;
+             ITEM = ITEM_VANILLA;
+         }
+ 
+         if (Reflector.Attributes_DEFAULT_BAKED_FORMAT.exists())
+         {
+             VertexFormat vertexformat = ITEM;
+             VertexFormat vertexformat1 = (VertexFormat)Reflector.getFieldValue(Reflector.Attributes_DEFAULT_BAKED_FORMAT);
+             vertexformat1.clear();
+ 
+             for (int i = 0; i < vertexformat.getElementCount(); ++i)
+             {
+                 vertexformat1.addElement(vertexformat.getElement(i));
+             }
+         }
+     }
+ 
      static
      {
          BLOCK.addElement(POSITION_3F);
diff -rc ./client/renderer/ViewFrustum.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/ViewFrustum.java
*** ./client/renderer/ViewFrustum.java	2018-11-18 13:18:46.075412000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/ViewFrustum.java	2017-10-20 21:01:20.916598000 -0700
***************
*** 142,152 ****
      }
  
      @Nullable
!     protected RenderChunk getRenderChunk(BlockPos pos)
      {
!         int i = MathHelper.intFloorDiv(pos.getX(), 16);
!         int j = MathHelper.intFloorDiv(pos.getY(), 16);
!         int k = MathHelper.intFloorDiv(pos.getZ(), 16);
  
          if (j >= 0 && j < this.countChunksY)
          {
--- 142,152 ----
      }
  
      @Nullable
!     public RenderChunk getRenderChunk(BlockPos pos)
      {
!         int i = pos.getX() >> 4;
!         int j = pos.getY() >> 4;
!         int k = pos.getZ() >> 4;
  
          if (j >= 0 && j < this.countChunksY)
          {
diff -rc ./client/renderer/WorldVertexBufferUploader.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/WorldVertexBufferUploader.java
*** ./client/renderer/WorldVertexBufferUploader.java	2018-11-18 13:18:46.086408000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/renderer/WorldVertexBufferUploader.java	2017-10-20 21:35:41.135454600 -0700
***************
*** 4,9 ****
--- 4,12 ----
  import java.util.List;
  import net.minecraft.client.renderer.vertex.VertexFormat;
  import net.minecraft.client.renderer.vertex.VertexFormatElement;
+ import optifine.Config;
+ import optifine.Reflector;
+ import shadersmod.client.SVertexBuilder;
  
  public class WorldVertexBufferUploader
  {
***************
*** 15,82 ****
              int i = vertexformat.getNextOffset();
              ByteBuffer bytebuffer = vertexBufferIn.getByteBuffer();
              List<VertexFormatElement> list = vertexformat.getElements();
  
              for (int j = 0; j < list.size(); ++j)
              {
                  VertexFormatElement vertexformatelement = list.get(j);
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
-                 int k = vertexformatelement.getType().getGlConstant();
-                 int l = vertexformatelement.getIndex();
-                 bytebuffer.position(vertexformat.getOffset(j));
  
!                 switch (vertexformatelement$enumusage)
                  {
!                     case POSITION:
!                         GlStateManager.glVertexPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
!                         GlStateManager.glEnableClientState(32884);
!                         break;
! 
!                     case UV:
!                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + l);
!                         GlStateManager.glTexCoordPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
!                         GlStateManager.glEnableClientState(32888);
!                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
!                         break;
! 
!                     case COLOR:
!                         GlStateManager.glColorPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
!                         GlStateManager.glEnableClientState(32886);
!                         break;
! 
!                     case NORMAL:
!                         GlStateManager.glNormalPointer(k, i, bytebuffer);
!                         GlStateManager.glEnableClientState(32885);
                  }
              }
  
!             GlStateManager.glDrawArrays(vertexBufferIn.getDrawMode(), 0, vertexBufferIn.getVertexCount());
!             int i1 = 0;
  
!             for (int j1 = list.size(); i1 < j1; ++i1)
              {
!                 VertexFormatElement vertexformatelement1 = list.get(i1);
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage1 = vertexformatelement1.getUsage();
-                 int k1 = vertexformatelement1.getIndex();
  
!                 switch (vertexformatelement$enumusage1)
                  {
!                     case POSITION:
!                         GlStateManager.glDisableClientState(32884);
!                         break;
! 
!                     case UV:
!                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + k1);
!                         GlStateManager.glDisableClientState(32888);
!                         OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
!                         break;
! 
!                     case COLOR:
!                         GlStateManager.glDisableClientState(32886);
!                         GlStateManager.resetColor();
!                         break;
  
!                     case NORMAL:
!                         GlStateManager.glDisableClientState(32885);
                  }
              }
          }
--- 18,115 ----
              int i = vertexformat.getNextOffset();
              ByteBuffer bytebuffer = vertexBufferIn.getByteBuffer();
              List<VertexFormatElement> list = vertexformat.getElements();
+             boolean flag = Reflector.ForgeVertexFormatElementEnumUseage_preDraw.exists();
+             boolean flag1 = Reflector.ForgeVertexFormatElementEnumUseage_postDraw.exists();
  
              for (int j = 0; j < list.size(); ++j)
              {
                  VertexFormatElement vertexformatelement = list.get(j);
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
  
!                 if (flag)
                  {
!                     Reflector.callVoid(vertexformatelement$enumusage, Reflector.ForgeVertexFormatElementEnumUseage_preDraw, vertexformat, j, i, bytebuffer);
!                 }
!                 else
!                 {
!                     int k = vertexformatelement.getType().getGlConstant();
!                     int l = vertexformatelement.getIndex();
!                     bytebuffer.position(vertexformat.getOffset(j));
! 
!                     switch (vertexformatelement$enumusage)
!                     {
!                         case POSITION:
!                             GlStateManager.glVertexPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
!                             GlStateManager.glEnableClientState(32884);
!                             break;
! 
!                         case UV:
!                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + l);
!                             GlStateManager.glTexCoordPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
!                             GlStateManager.glEnableClientState(32888);
!                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
!                             break;
! 
!                         case COLOR:
!                             GlStateManager.glColorPointer(vertexformatelement.getElementCount(), k, i, bytebuffer);
!                             GlStateManager.glEnableClientState(32886);
!                             break;
! 
!                         case NORMAL:
!                             GlStateManager.glNormalPointer(k, i, bytebuffer);
!                             GlStateManager.glEnableClientState(32885);
!                     }
                  }
              }
  
!             if (vertexBufferIn.isMultiTexture())
!             {
!                 vertexBufferIn.drawMultiTexture();
!             }
!             else if (Config.isShaders())
!             {
!                 SVertexBuilder.drawArrays(vertexBufferIn.getDrawMode(), 0, vertexBufferIn.getVertexCount(), vertexBufferIn);
!             }
!             else
!             {
!                 GlStateManager.glDrawArrays(vertexBufferIn.getDrawMode(), 0, vertexBufferIn.getVertexCount());
!             }
! 
!             int j1 = 0;
  
!             for (int k1 = list.size(); j1 < k1; ++j1)
              {
!                 VertexFormatElement vertexformatelement1 = list.get(j1);
                  VertexFormatElement.EnumUsage vertexformatelement$enumusage1 = vertexformatelement1.getUsage();
  
!                 if (flag1)
!                 {
!                     Reflector.callVoid(vertexformatelement$enumusage1, Reflector.ForgeVertexFormatElementEnumUseage_postDraw, vertexformat, j1, i, bytebuffer);
!                 }
!                 else
                  {
!                     int i1 = vertexformatelement1.getIndex();
  
!                     switch (vertexformatelement$enumusage1)
!                     {
!                         case POSITION:
!                             GlStateManager.glDisableClientState(32884);
!                             break;
! 
!                         case UV:
!                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + i1);
!                             GlStateManager.glDisableClientState(32888);
!                             OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
!                             break;
! 
!                         case COLOR:
!                             GlStateManager.glDisableClientState(32886);
!                             GlStateManager.resetColor();
!                             break;
! 
!                         case NORMAL:
!                             GlStateManager.glDisableClientState(32885);
!                     }
                  }
              }
          }
diff -rc ./client/resources/AbstractResourcePack.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/resources/AbstractResourcePack.java
*** ./client/resources/AbstractResourcePack.java	2018-11-18 13:18:49.236210000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/resources/AbstractResourcePack.java	2017-10-20 21:01:22.500050000 -0700
***************
*** 22,28 ****
  public abstract class AbstractResourcePack implements IResourcePack
  {
      private static final Logger LOGGER = LogManager.getLogger();
!     protected final File resourcePackFile;
  
      public AbstractResourcePack(File resourcePackFileIn)
      {
--- 22,28 ----
  public abstract class AbstractResourcePack implements IResourcePack
  {
      private static final Logger LOGGER = LogManager.getLogger();
!     public final File resourcePackFile;
  
      public AbstractResourcePack(File resourcePackFileIn)
      {
diff -rc ./client/resources/DefaultResourcePack.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/resources/DefaultResourcePack.java
*** ./client/resources/DefaultResourcePack.java	2018-11-18 13:18:49.258197000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/resources/DefaultResourcePack.java	2017-10-20 21:35:39.967284100 -0700
***************
*** 14,24 ****
--- 14,27 ----
  import net.minecraft.client.resources.data.IMetadataSection;
  import net.minecraft.client.resources.data.MetadataSerializer;
  import net.minecraft.util.ResourceLocation;
+ import net.minecraft.util.Util;
+ import optifine.ReflectorForge;
  
  public class DefaultResourcePack implements IResourcePack
  {
      public static final Set<String> DEFAULT_RESOURCE_DOMAINS = ImmutableSet.<String>of("minecraft", "realms");
      private final ResourceIndex resourceIndex;
+     private static final boolean ON_WINDOWS = Util.getOSType() == Util.EnumOS.WINDOWS;
  
      public DefaultResourcePack(ResourceIndex resourceIndexIn)
      {
***************
*** 27,33 ****
  
      public InputStream getInputStream(ResourceLocation location) throws IOException
      {
!         InputStream inputstream = this.getResourceStream(location);
  
          if (inputstream != null)
          {
--- 30,36 ----
  
      public InputStream getInputStream(ResourceLocation location) throws IOException
      {
!         InputStream inputstream = this.getInputStreamAssets(location);
  
          if (inputstream != null)
          {
***************
*** 35,41 ****
          }
          else
          {
!             InputStream inputstream1 = this.getInputStreamAssets(location);
  
              if (inputstream1 != null)
              {
--- 38,44 ----
          }
          else
          {
!             InputStream inputstream1 = this.getResourceStream(location);
  
              if (inputstream1 != null)
              {
***************
*** 59,73 ****
      private InputStream getResourceStream(ResourceLocation location)
      {
          String s = "/assets/" + location.getResourceDomain() + "/" + location.getResourcePath();
  
!         try
          {
!             URL url = DefaultResourcePack.class.getResource(s);
!             return url != null && FolderResourcePack.func_191384_a(new File(url.getFile()), s) ? DefaultResourcePack.class.getResourceAsStream(s) : null;
          }
!         catch (IOException var4)
          {
!             return DefaultResourcePack.class.getResourceAsStream(s);
          }
      }
  
--- 62,84 ----
      private InputStream getResourceStream(ResourceLocation location)
      {
          String s = "/assets/" + location.getResourceDomain() + "/" + location.getResourcePath();
+         InputStream inputstream = ReflectorForge.getOptiFineResourceStream(s);
  
!         if (inputstream != null)
          {
!             return inputstream;
          }
!         else
          {
!             try
!             {
!                 URL url = DefaultResourcePack.class.getResource(s);
!                 return url != null && this.validatePath(new File(url.getFile()), s) ? DefaultResourcePack.class.getResourceAsStream(s) : null;
!             }
!             catch (IOException var5)
!             {
!                 return DefaultResourcePack.class.getResourceAsStream(s);
!             }
          }
      }
  
***************
*** 91,101 ****
          }
          catch (RuntimeException var4)
          {
!             return (T)null;
          }
!         catch (FileNotFoundException var5)
          {
!             return (T)null;
          }
      }
  
--- 102,112 ----
          }
          catch (RuntimeException var4)
          {
!             return (T)(null);
          }
!         catch (FileNotFoundException var51)
          {
!             return (T)(null);
          }
      }
  
***************
*** 108,111 ****
--- 119,141 ----
      {
          return "Default";
      }
+ 
+     private boolean validatePath(File p_validatePath_1_, String p_validatePath_2_) throws IOException
+     {
+         String s = p_validatePath_1_.getPath();
+ 
+         if (s.startsWith("file:"))
+         {
+             if (ON_WINDOWS)
+             {
+                 s = s.replace("\\", "/");
+             }
+ 
+             return s.endsWith(p_validatePath_2_);
+         }
+         else
+         {
+             return FolderResourcePack.func_191384_a(p_validatePath_1_, p_validatePath_2_);
+         }
+     }
  }
diff -rc ./client/resources/I18n.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/resources/I18n.java
*** ./client/resources/I18n.java	2018-11-18 13:18:49.326158000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/resources/I18n.java	2018-11-18 13:33:32.211022800 -0800
***************
*** 1,5 ****
--- 1,7 ----
  package net.minecraft.client.resources;
  
+ import java.util.Map;
+ 
  public class I18n
  {
      private static Locale i18nLocale;
***************
*** 21,24 ****
--- 23,35 ----
      {
          return i18nLocale.hasKey(key);
      }
+ 
+     public static Map getLocaleProperties()
+     {
+         return i18nLocale.properties;
+     }
+ 
+ 	public static Locale getI18nLocale() {
+ 		return i18nLocale;
+ 	}
  }
diff -rc ./client/resources/Locale.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/resources/Locale.java
*** ./client/resources/Locale.java	2018-11-18 13:18:49.409110000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/resources/Locale.java	2018-11-18 13:33:37.474549200 -0800
***************
*** 18,24 ****
      /** Splits on "=" */
      private static final Splitter SPLITTER = Splitter.on('=').limit(2);
      private static final Pattern PATTERN = Pattern.compile("%(\\d+\\$)?[\\d\\.]*[df]");
!     Map<String, String> properties = Maps.<String, String>newHashMap();
      private boolean unicode;
  
      /**
--- 18,24 ----
      /** Splits on "=" */
      private static final Splitter SPLITTER = Splitter.on('=').limit(2);
      private static final Pattern PATTERN = Pattern.compile("%(\\d+\\$)?[\\d\\.]*[df]");
!     public Map<String, String> properties = Maps.<String, String>newHashMap();
      private boolean unicode;
  
      /**
diff -rc ./client/resources/ResourcePackRepository.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/resources/ResourcePackRepository.java
*** ./client/resources/ResourcePackRepository.java	2018-11-18 13:18:49.560023000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/resources/ResourcePackRepository.java	2018-11-18 13:32:56.178235900 -0800
***************
*** 64,70 ****
      private final ReentrantLock lock = new ReentrantLock();
      private ListenableFuture<Object> downloadingPacks;
      private List<ResourcePackRepository.Entry> repositoryEntriesAll = Lists.<ResourcePackRepository.Entry>newArrayList();
!     private final List<ResourcePackRepository.Entry> repositoryEntries = Lists.<ResourcePackRepository.Entry>newArrayList();
  
      public ResourcePackRepository(File dirResourcepacksIn, File dirServerResourcepacksIn, IResourcePack rprDefaultResourcePackIn, MetadataSerializer rprMetadataSerializerIn, GameSettings settings)
      {
--- 64,70 ----
      private final ReentrantLock lock = new ReentrantLock();
      private ListenableFuture<Object> downloadingPacks;
      private List<ResourcePackRepository.Entry> repositoryEntriesAll = Lists.<ResourcePackRepository.Entry>newArrayList();
!     public final List<ResourcePackRepository.Entry> repositoryEntries = Lists.<ResourcePackRepository.Entry>newArrayList();
  
      public ResourcePackRepository(File dirResourcepacksIn, File dirServerResourcepacksIn, IResourcePack rprDefaultResourcePackIn, MetadataSerializer rprMetadataSerializerIn, GameSettings settings)
      {
***************
*** 102,108 ****
          Map<String, String> map = Maps.<String, String>newHashMap();
          map.put("X-Minecraft-Username", Minecraft.getMinecraft().getSession().getUsername());
          map.put("X-Minecraft-UUID", Minecraft.getMinecraft().getSession().getPlayerID());
!         map.put("X-Minecraft-Version", "1.12");
          return map;
      }
  
--- 102,108 ----
          Map<String, String> map = Maps.<String, String>newHashMap();
          map.put("X-Minecraft-Username", Minecraft.getMinecraft().getSession().getUsername());
          map.put("X-Minecraft-UUID", Minecraft.getMinecraft().getSession().getPlayerID());
!         map.put("X-Minecraft-Version", "1.12.2");
          return map;
      }
  
***************
*** 180,186 ****
                      resourcepackrepository$entry.updateResourcePack();
                      list.add(resourcepackrepository$entry);
                  }
!                 catch (Exception var6)
                  {
                      list.remove(resourcepackrepository$entry);
                  }
--- 180,186 ----
                      resourcepackrepository$entry.updateResourcePack();
                      list.add(resourcepackrepository$entry);
                  }
!                 catch (Exception var61)
                  {
                      list.remove(resourcepackrepository$entry);
                  }
***************
*** 254,261 ****
              {
                  if (this.checkHash(s1, file1))
                  {
!                     ListenableFuture listenablefuture1 = this.setResourcePackInstance(file1);
!                     return listenablefuture1;
                  }
  
                  LOGGER.warn("Deleting file {}", (Object)file1);
--- 254,262 ----
              {
                  if (this.checkHash(s1, file1))
                  {
!                     ListenableFuture listenablefuture2 = this.setResourcePackInstance(file1);
!                     ListenableFuture listenablefuture3 = listenablefuture2;
!                     return listenablefuture3;
                  }
  
                  LOGGER.warn("Deleting file {}", (Object)file1);
***************
*** 297,303 ****
                  }
              });
              ListenableFuture listenablefuture = this.downloadingPacks;
!             return listenablefuture;
          }
          finally
          {
--- 298,305 ----
                  }
              });
              ListenableFuture listenablefuture = this.downloadingPacks;
!             ListenableFuture listenablefuture1 = listenablefuture;
!             return listenablefuture1;
          }
          finally
          {
***************
*** 325,333 ****
  
              LOGGER.warn("File {} had wrong hash (expected {}, found {}).", p_190113_2_, p_190113_1_, s);
          }
!         catch (IOException ioexception)
          {
!             LOGGER.warn("File {} couldn't be hashed.", p_190113_2_, ioexception);
          }
  
          return false;
--- 327,335 ----
  
              LOGGER.warn("File {} had wrong hash (expected {}, found {}).", p_190113_2_, p_190113_1_, s);
          }
!         catch (IOException ioexception1)
          {
!             LOGGER.warn("File {} couldn't be hashed.", p_190113_2_, ioexception1);
          }
  
          return false;
***************
*** 369,377 ****
                  }
              }
          }
!         catch (IllegalArgumentException illegalargumentexception)
          {
!             LOGGER.error("Error while deleting old server resource pack : {}", (Object)illegalargumentexception.getMessage());
          }
      }
  
--- 371,379 ----
                  }
              }
          }
!         catch (IllegalArgumentException illegalargumentexception1)
          {
!             LOGGER.error("Error while deleting old server resource pack : {}", (Object)illegalargumentexception1.getMessage());
          }
      }
  
***************
*** 429,435 ****
          private PackMetadataSection rePackMetadataSection;
          private ResourceLocation locationTexturePackIcon;
  
!         private Entry(File resourcePackFileIn)
          {
              this(ResourcePackRepository.this.func_191399_b(resourcePackFileIn));
          }
--- 431,437 ----
          private PackMetadataSection rePackMetadataSection;
          private ResourceLocation locationTexturePackIcon;
  
!         protected Entry(File resourcePackFileIn)
          {
              this(ResourcePackRepository.this.func_191399_b(resourcePackFileIn));
          }
***************
*** 449,472 ****
          {
              BufferedImage bufferedimage = null;
  
!             try
!             {
!                 bufferedimage = this.reResourcePack.getPackImage();
!             }
!             catch (IOException var5)
!             {
!                 ;
!             }
! 
!             if (bufferedimage == null)
              {
                  try
                  {
!                     bufferedimage = TextureUtil.readBufferedImage(Minecraft.getMinecraft().getResourceManager().getResource(ResourcePackRepository.field_191400_f).getInputStream());
                  }
!                 catch (IOException ioexception)
                  {
!                     throw new Error("Couldn't bind resource pack icon", ioexception);
                  }
              }
  
--- 451,477 ----
          {
              BufferedImage bufferedimage = null;
  
!             if (this.locationTexturePackIcon == null)
              {
                  try
                  {
!                     bufferedimage = this.reResourcePack.getPackImage();
                  }
!                 catch (IOException var5)
                  {
!                     ;
!                 }
! 
!                 if (bufferedimage == null)
!                 {
!                     try
!                     {
!                         bufferedimage = TextureUtil.readBufferedImage(Minecraft.getMinecraft().getResourceManager().getResource(ResourcePackRepository.field_191400_f).getInputStream());
!                     }
!                     catch (IOException ioexception)
!                     {
!                         throw new Error("Couldn't bind resource pack icon", ioexception);
!                     }
                  }
              }
  
diff -rc ./client/settings/GameSettings.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/settings/GameSettings.java
*** ./client/settings/GameSettings.java	2018-11-18 13:18:49.842861000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/settings/GameSettings.java	2017-10-20 21:35:40.103851200 -0700
***************
*** 6,27 ****
--- 6,32 ----
  import com.google.common.collect.Maps;
  import com.google.common.collect.Sets;
  import com.google.gson.Gson;
+ import java.io.BufferedReader;
  import java.io.File;
  import java.io.FileInputStream;
  import java.io.FileOutputStream;
+ import java.io.InputStreamReader;
  import java.io.OutputStreamWriter;
  import java.io.PrintWriter;
  import java.io.Writer;
  import java.lang.reflect.ParameterizedType;
  import java.lang.reflect.Type;
  import java.nio.charset.StandardCharsets;
+ import java.util.Arrays;
  import java.util.Iterator;
  import java.util.List;
  import java.util.Map;
  import java.util.Set;
  import net.minecraft.client.Minecraft;
  import net.minecraft.client.gui.GuiNewChat;
+ import net.minecraft.client.gui.GuiScreen;
  import net.minecraft.client.gui.chat.NarratorChatListener;
+ import net.minecraft.client.renderer.OpenGlHelper;
  import net.minecraft.client.renderer.texture.TextureMap;
  import net.minecraft.client.resources.I18n;
  import net.minecraft.client.tutorial.TutorialSteps;
***************
*** 35,40 ****
--- 40,56 ----
  import net.minecraft.util.datafix.FixTypes;
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.world.EnumDifficulty;
+ import optifine.ClearWater;
+ import optifine.Config;
+ import optifine.CustomColors;
+ import optifine.CustomGuis;
+ import optifine.CustomSky;
+ import optifine.DynamicLights;
+ import optifine.Lang;
+ import optifine.NaturalTextures;
+ import optifine.RandomMobs;
+ import optifine.Reflector;
+ 
  import org.apache.commons.io.IOUtils;
  import org.apache.commons.lang3.ArrayUtils;
  import org.apache.logging.log4j.LogManager;
***************
*** 42,47 ****
--- 58,65 ----
  import org.lwjgl.input.Keyboard;
  import org.lwjgl.input.Mouse;
  import org.lwjgl.opengl.Display;
+ import org.lwjgl.opengl.DisplayMode;
+ import shadersmod.client.Shaders;
  
  public class GameSettings
  {
***************
*** 183,191 ****
--- 201,292 ----
      /** Game settings language */
      public String language;
      public boolean forceUnicodeFont;
+     public int ofFogType = 1;
+     public float ofFogStart = 0.8F;
+     public int ofMipmapType = 0;
+     public boolean ofOcclusionFancy = false;
+     public boolean ofSmoothFps = false;
+     public boolean ofSmoothWorld = Config.isSingleProcessor();
+     public boolean ofLazyChunkLoading = Config.isSingleProcessor();
+     public float ofAoLevel = 1.0F;
+     public int ofAaLevel = 0;
+     public int ofAfLevel = 1;
+     public int ofClouds = 0;
+     public float ofCloudsHeight = 0.0F;
+     public int ofTrees = 0;
+     public int ofRain = 0;
+     public int ofDroppedItems = 0;
+     public int ofBetterGrass = 3;
+     public int ofAutoSaveTicks = 4000;
+     public boolean ofLagometer = false;
+     public boolean ofProfiler = false;
+     public boolean ofShowFps = false;
+     public boolean ofWeather = true;
+     public boolean ofSky = true;
+     public boolean ofStars = true;
+     public boolean ofSunMoon = true;
+     public int ofVignette = 0;
+     public int ofChunkUpdates = 1;
+     public boolean ofChunkUpdatesDynamic = false;
+     public int ofTime = 0;
+     public boolean ofClearWater = false;
+     public boolean ofBetterSnow = false;
+     public String ofFullscreenMode = "Default";
+     public boolean ofSwampColors = true;
+     public boolean ofRandomMobs = true;
+     public boolean ofSmoothBiomes = true;
+     public boolean ofCustomFonts = true;
+     public boolean ofCustomColors = true;
+     public boolean ofCustomSky = true;
+     public boolean ofShowCapes = true;
+     public int ofConnectedTextures = 2;
+     public boolean ofCustomItems = true;
+     public boolean ofNaturalTextures = false;
+     public boolean ofFastMath = false;
+     public boolean ofFastRender = false;
+     public int ofTranslucentBlocks = 0;
+     public boolean ofDynamicFov = true;
+     public boolean ofAlternateBlocks = true;
+     public int ofDynamicLights = 3;
+     public boolean ofCustomEntityModels = true;
+     public boolean ofCustomGuis = true;
+     public int ofScreenshotSize = 1;
+     public int ofAnimatedWater = 0;
+     public int ofAnimatedLava = 0;
+     public boolean ofAnimatedFire = true;
+     public boolean ofAnimatedPortal = true;
+     public boolean ofAnimatedRedstone = true;
+     public boolean ofAnimatedExplosion = true;
+     public boolean ofAnimatedFlame = true;
+     public boolean ofAnimatedSmoke = true;
+     public boolean ofVoidParticles = true;
+     public boolean ofWaterParticles = true;
+     public boolean ofRainSplash = true;
+     public boolean ofPortalParticles = true;
+     public boolean ofPotionParticles = true;
+     public boolean ofFireworkParticles = true;
+     public boolean ofDrippingWaterLava = true;
+     public boolean ofAnimatedTerrain = true;
+     public boolean ofAnimatedTextures = true;
+     public static final int DEFAULT = 0;
+     public static final int FAST = 1;
+     public static final int FANCY = 2;
+     public static final int OFF = 3;
+     public static final int SMART = 4;
+     public static final int ANIM_ON = 0;
+     public static final int ANIM_GENERATED = 1;
+     public static final int ANIM_OFF = 2;
+     public static final String DEFAULT_STR = "Default";
+     private static final int[] OF_TREES_VALUES = new int[] {0, 1, 4, 2};
+     private static final int[] OF_DYNAMIC_LIGHTS = new int[] {3, 1, 2};
+     private static final String[] KEYS_DYNAMIC_LIGHTS = new String[] {"options.off", "options.graphics.fast", "options.graphics.fancy"};
+     public KeyBinding ofKeyBindZoom;
+     private File optionsFileOF;
+     private boolean needsResourceRefresh = false;
  
      public GameSettings(Minecraft mcIn, File optionsFileIn)
      {
+         this.setForgeKeybindProperties();
          this.keyBindings = (KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindCommand, this.keyBindScreenshot, this.keyBindTogglePerspective, this.keyBindSmoothCamera, this.keyBindFullscreen, this.keyBindSpectatorOutlines, this.keyBindSwapHands, this.field_193629_ap, this.field_193630_aq, this.field_194146_ao}, this.keyBindsHotbar);
          this.difficulty = EnumDifficulty.NORMAL;
          this.lastServer = "";
***************
*** 204,214 ****
--- 305,323 ----
          }
  
          this.renderDistanceChunks = mcIn.isJava64bit() ? 12 : 8;
+         this.optionsFileOF = new File(optionsFileIn, "optionsof.txt");
+         this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
+         this.ofKeyBindZoom = new KeyBinding("of.key.zoom", 46, "key.categories.misc");
+         this.keyBindings = (KeyBinding[])ArrayUtils.add(this.keyBindings, this.ofKeyBindZoom);
+         GameSettings.Options.RENDER_DISTANCE.setValueMax(32.0F);
+         this.renderDistanceChunks = 8;
          this.loadOptions();
+         Config.initGameSettings(this);
      }
  
      public GameSettings()
      {
+         this.setForgeKeybindProperties();
          this.keyBindings = (KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindCommand, this.keyBindScreenshot, this.keyBindTogglePerspective, this.keyBindSmoothCamera, this.keyBindFullscreen, this.keyBindSpectatorOutlines, this.keyBindSwapHands, this.field_193629_ap, this.field_193630_aq, this.field_194146_ao}, this.keyBindsHotbar);
          this.difficulty = EnumDifficulty.NORMAL;
          this.lastServer = "";
***************
*** 275,280 ****
--- 384,391 ----
       */
      public void setOptionFloatValue(GameSettings.Options settingsOption, float value)
      {
+         this.setOptionFloatValueOF(settingsOption, value);
+ 
          if (settingsOption == GameSettings.Options.SENSITIVITY)
          {
              this.mouseSensitivity = value;
***************
*** 293,298 ****
--- 404,418 ----
          if (settingsOption == GameSettings.Options.FRAMERATE_LIMIT)
          {
              this.limitFramerate = (int)value;
+             this.enableVsync = false;
+ 
+             if (this.limitFramerate <= 0)
+             {
+                 this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
+                 this.enableVsync = true;
+             }
+ 
+             this.updateVSync();
          }
  
          if (settingsOption == GameSettings.Options.CHAT_OPACITY)
***************
*** 351,356 ****
--- 471,478 ----
       */
      public void setOptionValue(GameSettings.Options settingsOption, int value)
      {
+         this.setOptionValueOF(settingsOption, value);
+ 
          if (settingsOption == GameSettings.Options.RENDER_DISTANCE)
          {
              this.setOptionFloatValue(settingsOption, MathHelper.clamp((float)(this.renderDistanceChunks + value), settingsOption.getValueMin(), settingsOption.getValueMax()));
***************
*** 368,374 ****
  
          if (settingsOption == GameSettings.Options.GUI_SCALE)
          {
!             this.guiScale = this.guiScale + value & 3;
          }
  
          if (settingsOption == GameSettings.Options.PARTICLES)
--- 490,521 ----
  
          if (settingsOption == GameSettings.Options.GUI_SCALE)
          {
!             this.guiScale += value;
! 
!             if (GuiScreen.isShiftKeyDown())
!             {
!                 this.guiScale = 0;
!             }
! 
!             DisplayMode displaymode = Config.getLargestDisplayMode();
!             int i = displaymode.getWidth() / 320;
!             int j = displaymode.getHeight() / 240;
!             int k = Math.min(i, j);
! 
!             if (this.guiScale < 0)
!             {
!                 this.guiScale = k - 1;
!             }
! 
!             if (this.mc.isUnicode() && this.guiScale % 2 != 0)
!             {
!                 this.guiScale += value;
!             }
! 
!             if (this.guiScale < 0 || this.guiScale >= k)
!             {
!                 this.guiScale = 0;
!             }
          }
  
          if (settingsOption == GameSettings.Options.PARTICLES)
***************
*** 399,404 ****
--- 546,557 ----
  
          if (settingsOption == GameSettings.Options.ANAGLYPH)
          {
+             if (!this.anaglyph && Config.isShaders())
+             {
+                 Config.showGuiMessage(Lang.get("of.message.an.shaders1"), Lang.get("of.message.an.shaders2"));
+                 return;
+             }
+ 
              this.anaglyph = !this.anaglyph;
              this.mc.refreshResources();
          }
***************
*** 406,411 ****
--- 559,565 ----
          if (settingsOption == GameSettings.Options.GRAPHICS)
          {
              this.fancyGraphics = !this.fancyGraphics;
+             this.updateRenderClouds();
              this.mc.renderGlobal.loadRenderers();
          }
  
***************
*** 516,522 ****
  
      public float getOptionFloatValue(GameSettings.Options settingOption)
      {
!         if (settingOption == GameSettings.Options.FOV)
          {
              return this.fovSetting;
          }
--- 670,682 ----
  
      public float getOptionFloatValue(GameSettings.Options settingOption)
      {
!         float f = this.getOptionFloatValueOF(settingOption);
! 
!         if (f != Float.MAX_VALUE)
!         {
!             return f;
!         }
!         else if (settingOption == GameSettings.Options.FOV)
          {
              return this.fovSetting;
          }
***************
*** 651,790 ****
       */
      public String getKeyBinding(GameSettings.Options settingOption)
      {
!         String s = I18n.format(settingOption.getEnumString()) + ": ";
  
!         if (settingOption.getEnumFloat())
          {
!             float f1 = this.getOptionFloatValue(settingOption);
!             float f = settingOption.normalizeValue(f1);
  
!             if (settingOption == GameSettings.Options.SENSITIVITY)
              {
!                 if (f == 0.0F)
                  {
!                     return s + I18n.format("options.sensitivity.min");
                  }
!                 else
                  {
!                     return f == 1.0F ? s + I18n.format("options.sensitivity.max") : s + (int)(f * 200.0F) + "%";
                  }
!             }
!             else if (settingOption == GameSettings.Options.FOV)
!             {
!                 if (f1 == 70.0F)
                  {
!                     return s + I18n.format("options.fov.min");
                  }
!                 else
                  {
!                     return f1 == 110.0F ? s + I18n.format("options.fov.max") : s + (int)f1;
                  }
!             }
!             else if (settingOption == GameSettings.Options.FRAMERATE_LIMIT)
!             {
!                 return f1 == settingOption.valueMax ? s + I18n.format("options.framerateLimit.max") : s + I18n.format("options.framerate", (int)f1);
!             }
!             else if (settingOption == GameSettings.Options.RENDER_CLOUDS)
!             {
!                 return f1 == settingOption.valueMin ? s + I18n.format("options.cloudHeight.min") : s + ((int)f1 + 128);
!             }
!             else if (settingOption == GameSettings.Options.GAMMA)
!             {
!                 if (f == 0.0F)
                  {
!                     return s + I18n.format("options.gamma.min");
                  }
                  else
                  {
!                     return f == 1.0F ? s + I18n.format("options.gamma.max") : s + "+" + (int)(f * 100.0F) + "%";
                  }
              }
!             else if (settingOption == GameSettings.Options.SATURATION)
              {
!                 return s + (int)(f * 400.0F) + "%";
              }
!             else if (settingOption == GameSettings.Options.CHAT_OPACITY)
              {
!                 return s + (int)(f * 90.0F + 10.0F) + "%";
              }
!             else if (settingOption == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED)
              {
!                 return s + GuiNewChat.calculateChatboxHeight(f) + "px";
              }
!             else if (settingOption == GameSettings.Options.CHAT_HEIGHT_FOCUSED)
              {
!                 return s + GuiNewChat.calculateChatboxHeight(f) + "px";
              }
!             else if (settingOption == GameSettings.Options.CHAT_WIDTH)
              {
!                 return s + GuiNewChat.calculateChatboxWidth(f) + "px";
              }
!             else if (settingOption == GameSettings.Options.RENDER_DISTANCE)
              {
!                 return s + I18n.format("options.chunks", (int)f1);
              }
!             else if (settingOption == GameSettings.Options.MIPMAP_LEVELS)
              {
!                 return f1 == 0.0F ? s + I18n.format("options.off") : s + (int)f1;
              }
!             else
              {
!                 return f == 0.0F ? s + I18n.format("options.off") : s + (int)(f * 100.0F) + "%";
              }
!         }
!         else if (settingOption.getEnumBoolean())
!         {
!             boolean flag = this.getOptionOrdinalValue(settingOption);
!             return flag ? s + I18n.format("options.on") : s + I18n.format("options.off");
!         }
!         else if (settingOption == GameSettings.Options.MAIN_HAND)
!         {
!             return s + this.mainHand;
!         }
!         else if (settingOption == GameSettings.Options.GUI_SCALE)
!         {
!             return s + getTranslation(GUISCALES, this.guiScale);
!         }
!         else if (settingOption == GameSettings.Options.CHAT_VISIBILITY)
!         {
!             return s + I18n.format(this.chatVisibility.getResourceKey());
!         }
!         else if (settingOption == GameSettings.Options.PARTICLES)
!         {
!             return s + getTranslation(PARTICLES, this.particleSetting);
!         }
!         else if (settingOption == GameSettings.Options.AMBIENT_OCCLUSION)
!         {
!             return s + getTranslation(AMBIENT_OCCLUSIONS, this.ambientOcclusion);
!         }
!         else if (settingOption == GameSettings.Options.RENDER_CLOUDS)
!         {
!             return s + getTranslation(CLOUDS_TYPES, this.clouds);
!         }
!         else if (settingOption == GameSettings.Options.GRAPHICS)
!         {
!             if (this.fancyGraphics)
              {
!                 return s + I18n.format("options.graphics.fancy");
              }
              else
              {
!                 String s1 = "options.graphics.fast";
!                 return s + I18n.format("options.graphics.fast");
              }
          }
-         else if (settingOption == GameSettings.Options.ATTACK_INDICATOR)
-         {
-             return s + getTranslation(ATTACK_INDICATORS, this.attackIndicator);
-         }
-         else if (settingOption == GameSettings.Options.NARRATOR)
-         {
-             return NarratorChatListener.field_193643_a.func_193640_a() ? s + getTranslation(field_193632_b, this.field_192571_R) : s + I18n.format("options.narrator.notavailable");
-         }
-         else
-         {
-             return s;
-         }
      }
  
      /**
--- 811,959 ----
       */
      public String getKeyBinding(GameSettings.Options settingOption)
      {
!         String s = this.getKeyBindingOF(settingOption);
  
!         if (s != null)
!         {
!             return s;
!         }
!         else
          {
!             String s1 = I18n.format(settingOption.getEnumString()) + ": ";
  
!             if (settingOption.getEnumFloat())
              {
!                 float f1 = this.getOptionFloatValue(settingOption);
!                 float f = settingOption.normalizeValue(f1);
! 
!                 if (settingOption == GameSettings.Options.SENSITIVITY)
                  {
!                     if (f == 0.0F)
!                     {
!                         return s1 + I18n.format("options.sensitivity.min");
!                     }
!                     else
!                     {
!                         return f == 1.0F ? s1 + I18n.format("options.sensitivity.max") : s1 + (int)(f * 200.0F) + "%";
!                     }
                  }
!                 else if (settingOption == GameSettings.Options.FOV)
                  {
!                     if (f1 == 70.0F)
!                     {
!                         return s1 + I18n.format("options.fov.min");
!                     }
!                     else
!                     {
!                         return f1 == 110.0F ? s1 + I18n.format("options.fov.max") : s1 + (int)f1;
!                     }
                  }
!                 else if (settingOption == GameSettings.Options.FRAMERATE_LIMIT)
                  {
!                     return f1 == settingOption.valueMax ? s1 + I18n.format("options.framerateLimit.max") : s1 + I18n.format("options.framerate", (int)f1);
                  }
!                 else if (settingOption == GameSettings.Options.RENDER_CLOUDS)
                  {
!                     return f1 == settingOption.valueMin ? s1 + I18n.format("options.cloudHeight.min") : s1 + ((int)f1 + 128);
                  }
!                 else if (settingOption == GameSettings.Options.GAMMA)
!                 {
!                     if (f == 0.0F)
!                     {
!                         return s1 + I18n.format("options.gamma.min");
!                     }
!                     else
!                     {
!                         return f == 1.0F ? s1 + I18n.format("options.gamma.max") : s1 + "+" + (int)(f * 100.0F) + "%";
!                     }
!                 }
!                 else if (settingOption == GameSettings.Options.SATURATION)
!                 {
!                     return s1 + (int)(f * 400.0F) + "%";
!                 }
!                 else if (settingOption == GameSettings.Options.CHAT_OPACITY)
!                 {
!                     return s1 + (int)(f * 90.0F + 10.0F) + "%";
!                 }
!                 else if (settingOption == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED)
!                 {
!                     return s1 + GuiNewChat.calculateChatboxHeight(f) + "px";
!                 }
!                 else if (settingOption == GameSettings.Options.CHAT_HEIGHT_FOCUSED)
!                 {
!                     return s1 + GuiNewChat.calculateChatboxHeight(f) + "px";
!                 }
!                 else if (settingOption == GameSettings.Options.CHAT_WIDTH)
!                 {
!                     return s1 + GuiNewChat.calculateChatboxWidth(f) + "px";
!                 }
!                 else if (settingOption == GameSettings.Options.RENDER_DISTANCE)
!                 {
!                     return s1 + I18n.format("options.chunks", (int)f1);
!                 }
!                 else if (settingOption == GameSettings.Options.MIPMAP_LEVELS)
                  {
!                     return f1 == 0.0F ? s1 + I18n.format("options.off") : s1 + (int)f1;
                  }
                  else
                  {
!                     return f == 0.0F ? s1 + I18n.format("options.off") : s1 + (int)(f * 100.0F) + "%";
                  }
              }
!             else if (settingOption.getEnumBoolean())
              {
!                 boolean flag = this.getOptionOrdinalValue(settingOption);
!                 return flag ? s1 + I18n.format("options.on") : s1 + I18n.format("options.off");
              }
!             else if (settingOption == GameSettings.Options.MAIN_HAND)
              {
!                 return s1 + this.mainHand;
              }
!             else if (settingOption == GameSettings.Options.GUI_SCALE)
              {
!                 return this.guiScale >= GUISCALES.length ? s1 + this.guiScale + "x" : s1 + getTranslation(GUISCALES, this.guiScale);
              }
!             else if (settingOption == GameSettings.Options.CHAT_VISIBILITY)
              {
!                 return s1 + I18n.format(this.chatVisibility.getResourceKey());
              }
!             else if (settingOption == GameSettings.Options.PARTICLES)
              {
!                 return s1 + getTranslation(PARTICLES, this.particleSetting);
              }
!             else if (settingOption == GameSettings.Options.AMBIENT_OCCLUSION)
              {
!                 return s1 + getTranslation(AMBIENT_OCCLUSIONS, this.ambientOcclusion);
              }
!             else if (settingOption == GameSettings.Options.RENDER_CLOUDS)
              {
!                 return s1 + getTranslation(CLOUDS_TYPES, this.clouds);
              }
!             else if (settingOption == GameSettings.Options.GRAPHICS)
              {
!                 if (this.fancyGraphics)
!                 {
!                     return s1 + I18n.format("options.graphics.fancy");
!                 }
!                 else
!                 {
!                     String s2 = "options.graphics.fast";
!                     return s1 + I18n.format("options.graphics.fast");
!                 }
              }
!             else if (settingOption == GameSettings.Options.ATTACK_INDICATOR)
              {
!                 return s1 + getTranslation(ATTACK_INDICATORS, this.attackIndicator);
!             }
!             else if (settingOption == GameSettings.Options.NARRATOR)
!             {
!                 return NarratorChatListener.field_193643_a.func_193640_a() ? s1 + getTranslation(field_193632_b, this.field_192571_R) : s1 + I18n.format("options.narrator.notavailable");
              }
              else
              {
!                 return s1;
              }
          }
      }
  
      /**
***************
*** 800,806 ****
              }
  
              this.soundLevels.clear();
!             List<String> list = IOUtils.readLines(new FileInputStream(this.optionsFile));
              NBTTagCompound nbttagcompound = new NBTTagCompound();
  
              for (String s : list)
--- 969,975 ----
              }
  
              this.soundLevels.clear();
!             List<String> list = IOUtils.readLines(new FileInputStream(this.optionsFile), StandardCharsets.UTF_8);
              NBTTagCompound nbttagcompound = new NBTTagCompound();
  
              for (String s : list)
***************
*** 810,816 ****
                      Iterator<String> iterator = COLON_SPLITTER.omitEmptyStrings().limit(2).split(s).iterator();
                      nbttagcompound.setString(iterator.next(), iterator.next());
                  }
!                 catch (Exception var10)
                  {
                      LOGGER.warn("Skipping bad option: {}", (Object)s);
                  }
--- 979,985 ----
                      Iterator<String> iterator = COLON_SPLITTER.omitEmptyStrings().limit(2).split(s).iterator();
                      nbttagcompound.setString(iterator.next(), iterator.next());
                  }
!                 catch (Exception var12)
                  {
                      LOGGER.warn("Skipping bad option: {}", (Object)s);
                  }
***************
*** 877,882 ****
--- 1046,1061 ----
                      if ("maxFps".equals(s1))
                      {
                          this.limitFramerate = Integer.parseInt(s2);
+ 
+                         if (this.enableVsync)
+                         {
+                             this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
+                         }
+ 
+                         if (this.limitFramerate <= 0)
+                         {
+                             this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
+                         }
                      }
  
                      if ("fboEnable".equals(s1))
***************
*** 892,897 ****
--- 1071,1077 ----
                      if ("fancyGraphics".equals(s1))
                      {
                          this.fancyGraphics = "true".equals(s2);
+                         this.updateRenderClouds();
                      }
  
                      if ("tutorialStep".equals(s1))
***************
*** 1015,1020 ****
--- 1195,1207 ----
                      if ("enableVsync".equals(s1))
                      {
                          this.enableVsync = "true".equals(s2);
+ 
+                         if (this.enableVsync)
+                         {
+                             this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
+                         }
+ 
+                         this.updateVSync();
                      }
  
                      if ("useVbo".equals(s1))
***************
*** 1136,1142 ****
                      {
                          if (s1.equals("key_" + keybinding.getKeyDescription()))
                          {
!                             keybinding.setKeyCode(Integer.parseInt(s2));
                          }
                      }
  
--- 1323,1346 ----
                      {
                          if (s1.equals("key_" + keybinding.getKeyDescription()))
                          {
!                             if (Reflector.KeyModifier_valueFromString.exists())
!                             {
!                                 if (s2.indexOf(58) != -1)
!                                 {
!                                     String[] astring = s2.split(":");
!                                     Object object = Reflector.call(Reflector.KeyModifier_valueFromString, astring[1]);
!                                     Reflector.call(keybinding, Reflector.ForgeKeyBinding_setKeyModifierAndCode, object, Integer.parseInt(astring[0]));
!                                 }
!                                 else
!                                 {
!                                     Object object1 = Reflector.getFieldValue(Reflector.KeyModifier_NONE);
!                                     Reflector.call(keybinding, Reflector.ForgeKeyBinding_setKeyModifierAndCode, object1, Integer.parseInt(s2));
!                                 }
!                             }
!                             else
!                             {
!                                 keybinding.setKeyCode(Integer.parseInt(s2));
!                             }
                          }
                      }
  
***************
*** 1156,1173 ****
                          }
                      }
                  }
!                 catch (Exception var11)
                  {
                      LOGGER.warn("Skipping bad option: {}:{}", s1, s2);
                  }
              }
  
              KeyBinding.resetKeyBindingArrayAndHash();
          }
!         catch (Exception exception)
          {
!             LOGGER.error("Failed to load options", (Throwable)exception);
          }
      }
  
      private NBTTagCompound dataFix(NBTTagCompound p_189988_1_)
--- 1360,1380 ----
                          }
                      }
                  }
!                 catch (Exception exception1)
                  {
                      LOGGER.warn("Skipping bad option: {}:{}", s1, s2);
+                     exception1.printStackTrace();
                  }
              }
  
              KeyBinding.resetKeyBindingArrayAndHash();
          }
!         catch (Exception exception1)
          {
!             LOGGER.error("Failed to load options", (Throwable)exception1);
          }
+ 
+         this.loadOfOptions();
      }
  
      private NBTTagCompound dataFix(NBTTagCompound p_189988_1_)
***************
*** 1206,1217 ****
       */
      public void saveOptions()
      {
          PrintWriter printwriter = null;
  
          try
          {
              printwriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.optionsFile), StandardCharsets.UTF_8));
!             printwriter.println("version:1139");
              printwriter.println("invertYMouse:" + this.invertMouse);
              printwriter.println("mouseSensitivity:" + this.mouseSensitivity);
              printwriter.println("fov:" + (this.fovSetting - 70.0F) / 40.0F);
--- 1413,1434 ----
       */
      public void saveOptions()
      {
+         if (Reflector.FMLClientHandler.exists())
+         {
+             Object object = Reflector.call(Reflector.FMLClientHandler_instance);
+ 
+             if (object != null && Reflector.callBoolean(object, Reflector.FMLClientHandler_isLoading))
+             {
+                 return;
+             }
+         }
+ 
          PrintWriter printwriter = null;
  
          try
          {
              printwriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.optionsFile), StandardCharsets.UTF_8));
!             printwriter.println("version:1343");
              printwriter.println("invertYMouse:" + this.invertMouse);
              printwriter.println("mouseSensitivity:" + this.mouseSensitivity);
              printwriter.println("fov:" + (this.fovSetting - 70.0F) / 40.0F);
***************
*** 1282,1288 ****
  
              for (KeyBinding keybinding : this.keyBindings)
              {
!                 printwriter.println("key_" + keybinding.getKeyDescription() + ":" + keybinding.getKeyCode());
              }
  
              for (SoundCategory soundcategory : SoundCategory.values())
--- 1499,1515 ----
  
              for (KeyBinding keybinding : this.keyBindings)
              {
!                 if (Reflector.ForgeKeyBinding_getKeyModifier.exists())
!                 {
!                     String s = "key_" + keybinding.getKeyDescription() + ":" + keybinding.getKeyCode();
!                     Object object1 = Reflector.call(keybinding, Reflector.ForgeKeyBinding_getKeyModifier);
!                     Object object2 = Reflector.getFieldValue(Reflector.KeyModifier_NONE);
!                     printwriter.println(object1 != object2 ? s + ":" + object1 : s);
!                 }
!                 else
!                 {
!                     printwriter.println("key_" + keybinding.getKeyDescription() + ":" + keybinding.getKeyCode());
!                 }
              }
  
              for (SoundCategory soundcategory : SoundCategory.values())
***************
*** 1304,1309 ****
--- 1531,1537 ----
              IOUtils.closeQuietly((Writer)printwriter);
          }
  
+         this.saveOfOptions();
          this.sendSettingsToServer();
      }
  
***************
*** 1385,1390 ****
--- 1613,3465 ----
          return this.useNativeTransport;
      }
  
+     private void setOptionFloatValueOF(GameSettings.Options p_setOptionFloatValueOF_1_, float p_setOptionFloatValueOF_2_)
+     {
+         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.CLOUD_HEIGHT)
+         {
+             this.ofCloudsHeight = p_setOptionFloatValueOF_2_;
+             this.mc.renderGlobal.resetClouds();
+         }
+ 
+         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AO_LEVEL)
+         {
+             this.ofAoLevel = p_setOptionFloatValueOF_2_;
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AA_LEVEL)
+         {
+             int i = (int)p_setOptionFloatValueOF_2_;
+ 
+             if (i > 0 && Config.isShaders())
+             {
+                 Config.showGuiMessage(Lang.get("of.message.aa.shaders1"), Lang.get("of.message.aa.shaders2"));
+                 return;
+             }
+ 
+             int[] aint = new int[] {0, 2, 4, 6, 8, 12, 16};
+             this.ofAaLevel = 0;
+ 
+             for (int j = 0; j < aint.length; ++j)
+             {
+                 if (i >= aint[j])
+                 {
+                     this.ofAaLevel = aint[j];
+                 }
+             }
+ 
+             this.ofAaLevel = Config.limit(this.ofAaLevel, 0, 16);
+         }
+ 
+         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AF_LEVEL)
+         {
+             int k = (int)p_setOptionFloatValueOF_2_;
+ 
+             if (k > 1 && Config.isShaders())
+             {
+                 Config.showGuiMessage(Lang.get("of.message.af.shaders1"), Lang.get("of.message.af.shaders2"));
+                 return;
+             }
+ 
+             for (this.ofAfLevel = 1; this.ofAfLevel * 2 <= k; this.ofAfLevel *= 2)
+             {
+                 ;
+             }
+ 
+             this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
+             this.mc.refreshResources();
+         }
+ 
+         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.MIPMAP_TYPE)
+         {
+             int l = (int)p_setOptionFloatValueOF_2_;
+             this.ofMipmapType = Config.limit(l, 0, 3);
+             this.mc.refreshResources();
+         }
+ 
+         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.FULLSCREEN_MODE)
+         {
+             int i1 = (int)p_setOptionFloatValueOF_2_ - 1;
+             String[] astring = Config.getDisplayModeNames();
+ 
+             if (i1 < 0 || i1 >= astring.length)
+             {
+                 this.ofFullscreenMode = "Default";
+                 return;
+             }
+ 
+             this.ofFullscreenMode = astring[i1];
+         }
+     }
+ 
+     private float getOptionFloatValueOF(GameSettings.Options p_getOptionFloatValueOF_1_)
+     {
+         if (p_getOptionFloatValueOF_1_ == GameSettings.Options.CLOUD_HEIGHT)
+         {
+             return this.ofCloudsHeight;
+         }
+         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.AO_LEVEL)
+         {
+             return this.ofAoLevel;
+         }
+         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.AA_LEVEL)
+         {
+             return (float)this.ofAaLevel;
+         }
+         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.AF_LEVEL)
+         {
+             return (float)this.ofAfLevel;
+         }
+         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.MIPMAP_TYPE)
+         {
+             return (float)this.ofMipmapType;
+         }
+         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.FRAMERATE_LIMIT)
+         {
+             return (float)this.limitFramerate == GameSettings.Options.FRAMERATE_LIMIT.getValueMax() && this.enableVsync ? 0.0F : (float)this.limitFramerate;
+         }
+         else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.FULLSCREEN_MODE)
+         {
+             if (this.ofFullscreenMode.equals("Default"))
+             {
+                 return 0.0F;
+             }
+             else
+             {
+                 List list = Arrays.asList(Config.getDisplayModeNames());
+                 int i = list.indexOf(this.ofFullscreenMode);
+                 return i < 0 ? 0.0F : (float)(i + 1);
+             }
+         }
+         else
+         {
+             return Float.MAX_VALUE;
+         }
+     }
+ 
+     private void setOptionValueOF(GameSettings.Options p_setOptionValueOF_1_, int p_setOptionValueOF_2_)
+     {
+         if (p_setOptionValueOF_1_ == GameSettings.Options.FOG_FANCY)
+         {
+             switch (this.ofFogType)
+             {
+                 case 1:
+                     this.ofFogType = 2;
+ 
+                     if (!Config.isFancyFogAvailable())
+                     {
+                         this.ofFogType = 3;
+                     }
+ 
+                     break;
+ 
+                 case 2:
+                     this.ofFogType = 3;
+                     break;
+ 
+                 case 3:
+                     this.ofFogType = 1;
+                     break;
+ 
+                 default:
+                     this.ofFogType = 1;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.FOG_START)
+         {
+             this.ofFogStart += 0.2F;
+ 
+             if (this.ofFogStart > 0.81F)
+             {
+                 this.ofFogStart = 0.2F;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_FPS)
+         {
+             this.ofSmoothFps = !this.ofSmoothFps;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_WORLD)
+         {
+             this.ofSmoothWorld = !this.ofSmoothWorld;
+             Config.updateThreadPriorities();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CLOUDS)
+         {
+             ++this.ofClouds;
+ 
+             if (this.ofClouds > 3)
+             {
+                 this.ofClouds = 0;
+             }
+ 
+             this.updateRenderClouds();
+             this.mc.renderGlobal.resetClouds();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.TREES)
+         {
+             this.ofTrees = nextValue(this.ofTrees, OF_TREES_VALUES);
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.DROPPED_ITEMS)
+         {
+             ++this.ofDroppedItems;
+ 
+             if (this.ofDroppedItems > 2)
+             {
+                 this.ofDroppedItems = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.RAIN)
+         {
+             ++this.ofRain;
+ 
+             if (this.ofRain > 3)
+             {
+                 this.ofRain = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_WATER)
+         {
+             ++this.ofAnimatedWater;
+ 
+             if (this.ofAnimatedWater == 1)
+             {
+                 ++this.ofAnimatedWater;
+             }
+ 
+             if (this.ofAnimatedWater > 2)
+             {
+                 this.ofAnimatedWater = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_LAVA)
+         {
+             ++this.ofAnimatedLava;
+ 
+             if (this.ofAnimatedLava == 1)
+             {
+                 ++this.ofAnimatedLava;
+             }
+ 
+             if (this.ofAnimatedLava > 2)
+             {
+                 this.ofAnimatedLava = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_FIRE)
+         {
+             this.ofAnimatedFire = !this.ofAnimatedFire;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_PORTAL)
+         {
+             this.ofAnimatedPortal = !this.ofAnimatedPortal;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_REDSTONE)
+         {
+             this.ofAnimatedRedstone = !this.ofAnimatedRedstone;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_EXPLOSION)
+         {
+             this.ofAnimatedExplosion = !this.ofAnimatedExplosion;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_FLAME)
+         {
+             this.ofAnimatedFlame = !this.ofAnimatedFlame;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_SMOKE)
+         {
+             this.ofAnimatedSmoke = !this.ofAnimatedSmoke;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.VOID_PARTICLES)
+         {
+             this.ofVoidParticles = !this.ofVoidParticles;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.WATER_PARTICLES)
+         {
+             this.ofWaterParticles = !this.ofWaterParticles;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.PORTAL_PARTICLES)
+         {
+             this.ofPortalParticles = !this.ofPortalParticles;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.POTION_PARTICLES)
+         {
+             this.ofPotionParticles = !this.ofPotionParticles;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.FIREWORK_PARTICLES)
+         {
+             this.ofFireworkParticles = !this.ofFireworkParticles;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.DRIPPING_WATER_LAVA)
+         {
+             this.ofDrippingWaterLava = !this.ofDrippingWaterLava;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_TERRAIN)
+         {
+             this.ofAnimatedTerrain = !this.ofAnimatedTerrain;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_TEXTURES)
+         {
+             this.ofAnimatedTextures = !this.ofAnimatedTextures;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.RAIN_SPLASH)
+         {
+             this.ofRainSplash = !this.ofRainSplash;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.LAGOMETER)
+         {
+             this.ofLagometer = !this.ofLagometer;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SHOW_FPS)
+         {
+             this.ofShowFps = !this.ofShowFps;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.AUTOSAVE_TICKS)
+         {
+             this.ofAutoSaveTicks *= 10;
+ 
+             if (this.ofAutoSaveTicks > 40000)
+             {
+                 this.ofAutoSaveTicks = 40;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.BETTER_GRASS)
+         {
+             ++this.ofBetterGrass;
+ 
+             if (this.ofBetterGrass > 3)
+             {
+                 this.ofBetterGrass = 1;
+             }
+ 
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CONNECTED_TEXTURES)
+         {
+             ++this.ofConnectedTextures;
+ 
+             if (this.ofConnectedTextures > 3)
+             {
+                 this.ofConnectedTextures = 1;
+             }
+ 
+             if (this.ofConnectedTextures == 2)
+             {
+                 this.mc.renderGlobal.loadRenderers();
+             }
+             else
+             {
+                 this.mc.refreshResources();
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.WEATHER)
+         {
+             this.ofWeather = !this.ofWeather;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SKY)
+         {
+             this.ofSky = !this.ofSky;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.STARS)
+         {
+             this.ofStars = !this.ofStars;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SUN_MOON)
+         {
+             this.ofSunMoon = !this.ofSunMoon;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.VIGNETTE)
+         {
+             ++this.ofVignette;
+ 
+             if (this.ofVignette > 2)
+             {
+                 this.ofVignette = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CHUNK_UPDATES)
+         {
+             ++this.ofChunkUpdates;
+ 
+             if (this.ofChunkUpdates > 5)
+             {
+                 this.ofChunkUpdates = 1;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CHUNK_UPDATES_DYNAMIC)
+         {
+             this.ofChunkUpdatesDynamic = !this.ofChunkUpdatesDynamic;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.TIME)
+         {
+             ++this.ofTime;
+ 
+             if (this.ofTime > 2)
+             {
+                 this.ofTime = 0;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CLEAR_WATER)
+         {
+             this.ofClearWater = !this.ofClearWater;
+             this.updateWaterOpacity();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.PROFILER)
+         {
+             this.ofProfiler = !this.ofProfiler;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.BETTER_SNOW)
+         {
+             this.ofBetterSnow = !this.ofBetterSnow;
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SWAMP_COLORS)
+         {
+             this.ofSwampColors = !this.ofSwampColors;
+             CustomColors.updateUseDefaultGrassFoliageColors();
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.RANDOM_MOBS)
+         {
+             this.ofRandomMobs = !this.ofRandomMobs;
+             RandomMobs.resetTextures();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_BIOMES)
+         {
+             this.ofSmoothBiomes = !this.ofSmoothBiomes;
+             CustomColors.updateUseDefaultGrassFoliageColors();
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_FONTS)
+         {
+             this.ofCustomFonts = !this.ofCustomFonts;
+             this.mc.fontRendererObj.onResourceManagerReload(Config.getResourceManager());
+             this.mc.standardGalacticFontRenderer.onResourceManagerReload(Config.getResourceManager());
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_COLORS)
+         {
+             this.ofCustomColors = !this.ofCustomColors;
+             CustomColors.update();
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_ITEMS)
+         {
+             this.ofCustomItems = !this.ofCustomItems;
+             this.mc.refreshResources();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_SKY)
+         {
+             this.ofCustomSky = !this.ofCustomSky;
+             CustomSky.update();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SHOW_CAPES)
+         {
+             this.ofShowCapes = !this.ofShowCapes;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.NATURAL_TEXTURES)
+         {
+             this.ofNaturalTextures = !this.ofNaturalTextures;
+             NaturalTextures.update();
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_MATH)
+         {
+             this.ofFastMath = !this.ofFastMath;
+             MathHelper.fastMath = this.ofFastMath;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_RENDER)
+         {
+             if (!this.ofFastRender && Config.isShaders())
+             {
+                 Config.showGuiMessage(Lang.get("of.message.fr.shaders1"), Lang.get("of.message.fr.shaders2"));
+                 return;
+             }
+ 
+             this.ofFastRender = !this.ofFastRender;
+ 
+             if (this.ofFastRender)
+             {
+                 this.mc.entityRenderer.stopUseShader();
+             }
+ 
+             Config.updateFramebufferSize();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.TRANSLUCENT_BLOCKS)
+         {
+             if (this.ofTranslucentBlocks == 0)
+             {
+                 this.ofTranslucentBlocks = 1;
+             }
+             else if (this.ofTranslucentBlocks == 1)
+             {
+                 this.ofTranslucentBlocks = 2;
+             }
+             else if (this.ofTranslucentBlocks == 2)
+             {
+                 this.ofTranslucentBlocks = 0;
+             }
+             else
+             {
+                 this.ofTranslucentBlocks = 0;
+             }
+ 
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.LAZY_CHUNK_LOADING)
+         {
+             this.ofLazyChunkLoading = !this.ofLazyChunkLoading;
+             Config.updateAvailableProcessors();
+ 
+             if (!Config.isSingleProcessor())
+             {
+                 this.ofLazyChunkLoading = false;
+             }
+ 
+             this.mc.renderGlobal.loadRenderers();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.DYNAMIC_FOV)
+         {
+             this.ofDynamicFov = !this.ofDynamicFov;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ALTERNATE_BLOCKS)
+         {
+             this.ofAlternateBlocks = !this.ofAlternateBlocks;
+             this.mc.refreshResources();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.DYNAMIC_LIGHTS)
+         {
+             this.ofDynamicLights = nextValue(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
+             DynamicLights.removeLights(this.mc.renderGlobal);
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.SCREENSHOT_SIZE)
+         {
+             ++this.ofScreenshotSize;
+ 
+             if (this.ofScreenshotSize > 4)
+             {
+                 this.ofScreenshotSize = 1;
+             }
+ 
+             if (!OpenGlHelper.isFramebufferEnabled())
+             {
+                 this.ofScreenshotSize = 1;
+             }
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_ENTITY_MODELS)
+         {
+             this.ofCustomEntityModels = !this.ofCustomEntityModels;
+             this.mc.refreshResources();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_GUIS)
+         {
+             this.ofCustomGuis = !this.ofCustomGuis;
+             CustomGuis.update();
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.HELD_ITEM_TOOLTIPS)
+         {
+             this.heldItemTooltips = !this.heldItemTooltips;
+         }
+ 
+         if (p_setOptionValueOF_1_ == GameSettings.Options.ADVANCED_TOOLTIPS)
+         {
+             this.advancedItemTooltips = !this.advancedItemTooltips;
+         }
+     }
+ 
+     private String getKeyBindingOF(GameSettings.Options p_getKeyBindingOF_1_)
+     {
+         String s = I18n.format(p_getKeyBindingOF_1_.getEnumString()) + ": ";
+ 
+         if (s == null)
+         {
+             s = p_getKeyBindingOF_1_.getEnumString();
+         }
+ 
+         if (p_getKeyBindingOF_1_ == GameSettings.Options.RENDER_DISTANCE)
+         {
+             int l = (int)this.getOptionFloatValue(p_getKeyBindingOF_1_);
+             String s1 = I18n.format("of.options.renderDistance.tiny");
+             int i = 2;
+ 
+             if (l >= 4)
+             {
+                 s1 = I18n.format("of.options.renderDistance.short");
+                 i = 4;
+             }
+ 
+             if (l >= 8)
+             {
+                 s1 = I18n.format("of.options.renderDistance.normal");
+                 i = 8;
+             }
+ 
+             if (l >= 16)
+             {
+                 s1 = I18n.format("of.options.renderDistance.far");
+                 i = 16;
+             }
+ 
+             if (l >= 32)
+             {
+                 s1 = Lang.get("of.options.renderDistance.extreme");
+                 i = 32;
+             }
+ 
+             int j = this.renderDistanceChunks - i;
+             String s2 = s1;
+ 
+             if (j > 0)
+             {
+                 s2 = s1 + "+";
+             }
+ 
+             return s + l + " " + s2 + "";
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FOG_FANCY)
+         {
+             switch (this.ofFogType)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 case 3:
+                     return s + Lang.getOff();
+ 
+                 default:
+                     return s + Lang.getOff();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FOG_START)
+         {
+             return s + this.ofFogStart;
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.MIPMAP_TYPE)
+         {
+             switch (this.ofMipmapType)
+             {
+                 case 0:
+                     return s + Lang.get("of.options.mipmap.nearest");
+ 
+                 case 1:
+                     return s + Lang.get("of.options.mipmap.linear");
+ 
+                 case 2:
+                     return s + Lang.get("of.options.mipmap.bilinear");
+ 
+                 case 3:
+                     return s + Lang.get("of.options.mipmap.trilinear");
+ 
+                 default:
+                     return s + "of.options.mipmap.nearest";
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_FPS)
+         {
+             return this.ofSmoothFps ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_WORLD)
+         {
+             return this.ofSmoothWorld ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CLOUDS)
+         {
+             switch (this.ofClouds)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 case 3:
+                     return s + Lang.getOff();
+ 
+                 default:
+                     return s + Lang.getDefault();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.TREES)
+         {
+             switch (this.ofTrees)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 case 3:
+                 default:
+                     return s + Lang.getDefault();
+ 
+                 case 4:
+                     return s + Lang.get("of.general.smart");
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DROPPED_ITEMS)
+         {
+             switch (this.ofDroppedItems)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 default:
+                     return s + Lang.getDefault();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.RAIN)
+         {
+             switch (this.ofRain)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 case 3:
+                     return s + Lang.getOff();
+ 
+                 default:
+                     return s + Lang.getDefault();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_WATER)
+         {
+             switch (this.ofAnimatedWater)
+             {
+                 case 1:
+                     return s + Lang.get("of.options.animation.dynamic");
+ 
+                 case 2:
+                     return s + Lang.getOff();
+ 
+                 default:
+                     return s + Lang.getOn();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_LAVA)
+         {
+             switch (this.ofAnimatedLava)
+             {
+                 case 1:
+                     return s + Lang.get("of.options.animation.dynamic");
+ 
+                 case 2:
+                     return s + Lang.getOff();
+ 
+                 default:
+                     return s + Lang.getOn();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_FIRE)
+         {
+             return this.ofAnimatedFire ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_PORTAL)
+         {
+             return this.ofAnimatedPortal ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_REDSTONE)
+         {
+             return this.ofAnimatedRedstone ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_EXPLOSION)
+         {
+             return this.ofAnimatedExplosion ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_FLAME)
+         {
+             return this.ofAnimatedFlame ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_SMOKE)
+         {
+             return this.ofAnimatedSmoke ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.VOID_PARTICLES)
+         {
+             return this.ofVoidParticles ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.WATER_PARTICLES)
+         {
+             return this.ofWaterParticles ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.PORTAL_PARTICLES)
+         {
+             return this.ofPortalParticles ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.POTION_PARTICLES)
+         {
+             return this.ofPotionParticles ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FIREWORK_PARTICLES)
+         {
+             return this.ofFireworkParticles ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DRIPPING_WATER_LAVA)
+         {
+             return this.ofDrippingWaterLava ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_TERRAIN)
+         {
+             return this.ofAnimatedTerrain ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_TEXTURES)
+         {
+             return this.ofAnimatedTextures ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.RAIN_SPLASH)
+         {
+             return this.ofRainSplash ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.LAGOMETER)
+         {
+             return this.ofLagometer ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SHOW_FPS)
+         {
+             return this.ofShowFps ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.AUTOSAVE_TICKS)
+         {
+             if (this.ofAutoSaveTicks <= 40)
+             {
+                 return s + Lang.get("of.options.save.default");
+             }
+             else if (this.ofAutoSaveTicks <= 400)
+             {
+                 return s + Lang.get("of.options.save.20s");
+             }
+             else
+             {
+                 return this.ofAutoSaveTicks <= 4000 ? s + Lang.get("of.options.save.3min") : s + Lang.get("of.options.save.30min");
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.BETTER_GRASS)
+         {
+             switch (this.ofBetterGrass)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 default:
+                     return s + Lang.getOff();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CONNECTED_TEXTURES)
+         {
+             switch (this.ofConnectedTextures)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 default:
+                     return s + Lang.getOff();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.WEATHER)
+         {
+             return this.ofWeather ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SKY)
+         {
+             return this.ofSky ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.STARS)
+         {
+             return this.ofStars ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SUN_MOON)
+         {
+             return this.ofSunMoon ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.VIGNETTE)
+         {
+             switch (this.ofVignette)
+             {
+                 case 1:
+                     return s + Lang.getFast();
+ 
+                 case 2:
+                     return s + Lang.getFancy();
+ 
+                 default:
+                     return s + Lang.getDefault();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CHUNK_UPDATES)
+         {
+             return s + this.ofChunkUpdates;
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CHUNK_UPDATES_DYNAMIC)
+         {
+             return this.ofChunkUpdatesDynamic ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.TIME)
+         {
+             if (this.ofTime == 1)
+             {
+                 return s + Lang.get("of.options.time.dayOnly");
+             }
+             else
+             {
+                 return this.ofTime == 2 ? s + Lang.get("of.options.time.nightOnly") : s + Lang.getDefault();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CLEAR_WATER)
+         {
+             return this.ofClearWater ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.AA_LEVEL)
+         {
+             String s3 = "";
+ 
+             if (this.ofAaLevel != Config.getAntialiasingLevel())
+             {
+                 s3 = " (" + Lang.get("of.general.restart") + ")";
+             }
+ 
+             return this.ofAaLevel == 0 ? s + Lang.getOff() + s3 : s + this.ofAaLevel + s3;
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.AF_LEVEL)
+         {
+             return this.ofAfLevel == 1 ? s + Lang.getOff() : s + this.ofAfLevel;
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.PROFILER)
+         {
+             return this.ofProfiler ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.BETTER_SNOW)
+         {
+             return this.ofBetterSnow ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SWAMP_COLORS)
+         {
+             return this.ofSwampColors ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.RANDOM_MOBS)
+         {
+             return this.ofRandomMobs ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_BIOMES)
+         {
+             return this.ofSmoothBiomes ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_FONTS)
+         {
+             return this.ofCustomFonts ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_COLORS)
+         {
+             return this.ofCustomColors ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_SKY)
+         {
+             return this.ofCustomSky ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SHOW_CAPES)
+         {
+             return this.ofShowCapes ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_ITEMS)
+         {
+             return this.ofCustomItems ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.NATURAL_TEXTURES)
+         {
+             return this.ofNaturalTextures ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FAST_MATH)
+         {
+             return this.ofFastMath ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FAST_RENDER)
+         {
+             return this.ofFastRender ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.TRANSLUCENT_BLOCKS)
+         {
+             if (this.ofTranslucentBlocks == 1)
+             {
+                 return s + Lang.getFast();
+             }
+             else
+             {
+                 return this.ofTranslucentBlocks == 2 ? s + Lang.getFancy() : s + Lang.getDefault();
+             }
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.LAZY_CHUNK_LOADING)
+         {
+             return this.ofLazyChunkLoading ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DYNAMIC_FOV)
+         {
+             return this.ofDynamicFov ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ALTERNATE_BLOCKS)
+         {
+             return this.ofAlternateBlocks ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.DYNAMIC_LIGHTS)
+         {
+             int k = indexOf(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
+             return s + getTranslation(KEYS_DYNAMIC_LIGHTS, k);
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.SCREENSHOT_SIZE)
+         {
+             return this.ofScreenshotSize <= 1 ? s + Lang.getDefault() : s + this.ofScreenshotSize + "x";
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_ENTITY_MODELS)
+         {
+             return this.ofCustomEntityModels ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_GUIS)
+         {
+             return this.ofCustomGuis ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FULLSCREEN_MODE)
+         {
+             return this.ofFullscreenMode.equals("Default") ? s + Lang.getDefault() : s + this.ofFullscreenMode;
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.HELD_ITEM_TOOLTIPS)
+         {
+             return this.heldItemTooltips ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.ADVANCED_TOOLTIPS)
+         {
+             return this.advancedItemTooltips ? s + Lang.getOn() : s + Lang.getOff();
+         }
+         else if (p_getKeyBindingOF_1_ == GameSettings.Options.FRAMERATE_LIMIT)
+         {
+             float f = this.getOptionFloatValue(p_getKeyBindingOF_1_);
+ 
+             if (f == 0.0F)
+             {
+                 return s + Lang.get("of.options.framerateLimit.vsync");
+             }
+             else
+             {
+                 return f == p_getKeyBindingOF_1_.valueMax ? s + I18n.format("options.framerateLimit.max") : s + (int)f + " fps";
+             }
+         }
+         else
+         {
+             return null;
+         }
+     }
+ 
+     public void loadOfOptions()
+     {
+         try
+         {
+             File file1 = this.optionsFileOF;
+ 
+             if (!file1.exists())
+             {
+                 file1 = this.optionsFile;
+             }
+ 
+             if (!file1.exists())
+             {
+                 return;
+             }
+ 
+             BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(new FileInputStream(file1), StandardCharsets.UTF_8));
+             String s = "";
+ 
+             while ((s = bufferedreader.readLine()) != null)
+             {
+                 try
+                 {
+                     String[] astring = s.split(":");
+ 
+                     if (astring[0].equals("ofRenderDistanceChunks") && astring.length >= 2)
+                     {
+                         this.renderDistanceChunks = Integer.valueOf(astring[1]).intValue();
+                         this.renderDistanceChunks = Config.limit(this.renderDistanceChunks, 2, 1024);
+                     }
+ 
+                     if (astring[0].equals("ofFogType") && astring.length >= 2)
+                     {
+                         this.ofFogType = Integer.valueOf(astring[1]).intValue();
+                         this.ofFogType = Config.limit(this.ofFogType, 1, 3);
+                     }
+ 
+                     if (astring[0].equals("ofFogStart") && astring.length >= 2)
+                     {
+                         this.ofFogStart = Float.valueOf(astring[1]).floatValue();
+ 
+                         if (this.ofFogStart < 0.2F)
+                         {
+                             this.ofFogStart = 0.2F;
+                         }
+ 
+                         if (this.ofFogStart > 0.81F)
+                         {
+                             this.ofFogStart = 0.8F;
+                         }
+                     }
+ 
+                     if (astring[0].equals("ofMipmapType") && astring.length >= 2)
+                     {
+                         this.ofMipmapType = Integer.valueOf(astring[1]).intValue();
+                         this.ofMipmapType = Config.limit(this.ofMipmapType, 0, 3);
+                     }
+ 
+                     if (astring[0].equals("ofOcclusionFancy") && astring.length >= 2)
+                     {
+                         this.ofOcclusionFancy = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSmoothFps") && astring.length >= 2)
+                     {
+                         this.ofSmoothFps = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSmoothWorld") && astring.length >= 2)
+                     {
+                         this.ofSmoothWorld = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAoLevel") && astring.length >= 2)
+                     {
+                         this.ofAoLevel = Float.valueOf(astring[1]).floatValue();
+                         this.ofAoLevel = Config.limit(this.ofAoLevel, 0.0F, 1.0F);
+                     }
+ 
+                     if (astring[0].equals("ofClouds") && astring.length >= 2)
+                     {
+                         this.ofClouds = Integer.valueOf(astring[1]).intValue();
+                         this.ofClouds = Config.limit(this.ofClouds, 0, 3);
+                         this.updateRenderClouds();
+                     }
+ 
+                     if (astring[0].equals("ofCloudsHeight") && astring.length >= 2)
+                     {
+                         this.ofCloudsHeight = Float.valueOf(astring[1]).floatValue();
+                         this.ofCloudsHeight = Config.limit(this.ofCloudsHeight, 0.0F, 1.0F);
+                     }
+ 
+                     if (astring[0].equals("ofTrees") && astring.length >= 2)
+                     {
+                         this.ofTrees = Integer.valueOf(astring[1]).intValue();
+                         this.ofTrees = limit(this.ofTrees, OF_TREES_VALUES);
+                     }
+ 
+                     if (astring[0].equals("ofDroppedItems") && astring.length >= 2)
+                     {
+                         this.ofDroppedItems = Integer.valueOf(astring[1]).intValue();
+                         this.ofDroppedItems = Config.limit(this.ofDroppedItems, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("ofRain") && astring.length >= 2)
+                     {
+                         this.ofRain = Integer.valueOf(astring[1]).intValue();
+                         this.ofRain = Config.limit(this.ofRain, 0, 3);
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedWater") && astring.length >= 2)
+                     {
+                         this.ofAnimatedWater = Integer.valueOf(astring[1]).intValue();
+                         this.ofAnimatedWater = Config.limit(this.ofAnimatedWater, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedLava") && astring.length >= 2)
+                     {
+                         this.ofAnimatedLava = Integer.valueOf(astring[1]).intValue();
+                         this.ofAnimatedLava = Config.limit(this.ofAnimatedLava, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedFire") && astring.length >= 2)
+                     {
+                         this.ofAnimatedFire = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedPortal") && astring.length >= 2)
+                     {
+                         this.ofAnimatedPortal = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedRedstone") && astring.length >= 2)
+                     {
+                         this.ofAnimatedRedstone = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedExplosion") && astring.length >= 2)
+                     {
+                         this.ofAnimatedExplosion = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedFlame") && astring.length >= 2)
+                     {
+                         this.ofAnimatedFlame = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedSmoke") && astring.length >= 2)
+                     {
+                         this.ofAnimatedSmoke = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofVoidParticles") && astring.length >= 2)
+                     {
+                         this.ofVoidParticles = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofWaterParticles") && astring.length >= 2)
+                     {
+                         this.ofWaterParticles = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofPortalParticles") && astring.length >= 2)
+                     {
+                         this.ofPortalParticles = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofPotionParticles") && astring.length >= 2)
+                     {
+                         this.ofPotionParticles = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofFireworkParticles") && astring.length >= 2)
+                     {
+                         this.ofFireworkParticles = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofDrippingWaterLava") && astring.length >= 2)
+                     {
+                         this.ofDrippingWaterLava = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedTerrain") && astring.length >= 2)
+                     {
+                         this.ofAnimatedTerrain = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAnimatedTextures") && astring.length >= 2)
+                     {
+                         this.ofAnimatedTextures = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofRainSplash") && astring.length >= 2)
+                     {
+                         this.ofRainSplash = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofLagometer") && astring.length >= 2)
+                     {
+                         this.ofLagometer = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofShowFps") && astring.length >= 2)
+                     {
+                         this.ofShowFps = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAutoSaveTicks") && astring.length >= 2)
+                     {
+                         this.ofAutoSaveTicks = Integer.valueOf(astring[1]).intValue();
+                         this.ofAutoSaveTicks = Config.limit(this.ofAutoSaveTicks, 40, 40000);
+                     }
+ 
+                     if (astring[0].equals("ofBetterGrass") && astring.length >= 2)
+                     {
+                         this.ofBetterGrass = Integer.valueOf(astring[1]).intValue();
+                         this.ofBetterGrass = Config.limit(this.ofBetterGrass, 1, 3);
+                     }
+ 
+                     if (astring[0].equals("ofConnectedTextures") && astring.length >= 2)
+                     {
+                         this.ofConnectedTextures = Integer.valueOf(astring[1]).intValue();
+                         this.ofConnectedTextures = Config.limit(this.ofConnectedTextures, 1, 3);
+                     }
+ 
+                     if (astring[0].equals("ofWeather") && astring.length >= 2)
+                     {
+                         this.ofWeather = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSky") && astring.length >= 2)
+                     {
+                         this.ofSky = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofStars") && astring.length >= 2)
+                     {
+                         this.ofStars = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSunMoon") && astring.length >= 2)
+                     {
+                         this.ofSunMoon = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofVignette") && astring.length >= 2)
+                     {
+                         this.ofVignette = Integer.valueOf(astring[1]).intValue();
+                         this.ofVignette = Config.limit(this.ofVignette, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("ofChunkUpdates") && astring.length >= 2)
+                     {
+                         this.ofChunkUpdates = Integer.valueOf(astring[1]).intValue();
+                         this.ofChunkUpdates = Config.limit(this.ofChunkUpdates, 1, 5);
+                     }
+ 
+                     if (astring[0].equals("ofChunkUpdatesDynamic") && astring.length >= 2)
+                     {
+                         this.ofChunkUpdatesDynamic = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofTime") && astring.length >= 2)
+                     {
+                         this.ofTime = Integer.valueOf(astring[1]).intValue();
+                         this.ofTime = Config.limit(this.ofTime, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("ofClearWater") && astring.length >= 2)
+                     {
+                         this.ofClearWater = Boolean.valueOf(astring[1]).booleanValue();
+                         this.updateWaterOpacity();
+                     }
+ 
+                     if (astring[0].equals("ofAaLevel") && astring.length >= 2)
+                     {
+                         this.ofAaLevel = Integer.valueOf(astring[1]).intValue();
+                         this.ofAaLevel = Config.limit(this.ofAaLevel, 0, 16);
+                     }
+ 
+                     if (astring[0].equals("ofAfLevel") && astring.length >= 2)
+                     {
+                         this.ofAfLevel = Integer.valueOf(astring[1]).intValue();
+                         this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
+                     }
+ 
+                     if (astring[0].equals("ofProfiler") && astring.length >= 2)
+                     {
+                         this.ofProfiler = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofBetterSnow") && astring.length >= 2)
+                     {
+                         this.ofBetterSnow = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSwampColors") && astring.length >= 2)
+                     {
+                         this.ofSwampColors = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofRandomMobs") && astring.length >= 2)
+                     {
+                         this.ofRandomMobs = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofSmoothBiomes") && astring.length >= 2)
+                     {
+                         this.ofSmoothBiomes = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofCustomFonts") && astring.length >= 2)
+                     {
+                         this.ofCustomFonts = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofCustomColors") && astring.length >= 2)
+                     {
+                         this.ofCustomColors = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofCustomItems") && astring.length >= 2)
+                     {
+                         this.ofCustomItems = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofCustomSky") && astring.length >= 2)
+                     {
+                         this.ofCustomSky = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofShowCapes") && astring.length >= 2)
+                     {
+                         this.ofShowCapes = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofNaturalTextures") && astring.length >= 2)
+                     {
+                         this.ofNaturalTextures = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofLazyChunkLoading") && astring.length >= 2)
+                     {
+                         this.ofLazyChunkLoading = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofDynamicFov") && astring.length >= 2)
+                     {
+                         this.ofDynamicFov = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofAlternateBlocks") && astring.length >= 2)
+                     {
+                         this.ofAlternateBlocks = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofDynamicLights") && astring.length >= 2)
+                     {
+                         this.ofDynamicLights = Integer.valueOf(astring[1]).intValue();
+                         this.ofDynamicLights = limit(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
+                     }
+ 
+                     if (astring[0].equals("ofScreenshotSize") && astring.length >= 2)
+                     {
+                         this.ofScreenshotSize = Integer.valueOf(astring[1]).intValue();
+                         this.ofScreenshotSize = Config.limit(this.ofScreenshotSize, 1, 4);
+                     }
+ 
+                     if (astring[0].equals("ofCustomEntityModels") && astring.length >= 2)
+                     {
+                         this.ofCustomEntityModels = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofCustomGuis") && astring.length >= 2)
+                     {
+                         this.ofCustomGuis = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofFullscreenMode") && astring.length >= 2)
+                     {
+                         this.ofFullscreenMode = astring[1];
+                     }
+ 
+                     if (astring[0].equals("ofFastMath") && astring.length >= 2)
+                     {
+                         this.ofFastMath = Boolean.valueOf(astring[1]).booleanValue();
+                         MathHelper.fastMath = this.ofFastMath;
+                     }
+ 
+                     if (astring[0].equals("ofFastRender") && astring.length >= 2)
+                     {
+                         this.ofFastRender = Boolean.valueOf(astring[1]).booleanValue();
+                     }
+ 
+                     if (astring[0].equals("ofTranslucentBlocks") && astring.length >= 2)
+                     {
+                         this.ofTranslucentBlocks = Integer.valueOf(astring[1]).intValue();
+                         this.ofTranslucentBlocks = Config.limit(this.ofTranslucentBlocks, 0, 2);
+                     }
+ 
+                     if (astring[0].equals("key_" + this.ofKeyBindZoom.getKeyDescription()))
+                     {
+                         this.ofKeyBindZoom.setKeyCode(Integer.parseInt(astring[1]));
+                     }
+                 }
+                 catch (Exception exception1)
+                 {
+                     Config.dbg("Skipping bad option: " + s);
+                     exception1.printStackTrace();
+                 }
+             }
+ 
+             KeyBinding.resetKeyBindingArrayAndHash();
+             bufferedreader.close();
+         }
+         catch (Exception exception11)
+         {
+             Config.warn("Failed to load options");
+             exception11.printStackTrace();
+         }
+     }
+ 
+     public void saveOfOptions()
+     {
+         try
+         {
+             PrintWriter printwriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.optionsFileOF), StandardCharsets.UTF_8));
+             printwriter.println("ofRenderDistanceChunks:" + this.renderDistanceChunks);
+             printwriter.println("ofFogType:" + this.ofFogType);
+             printwriter.println("ofFogStart:" + this.ofFogStart);
+             printwriter.println("ofMipmapType:" + this.ofMipmapType);
+             printwriter.println("ofOcclusionFancy:" + this.ofOcclusionFancy);
+             printwriter.println("ofSmoothFps:" + this.ofSmoothFps);
+             printwriter.println("ofSmoothWorld:" + this.ofSmoothWorld);
+             printwriter.println("ofAoLevel:" + this.ofAoLevel);
+             printwriter.println("ofClouds:" + this.ofClouds);
+             printwriter.println("ofCloudsHeight:" + this.ofCloudsHeight);
+             printwriter.println("ofTrees:" + this.ofTrees);
+             printwriter.println("ofDroppedItems:" + this.ofDroppedItems);
+             printwriter.println("ofRain:" + this.ofRain);
+             printwriter.println("ofAnimatedWater:" + this.ofAnimatedWater);
+             printwriter.println("ofAnimatedLava:" + this.ofAnimatedLava);
+             printwriter.println("ofAnimatedFire:" + this.ofAnimatedFire);
+             printwriter.println("ofAnimatedPortal:" + this.ofAnimatedPortal);
+             printwriter.println("ofAnimatedRedstone:" + this.ofAnimatedRedstone);
+             printwriter.println("ofAnimatedExplosion:" + this.ofAnimatedExplosion);
+             printwriter.println("ofAnimatedFlame:" + this.ofAnimatedFlame);
+             printwriter.println("ofAnimatedSmoke:" + this.ofAnimatedSmoke);
+             printwriter.println("ofVoidParticles:" + this.ofVoidParticles);
+             printwriter.println("ofWaterParticles:" + this.ofWaterParticles);
+             printwriter.println("ofPortalParticles:" + this.ofPortalParticles);
+             printwriter.println("ofPotionParticles:" + this.ofPotionParticles);
+             printwriter.println("ofFireworkParticles:" + this.ofFireworkParticles);
+             printwriter.println("ofDrippingWaterLava:" + this.ofDrippingWaterLava);
+             printwriter.println("ofAnimatedTerrain:" + this.ofAnimatedTerrain);
+             printwriter.println("ofAnimatedTextures:" + this.ofAnimatedTextures);
+             printwriter.println("ofRainSplash:" + this.ofRainSplash);
+             printwriter.println("ofLagometer:" + this.ofLagometer);
+             printwriter.println("ofShowFps:" + this.ofShowFps);
+             printwriter.println("ofAutoSaveTicks:" + this.ofAutoSaveTicks);
+             printwriter.println("ofBetterGrass:" + this.ofBetterGrass);
+             printwriter.println("ofConnectedTextures:" + this.ofConnectedTextures);
+             printwriter.println("ofWeather:" + this.ofWeather);
+             printwriter.println("ofSky:" + this.ofSky);
+             printwriter.println("ofStars:" + this.ofStars);
+             printwriter.println("ofSunMoon:" + this.ofSunMoon);
+             printwriter.println("ofVignette:" + this.ofVignette);
+             printwriter.println("ofChunkUpdates:" + this.ofChunkUpdates);
+             printwriter.println("ofChunkUpdatesDynamic:" + this.ofChunkUpdatesDynamic);
+             printwriter.println("ofTime:" + this.ofTime);
+             printwriter.println("ofClearWater:" + this.ofClearWater);
+             printwriter.println("ofAaLevel:" + this.ofAaLevel);
+             printwriter.println("ofAfLevel:" + this.ofAfLevel);
+             printwriter.println("ofProfiler:" + this.ofProfiler);
+             printwriter.println("ofBetterSnow:" + this.ofBetterSnow);
+             printwriter.println("ofSwampColors:" + this.ofSwampColors);
+             printwriter.println("ofRandomMobs:" + this.ofRandomMobs);
+             printwriter.println("ofSmoothBiomes:" + this.ofSmoothBiomes);
+             printwriter.println("ofCustomFonts:" + this.ofCustomFonts);
+             printwriter.println("ofCustomColors:" + this.ofCustomColors);
+             printwriter.println("ofCustomItems:" + this.ofCustomItems);
+             printwriter.println("ofCustomSky:" + this.ofCustomSky);
+             printwriter.println("ofShowCapes:" + this.ofShowCapes);
+             printwriter.println("ofNaturalTextures:" + this.ofNaturalTextures);
+             printwriter.println("ofLazyChunkLoading:" + this.ofLazyChunkLoading);
+             printwriter.println("ofDynamicFov:" + this.ofDynamicFov);
+             printwriter.println("ofAlternateBlocks:" + this.ofAlternateBlocks);
+             printwriter.println("ofDynamicLights:" + this.ofDynamicLights);
+             printwriter.println("ofScreenshotSize:" + this.ofScreenshotSize);
+             printwriter.println("ofCustomEntityModels:" + this.ofCustomEntityModels);
+             printwriter.println("ofCustomGuis:" + this.ofCustomGuis);
+             printwriter.println("ofFullscreenMode:" + this.ofFullscreenMode);
+             printwriter.println("ofFastMath:" + this.ofFastMath);
+             printwriter.println("ofFastRender:" + this.ofFastRender);
+             printwriter.println("ofTranslucentBlocks:" + this.ofTranslucentBlocks);
+             printwriter.println("key_" + this.ofKeyBindZoom.getKeyDescription() + ":" + this.ofKeyBindZoom.getKeyCode());
+             printwriter.close();
+         }
+         catch (Exception exception1)
+         {
+             Config.warn("Failed to save options");
+             exception1.printStackTrace();
+         }
+     }
+ 
+     private void updateRenderClouds()
+     {
+         switch (this.ofClouds)
+         {
+             case 1:
+                 this.clouds = 1;
+                 break;
+ 
+             case 2:
+                 this.clouds = 2;
+                 break;
+ 
+             case 3:
+                 this.clouds = 0;
+                 break;
+ 
+             default:
+                 if (this.fancyGraphics)
+                 {
+                     this.clouds = 2;
+                 }
+                 else
+                 {
+                     this.clouds = 1;
+                 }
+         }
+     }
+ 
+     public void resetSettings()
+     {
+         this.renderDistanceChunks = 8;
+         this.viewBobbing = true;
+         this.anaglyph = false;
+         this.limitFramerate = (int)GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
+         this.enableVsync = false;
+         this.updateVSync();
+         this.mipmapLevels = 4;
+         this.fancyGraphics = true;
+         this.ambientOcclusion = 2;
+         this.clouds = 2;
+         this.fovSetting = 70.0F;
+         this.gammaSetting = 0.0F;
+         this.guiScale = 0;
+         this.particleSetting = 0;
+         this.heldItemTooltips = true;
+         this.useVbo = false;
+         this.forceUnicodeFont = false;
+         this.ofFogType = 1;
+         this.ofFogStart = 0.8F;
+         this.ofMipmapType = 0;
+         this.ofOcclusionFancy = false;
+         this.ofSmoothFps = false;
+         Config.updateAvailableProcessors();
+         this.ofSmoothWorld = Config.isSingleProcessor();
+         this.ofLazyChunkLoading = Config.isSingleProcessor();
+         this.ofFastMath = false;
+         this.ofFastRender = false;
+         this.ofTranslucentBlocks = 0;
+         this.ofDynamicFov = true;
+         this.ofAlternateBlocks = true;
+         this.ofDynamicLights = 3;
+         this.ofScreenshotSize = 1;
+         this.ofCustomEntityModels = true;
+         this.ofCustomGuis = true;
+         this.ofAoLevel = 1.0F;
+         this.ofAaLevel = 0;
+         this.ofAfLevel = 1;
+         this.ofClouds = 0;
+         this.ofCloudsHeight = 0.0F;
+         this.ofTrees = 0;
+         this.ofRain = 0;
+         this.ofBetterGrass = 3;
+         this.ofAutoSaveTicks = 4000;
+         this.ofLagometer = false;
+         this.ofShowFps = false;
+         this.ofProfiler = false;
+         this.ofWeather = true;
+         this.ofSky = true;
+         this.ofStars = true;
+         this.ofSunMoon = true;
+         this.ofVignette = 0;
+         this.ofChunkUpdates = 1;
+         this.ofChunkUpdatesDynamic = false;
+         this.ofTime = 0;
+         this.ofClearWater = false;
+         this.ofBetterSnow = false;
+         this.ofFullscreenMode = "Default";
+         this.ofSwampColors = true;
+         this.ofRandomMobs = true;
+         this.ofSmoothBiomes = true;
+         this.ofCustomFonts = true;
+         this.ofCustomColors = true;
+         this.ofCustomItems = true;
+         this.ofCustomSky = true;
+         this.ofShowCapes = true;
+         this.ofConnectedTextures = 2;
+         this.ofNaturalTextures = false;
+         this.ofAnimatedWater = 0;
+         this.ofAnimatedLava = 0;
+         this.ofAnimatedFire = true;
+         this.ofAnimatedPortal = true;
+         this.ofAnimatedRedstone = true;
+         this.ofAnimatedExplosion = true;
+         this.ofAnimatedFlame = true;
+         this.ofAnimatedSmoke = true;
+         this.ofVoidParticles = true;
+         this.ofWaterParticles = true;
+         this.ofRainSplash = true;
+         this.ofPortalParticles = true;
+         this.ofPotionParticles = true;
+         this.ofFireworkParticles = true;
+         this.ofDrippingWaterLava = true;
+         this.ofAnimatedTerrain = true;
+         this.ofAnimatedTextures = true;
+         Shaders.setShaderPack(Shaders.packNameNone);
+         Shaders.configAntialiasingLevel = 0;
+         Shaders.uninit();
+         Shaders.storeConfig();
+         this.updateWaterOpacity();
+         this.mc.refreshResources();
+         this.saveOptions();
+     }
+ 
+     public void updateVSync()
+     {
+         Display.setVSyncEnabled(this.enableVsync);
+     }
+ 
+     private void updateWaterOpacity()
+     {
+         if (this.mc.isIntegratedServerRunning() && this.mc.getIntegratedServer() != null)
+         {
+             Config.waterOpacityChanged = true;
+         }
+ 
+         ClearWater.updateWaterOpacity(this, this.mc.world);
+     }
+ 
+     public void setAllAnimations(boolean p_setAllAnimations_1_)
+     {
+         int i = p_setAllAnimations_1_ ? 0 : 2;
+         this.ofAnimatedWater = i;
+         this.ofAnimatedLava = i;
+         this.ofAnimatedFire = p_setAllAnimations_1_;
+         this.ofAnimatedPortal = p_setAllAnimations_1_;
+         this.ofAnimatedRedstone = p_setAllAnimations_1_;
+         this.ofAnimatedExplosion = p_setAllAnimations_1_;
+         this.ofAnimatedFlame = p_setAllAnimations_1_;
+         this.ofAnimatedSmoke = p_setAllAnimations_1_;
+         this.ofVoidParticles = p_setAllAnimations_1_;
+         this.ofWaterParticles = p_setAllAnimations_1_;
+         this.ofRainSplash = p_setAllAnimations_1_;
+         this.ofPortalParticles = p_setAllAnimations_1_;
+         this.ofPotionParticles = p_setAllAnimations_1_;
+         this.ofFireworkParticles = p_setAllAnimations_1_;
+         this.particleSetting = p_setAllAnimations_1_ ? 0 : 2;
+         this.ofDrippingWaterLava = p_setAllAnimations_1_;
+         this.ofAnimatedTerrain = p_setAllAnimations_1_;
+         this.ofAnimatedTextures = p_setAllAnimations_1_;
+     }
+ 
+     private static int nextValue(int p_nextValue_0_, int[] p_nextValue_1_)
+     {
+         int i = indexOf(p_nextValue_0_, p_nextValue_1_);
+ 
+         if (i < 0)
+         {
+             return p_nextValue_1_[0];
+         }
+         else
+         {
+             ++i;
+ 
+             if (i >= p_nextValue_1_.length)
+             {
+                 i = 0;
+             }
+ 
+             return p_nextValue_1_[i];
+         }
+     }
+ 
+     private static int limit(int p_limit_0_, int[] p_limit_1_)
+     {
+         int i = indexOf(p_limit_0_, p_limit_1_);
+         return i < 0 ? p_limit_1_[0] : p_limit_0_;
+     }
+ 
+     private static int indexOf(int p_indexOf_0_, int[] p_indexOf_1_)
+     {
+         for (int i = 0; i < p_indexOf_1_.length; ++i)
+         {
+             if (p_indexOf_1_[i] == p_indexOf_0_)
+             {
+                 return i;
+             }
+         }
+ 
+         return -1;
+     }
+ 
+     private void setForgeKeybindProperties()
+     {
+         if (Reflector.KeyConflictContext_IN_GAME.exists())
+         {
+             if (Reflector.ForgeKeyBinding_setKeyConflictContext.exists())
+             {
+                 Object object = Reflector.getFieldValue(Reflector.KeyConflictContext_IN_GAME);
+                 Reflector.call(this.keyBindForward, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindLeft, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindBack, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindRight, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindJump, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindSneak, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindSprint, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindAttack, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindChat, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindPlayerList, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindCommand, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindTogglePerspective, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindSmoothCamera, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+                 Reflector.call(this.keyBindSwapHands, Reflector.ForgeKeyBinding_setKeyConflictContext, object);
+             }
+         }
+     }
+ 
+     public void onGuiClosed()
+     {
+         if (this.needsResourceRefresh)
+         {
+             this.mc.scheduleResourcesRefresh();
+             this.needsResourceRefresh = false;
+         }
+     }
+ 
      public static enum Options
      {
          INVERT_MOUSE("options.invertMouse", false, true),
***************
*** 1395,1401 ****
          RENDER_DISTANCE("options.renderDistance", true, false, 2.0F, 16.0F, 1.0F),
          VIEW_BOBBING("options.viewBobbing", false, true),
          ANAGLYPH("options.anaglyph", false, true),
!         FRAMERATE_LIMIT("options.framerateLimit", true, false, 10.0F, 260.0F, 10.0F),
          FBO_ENABLE("options.fboEnable", false, true),
          RENDER_CLOUDS("options.renderClouds", false, false),
          GRAPHICS("options.graphics", false, false),
--- 3470,3476 ----
          RENDER_DISTANCE("options.renderDistance", true, false, 2.0F, 16.0F, 1.0F),
          VIEW_BOBBING("options.viewBobbing", false, true),
          ANAGLYPH("options.anaglyph", false, true),
!         FRAMERATE_LIMIT("options.framerateLimit", true, false, 0.0F, 260.0F, 5.0F),
          FBO_ENABLE("options.fboEnable", false, true),
          RENDER_CLOUDS("options.renderClouds", false, false),
          GRAPHICS("options.graphics", false, false),
***************
*** 1426,1432 ****
          SHOW_SUBTITLES("options.showSubtitles", false, true),
          REALMS_NOTIFICATIONS("options.realmsNotifications", false, true),
          AUTO_JUMP("options.autoJump", false, true),
!         NARRATOR("options.narrator", false, false);
  
          private final boolean enumFloat;
          private final boolean enumBoolean;
--- 3501,3575 ----
          SHOW_SUBTITLES("options.showSubtitles", false, true),
          REALMS_NOTIFICATIONS("options.realmsNotifications", false, true),
          AUTO_JUMP("options.autoJump", false, true),
!         NARRATOR("options.narrator", false, false),
!         FOG_FANCY("of.options.FOG_FANCY", false, false),
!         FOG_START("of.options.FOG_START", false, false),
!         MIPMAP_TYPE("of.options.MIPMAP_TYPE", true, false, 0.0F, 3.0F, 1.0F),
!         SMOOTH_FPS("of.options.SMOOTH_FPS", false, false),
!         CLOUDS("of.options.CLOUDS", false, false),
!         CLOUD_HEIGHT("of.options.CLOUD_HEIGHT", true, false),
!         TREES("of.options.TREES", false, false),
!         RAIN("of.options.RAIN", false, false),
!         ANIMATED_WATER("of.options.ANIMATED_WATER", false, false),
!         ANIMATED_LAVA("of.options.ANIMATED_LAVA", false, false),
!         ANIMATED_FIRE("of.options.ANIMATED_FIRE", false, false),
!         ANIMATED_PORTAL("of.options.ANIMATED_PORTAL", false, false),
!         AO_LEVEL("of.options.AO_LEVEL", true, false),
!         LAGOMETER("of.options.LAGOMETER", false, false),
!         SHOW_FPS("of.options.SHOW_FPS", false, false),
!         AUTOSAVE_TICKS("of.options.AUTOSAVE_TICKS", false, false),
!         BETTER_GRASS("of.options.BETTER_GRASS", false, false),
!         ANIMATED_REDSTONE("of.options.ANIMATED_REDSTONE", false, false),
!         ANIMATED_EXPLOSION("of.options.ANIMATED_EXPLOSION", false, false),
!         ANIMATED_FLAME("of.options.ANIMATED_FLAME", false, false),
!         ANIMATED_SMOKE("of.options.ANIMATED_SMOKE", false, false),
!         WEATHER("of.options.WEATHER", false, false),
!         SKY("of.options.SKY", false, false),
!         STARS("of.options.STARS", false, false),
!         SUN_MOON("of.options.SUN_MOON", false, false),
!         VIGNETTE("of.options.VIGNETTE", false, false),
!         CHUNK_UPDATES("of.options.CHUNK_UPDATES", false, false),
!         CHUNK_UPDATES_DYNAMIC("of.options.CHUNK_UPDATES_DYNAMIC", false, false),
!         TIME("of.options.TIME", false, false),
!         CLEAR_WATER("of.options.CLEAR_WATER", false, false),
!         SMOOTH_WORLD("of.options.SMOOTH_WORLD", false, false),
!         VOID_PARTICLES("of.options.VOID_PARTICLES", false, false),
!         WATER_PARTICLES("of.options.WATER_PARTICLES", false, false),
!         RAIN_SPLASH("of.options.RAIN_SPLASH", false, false),
!         PORTAL_PARTICLES("of.options.PORTAL_PARTICLES", false, false),
!         POTION_PARTICLES("of.options.POTION_PARTICLES", false, false),
!         FIREWORK_PARTICLES("of.options.FIREWORK_PARTICLES", false, false),
!         PROFILER("of.options.PROFILER", false, false),
!         DRIPPING_WATER_LAVA("of.options.DRIPPING_WATER_LAVA", false, false),
!         BETTER_SNOW("of.options.BETTER_SNOW", false, false),
!         FULLSCREEN_MODE("of.options.FULLSCREEN_MODE", true, false, 0.0F, (float)Config.getDisplayModes().length, 1.0F),
!         ANIMATED_TERRAIN("of.options.ANIMATED_TERRAIN", false, false),
!         SWAMP_COLORS("of.options.SWAMP_COLORS", false, false),
!         RANDOM_MOBS("of.options.RANDOM_MOBS", false, false),
!         SMOOTH_BIOMES("of.options.SMOOTH_BIOMES", false, false),
!         CUSTOM_FONTS("of.options.CUSTOM_FONTS", false, false),
!         CUSTOM_COLORS("of.options.CUSTOM_COLORS", false, false),
!         SHOW_CAPES("of.options.SHOW_CAPES", false, false),
!         CONNECTED_TEXTURES("of.options.CONNECTED_TEXTURES", false, false),
!         CUSTOM_ITEMS("of.options.CUSTOM_ITEMS", false, false),
!         AA_LEVEL("of.options.AA_LEVEL", true, false, 0.0F, 16.0F, 1.0F),
!         AF_LEVEL("of.options.AF_LEVEL", true, false, 1.0F, 16.0F, 1.0F),
!         ANIMATED_TEXTURES("of.options.ANIMATED_TEXTURES", false, false),
!         NATURAL_TEXTURES("of.options.NATURAL_TEXTURES", false, false),
!         HELD_ITEM_TOOLTIPS("of.options.HELD_ITEM_TOOLTIPS", false, false),
!         DROPPED_ITEMS("of.options.DROPPED_ITEMS", false, false),
!         LAZY_CHUNK_LOADING("of.options.LAZY_CHUNK_LOADING", false, false),
!         CUSTOM_SKY("of.options.CUSTOM_SKY", false, false),
!         FAST_MATH("of.options.FAST_MATH", false, false),
!         FAST_RENDER("of.options.FAST_RENDER", false, false),
!         TRANSLUCENT_BLOCKS("of.options.TRANSLUCENT_BLOCKS", false, false),
!         DYNAMIC_FOV("of.options.DYNAMIC_FOV", false, false),
!         DYNAMIC_LIGHTS("of.options.DYNAMIC_LIGHTS", false, false),
!         ALTERNATE_BLOCKS("of.options.ALTERNATE_BLOCKS", false, false),
!         CUSTOM_ENTITY_MODELS("of.options.CUSTOM_ENTITY_MODELS", false, false),
!         ADVANCED_TOOLTIPS("of.options.ADVANCED_TOOLTIPS", false, false),
!         SCREENSHOT_SIZE("of.options.SCREENSHOT_SIZE", false, false),
!         CUSTOM_GUIS("of.options.CUSTOM_GUIS", false, false);
  
          private final boolean enumFloat;
          private final boolean enumBoolean;
diff -rc ./client/util/RecipeItemHelper.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/util/RecipeItemHelper.java
*** ./client/util/RecipeItemHelper.java	2018-11-18 13:18:50.179668000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/client/util/RecipeItemHelper.java	2018-11-18 13:37:39.397660900 -0800
***************
*** 27,33 ****
          if (!p_194112_1_.func_190926_b() && !p_194112_1_.isItemDamaged() && !p_194112_1_.isItemEnchanted() && !p_194112_1_.hasDisplayName())
          {
              int i = func_194113_b(p_194112_1_);
!             int j = p_194112_1_.func_190916_E();
              this.func_194117_b(i, j);
          }
      }
--- 27,33 ----
          if (!p_194112_1_.func_190926_b() && !p_194112_1_.isItemDamaged() && !p_194112_1_.isItemEnchanted() && !p_194112_1_.hasDisplayName())
          {
              int i = func_194113_b(p_194112_1_);
!             int j = p_194112_1_.getCount();
              this.func_194117_b(i, j);
          }
      }
diff -rc ./command/AdvancementCommand.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/command/AdvancementCommand.java
*** ./command/AdvancementCommand.java	2018-11-18 13:18:50.231636000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/command/AdvancementCommand.java	2017-10-20 21:01:23.171477000 -0700
***************
*** 60,73 ****
                  }
  
                  EntityPlayerMP entityplayermp = getPlayer(server, sender, args[1]);
!                 AdvancementCommand.Mode advancementcommand$actiontype$mode = AdvancementCommand.Mode.func_193547_a(args[2]);
  
!                 if (advancementcommand$actiontype$mode == null)
                  {
                      throw advancementcommand$actiontype.func_193534_a();
                  }
  
!                 this.func_193516_a(server, sender, args, entityplayermp, advancementcommand$actiontype, advancementcommand$actiontype$mode);
              }
              else
              {
--- 60,73 ----
                  }
  
                  EntityPlayerMP entityplayermp = getPlayer(server, sender, args[1]);
!                 AdvancementCommand.Mode advancementcommand$mode = AdvancementCommand.Mode.func_193547_a(args[2]);
  
!                 if (advancementcommand$mode == null)
                  {
                      throw advancementcommand$actiontype.func_193534_a();
                  }
  
!                 this.func_193516_a(server, sender, args, entityplayermp, advancementcommand$actiontype, advancementcommand$mode);
              }
              else
              {
***************
*** 245,260 ****
                      return getListOfStringsMatchingLastWord(args, AdvancementCommand.Mode.field_193553_f);
                  }
  
!                 AdvancementCommand.Mode advancementcommand$actiontype$mode = AdvancementCommand.Mode.func_193547_a(args[2]);
  
!                 if (advancementcommand$actiontype$mode != null && advancementcommand$actiontype$mode != AdvancementCommand.Mode.EVERYTHING)
                  {
                      if (args.length == 4)
                      {
                          return getListOfStringsMatchingLastWord(args, this.func_193517_a(server));
                      }
  
!                     if (args.length == 5 && advancementcommand$actiontype$mode == AdvancementCommand.Mode.ONLY)
                      {
                          Advancement advancement = server.func_191949_aK().func_192778_a(new ResourceLocation(args[3]));
  
--- 245,260 ----
                      return getListOfStringsMatchingLastWord(args, AdvancementCommand.Mode.field_193553_f);
                  }
  
!                 AdvancementCommand.Mode advancementcommand$mode = AdvancementCommand.Mode.func_193547_a(args[2]);
  
!                 if (advancementcommand$mode != null && advancementcommand$mode != AdvancementCommand.Mode.EVERYTHING)
                  {
                      if (args.length == 4)
                      {
                          return getListOfStringsMatchingLastWord(args, this.func_193517_a(server));
                      }
  
!                     if (args.length == 5 && advancementcommand$mode == AdvancementCommand.Mode.ONLY)
                      {
                          Advancement advancement = server.func_191949_aK().func_192778_a(new ResourceLocation(args[3]));
  
***************
*** 466,476 ****
          @Nullable
          static AdvancementCommand.Mode func_193547_a(String p_193547_0_)
          {
!             for (AdvancementCommand.Mode advancementcommand$actiontype$mode : values())
              {
!                 if (advancementcommand$actiontype$mode.field_193554_g.equals(p_193547_0_))
                  {
!                     return advancementcommand$actiontype$mode;
                  }
              }
  
--- 466,476 ----
          @Nullable
          static AdvancementCommand.Mode func_193547_a(String p_193547_0_)
          {
!             for (AdvancementCommand.Mode advancementcommand$mode : values())
              {
!                 if (advancementcommand$mode.field_193554_g.equals(p_193547_0_))
                  {
!                     return advancementcommand$mode;
                  }
              }
  
diff -rc ./command/CommandGive.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/command/CommandGive.java
*** ./command/CommandGive.java	2018-11-18 13:18:50.469501000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/command/CommandGive.java	2018-11-18 13:37:37.980381500 -0800
***************
*** 81,87 ****
  
              if (flag && itemstack.func_190926_b())
              {
!                 itemstack.func_190920_e(1);
                  sender.setCommandStat(CommandResultStats.Type.AFFECTED_ITEMS, i);
                  EntityItem entityitem1 = entityplayer.dropItem(itemstack, false);
  
--- 81,87 ----
  
              if (flag && itemstack.func_190926_b())
              {
!                 itemstack.setCount(1);
                  sender.setCommandStat(CommandResultStats.Type.AFFECTED_ITEMS, i);
                  EntityItem entityitem1 = entityplayer.dropItem(itemstack, false);
  
***************
*** 92,98 ****
              }
              else
              {
!                 sender.setCommandStat(CommandResultStats.Type.AFFECTED_ITEMS, i - itemstack.func_190916_E());
                  EntityItem entityitem = entityplayer.dropItem(itemstack, false);
  
                  if (entityitem != null)
--- 92,98 ----
              }
              else
              {
!                 sender.setCommandStat(CommandResultStats.Type.AFFECTED_ITEMS, i - itemstack.getCount());
                  EntityItem entityitem = entityplayer.dropItem(itemstack, false);
  
                  if (entityitem != null)
diff -rc ./command/CommandPlaySound.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/command/CommandPlaySound.java
*** ./command/CommandPlaySound.java	2018-11-18 13:18:50.561447000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/command/CommandPlaySound.java	2018-12-14 18:08:50.027998000 -0800
***************
*** 42,48 ****
       */
      public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException
      {
!         if (args.length < 2)
          {
              throw new WrongUsageException(this.getCommandUsage(sender), new Object[0]);
          }
--- 42,48 ----
       */
      public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException
      {
!         if (args.length < 3)
          {
              throw new WrongUsageException(this.getCommandUsage(sender), new Object[0]);
          }
diff -rc ./crash/CrashReport.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/crash/CrashReport.java
*** ./crash/CrashReport.java	2018-11-18 13:18:51.408367000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/crash/CrashReport.java	2018-12-15 15:25:42.352042100 -0800
***************
*** 13,24 ****
--- 13,29 ----
  import java.text.SimpleDateFormat;
  import java.util.Date;
  import java.util.List;
+ 
  import net.minecraft.util.ReportedException;
  import net.minecraft.world.gen.layer.IntCache;
+ import optifine.CrashReporter;
+ import optifine.Reflector;
+ 
  import org.apache.commons.io.IOUtils;
  import org.apache.commons.lang3.ArrayUtils;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import org.golde.snowball.Snowball;
  
  public class CrashReport
  {
***************
*** 40,51 ****
--- 45,58 ----
      /** Is true when the current category is the first in the crash report */
      private boolean firstCategoryInCrashReport = true;
      private StackTraceElement[] stacktrace = new StackTraceElement[0];
+     private boolean reported = false;
  
      public CrashReport(String descriptionIn, Throwable causeThrowable)
      {
          this.description = descriptionIn;
          this.cause = causeThrowable;
          this.populateEnvironment();
+         this.populateSnowball();
      }
  
      /**
***************
*** 58,64 ****
          {
              public String call()
              {
!                 return "1.12";
              }
          });
          this.theReportCategory.setDetail("Operating System", new ICrashReportDetail<String>()
--- 65,71 ----
          {
              public String call()
              {
!                 return "1.12.2";
              }
          });
          this.theReportCategory.setDetail("Operating System", new ICrashReportDetail<String>()
***************
*** 128,133 ****
--- 135,156 ----
                  return IntCache.getCacheSizes();
              }
          });
+ 
+         if (Reflector.FMLCommonHandler_enhanceCrashReport.exists())
+         {
+             Object object = Reflector.call(Reflector.FMLCommonHandler_instance);
+             Reflector.callString(object, Reflector.FMLCommonHandler_enhanceCrashReport, this, this.theReportCategory);
+         }
+     }
+     
+     private void populateSnowball() {
+     	this.theReportCategory.setDetail("Snowball Version", new ICrashReportDetail<String>()
+         {
+             public String call()
+             {
+                 return Snowball.instance.VERSION;
+             }
+         });
      }
  
      /**
***************
*** 230,237 ****
--- 253,268 ----
       */
      public String getCompleteReport()
      {
+         if (!this.reported)
+         {
+             this.reported = true;
+             CrashReporter.onCrashReport(this, this.theReportCategory);
+         }
+ 
          StringBuilder stringbuilder = new StringBuilder();
          stringbuilder.append("---- Minecraft Crash Report ----\n");
+         Reflector.call(Reflector.BlamingTransformer_onCrash, stringbuilder);
+         Reflector.call(Reflector.CoreModManager_onCrash, stringbuilder);
          stringbuilder.append("// ");
          stringbuilder.append(getWittyComment());
          stringbuilder.append("\n\n");
***************
*** 250,255 ****
--- 281,288 ----
          }
  
          stringbuilder.append("\n\n");
+         stringbuilder.append("Please DO NOT report this to Mojang / Microsoft! This is a Snowball Bug!\n");
+         stringbuilder.append("Report this bug here: https://github.com/SnowballClient/Client/issues");
          this.getSectionsInStringBuilder(stringbuilder);
          return stringbuilder.toString();
      }
***************
*** 279,305 ****
              }
  
              Writer writer = null;
!             boolean flag1;
  
              try
              {
                  writer = new OutputStreamWriter(new FileOutputStream(toFile), StandardCharsets.UTF_8);
                  writer.write(this.getCompleteReport());
                  this.crashReportFile = toFile;
!                 boolean lvt_3_1_ = true;
!                 return lvt_3_1_;
              }
!             catch (Throwable throwable)
              {
!                 LOGGER.error("Could not save crash report to {}", toFile, throwable);
!                 flag1 = false;
              }
              finally
              {
                  IOUtils.closeQuietly(writer);
              }
  
!             return flag1;
          }
      }
  
--- 312,339 ----
              }
  
              Writer writer = null;
!             boolean flag;
  
              try
              {
                  writer = new OutputStreamWriter(new FileOutputStream(toFile), StandardCharsets.UTF_8);
                  writer.write(this.getCompleteReport());
                  this.crashReportFile = toFile;
!                 boolean flag1 = true;
!                 boolean flag2 = flag1;
!                 return flag2;
              }
!             catch (Throwable throwable1)
              {
!                 LOGGER.error("Could not save crash report to {}", toFile, throwable1);
!                 flag = false;
              }
              finally
              {
                  IOUtils.closeQuietly(writer);
              }
  
!             return flag;
          }
      }
  
diff -rc ./creativetab/CreativeTabs.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/creativetab/CreativeTabs.java
*** ./creativetab/CreativeTabs.java	2018-11-18 13:18:51.456341000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/creativetab/CreativeTabs.java	2018-11-21 13:24:31.212120200 -0800
***************
*** 13,21 ****
  
  public abstract class CreativeTabs
  {
!     public static final CreativeTabs[] CREATIVE_TAB_ARRAY = new CreativeTabs[12];
      public static final CreativeTabs BUILDING_BLOCKS = new CreativeTabs(0, "buildingBlocks")
      {
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Item.getItemFromBlock(Blocks.BRICK_BLOCK));
--- 13,22 ----
  
  public abstract class CreativeTabs
  {
!     public static CreativeTabs[] CREATIVE_TAB_ARRAY = new CreativeTabs[12];
      public static final CreativeTabs BUILDING_BLOCKS = new CreativeTabs(0, "buildingBlocks")
      {
+         
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Item.getItemFromBlock(Blocks.BRICK_BLOCK));
***************
*** 23,28 ****
--- 24,30 ----
      };
      public static final CreativeTabs DECORATIONS = new CreativeTabs(1, "decorations")
      {
+         
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Item.getItemFromBlock(Blocks.DOUBLE_PLANT), 1, BlockDoublePlant.EnumPlantType.PAEONIA.getMeta());
***************
*** 30,35 ****
--- 32,38 ----
      };
      public static final CreativeTabs REDSTONE = new CreativeTabs(2, "redstone")
      {
+         
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Items.REDSTONE);
***************
*** 37,42 ****
--- 40,46 ----
      };
      public static final CreativeTabs TRANSPORTATION = new CreativeTabs(3, "transportation")
      {
+         
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Item.getItemFromBlock(Blocks.GOLDEN_RAIL));
***************
*** 44,49 ****
--- 48,54 ----
      };
      public static final CreativeTabs MISC = new CreativeTabs(6, "misc")
      {
+         
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Items.LAVA_BUCKET);
***************
*** 51,56 ****
--- 56,62 ----
      };
      public static final CreativeTabs SEARCH = (new CreativeTabs(5, "search")
      {
+         
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Items.COMPASS);
***************
*** 58,63 ****
--- 64,70 ----
      }).setBackgroundImageName("item_search.png");
      public static final CreativeTabs FOOD = new CreativeTabs(7, "food")
      {
+         
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Items.APPLE);
***************
*** 65,70 ****
--- 72,78 ----
      };
      public static final CreativeTabs TOOLS = (new CreativeTabs(8, "tools")
      {
+         
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Items.IRON_AXE);
***************
*** 72,77 ****
--- 80,86 ----
      }).setRelevantEnchantmentTypes(new EnumEnchantmentType[] {EnumEnchantmentType.ALL, EnumEnchantmentType.DIGGER, EnumEnchantmentType.FISHING_ROD, EnumEnchantmentType.BREAKABLE});
      public static final CreativeTabs COMBAT = (new CreativeTabs(9, "combat")
      {
+         
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Items.GOLDEN_SWORD);
***************
*** 79,137 ****
      }).setRelevantEnchantmentTypes(new EnumEnchantmentType[] {EnumEnchantmentType.ALL, EnumEnchantmentType.ARMOR, EnumEnchantmentType.ARMOR_FEET, EnumEnchantmentType.ARMOR_HEAD, EnumEnchantmentType.ARMOR_LEGS, EnumEnchantmentType.ARMOR_CHEST, EnumEnchantmentType.BOW, EnumEnchantmentType.WEAPON, EnumEnchantmentType.WEARABLE, EnumEnchantmentType.BREAKABLE});
      public static final CreativeTabs BREWING = new CreativeTabs(10, "brewing")
      {
          public ItemStack getTabIconItem()
          {
              return PotionUtils.addPotionToItemStack(new ItemStack(Items.POTIONITEM), PotionTypes.WATER);
          }
      };
      public static final CreativeTabs MATERIALS = MISC;
!     public static final CreativeTabs field_192395_m = new CreativeTabs(4, "hotbar")
      {
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Blocks.BOOKSHELF);
          }
          public void displayAllRelevantItems(NonNullList<ItemStack> p_78018_1_)
          {
              throw new RuntimeException("Implement exception client-side.");
          }
!         public boolean func_192394_m()
          {
              return true;
          }
      };
      public static final CreativeTabs INVENTORY = (new CreativeTabs(11, "inventory")
      {
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Item.getItemFromBlock(Blocks.CHEST));
          }
      }).setBackgroundImageName("inventory.png").setNoScrollbar().setNoTitle();
      private final int tabIndex;
      private final String tabLabel;
- 
      /** Texture to use. */
!     private String theTexture = "items.png";
      private boolean hasScrollbar = true;
- 
      /** Whether to draw the title in the foreground of the creative GUI */
      private boolean drawTitle = true;
      private EnumEnchantmentType[] enchantmentTypes = new EnumEnchantmentType[0];
      private ItemStack iconItemStack;
  
      public CreativeTabs(int index, String label)
      {
          this.tabIndex = index;
          this.tabLabel = label;
          this.iconItemStack = ItemStack.field_190927_a;
          CREATIVE_TAB_ARRAY[index] = this;
      }
  
      public int getTabIndex()
      {
          return this.tabIndex;
      }
  
      public String getTabLabel()
      {
          return this.tabLabel;
--- 88,201 ----
      }).setRelevantEnchantmentTypes(new EnumEnchantmentType[] {EnumEnchantmentType.ALL, EnumEnchantmentType.ARMOR, EnumEnchantmentType.ARMOR_FEET, EnumEnchantmentType.ARMOR_HEAD, EnumEnchantmentType.ARMOR_LEGS, EnumEnchantmentType.ARMOR_CHEST, EnumEnchantmentType.BOW, EnumEnchantmentType.WEAPON, EnumEnchantmentType.WEARABLE, EnumEnchantmentType.BREAKABLE});
      public static final CreativeTabs BREWING = new CreativeTabs(10, "brewing")
      {
+         
          public ItemStack getTabIconItem()
          {
              return PotionUtils.addPotionToItemStack(new ItemStack(Items.POTIONITEM), PotionTypes.WATER);
          }
      };
      public static final CreativeTabs MATERIALS = MISC;
!     public static final CreativeTabs HOTBAR = new CreativeTabs(4, "hotbar")
      {
+         
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Blocks.BOOKSHELF);
          }
+         /**
+          * only shows items which have tabToDisplayOn == this
+          */
+         
          public void displayAllRelevantItems(NonNullList<ItemStack> p_78018_1_)
          {
              throw new RuntimeException("Implement exception client-side.");
          }
!         
!         public boolean isAlignedRight()
          {
              return true;
          }
      };
      public static final CreativeTabs INVENTORY = (new CreativeTabs(11, "inventory")
      {
+         
          public ItemStack getTabIconItem()
          {
              return new ItemStack(Item.getItemFromBlock(Blocks.CHEST));
          }
      }).setBackgroundImageName("inventory.png").setNoScrollbar().setNoTitle();
+     
+     public static final CreativeTabs SNOWBALL = new CreativeTabs(12, "snowball")
+     {
+         
+         public ItemStack getTabIconItem()
+         {
+             return new ItemStack(Items.SNOWBALL);
+         }
+     };
+     
      private final int tabIndex;
      private final String tabLabel;
      /** Texture to use. */
!     private String backgroundTexture = "items.png";
      private boolean hasScrollbar = true;
      /** Whether to draw the title in the foreground of the creative GUI */
      private boolean drawTitle = true;
      private EnumEnchantmentType[] enchantmentTypes = new EnumEnchantmentType[0];
      private ItemStack iconItemStack;
  
+     public CreativeTabs(String label)
+     {
+         this(getNextID(), label);
+     }
+     
+     public static CreativeTabs getOrCreateCreativeTab(String label, ItemStack item) {
+     	
+     	for(CreativeTabs inArray : CREATIVE_TAB_ARRAY) {
+     		if(inArray.getTabLabel().equalsIgnoreCase(label)) {
+     			return inArray;
+     		}
+     	}
+     	
+     	return new CreativeTabs(label) {
+ 			
+ 			@Override
+ 			public ItemStack getTabIconItem() {
+ 				return item;
+ 			}
+ 		};
+     }
+ 
      public CreativeTabs(int index, String label)
      {
+         if (index >= CREATIVE_TAB_ARRAY.length)
+         {
+             CreativeTabs[] tmp = new CreativeTabs[index + 1];
+             for (int x = 0; x < CREATIVE_TAB_ARRAY.length; x++)
+             {
+                 tmp[x] = CREATIVE_TAB_ARRAY[x];
+             }
+             CREATIVE_TAB_ARRAY = tmp;
+         }
          this.tabIndex = index;
          this.tabLabel = label;
          this.iconItemStack = ItemStack.field_190927_a;
          CREATIVE_TAB_ARRAY[index] = this;
      }
  
+     
      public int getTabIndex()
      {
          return this.tabIndex;
      }
  
+     public CreativeTabs setBackgroundImageName(String texture)
+     {
+         this.backgroundTexture = texture;
+         return this;
+     }
+ 
+     
      public String getTabLabel()
      {
          return this.tabLabel;
***************
*** 140,153 ****
      /**
       * Gets the translated Label.
       */
      public String getTranslatedTabLabel()
      {
          return "itemGroup." + this.getTabLabel();
      }
  
      public ItemStack getIconItemStack()
      {
!         if (this.iconItemStack.func_190926_b())
          {
              this.iconItemStack = this.getTabIconItem();
          }
--- 204,219 ----
      /**
       * Gets the translated Label.
       */
+     
      public String getTranslatedTabLabel()
      {
          return "itemGroup." + this.getTabLabel();
      }
  
+     
      public ItemStack getIconItemStack()
      {
!         if (this.iconItemStack.func_190926_b()) //isEmpty()
          {
              this.iconItemStack = this.getTabIconItem();
          }
***************
*** 155,173 ****
          return this.iconItemStack;
      }
  
      public abstract ItemStack getTabIconItem();
  
      public String getBackgroundImageName()
      {
!         return this.theTexture;
!     }
! 
!     public CreativeTabs setBackgroundImageName(String texture)
!     {
!         this.theTexture = texture;
!         return this;
      }
  
      public boolean drawInForegroundOfTab()
      {
          return this.drawTitle;
--- 221,236 ----
          return this.iconItemStack;
      }
  
+     
      public abstract ItemStack getTabIconItem();
  
+     
      public String getBackgroundImageName()
      {
!         return this.backgroundTexture;
      }
  
+     
      public boolean drawInForegroundOfTab()
      {
          return this.drawTitle;
***************
*** 179,184 ****
--- 242,248 ----
          return this;
      }
  
+     
      public boolean shouldHidePlayerInventory()
      {
          return this.hasScrollbar;
***************
*** 193,212 ****
      /**
       * returns index % 6
       */
      public int getTabColumn()
      {
          return this.tabIndex % 6;
      }
  
      /**
       * returns tabIndex < 6
       */
      public boolean isTabInFirstRow()
      {
          return this.tabIndex < 6;
      }
  
!     public boolean func_192394_m()
      {
          return this.getTabColumn() == 5;
      }
--- 257,287 ----
      /**
       * returns index % 6
       */
+     
      public int getTabColumn()
      {
+         if (tabIndex > 11)
+         {
+             return ((tabIndex - 12) % 10) % 5;
+         }
          return this.tabIndex % 6;
      }
  
      /**
       * returns tabIndex < 6
       */
+     
      public boolean isTabInFirstRow()
      {
+         if (tabIndex > 11)
+         {
+             return ((tabIndex - 12) % 10) < 5;
+         }
          return this.tabIndex < 6;
      }
  
!     
!     public boolean isAlignedRight()
      {
          return this.getTabColumn() == 5;
      }
***************
*** 247,252 ****
--- 322,328 ----
      /**
       * only shows items which have tabToDisplayOn == this
       */
+     
      public void displayAllRelevantItems(NonNullList<ItemStack> p_78018_1_)
      {
          for (Item item : Item.REGISTRY)
***************
*** 254,257 ****
              item.getSubItems(this, p_78018_1_);
          }
      }
! }
--- 330,368 ----
              item.getSubItems(this, p_78018_1_);
          }
      }
! 
!     public int getTabPage()
!     {
!         if (tabIndex > 11)
!         {
!             return ((tabIndex - 12) / 10) + 1;
!         }
!         return 0;
!     }
! 
!     public static int getNextID()
!     {
!         return CREATIVE_TAB_ARRAY.length;
!     }
! 
!     /**
!      * Determines if the search bar should be shown for this tab.
!      *
!      * @return True to show the bar
!      */
!     public boolean hasSearchBar()
!     {
!         return tabIndex == CreativeTabs.SEARCH.tabIndex;
!     }
! 
!     /**
!      * Gets the width of the search bar of the creative tab, use this if your
!      * creative tab name overflows together with a custom texture.
!      *
!      * @return The width of the search bar, 89 by default
!      */
!     public int getSearchbarWidth()
!     {
!         return 89;
!     }
! }
\ No newline at end of file
diff -rc ./dispenser/BehaviorProjectileDispense.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/dispenser/BehaviorProjectileDispense.java
*** ./dispenser/BehaviorProjectileDispense.java	2018-11-18 13:18:51.489322000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/dispenser/BehaviorProjectileDispense.java	2018-11-18 13:37:00.490065900 -0800
***************
*** 20,26 ****
          IProjectile iprojectile = this.getProjectileEntity(world, iposition, stack);
          iprojectile.setThrowableHeading((double)enumfacing.getFrontOffsetX(), (double)((float)enumfacing.getFrontOffsetY() + 0.1F), (double)enumfacing.getFrontOffsetZ(), this.getProjectileVelocity(), this.getProjectileInaccuracy());
          world.spawnEntityInWorld((Entity)iprojectile);
!         stack.func_190918_g(1);
          return stack;
      }
  
--- 20,26 ----
          IProjectile iprojectile = this.getProjectileEntity(world, iposition, stack);
          iprojectile.setThrowableHeading((double)enumfacing.getFrontOffsetX(), (double)((float)enumfacing.getFrontOffsetY() + 0.1F), (double)enumfacing.getFrontOffsetZ(), this.getProjectileVelocity(), this.getProjectileInaccuracy());
          world.spawnEntityInWorld((Entity)iprojectile);
!         stack.shrink(1);
          return stack;
      }
  
diff -rc ./enchantment/Enchantment.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/enchantment/Enchantment.java
*** ./enchantment/Enchantment.java	2018-11-18 13:18:51.569276000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/enchantment/Enchantment.java	2018-11-28 23:33:34.439215300 -0800
***************
*** 1,8 ****
  package net.minecraft.enchantment;
  
- import com.google.common.collect.Lists;
  import java.util.List;
  import javax.annotation.Nullable;
  import net.minecraft.entity.Entity;
  import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.entity.EnumCreatureAttribute;
--- 1,11 ----
  package net.minecraft.enchantment;
  
  import java.util.List;
+ 
  import javax.annotation.Nullable;
+ 
+ import com.google.common.collect.Lists;
+ 
  import net.minecraft.entity.Entity;
  import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.entity.EnumCreatureAttribute;
***************
*** 176,182 ****
      {
          String s = I18n.translateToLocal(this.getName());
  
!         if (this.func_190936_d())
          {
              s = TextFormatting.RED + s;
          }
--- 179,185 ----
      {
          String s = I18n.translateToLocal(this.getName());
  
!         if (this.isCurseEnchantment())
          {
              s = TextFormatting.RED + s;
          }
***************
*** 212,218 ****
          return false;
      }
  
!     public boolean func_190936_d()
      {
          return false;
      }
--- 215,221 ----
          return false;
      }
  
!     public boolean isCurseEnchantment()
      {
          return false;
      }
diff -rc ./enchantment/EnchantmentBindingCurse.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/enchantment/EnchantmentBindingCurse.java
*** ./enchantment/EnchantmentBindingCurse.java	2018-11-18 13:18:51.648267000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/enchantment/EnchantmentBindingCurse.java	2018-11-28 23:33:34.480191400 -0800
***************
*** 39,45 ****
          return true;
      }
  
!     public boolean func_190936_d()
      {
          return true;
      }
--- 39,45 ----
          return true;
      }
  
!     public boolean isCurseEnchantment()
      {
          return true;
      }
diff -rc ./enchantment/EnchantmentVanishingCurse.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/enchantment/EnchantmentVanishingCurse.java
*** ./enchantment/EnchantmentVanishingCurse.java	2018-11-18 13:18:51.827150000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/enchantment/EnchantmentVanishingCurse.java	2018-11-28 23:33:34.514171700 -0800
***************
*** 39,45 ****
          return true;
      }
  
!     public boolean func_190936_d()
      {
          return true;
      }
--- 39,45 ----
          return true;
      }
  
!     public boolean isCurseEnchantment()
      {
          return true;
      }
diff -rc ./entity/ai/EntityAIHarvestFarmland.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/ai/EntityAIHarvestFarmland.java
*** ./entity/ai/EntityAIHarvestFarmland.java	2018-11-18 13:18:52.448807000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/ai/EntityAIHarvestFarmland.java	2018-11-18 13:37:00.756913400 -0800
***************
*** 108,114 ****
  
                      if (flag)
                      {
!                         itemstack.func_190918_g(1);
  
                          if (itemstack.func_190926_b())
                          {
--- 108,114 ----
  
                      if (flag)
                      {
!                         itemstack.shrink(1);
  
                          if (itemstack.func_190926_b())
                          {
diff -rc ./entity/ai/EntityAIVillagerInteract.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/ai/EntityAIVillagerInteract.java
*** ./entity/ai/EntityAIVillagerInteract.java	2018-11-18 13:18:52.956501000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/ai/EntityAIVillagerInteract.java	2018-11-18 13:37:38.289316000 -0800
***************
*** 61,77 ****
                      {
                          Item item = itemstack.getItem();
  
!                         if ((item == Items.BREAD || item == Items.POTATO || item == Items.CARROT || item == Items.BEETROOT) && itemstack.func_190916_E() > 3)
                          {
!                             int l = itemstack.func_190916_E() / 2;
!                             itemstack.func_190918_g(l);
                              itemstack1 = new ItemStack(item, l, itemstack.getMetadata());
                          }
!                         else if (item == Items.WHEAT && itemstack.func_190916_E() > 5)
                          {
!                             int j = itemstack.func_190916_E() / 2 / 3 * 3;
                              int k = j / 3;
!                             itemstack.func_190918_g(j);
                              itemstack1 = new ItemStack(Items.BREAD, k, 0);
                          }
  
--- 61,77 ----
                      {
                          Item item = itemstack.getItem();
  
!                         if ((item == Items.BREAD || item == Items.POTATO || item == Items.CARROT || item == Items.BEETROOT) && itemstack.getCount() > 3)
                          {
!                             int l = itemstack.getCount() / 2;
!                             itemstack.shrink(l);
                              itemstack1 = new ItemStack(item, l, itemstack.getMetadata());
                          }
!                         else if (item == Items.WHEAT && itemstack.getCount() > 5)
                          {
!                             int j = itemstack.getCount() / 2 / 3 * 3;
                              int k = j / 3;
!                             itemstack.shrink(j);
                              itemstack1 = new ItemStack(Items.BREAD, k, 0);
                          }
  
diff -rc ./entity/EntityAgeable.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/EntityAgeable.java
*** ./entity/EntityAgeable.java	2018-11-18 13:18:51.897110000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/EntityAgeable.java	2018-11-18 13:37:00.806884900 -0800
***************
*** 57,63 ****
  
                          if (!player.capabilities.isCreativeMode)
                          {
!                             itemstack.func_190918_g(1);
                          }
                      }
                  }
--- 57,63 ----
  
                          if (!player.capabilities.isCreativeMode)
                          {
!                             itemstack.shrink(1);
                          }
                      }
                  }
diff -rc ./entity/EntityLiving.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/EntityLiving.java
*** ./entity/EntityLiving.java	2018-11-18 13:18:52.003049000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/EntityLiving.java	2018-11-18 13:37:38.402250700 -0800
***************
*** 17,22 ****
--- 17,23 ----
  import net.minecraft.entity.item.EntityBoat;
  import net.minecraft.entity.item.EntityItem;
  import net.minecraft.entity.monster.EntityGhast;
+ import net.minecraft.entity.monster.EntityMob;
  import net.minecraft.entity.monster.IMob;
  import net.minecraft.entity.player.EntityPlayer;
  import net.minecraft.init.Blocks;
***************
*** 37,42 ****
--- 38,44 ----
  import net.minecraft.pathfinding.PathNavigate;
  import net.minecraft.pathfinding.PathNavigateGround;
  import net.minecraft.pathfinding.PathNodeType;
+ import net.minecraft.scoreboard.Team;
  import net.minecraft.util.DamageSource;
  import net.minecraft.util.EnumHand;
  import net.minecraft.util.EnumHandSide;
***************
*** 53,60 ****
--- 55,65 ----
  import net.minecraft.world.EnumDifficulty;
  import net.minecraft.world.World;
  import net.minecraft.world.WorldServer;
+ import net.minecraft.world.biome.Biome;
  import net.minecraft.world.storage.loot.LootContext;
  import net.minecraft.world.storage.loot.LootTable;
+ import optifine.Config;
+ import optifine.Reflector;
  
  public abstract class EntityLiving extends EntityLivingBase
  {
***************
*** 102,107 ****
--- 107,117 ----
      private boolean isLeashed;
      private Entity leashedToEntity;
      private NBTTagCompound leashNBTTag;
+     public int randomMobsId = 0;
+     public Biome spawnBiome = null;
+     public BlockPos spawnPosition = null;
+     private UUID teamUuid = null;
+     private String teamUuidString = null;
  
      public EntityLiving(World worldIn)
      {
***************
*** 121,126 ****
--- 131,140 ----
          {
              this.initEntityAI();
          }
+ 
+         UUID uuid = this.getUniqueID();
+         long i = uuid.getLeastSignificantBits();
+         this.randomMobsId = (int)(i & 2147483647L);
      }
  
      protected void initEntityAI()
***************
*** 201,206 ****
--- 215,221 ----
      public void setAttackTarget(@Nullable EntityLivingBase entitylivingbaseIn)
      {
          this.attackTarget = entitylivingbaseIn;
+         Reflector.callVoid(Reflector.ForgeHooks_onLivingSetAttackTarget, this, entitylivingbaseIn);
      }
  
      /**
***************
*** 346,364 ****
       */
      public void onUpdate()
      {
!         super.onUpdate();
! 
!         if (!this.world.isRemote)
          {
!             this.updateLeashedState();
  
!             if (this.ticksExisted % 5 == 0)
              {
!                 boolean flag = !(this.getControllingPassenger() instanceof EntityLiving);
!                 boolean flag1 = !(this.getRidingEntity() instanceof EntityBoat);
!                 this.tasks.setControlFlag(1, flag);
!                 this.tasks.setControlFlag(4, flag && flag1);
!                 this.tasks.setControlFlag(2, flag);
              }
          }
      }
--- 361,386 ----
       */
      public void onUpdate()
      {
!         if (Config.isSmoothWorld() && this.canSkipUpdate())
!         {
!             this.onUpdateMinimal();
!         }
!         else
          {
!             super.onUpdate();
  
!             if (!this.world.isRemote)
              {
!                 this.updateLeashedState();
! 
!                 if (this.ticksExisted % 5 == 0)
!                 {
!                     boolean flag = !(this.getControllingPassenger() instanceof EntityLiving);
!                     boolean flag1 = !(this.getRidingEntity() instanceof EntityBoat);
!                     this.tasks.setControlFlag(1, flag);
!                     this.tasks.setControlFlag(4, flag && flag1);
!                     this.tasks.setControlFlag(2, flag);
!                 }
              }
          }
      }
***************
*** 766,772 ****
              }
  
              this.persistenceRequired = true;
!             this.onItemPickup(itemEntity, itemstack.func_190916_E());
              itemEntity.setDead();
          }
      }
--- 788,794 ----
              }
  
              this.persistenceRequired = true;
!             this.onItemPickup(itemEntity, itemstack.getCount());
              itemEntity.setDead();
          }
      }
***************
*** 789,798 ****
--- 811,835 ----
       */
      protected void despawnEntity()
      {
+         Object object = null;
+         Object object1 = Reflector.getFieldValue(Reflector.Event_Result_DEFAULT);
+         Object object2 = Reflector.getFieldValue(Reflector.Event_Result_DENY);
+ 
          if (this.persistenceRequired)
          {
              this.entityAge = 0;
          }
+         else if ((this.entityAge & 31) == 31 && (object = Reflector.call(Reflector.ForgeEventFactory_canEntityDespawn, this)) != object1)
+         {
+             if (object == object2)
+             {
+                 this.entityAge = 0;
+             }
+             else
+             {
+                 this.setDead();
+             }
+         }
          else
          {
              Entity entity = this.world.getClosestPlayerToEntity(this, -1.0D);
***************
*** 885,906 ****
      public void faceEntity(Entity entityIn, float maxYawIncrease, float maxPitchIncrease)
      {
          double d0 = entityIn.posX - this.posX;
!         double d2 = entityIn.posZ - this.posZ;
!         double d1;
  
          if (entityIn instanceof EntityLivingBase)
          {
              EntityLivingBase entitylivingbase = (EntityLivingBase)entityIn;
!             d1 = entitylivingbase.posY + (double)entitylivingbase.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
          }
          else
          {
!             d1 = (entityIn.getEntityBoundingBox().minY + entityIn.getEntityBoundingBox().maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
          }
  
!         double d3 = (double)MathHelper.sqrt(d0 * d0 + d2 * d2);
!         float f = (float)(MathHelper.atan2(d2, d0) * (180D / Math.PI)) - 90.0F;
!         float f1 = (float)(-(MathHelper.atan2(d1, d3) * (180D / Math.PI)));
          this.rotationPitch = this.updateRotation(this.rotationPitch, f1, maxPitchIncrease);
          this.rotationYaw = this.updateRotation(this.rotationYaw, f, maxYawIncrease);
      }
--- 922,943 ----
      public void faceEntity(Entity entityIn, float maxYawIncrease, float maxPitchIncrease)
      {
          double d0 = entityIn.posX - this.posX;
!         double d1 = entityIn.posZ - this.posZ;
!         double d2;
  
          if (entityIn instanceof EntityLivingBase)
          {
              EntityLivingBase entitylivingbase = (EntityLivingBase)entityIn;
!             d2 = entitylivingbase.posY + (double)entitylivingbase.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
          }
          else
          {
!             d2 = (entityIn.getEntityBoundingBox().minY + entityIn.getEntityBoundingBox().maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
          }
  
!         double d3 = (double)MathHelper.sqrt(d0 * d0 + d1 * d1);
!         float f = (float)(MathHelper.atan2(d1, d0) * (180D / Math.PI)) - 90.0F;
!         float f1 = (float)(-(MathHelper.atan2(d2, d3) * (180D / Math.PI)));
          this.rotationPitch = this.updateRotation(this.rotationPitch, f1, maxPitchIncrease);
          this.rotationYaw = this.updateRotation(this.rotationYaw, f, maxYawIncrease);
      }
***************
*** 1125,1131 ****
              }
              else
              {
!                 return stack.getItem() == Items.SHIELD ? EntityEquipmentSlot.OFFHAND : EntityEquipmentSlot.MAINHAND;
              }
          }
          else
--- 1162,1175 ----
              }
              else
              {
!                 boolean flag = stack.getItem() == Items.SHIELD;
! 
!                 if (Reflector.ForgeItem_isShield.exists())
!                 {
!                     flag = Reflector.callBoolean(stack.getItem(), Reflector.ForgeItem_isShield, stack, null);
!                 }
! 
!                 return flag ? EntityEquipmentSlot.OFFHAND : EntityEquipmentSlot.MAINHAND;
              }
          }
          else
***************
*** 1342,1348 ****
              if (itemstack.getItem() == Items.LEAD && this.canBeLeashedTo(player))
              {
                  this.setLeashedToEntity(player, true);
!                 itemstack.func_190918_g(1);
                  return true;
              }
              else
--- 1386,1392 ----
              if (itemstack.getItem() == Items.LEAD && this.canBeLeashedTo(player))
              {
                  this.setLeashedToEntity(player, true);
!                 itemstack.shrink(1);
                  return true;
              }
              else
***************
*** 1584,1589 ****
--- 1628,1700 ----
          return this.isLeftHanded() ? EnumHandSide.LEFT : EnumHandSide.RIGHT;
      }
  
+     private boolean canSkipUpdate()
+     {
+         if (this.isChild())
+         {
+             return false;
+         }
+         else if (this.hurtTime > 0)
+         {
+             return false;
+         }
+         else if (this.ticksExisted < 20)
+         {
+             return false;
+         }
+         else
+         {
+             World world = this.getEntityWorld();
+ 
+             if (world == null)
+             {
+                 return false;
+             }
+             else if (world.playerEntities.size() != 1)
+             {
+                 return false;
+             }
+             else
+             {
+                 Entity entity = world.playerEntities.get(0);
+                 double d0 = Math.max(Math.abs(this.posX - entity.posX) - 16.0D, 0.0D);
+                 double d1 = Math.max(Math.abs(this.posZ - entity.posZ) - 16.0D, 0.0D);
+                 double d2 = d0 * d0 + d1 * d1;
+                 return !this.isInRangeToRenderDist(d2);
+             }
+         }
+     }
+ 
+     private void onUpdateMinimal()
+     {
+         ++this.entityAge;
+ 
+         if (this instanceof EntityMob)
+         {
+             float f = this.getBrightness();
+ 
+             if (f > 0.5F)
+             {
+                 this.entityAge += 2;
+             }
+         }
+ 
+         this.despawnEntity();
+     }
+ 
+     public Team getTeam()
+     {
+         UUID uuid = this.getUniqueID();
+ 
+         if (this.teamUuid != uuid)
+         {
+             this.teamUuid = uuid;
+             this.teamUuidString = uuid.toString();
+         }
+ 
+         return this.world.getScoreboard().getPlayersTeam(this.teamUuidString);
+     }
+ 
      public static enum SpawnPlacementType
      {
          ON_GROUND,
diff -rc ./entity/EntityLivingBase.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/EntityLivingBase.java
*** ./entity/EntityLivingBase.java	2018-11-18 13:18:52.029034000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/EntityLivingBase.java	2018-11-30 21:22:51.104609100 -0800
***************
*** 1201,1207 ****
                  if (itemstack1.getItem() == Items.field_190929_cY)
                  {
                      itemstack = itemstack1.copy();
!                     itemstack1.func_190918_g(1);
                      break;
                  }
              }
--- 1201,1207 ----
                  if (itemstack1.getItem() == Items.field_190929_cY)
                  {
                      itemstack = itemstack1.copy();
!                     itemstack1.shrink(1);
                      break;
                  }
              }
diff -rc ./entity/item/EntityArmorStand.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityArmorStand.java
*** ./entity/item/EntityArmorStand.java	2018-11-18 13:18:53.502186000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityArmorStand.java	2018-11-18 13:37:38.330292100 -0800
***************
*** 486,502 ****
                  if (player.capabilities.isCreativeMode && itemstack.func_190926_b() && !p_184795_3_.func_190926_b())
                  {
                      ItemStack itemstack2 = p_184795_3_.copy();
!                     itemstack2.func_190920_e(1);
                      this.setItemStackToSlot(p_184795_2_, itemstack2);
                  }
!                 else if (!p_184795_3_.func_190926_b() && p_184795_3_.func_190916_E() > 1)
                  {
                      if (itemstack.func_190926_b())
                      {
                          ItemStack itemstack1 = p_184795_3_.copy();
!                         itemstack1.func_190920_e(1);
                          this.setItemStackToSlot(p_184795_2_, itemstack1);
!                         p_184795_3_.func_190918_g(1);
                      }
                  }
                  else
--- 486,502 ----
                  if (player.capabilities.isCreativeMode && itemstack.func_190926_b() && !p_184795_3_.func_190926_b())
                  {
                      ItemStack itemstack2 = p_184795_3_.copy();
!                     itemstack2.setCount(1);
                      this.setItemStackToSlot(p_184795_2_, itemstack2);
                  }
!                 else if (!p_184795_3_.func_190926_b() && p_184795_3_.getCount() > 1)
                  {
                      if (itemstack.func_190926_b())
                      {
                          ItemStack itemstack1 = p_184795_3_.copy();
!                         itemstack1.setCount(1);
                          this.setItemStackToSlot(p_184795_2_, itemstack1);
!                         p_184795_3_.shrink(1);
                      }
                  }
                  else
diff -rc ./entity/item/EntityEnderPearl.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityEnderPearl.java
*** ./entity/item/EntityEnderPearl.java	2018-11-18 13:18:53.575145000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityEnderPearl.java	2017-10-20 21:01:25.608778000 -0700
***************
*** 1,6 ****
--- 1,8 ----
  package net.minecraft.entity.item;
  
+ import javax.annotation.Nullable;
  import net.minecraft.advancements.CriteriaTriggers;
+ import net.minecraft.entity.Entity;
  import net.minecraft.entity.EntityLivingBase;
  import net.minecraft.entity.monster.EntityEndermite;
  import net.minecraft.entity.player.EntityPlayer;
***************
*** 140,143 ****
--- 142,156 ----
              super.onUpdate();
          }
      }
+ 
+     @Nullable
+     public Entity changeDimension(int dimensionIn)
+     {
+         if (this.thrower.dimension != dimensionIn)
+         {
+             this.thrower = null;
+         }
+ 
+         return super.changeDimension(dimensionIn);
+     }
  }
diff -rc ./entity/item/EntityItem.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityItem.java
*** ./entity/item/EntityItem.java	2018-11-18 13:18:53.630113000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityItem.java	2018-11-18 13:37:38.354288600 -0800
***************
*** 237,253 ****
                      {
                          return false;
                      }
!                     else if (itemstack1.func_190916_E() < itemstack.func_190916_E())
                      {
                          return other.combineItems(this);
                      }
!                     else if (itemstack1.func_190916_E() + itemstack.func_190916_E() > itemstack1.getMaxStackSize())
                      {
                          return false;
                      }
                      else
                      {
!                         itemstack1.func_190917_f(itemstack.func_190916_E());
                          other.delayBeforeCanPickup = Math.max(other.delayBeforeCanPickup, this.delayBeforeCanPickup);
                          other.age = Math.min(other.age, this.age);
                          other.setEntityItemStack(itemstack1);
--- 237,253 ----
                      {
                          return false;
                      }
!                     else if (itemstack1.getCount() < itemstack.getCount())
                      {
                          return other.combineItems(this);
                      }
!                     else if (itemstack1.getCount() + itemstack.getCount() > itemstack1.getMaxStackSize())
                      {
                          return false;
                      }
                      else
                      {
!                         itemstack1.grow(itemstack.getCount());
                          other.delayBeforeCanPickup = Math.max(other.delayBeforeCanPickup, this.delayBeforeCanPickup);
                          other.age = Math.min(other.age, this.age);
                          other.setEntityItemStack(itemstack1);
***************
*** 408,414 ****
          {
              ItemStack itemstack = this.getEntityItem();
              Item item = itemstack.getItem();
!             int i = itemstack.func_190916_E();
  
              if (this.delayBeforeCanPickup == 0 && (this.owner == null || 6000 - this.age <= 200 || this.owner.equals(entityIn.getName())) && entityIn.inventory.addItemStackToInventory(itemstack))
              {
--- 408,414 ----
          {
              ItemStack itemstack = this.getEntityItem();
              Item item = itemstack.getItem();
!             int i = itemstack.getCount();
  
              if (this.delayBeforeCanPickup == 0 && (this.owner == null || 6000 - this.age <= 200 || this.owner.equals(entityIn.getName())) && entityIn.inventory.addItemStackToInventory(itemstack))
              {
***************
*** 417,423 ****
                  if (itemstack.func_190926_b())
                  {
                      this.setDead();
!                     itemstack.func_190920_e(i);
                  }
  
                  entityIn.addStat(StatList.getObjectsPickedUpStats(item), i);
--- 417,423 ----
                  if (itemstack.func_190926_b())
                  {
                      this.setDead();
!                     itemstack.setCount(i);
                  }
  
                  entityIn.addStat(StatList.getObjectsPickedUpStats(item), i);
diff -rc ./entity/item/EntityItemFrame.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityItemFrame.java
*** ./entity/item/EntityItemFrame.java	2018-11-18 13:18:53.646104000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityItemFrame.java	2018-11-18 13:37:21.930133000 -0800
***************
*** 176,182 ****
          if (!stack.func_190926_b())
          {
              stack = stack.copy();
!             stack.func_190920_e(1);
              stack.setItemFrame(this);
          }
  
--- 176,182 ----
          if (!stack.func_190926_b())
          {
              stack = stack.copy();
!             stack.setCount(1);
              stack.setItemFrame(this);
          }
  
***************
*** 285,291 ****
  
                      if (!player.capabilities.isCreativeMode)
                      {
!                         itemstack.func_190918_g(1);
                      }
                  }
              }
--- 285,291 ----
  
                      if (!player.capabilities.isCreativeMode)
                      {
!                         itemstack.shrink(1);
                      }
                  }
              }
diff -rc ./entity/item/EntityMinecartContainer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityMinecartContainer.java
*** ./entity/item/EntityMinecartContainer.java	2018-11-18 13:18:53.720061000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityMinecartContainer.java	2018-11-18 13:37:38.431234200 -0800
***************
*** 114,122 ****
          this.addLoot((EntityPlayer)null);
          this.minecartContainerItems.set(index, stack);
  
!         if (!stack.func_190926_b() && stack.func_190916_E() > this.getInventoryStackLimit())
          {
!             stack.func_190920_e(this.getInventoryStackLimit());
          }
      }
  
--- 114,122 ----
          this.addLoot((EntityPlayer)null);
          this.minecartContainerItems.set(index, stack);
  
!         if (!stack.func_190926_b() && stack.getCount() > this.getInventoryStackLimit())
          {
!             stack.setCount(this.getInventoryStackLimit());
          }
      }
  
diff -rc ./entity/item/EntityMinecartFurnace.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityMinecartFurnace.java
*** ./entity/item/EntityMinecartFurnace.java	2018-11-18 13:18:53.750044000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/item/EntityMinecartFurnace.java	2018-11-18 13:37:01.102970800 -0800
***************
*** 155,161 ****
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.func_190918_g(1);
              }
  
              this.fuel += 3600;
--- 155,161 ----
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.shrink(1);
              }
  
              this.fuel += 3600;
diff -rc ./entity/monster/EntityZombieVillager.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/monster/EntityZombieVillager.java
*** ./entity/monster/EntityZombieVillager.java	2018-11-18 13:18:54.357694000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/monster/EntityZombieVillager.java	2018-11-18 13:37:01.250884900 -0800
***************
*** 135,141 ****
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.func_190918_g(1);
              }
  
              if (!this.world.isRemote)
--- 135,141 ----
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.shrink(1);
              }
  
              if (!this.world.isRemote)
diff -rc ./entity/passive/AbstractChestHorse.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/AbstractChestHorse.java
*** ./entity/passive/AbstractChestHorse.java	2018-11-18 13:18:54.393676000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/AbstractChestHorse.java	2018-11-18 13:37:00.450083400 -0800
***************
*** 233,239 ****
                  {
                      if (!player.capabilities.isCreativeMode)
                      {
!                         itemstack.func_190918_g(1);
                      }
  
                      return true;
--- 233,239 ----
                  {
                      if (!player.capabilities.isCreativeMode)
                      {
!                         itemstack.shrink(1);
                      }
  
                      return true;
diff -rc ./entity/passive/EntityAnimal.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityAnimal.java
*** ./entity/passive/EntityAnimal.java	2018-11-18 13:18:54.440661000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityAnimal.java	2018-11-18 13:37:00.836867800 -0800
***************
*** 194,200 ****
      {
          if (!player.capabilities.isCreativeMode)
          {
!             stack.func_190918_g(1);
          }
      }
  
--- 194,200 ----
      {
          if (!player.capabilities.isCreativeMode)
          {
!             stack.shrink(1);
          }
      }
  
diff -rc ./entity/passive/EntityCow.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityCow.java
*** ./entity/passive/EntityCow.java	2018-11-18 13:18:54.482622000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityCow.java	2018-11-18 13:37:00.916077700 -0800
***************
*** 99,105 ****
          if (itemstack.getItem() == Items.BUCKET && !player.capabilities.isCreativeMode && !this.isChild())
          {
              player.playSound(SoundEvents.ENTITY_COW_MILK, 1.0F, 1.0F);
!             itemstack.func_190918_g(1);
  
              if (itemstack.func_190926_b())
              {
--- 99,105 ----
          if (itemstack.getItem() == Items.BUCKET && !player.capabilities.isCreativeMode && !this.isChild())
          {
              player.playSound(SoundEvents.ENTITY_COW_MILK, 1.0F, 1.0F);
!             itemstack.shrink(1);
  
              if (itemstack.func_190926_b())
              {
diff -rc ./entity/passive/EntityHorse.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityHorse.java
*** ./entity/passive/EntityHorse.java	2018-11-18 13:18:54.514606000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityHorse.java	2018-11-18 13:37:00.940056000 -0800
***************
*** 282,288 ****
                  {
                      if (!player.capabilities.isCreativeMode)
                      {
!                         itemstack.func_190918_g(1);
                      }
  
                      return true;
--- 282,288 ----
                  {
                      if (!player.capabilities.isCreativeMode)
                      {
!                         itemstack.shrink(1);
                      }
  
                      return true;
diff -rc ./entity/passive/EntityMooshroom.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityMooshroom.java
*** ./entity/passive/EntityMooshroom.java	2018-11-18 13:18:54.550585000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityMooshroom.java	2018-11-18 13:37:01.126955800 -0800
***************
*** 36,42 ****
  
          if (itemstack.getItem() == Items.BOWL && this.getGrowingAge() >= 0 && !player.capabilities.isCreativeMode)
          {
!             itemstack.func_190918_g(1);
  
              if (itemstack.func_190926_b())
              {
--- 36,42 ----
  
          if (itemstack.getItem() == Items.BOWL && this.getGrowingAge() >= 0 && !player.capabilities.isCreativeMode)
          {
!             itemstack.shrink(1);
  
              if (itemstack.func_190926_b())
              {
diff -rc ./entity/passive/EntityOcelot.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityOcelot.java
*** ./entity/passive/EntityOcelot.java	2018-11-18 13:18:54.572573000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityOcelot.java	2018-11-18 13:37:01.149941300 -0800
***************
*** 236,242 ****
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.func_190918_g(1);
              }
  
              if (!this.world.isRemote)
--- 236,242 ----
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.shrink(1);
              }
  
              if (!this.world.isRemote)
diff -rc ./entity/passive/EntityParrot.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityParrot.java
*** ./entity/passive/EntityParrot.java	2018-11-18 13:18:54.592558000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityParrot.java	2018-11-18 13:37:01.185919400 -0800
***************
*** 244,250 ****
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.func_190918_g(1);
              }
  
              if (!this.isSilent())
--- 244,250 ----
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.shrink(1);
              }
  
              if (!this.isSilent())
***************
*** 273,279 ****
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.func_190918_g(1);
              }
  
              this.addPotionEffect(new PotionEffect(MobEffects.POISON, 900));
--- 273,279 ----
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.shrink(1);
              }
  
              this.addPotionEffect(new PotionEffect(MobEffects.POISON, 900));
diff -rc ./entity/passive/EntityVillager.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityVillager.java
*** ./entity/passive/EntityVillager.java	2018-11-18 13:18:54.722483000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityVillager.java	2018-11-18 13:37:38.604134400 -0800
***************
*** 556,567 ****
  
                  if (!itemstack.func_190926_b())
                  {
!                     if (itemstack.getItem() == Items.BREAD && itemstack.func_190916_E() >= 3)
                      {
                          flag = true;
                          this.villagerInventory.decrStackSize(i, 3);
                      }
!                     else if ((itemstack.getItem() == Items.POTATO || itemstack.getItem() == Items.CARROT) && itemstack.func_190916_E() >= 12)
                      {
                          flag = true;
                          this.villagerInventory.decrStackSize(i, 12);
--- 556,567 ----
  
                  if (!itemstack.func_190926_b())
                  {
!                     if (itemstack.getItem() == Items.BREAD && itemstack.getCount() >= 3)
                      {
                          flag = true;
                          this.villagerInventory.decrStackSize(i, 3);
                      }
!                     else if ((itemstack.getItem() == Items.POTATO || itemstack.getItem() == Items.CARROT) && itemstack.getCount() >= 12)
                      {
                          flag = true;
                          this.villagerInventory.decrStackSize(i, 12);
***************
*** 612,618 ****
  
          if (recipe.getItemToBuy().getItem() == Items.EMERALD)
          {
!             this.wealth += recipe.getItemToBuy().func_190916_E();
          }
  
          if (recipe.getRewardsExp())
--- 612,618 ----
  
          if (recipe.getItemToBuy().getItem() == Items.EMERALD)
          {
!             this.wealth += recipe.getItemToBuy().getCount();
          }
  
          if (recipe.getRewardsExp())
***************
*** 941,947 ****
              }
              else
              {
!                 itemstack.func_190920_e(itemstack1.func_190916_E());
              }
          }
      }
--- 941,947 ----
              }
              else
              {
!                 itemstack.setCount(itemstack1.getCount());
              }
          }
      }
***************
*** 992,1003 ****
  
              if (!itemstack.func_190926_b())
              {
!                 if (itemstack.getItem() == Items.BREAD && itemstack.func_190916_E() >= 3 * multiplier || itemstack.getItem() == Items.POTATO && itemstack.func_190916_E() >= 12 * multiplier || itemstack.getItem() == Items.CARROT && itemstack.func_190916_E() >= 12 * multiplier || itemstack.getItem() == Items.BEETROOT && itemstack.func_190916_E() >= 12 * multiplier)
                  {
                      return true;
                  }
  
!                 if (flag && itemstack.getItem() == Items.WHEAT && itemstack.func_190916_E() >= 9 * multiplier)
                  {
                      return true;
                  }
--- 992,1003 ----
  
              if (!itemstack.func_190926_b())
              {
!                 if (itemstack.getItem() == Items.BREAD && itemstack.getCount() >= 3 * multiplier || itemstack.getItem() == Items.POTATO && itemstack.getCount() >= 12 * multiplier || itemstack.getItem() == Items.CARROT && itemstack.getCount() >= 12 * multiplier || itemstack.getItem() == Items.BEETROOT && itemstack.getCount() >= 12 * multiplier)
                  {
                      return true;
                  }
  
!                 if (flag && itemstack.getItem() == Items.WHEAT && itemstack.getCount() >= 9 * multiplier)
                  {
                      return true;
                  }
diff -rc ./entity/passive/EntityWolf.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityWolf.java
*** ./entity/passive/EntityWolf.java	2018-11-18 13:18:54.755467000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/passive/EntityWolf.java	2018-11-18 13:37:01.221901500 -0800
***************
*** 428,434 ****
                      {
                          if (!player.capabilities.isCreativeMode)
                          {
!                             itemstack.func_190918_g(1);
                          }
  
                          this.heal((float)itemfood.getHealAmount(itemstack));
--- 428,434 ----
                      {
                          if (!player.capabilities.isCreativeMode)
                          {
!                             itemstack.shrink(1);
                          }
  
                          this.heal((float)itemfood.getHealAmount(itemstack));
***************
*** 445,451 ****
  
                          if (!player.capabilities.isCreativeMode)
                          {
!                             itemstack.func_190918_g(1);
                          }
  
                          return true;
--- 445,451 ----
  
                          if (!player.capabilities.isCreativeMode)
                          {
!                             itemstack.shrink(1);
                          }
  
                          return true;
***************
*** 465,471 ****
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.func_190918_g(1);
              }
  
              if (!this.world.isRemote)
--- 465,471 ----
          {
              if (!player.capabilities.isCreativeMode)
              {
!                 itemstack.shrink(1);
              }
  
              if (!this.world.isRemote)
diff -rc ./entity/player/EntityPlayer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/player/EntityPlayer.java
*** ./entity/player/EntityPlayer.java	2018-11-18 13:18:54.832422000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/player/EntityPlayer.java	2018-11-18 13:37:38.529177600 -0800
***************
*** 759,765 ****
       */
      public EntityItem dropItem(boolean dropAll)
      {
!         return this.dropItem(this.inventory.decrStackSize(this.inventory.currentItem, dropAll && !this.inventory.getCurrentItem().func_190926_b() ? this.inventory.getCurrentItem().func_190916_E() : 1), false, true);
      }
  
      @Nullable
--- 759,765 ----
       */
      public EntityItem dropItem(boolean dropAll)
      {
!         return this.dropItem(this.inventory.decrStackSize(this.inventory.currentItem, dropAll && !this.inventory.getCurrentItem().func_190926_b() ? this.inventory.getCurrentItem().getCount() : 1), false, true);
      }
  
      @Nullable
***************
*** 817,823 ****
              {
                  if (!itemstack.func_190926_b())
                  {
!                     this.addStat(StatList.getDroppedObjectStats(itemstack.getItem()), droppedItem.func_190916_E());
                  }
  
                  this.addStat(StatList.DROP);
--- 817,823 ----
              {
                  if (!itemstack.func_190926_b())
                  {
!                     this.addStat(StatList.getDroppedObjectStats(itemstack.getItem()), droppedItem.getCount());
                  }
  
                  this.addStat(StatList.DROP);
***************
*** 983,989 ****
      public void writeEntityToNBT(NBTTagCompound compound)
      {
          super.writeEntityToNBT(compound);
!         compound.setInteger("DataVersion", 1139);
          compound.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
          compound.setInteger("SelectedItemSlot", this.inventory.currentItem);
          compound.setBoolean("Sleeping", this.sleeping);
--- 983,989 ----
      public void writeEntityToNBT(NBTTagCompound compound)
      {
          super.writeEntityToNBT(compound);
!         compound.setInteger("DataVersion", 1343);
          compound.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
          compound.setInteger("SelectedItemSlot", this.inventory.currentItem);
          compound.setBoolean("Sleeping", this.sleeping);
***************
*** 1231,1239 ****
  
              if (p_190775_1_.processInitialInteract(this, p_190775_2_))
              {
!                 if (this.capabilities.isCreativeMode && itemstack == this.getHeldItem(p_190775_2_) && itemstack.func_190916_E() < itemstack1.func_190916_E())
                  {
!                     itemstack.func_190920_e(itemstack1.func_190916_E());
                  }
  
                  return EnumActionResult.SUCCESS;
--- 1231,1239 ----
  
              if (p_190775_1_.processInitialInteract(this, p_190775_2_))
              {
!                 if (this.capabilities.isCreativeMode && itemstack == this.getHeldItem(p_190775_2_) && itemstack.getCount() < itemstack1.getCount())
                  {
!                     itemstack.setCount(itemstack1.getCount());
                  }
  
                  return EnumActionResult.SUCCESS;
diff -rc ./entity/player/InventoryPlayer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/player/InventoryPlayer.java
*** ./entity/player/InventoryPlayer.java	2018-11-18 13:18:54.907378000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/player/InventoryPlayer.java	2018-11-18 13:37:38.762202800 -0800
***************
*** 65,71 ****
  
      private boolean canMergeStacks(ItemStack stack1, ItemStack stack2)
      {
!         return !stack1.func_190926_b() && this.stackEqualExact(stack1, stack2) && stack1.isStackable() && stack1.func_190916_E() < stack1.getMaxStackSize() && stack1.func_190916_E() < this.getInventoryStackLimit();
      }
  
      /**
--- 65,71 ----
  
      private boolean canMergeStacks(ItemStack stack1, ItemStack stack2)
      {
!         return !stack1.func_190926_b() && this.stackEqualExact(stack1, stack2) && stack1.isStackable() && stack1.getCount() < stack1.getMaxStackSize() && stack1.getCount() < this.getInventoryStackLimit();
      }
  
      /**
***************
*** 238,249 ****
  
              if (!itemstack.func_190926_b() && (itemIn == null || itemstack.getItem() == itemIn) && (metadataIn <= -1 || itemstack.getMetadata() == metadataIn) && (itemNBT == null || NBTUtil.areNBTEquals(itemNBT, itemstack.getTagCompound(), true)))
              {
!                 int k = removeCount <= 0 ? itemstack.func_190916_E() : Math.min(removeCount - i, itemstack.func_190916_E());
                  i += k;
  
                  if (removeCount != 0)
                  {
!                     itemstack.func_190918_g(k);
  
                      if (itemstack.func_190926_b())
                      {
--- 238,249 ----
  
              if (!itemstack.func_190926_b() && (itemIn == null || itemstack.getItem() == itemIn) && (metadataIn <= -1 || itemstack.getMetadata() == metadataIn) && (itemNBT == null || NBTUtil.areNBTEquals(itemNBT, itemstack.getTagCompound(), true)))
              {
!                 int k = removeCount <= 0 ? itemstack.getCount() : Math.min(removeCount - i, itemstack.getCount());
                  i += k;
  
                  if (removeCount != 0)
                  {
!                     itemstack.shrink(k);
  
                      if (itemstack.func_190926_b())
                      {
***************
*** 275,286 ****
                  return i;
              }
  
!             int l = removeCount <= 0 ? this.itemStack.func_190916_E() : Math.min(removeCount - i, this.itemStack.func_190916_E());
              i += l;
  
              if (removeCount != 0)
              {
!                 this.itemStack.func_190918_g(l);
  
                  if (this.itemStack.func_190926_b())
                  {
--- 275,286 ----
                  return i;
              }
  
!             int l = removeCount <= 0 ? this.itemStack.getCount() : Math.min(removeCount - i, this.itemStack.getCount());
              i += l;
  
              if (removeCount != 0)
              {
!                 this.itemStack.shrink(l);
  
                  if (this.itemStack.func_190926_b())
                  {
***************
*** 310,322 ****
              i = this.getFirstEmptyStack();
          }
  
!         return i == -1 ? itemStackIn.func_190916_E() : this.func_191973_d(i, itemStackIn);
      }
  
      private int func_191973_d(int p_191973_1_, ItemStack p_191973_2_)
      {
          Item item = p_191973_2_.getItem();
!         int i = p_191973_2_.func_190916_E();
          ItemStack itemstack = this.getStackInSlot(p_191973_1_);
  
          if (itemstack.func_190926_b())
--- 310,322 ----
              i = this.getFirstEmptyStack();
          }
  
!         return i == -1 ? itemStackIn.getCount() : this.func_191973_d(i, itemStackIn);
      }
  
      private int func_191973_d(int p_191973_1_, ItemStack p_191973_2_)
      {
          Item item = p_191973_2_.getItem();
!         int i = p_191973_2_.getCount();
          ItemStack itemstack = this.getStackInSlot(p_191973_1_);
  
          if (itemstack.func_190926_b())
***************
*** 333,346 ****
  
          int j = i;
  
!         if (i > itemstack.getMaxStackSize() - itemstack.func_190916_E())
          {
!             j = itemstack.getMaxStackSize() - itemstack.func_190916_E();
          }
  
!         if (j > this.getInventoryStackLimit() - itemstack.func_190916_E())
          {
!             j = this.getInventoryStackLimit() - itemstack.func_190916_E();
          }
  
          if (j == 0)
--- 333,346 ----
  
          int j = i;
  
!         if (i > itemstack.getMaxStackSize() - itemstack.getCount())
          {
!             j = itemstack.getMaxStackSize() - itemstack.getCount();
          }
  
!         if (j > this.getInventoryStackLimit() - itemstack.getCount())
          {
!             j = this.getInventoryStackLimit() - itemstack.getCount();
          }
  
          if (j == 0)
***************
*** 350,356 ****
          else
          {
              i = i - j;
!             itemstack.func_190917_f(j);
              itemstack.func_190915_d(5);
              return i;
          }
--- 350,356 ----
          else
          {
              i = i - j;
!             itemstack.grow(j);
              itemstack.func_190915_d(5);
              return i;
          }
***************
*** 430,441 ****
                      {
                          this.mainInventory.set(p_191971_1_, p_191971_2_.copy());
                          ((ItemStack)this.mainInventory.get(p_191971_1_)).func_190915_d(5);
!                         p_191971_2_.func_190920_e(0);
                          return true;
                      }
                      else if (this.player.capabilities.isCreativeMode)
                      {
!                         p_191971_2_.func_190920_e(0);
                          return true;
                      }
                      else
--- 430,441 ----
                      {
                          this.mainInventory.set(p_191971_1_, p_191971_2_.copy());
                          ((ItemStack)this.mainInventory.get(p_191971_1_)).func_190915_d(5);
!                         p_191971_2_.setCount(0);
                          return true;
                      }
                      else if (this.player.capabilities.isCreativeMode)
                      {
!                         p_191971_2_.setCount(0);
                          return true;
                      }
                      else
***************
*** 449,479 ****
  
                      while (true)
                      {
!                         i = p_191971_2_.func_190916_E();
  
                          if (p_191971_1_ == -1)
                          {
!                             p_191971_2_.func_190920_e(this.storePartialItemStack(p_191971_2_));
                          }
                          else
                          {
!                             p_191971_2_.func_190920_e(this.func_191973_d(p_191971_1_, p_191971_2_));
                          }
  
!                         if (p_191971_2_.func_190926_b() || p_191971_2_.func_190916_E() >= i)
                          {
                              break;
                          }
                      }
  
!                     if (p_191971_2_.func_190916_E() == i && this.player.capabilities.isCreativeMode)
                      {
!                         p_191971_2_.func_190920_e(0);
                          return true;
                      }
                      else
                      {
!                         return p_191971_2_.func_190916_E() < i;
                      }
                  }
              }
--- 449,479 ----
  
                      while (true)
                      {
!                         i = p_191971_2_.getCount();
  
                          if (p_191971_1_ == -1)
                          {
!                             p_191971_2_.setCount(this.storePartialItemStack(p_191971_2_));
                          }
                          else
                          {
!                             p_191971_2_.setCount(this.func_191973_d(p_191971_1_, p_191971_2_));
                          }
  
!                         if (p_191971_2_.func_190926_b() || p_191971_2_.getCount() >= i)
                          {
                              break;
                          }
                      }
  
!                     if (p_191971_2_.getCount() == i && this.player.capabilities.isCreativeMode)
                      {
!                         p_191971_2_.setCount(0);
                          return true;
                      }
                      else
                      {
!                         return p_191971_2_.getCount() < i;
                      }
                  }
              }
***************
*** 514,520 ****
                      break;
                  }
  
!                 int j = p_191975_2_.getMaxStackSize() - this.getStackInSlot(i).func_190916_E();
  
                  if (this.func_191971_c(i, p_191975_2_.splitStack(j)))
                  {
--- 514,520 ----
                      break;
                  }
  
!                 int j = p_191975_2_.getMaxStackSize() - this.getStackInSlot(i).getCount();
  
                  if (this.func_191971_c(i, p_191975_2_.splitStack(j)))
                  {
diff -rc ./entity/projectile/EntityThrowable.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/projectile/EntityThrowable.java
*** ./entity/projectile/EntityThrowable.java	2018-11-18 13:18:55.108264000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/entity/projectile/EntityThrowable.java	2017-10-20 21:01:26.862278000 -0700
***************
*** 31,37 ****
      public int throwableShake;
  
      /** The entity that threw this throwable item. */
!     private EntityLivingBase thrower;
      private String throwerName;
      private int ticksInGround;
      private int ticksInAir;
--- 31,37 ----
      public int throwableShake;
  
      /** The entity that threw this throwable item. */
!     protected EntityLivingBase thrower;
      private String throwerName;
      private int ticksInGround;
      private int ticksInAir;
diff -rc ./init/Bootstrap.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/init/Bootstrap.java
*** ./init/Bootstrap.java	2018-11-18 13:18:55.197212000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/init/Bootstrap.java	2018-11-18 13:37:21.667835000 -0800
***************
*** 204,210 ****
                  }
  
                  ItemMonsterPlacer.applyItemEntityDataToEntity(source.getWorld(), (EntityPlayer)null, stack, entity);
!                 stack.func_190918_g(1);
                  return stack;
              }
          });
--- 204,210 ----
                  }
  
                  ItemMonsterPlacer.applyItemEntityDataToEntity(source.getWorld(), (EntityPlayer)null, stack, entity);
!                 stack.shrink(1);
                  return stack;
              }
          });
***************
*** 218,224 ****
                  double d2 = source.getZ() + (double)enumfacing.getFrontOffsetZ();
                  EntityFireworkRocket entityfireworkrocket = new EntityFireworkRocket(source.getWorld(), d0, d1, d2, stack);
                  source.getWorld().spawnEntityInWorld(entityfireworkrocket);
!                 stack.func_190918_g(1);
                  return stack;
              }
              protected void playDispenseSound(IBlockSource source)
--- 218,224 ----
                  double d2 = source.getZ() + (double)enumfacing.getFrontOffsetZ();
                  EntityFireworkRocket entityfireworkrocket = new EntityFireworkRocket(source.getWorld(), d0, d1, d2, stack);
                  source.getWorld().spawnEntityInWorld(entityfireworkrocket);
!                 stack.shrink(1);
                  return stack;
              }
              protected void playDispenseSound(IBlockSource source)
***************
*** 241,247 ****
                  double d4 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetY();
                  double d5 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetZ();
                  world.spawnEntityInWorld(new EntitySmallFireball(world, d0, d1, d2, d3, d4, d5));
!                 stack.func_190918_g(1);
                  return stack;
              }
              protected void playDispenseSound(IBlockSource source)
--- 241,247 ----
                  double d4 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetY();
                  double d5 = random.nextGaussian() * 0.05D + (double)enumfacing.getFrontOffsetZ();
                  world.spawnEntityInWorld(new EntitySmallFireball(world, d0, d1, d2, d3, d4, d5));
!                 stack.shrink(1);
                  return stack;
              }
              protected void playDispenseSound(IBlockSource source)
***************
*** 294,300 ****
                  }
  
                  world.setBlockToAir(blockpos);
!                 stack.func_190918_g(1);
  
                  if (stack.func_190926_b())
                  {
--- 294,300 ----
                  }
  
                  world.setBlockToAir(blockpos);
!                 stack.shrink(1);
  
                  if (stack.func_190926_b())
                  {
***************
*** 325,331 ****
  
                      if (stack.attemptDamageItem(1, world.rand, (EntityPlayerMP)null))
                      {
!                         stack.func_190920_e(0);
                      }
                  }
                  else if (world.getBlockState(blockpos).getBlock() == Blocks.TNT)
--- 325,331 ----
  
                      if (stack.attemptDamageItem(1, world.rand, (EntityPlayerMP)null))
                      {
!                         stack.setCount(0);
                      }
                  }
                  else if (world.getBlockState(blockpos).getBlock() == Blocks.TNT)
***************
*** 381,387 ****
                  EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double)blockpos.getX() + 0.5D, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5D, (EntityLivingBase)null);
                  world.spawnEntityInWorld(entitytntprimed);
                  world.playSound((EntityPlayer)null, entitytntprimed.posX, entitytntprimed.posY, entitytntprimed.posZ, SoundEvents.ENTITY_TNT_PRIMED, SoundCategory.BLOCKS, 1.0F, 1.0F);
!                 stack.func_190918_g(1);
                  return stack;
              }
          });
--- 381,387 ----
                  EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double)blockpos.getX() + 0.5D, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5D, (EntityLivingBase)null);
                  world.spawnEntityInWorld(entitytntprimed);
                  world.playSound((EntityPlayer)null, entitytntprimed.posX, entitytntprimed.posY, entitytntprimed.posZ, SoundEvents.ENTITY_TNT_PRIMED, SoundCategory.BLOCKS, 1.0F, 1.0F);
!                 stack.shrink(1);
                  return stack;
              }
          });
***************
*** 438,444 ****
                              Blocks.SKULL.checkWitherSpawn(world, blockpos, (TileEntitySkull)tileentity);
                          }
  
!                         stack.func_190918_g(1);
                      }
                  }
                  else if (ItemArmor.dispenseArmor(source, stack).func_190926_b())
--- 438,444 ----
                              Blocks.SKULL.checkWitherSpawn(world, blockpos, (TileEntitySkull)tileentity);
                          }
  
!                         stack.shrink(1);
                      }
                  }
                  else if (ItemArmor.dispenseArmor(source, stack).func_190926_b())
***************
*** 465,471 ****
                          world.setBlockState(blockpos, blockpumpkin.getDefaultState(), 3);
                      }
  
!                     stack.func_190918_g(1);
                  }
                  else
                  {
--- 465,471 ----
                          world.setBlockState(blockpos, blockpumpkin.getDefaultState(), 3);
                      }
  
!                     stack.shrink(1);
                  }
                  else
                  {
***************
*** 594,600 ****
              entityboat.setBoatType(this.boatType);
              entityboat.rotationYaw = enumfacing.getHorizontalAngle();
              world.spawnEntityInWorld(entityboat);
!             stack.func_190918_g(1);
              return stack;
          }
  
--- 594,600 ----
              entityboat.setBoatType(this.boatType);
              entityboat.rotationYaw = enumfacing.getHorizontalAngle();
              world.spawnEntityInWorld(entityboat);
!             stack.shrink(1);
              return stack;
          }
  
diff -rc ./inventory/Container.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/Container.java
*** ./inventory/Container.java	2018-11-18 13:18:55.306149000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/Container.java	2018-11-18 13:37:38.020407100 -0800
***************
*** 178,184 ****
                  Slot slot7 = this.inventorySlots.get(slotId);
                  ItemStack itemstack12 = inventoryplayer.getItemStack();
  
!                 if (slot7 != null && canAddItemToSlot(slot7, itemstack12, true) && slot7.isItemValid(itemstack12) && (this.dragMode == 2 || itemstack12.func_190916_E() > this.dragSlots.size()) && this.canDragIntoSlot(slot7))
                  {
                      this.dragSlots.add(slot7);
                  }
--- 178,184 ----
                  Slot slot7 = this.inventorySlots.get(slotId);
                  ItemStack itemstack12 = inventoryplayer.getItemStack();
  
!                 if (slot7 != null && canAddItemToSlot(slot7, itemstack12, true) && slot7.isItemValid(itemstack12) && (this.dragMode == 2 || itemstack12.getCount() > this.dragSlots.size()) && this.canDragIntoSlot(slot7))
                  {
                      this.dragSlots.add(slot7);
                  }
***************
*** 188,217 ****
                  if (!this.dragSlots.isEmpty())
                  {
                      ItemStack itemstack9 = inventoryplayer.getItemStack().copy();
!                     int k1 = inventoryplayer.getItemStack().func_190916_E();
  
                      for (Slot slot8 : this.dragSlots)
                      {
                          ItemStack itemstack13 = inventoryplayer.getItemStack();
  
!                         if (slot8 != null && canAddItemToSlot(slot8, itemstack13, true) && slot8.isItemValid(itemstack13) && (this.dragMode == 2 || itemstack13.func_190916_E() >= this.dragSlots.size()) && this.canDragIntoSlot(slot8))
                          {
                              ItemStack itemstack14 = itemstack9.copy();
!                             int j3 = slot8.getHasStack() ? slot8.getStack().func_190916_E() : 0;
                              computeStackSize(this.dragSlots, this.dragMode, itemstack14, j3);
                              int k3 = Math.min(itemstack14.getMaxStackSize(), slot8.getItemStackLimit(itemstack14));
  
!                             if (itemstack14.func_190916_E() > k3)
                              {
!                                 itemstack14.func_190920_e(k3);
                              }
  
!                             k1 -= itemstack14.func_190916_E() - j3;
                              slot8.putStack(itemstack14);
                          }
                      }
  
!                     itemstack9.func_190920_e(k1);
                      inventoryplayer.setItemStack(itemstack9);
                  }
  
--- 188,217 ----
                  if (!this.dragSlots.isEmpty())
                  {
                      ItemStack itemstack9 = inventoryplayer.getItemStack().copy();
!                     int k1 = inventoryplayer.getItemStack().getCount();
  
                      for (Slot slot8 : this.dragSlots)
                      {
                          ItemStack itemstack13 = inventoryplayer.getItemStack();
  
!                         if (slot8 != null && canAddItemToSlot(slot8, itemstack13, true) && slot8.isItemValid(itemstack13) && (this.dragMode == 2 || itemstack13.getCount() >= this.dragSlots.size()) && this.canDragIntoSlot(slot8))
                          {
                              ItemStack itemstack14 = itemstack9.copy();
!                             int j3 = slot8.getHasStack() ? slot8.getStack().getCount() : 0;
                              computeStackSize(this.dragSlots, this.dragMode, itemstack14, j3);
                              int k3 = Math.min(itemstack14.getMaxStackSize(), slot8.getItemStackLimit(itemstack14));
  
!                             if (itemstack14.getCount() > k3)
                              {
!                                 itemstack14.setCount(k3);
                              }
  
!                             k1 -= itemstack14.getCount() - j3;
                              slot8.putStack(itemstack14);
                          }
                      }
  
!                     itemstack9.setCount(k1);
                      inventoryplayer.setItemStack(itemstack9);
                  }
  
***************
*** 286,292 ****
                      {
                          if (!itemstack11.func_190926_b() && slot6.isItemValid(itemstack11))
                          {
!                             int i3 = dragType == 0 ? itemstack11.func_190916_E() : 1;
  
                              if (i3 > slot6.getItemStackLimit(itemstack11))
                              {
--- 286,292 ----
                      {
                          if (!itemstack11.func_190926_b() && slot6.isItemValid(itemstack11))
                          {
!                             int i3 = dragType == 0 ? itemstack11.getCount() : 1;
  
                              if (i3 > slot6.getItemStackLimit(itemstack11))
                              {
***************
*** 307,313 ****
                              }
                              else
                              {
!                                 int l2 = dragType == 0 ? itemstack8.func_190916_E() : (itemstack8.func_190916_E() + 1) / 2;
                                  inventoryplayer.setItemStack(slot6.decrStackSize(l2));
  
                                  if (itemstack8.func_190926_b())
--- 307,313 ----
                              }
                              else
                              {
!                                 int l2 = dragType == 0 ? itemstack8.getCount() : (itemstack8.getCount() + 1) / 2;
                                  inventoryplayer.setItemStack(slot6.decrStackSize(l2));
  
                                  if (itemstack8.func_190926_b())
***************
*** 322,343 ****
                          {
                              if (itemstack8.getItem() == itemstack11.getItem() && itemstack8.getMetadata() == itemstack11.getMetadata() && ItemStack.areItemStackTagsEqual(itemstack8, itemstack11))
                              {
!                                 int k2 = dragType == 0 ? itemstack11.func_190916_E() : 1;
  
!                                 if (k2 > slot6.getItemStackLimit(itemstack11) - itemstack8.func_190916_E())
                                  {
!                                     k2 = slot6.getItemStackLimit(itemstack11) - itemstack8.func_190916_E();
                                  }
  
!                                 if (k2 > itemstack11.getMaxStackSize() - itemstack8.func_190916_E())
                                  {
!                                     k2 = itemstack11.getMaxStackSize() - itemstack8.func_190916_E();
                                  }
  
!                                 itemstack11.func_190918_g(k2);
!                                 itemstack8.func_190917_f(k2);
                              }
!                             else if (itemstack11.func_190916_E() <= slot6.getItemStackLimit(itemstack11))
                              {
                                  slot6.putStack(itemstack11);
                                  inventoryplayer.setItemStack(itemstack8);
--- 322,343 ----
                          {
                              if (itemstack8.getItem() == itemstack11.getItem() && itemstack8.getMetadata() == itemstack11.getMetadata() && ItemStack.areItemStackTagsEqual(itemstack8, itemstack11))
                              {
!                                 int k2 = dragType == 0 ? itemstack11.getCount() : 1;
  
!                                 if (k2 > slot6.getItemStackLimit(itemstack11) - itemstack8.getCount())
                                  {
!                                     k2 = slot6.getItemStackLimit(itemstack11) - itemstack8.getCount();
                                  }
  
!                                 if (k2 > itemstack11.getMaxStackSize() - itemstack8.getCount())
                                  {
!                                     k2 = itemstack11.getMaxStackSize() - itemstack8.getCount();
                                  }
  
!                                 itemstack11.shrink(k2);
!                                 itemstack8.grow(k2);
                              }
!                             else if (itemstack11.getCount() <= slot6.getItemStackLimit(itemstack11))
                              {
                                  slot6.putStack(itemstack11);
                                  inventoryplayer.setItemStack(itemstack8);
***************
*** 345,355 ****
                          }
                          else if (itemstack8.getItem() == itemstack11.getItem() && itemstack11.getMaxStackSize() > 1 && (!itemstack8.getHasSubtypes() || itemstack8.getMetadata() == itemstack11.getMetadata()) && ItemStack.areItemStackTagsEqual(itemstack8, itemstack11) && !itemstack8.func_190926_b())
                          {
!                             int j2 = itemstack8.func_190916_E();
  
!                             if (j2 + itemstack11.func_190916_E() <= itemstack11.getMaxStackSize())
                              {
!                                 itemstack11.func_190917_f(j2);
                                  itemstack8 = slot6.decrStackSize(j2);
  
                                  if (itemstack8.func_190926_b())
--- 345,355 ----
                          }
                          else if (itemstack8.getItem() == itemstack11.getItem() && itemstack11.getMaxStackSize() > 1 && (!itemstack8.getHasSubtypes() || itemstack8.getMetadata() == itemstack11.getMetadata()) && ItemStack.areItemStackTagsEqual(itemstack8, itemstack11) && !itemstack8.func_190926_b())
                          {
!                             int j2 = itemstack8.getCount();
  
!                             if (j2 + itemstack11.getCount() <= itemstack11.getMaxStackSize())
                              {
!                                 itemstack11.grow(j2);
                                  itemstack8 = slot6.decrStackSize(j2);
  
                                  if (itemstack8.func_190926_b())
***************
*** 379,385 ****
                      if (slot4.canTakeStack(player))
                      {
                          inventoryplayer.setInventorySlotContents(dragType, itemstack10);
!                         slot4.func_190900_b(itemstack10.func_190916_E());
                          slot4.putStack(ItemStack.field_190927_a);
                          slot4.func_190901_a(player, itemstack10);
                      }
--- 379,385 ----
                      if (slot4.canTakeStack(player))
                      {
                          inventoryplayer.setInventorySlotContents(dragType, itemstack10);
!                         slot4.func_190900_b(itemstack10.getCount());
                          slot4.putStack(ItemStack.field_190927_a);
                          slot4.func_190901_a(player, itemstack10);
                      }
***************
*** 390,396 ****
                      {
                          int l1 = slot4.getItemStackLimit(itemstack6);
  
!                         if (itemstack6.func_190916_E() > l1)
                          {
                              slot4.putStack(itemstack6.splitStack(l1));
                          }
--- 390,396 ----
                      {
                          int l1 = slot4.getItemStackLimit(itemstack6);
  
!                         if (itemstack6.getCount() > l1)
                          {
                              slot4.putStack(itemstack6.splitStack(l1));
                          }
***************
*** 405,411 ****
                  {
                      int i2 = slot4.getItemStackLimit(itemstack6);
  
!                     if (itemstack6.func_190916_E() > i2)
                      {
                          slot4.putStack(itemstack6.splitStack(i2));
                          slot4.func_190901_a(player, itemstack10);
--- 405,411 ----
                  {
                      int i2 = slot4.getItemStackLimit(itemstack6);
  
!                     if (itemstack6.getCount() > i2)
                      {
                          slot4.putStack(itemstack6.splitStack(i2));
                          slot4.func_190901_a(player, itemstack10);
***************
*** 431,437 ****
              if (slot3 != null && slot3.getHasStack())
              {
                  ItemStack itemstack5 = slot3.getStack().copy();
!                 itemstack5.func_190920_e(itemstack5.getMaxStackSize());
                  inventoryplayer.setItemStack(itemstack5);
              }
          }
--- 431,437 ----
              if (slot3 != null && slot3.getHasStack())
              {
                  ItemStack itemstack5 = slot3.getStack().copy();
!                 itemstack5.setCount(itemstack5.getMaxStackSize());
                  inventoryplayer.setItemStack(itemstack5);
              }
          }
***************
*** 441,447 ****
  
              if (slot2 != null && slot2.getHasStack() && slot2.canTakeStack(player))
              {
!                 ItemStack itemstack4 = slot2.decrStackSize(dragType == 0 ? 1 : slot2.getStack().func_190916_E());
                  slot2.func_190901_a(player, itemstack4);
                  player.dropItem(itemstack4, true);
              }
--- 441,447 ----
  
              if (slot2 != null && slot2.getHasStack() && slot2.canTakeStack(player))
              {
!                 ItemStack itemstack4 = slot2.decrStackSize(dragType == 0 ? 1 : slot2.getStack().getCount());
                  slot2.func_190901_a(player, itemstack4);
                  player.dropItem(itemstack4, true);
              }
***************
*** 458,464 ****
  
                  for (int k = 0; k < 2; ++k)
                  {
!                     for (int l = i; l >= 0 && l < this.inventorySlots.size() && itemstack1.func_190916_E() < itemstack1.getMaxStackSize(); l += j)
                      {
                          Slot slot1 = this.inventorySlots.get(l);
  
--- 458,464 ----
  
                  for (int k = 0; k < 2; ++k)
                  {
!                     for (int l = i; l >= 0 && l < this.inventorySlots.size() && itemstack1.getCount() < itemstack1.getMaxStackSize(); l += j)
                      {
                          Slot slot1 = this.inventorySlots.get(l);
  
***************
*** 466,476 ****
                          {
                              ItemStack itemstack2 = slot1.getStack();
  
!                             if (k != 0 || itemstack2.func_190916_E() != itemstack2.getMaxStackSize())
                              {
!                                 int i1 = Math.min(itemstack1.getMaxStackSize() - itemstack1.func_190916_E(), itemstack2.func_190916_E());
                                  ItemStack itemstack3 = slot1.decrStackSize(i1);
!                                 itemstack1.func_190917_f(i1);
  
                                  if (itemstack3.func_190926_b())
                                  {
--- 466,476 ----
                          {
                              ItemStack itemstack2 = slot1.getStack();
  
!                             if (k != 0 || itemstack2.getCount() != itemstack2.getMaxStackSize())
                              {
!                                 int i1 = Math.min(itemstack1.getMaxStackSize() - itemstack1.getCount(), itemstack2.getCount());
                                  ItemStack itemstack3 = slot1.decrStackSize(i1);
!                                 itemstack1.grow(i1);
  
                                  if (itemstack3.func_190926_b())
                                  {
***************
*** 555,574 ****
          }
      }
  
-     public void func_192388_b(int p_192388_1_, ItemStack p_192388_2_)
-     {
-         ItemStack itemstack = this.getSlot(p_192388_1_).getStack();
- 
-         if (itemstack.func_190926_b())
-         {
-             this.putStackInSlot(p_192388_1_, p_192388_2_);
-         }
-         else if (itemstack.getUnlocalizedName().equals(p_192388_2_.getUnlocalizedName()) && itemstack.func_190916_E() < itemstack.getMaxStackSize())
-         {
-             itemstack.func_190917_f(p_192388_2_.func_190916_E());
-         }
-     }
- 
      public void updateProgressBar(int id, int data)
      {
      }
--- 555,560 ----
***************
*** 646,664 ****
  
                  if (!itemstack.func_190926_b() && itemstack.getItem() == stack.getItem() && (!stack.getHasSubtypes() || stack.getMetadata() == itemstack.getMetadata()) && ItemStack.areItemStackTagsEqual(stack, itemstack))
                  {
!                     int j = itemstack.func_190916_E() + stack.func_190916_E();
  
                      if (j <= stack.getMaxStackSize())
                      {
!                         stack.func_190920_e(0);
!                         itemstack.func_190920_e(j);
                          slot.onSlotChanged();
                          flag = true;
                      }
!                     else if (itemstack.func_190916_E() < stack.getMaxStackSize())
                      {
!                         stack.func_190918_g(stack.getMaxStackSize() - itemstack.func_190916_E());
!                         itemstack.func_190920_e(stack.getMaxStackSize());
                          slot.onSlotChanged();
                          flag = true;
                      }
--- 632,650 ----
  
                  if (!itemstack.func_190926_b() && itemstack.getItem() == stack.getItem() && (!stack.getHasSubtypes() || stack.getMetadata() == itemstack.getMetadata()) && ItemStack.areItemStackTagsEqual(stack, itemstack))
                  {
!                     int j = itemstack.getCount() + stack.getCount();
  
                      if (j <= stack.getMaxStackSize())
                      {
!                         stack.setCount(0);
!                         itemstack.setCount(j);
                          slot.onSlotChanged();
                          flag = true;
                      }
!                     else if (itemstack.getCount() < stack.getMaxStackSize())
                      {
!                         stack.shrink(stack.getMaxStackSize() - itemstack.getCount());
!                         itemstack.setCount(stack.getMaxStackSize());
                          slot.onSlotChanged();
                          flag = true;
                      }
***************
*** 705,717 ****
  
                  if (itemstack1.func_190926_b() && slot1.isItemValid(stack))
                  {
!                     if (stack.func_190916_E() > slot1.getSlotStackLimit())
                      {
                          slot1.putStack(stack.splitStack(slot1.getSlotStackLimit()));
                      }
                      else
                      {
!                         slot1.putStack(stack.splitStack(stack.func_190916_E()));
                      }
  
                      slot1.onSlotChanged();
--- 691,703 ----
  
                  if (itemstack1.func_190926_b() && slot1.isItemValid(stack))
                  {
!                     if (stack.getCount() > slot1.getSlotStackLimit())
                      {
                          slot1.putStack(stack.splitStack(slot1.getSlotStackLimit()));
                      }
                      else
                      {
!                         slot1.putStack(stack.splitStack(stack.getCount()));
                      }
  
                      slot1.onSlotChanged();
***************
*** 788,794 ****
  
          if (!flag && stack.isItemEqual(slotIn.getStack()) && ItemStack.areItemStackTagsEqual(slotIn.getStack(), stack))
          {
!             return slotIn.getStack().func_190916_E() + (stackSizeMatters ? 0 : stack.func_190916_E()) <= stack.getMaxStackSize();
          }
          else
          {
--- 774,780 ----
  
          if (!flag && stack.isItemEqual(slotIn.getStack()) && ItemStack.areItemStackTagsEqual(slotIn.getStack(), stack))
          {
!             return slotIn.getStack().getCount() + (stackSizeMatters ? 0 : stack.getCount()) <= stack.getMaxStackSize();
          }
          else
          {
***************
*** 805,822 ****
          switch (dragModeIn)
          {
              case 0:
!                 stack.func_190920_e(MathHelper.floor((float)stack.func_190916_E() / (float)dragSlotsIn.size()));
                  break;
  
              case 1:
!                 stack.func_190920_e(1);
                  break;
  
              case 2:
!                 stack.func_190920_e(stack.getItem().getItemStackLimit());
          }
  
!         stack.func_190917_f(slotStackSize);
      }
  
      /**
--- 791,808 ----
          switch (dragModeIn)
          {
              case 0:
!                 stack.setCount(MathHelper.floor((float)stack.getCount() / (float)dragSlotsIn.size()));
                  break;
  
              case 1:
!                 stack.setCount(1);
                  break;
  
              case 2:
!                 stack.setCount(stack.getItem().getItemStackLimit());
          }
  
!         stack.grow(slotStackSize);
      }
  
      /**
***************
*** 853,859 ****
  
                  if (!itemstack.func_190926_b())
                  {
!                     f += (float)itemstack.func_190916_E() / (float)Math.min(inv.getInventoryStackLimit(), itemstack.getMaxStackSize());
                      ++i;
                  }
              }
--- 839,845 ----
  
                  if (!itemstack.func_190926_b())
                  {
!                     f += (float)itemstack.getCount() / (float)Math.min(inv.getInventoryStackLimit(), itemstack.getMaxStackSize());
                      ++i;
                  }
              }
diff -rc ./inventory/ContainerBeacon.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerBeacon.java
*** ./inventory/ContainerBeacon.java	2018-11-18 13:18:55.324139000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerBeacon.java	2018-11-18 13:37:38.042393800 -0800
***************
*** 100,106 ****
  
                  slot.onSlotChange(itemstack1, itemstack);
              }
!             else if (!this.beaconSlot.getHasStack() && this.beaconSlot.isItemValid(itemstack1) && itemstack1.func_190916_E() == 1)
              {
                  if (!this.mergeItemStack(itemstack1, 0, 1, false))
                  {
--- 100,106 ----
  
                  slot.onSlotChange(itemstack1, itemstack);
              }
!             else if (!this.beaconSlot.getHasStack() && this.beaconSlot.isItemValid(itemstack1) && itemstack1.getCount() == 1)
              {
                  if (!this.mergeItemStack(itemstack1, 0, 1, false))
                  {
***************
*** 135,141 ****
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.func_190916_E() == itemstack.func_190916_E())
              {
                  return ItemStack.field_190927_a;
              }
--- 135,141 ----
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.getCount() == itemstack.getCount())
              {
                  return ItemStack.field_190927_a;
              }
diff -rc ./inventory/ContainerBrewingStand.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerBrewingStand.java
*** ./inventory/ContainerBrewingStand.java	2018-11-18 13:18:55.340128000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerBrewingStand.java	2018-11-18 13:37:38.070926800 -0800
***************
*** 118,124 ****
                          return ItemStack.field_190927_a;
                      }
                  }
!                 else if (ContainerBrewingStand.Potion.canHoldPotion(itemstack) && itemstack.func_190916_E() == 1)
                  {
                      if (!this.mergeItemStack(itemstack1, 0, 3, false))
                      {
--- 118,124 ----
                          return ItemStack.field_190927_a;
                      }
                  }
!                 else if (ContainerBrewingStand.Potion.canHoldPotion(itemstack) && itemstack.getCount() == 1)
                  {
                      if (!this.mergeItemStack(itemstack1, 0, 3, false))
                      {
***************
*** 170,176 ****
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.func_190916_E() == itemstack.func_190916_E())
              {
                  return ItemStack.field_190927_a;
              }
--- 170,176 ----
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.getCount() == itemstack.getCount())
              {
                  return ItemStack.field_190927_a;
              }
diff -rc ./inventory/ContainerDispenser.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerDispenser.java
*** ./inventory/ContainerDispenser.java	2018-11-18 13:18:55.371111000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerDispenser.java	2018-11-18 13:37:38.087917200 -0800
***************
*** 75,81 ****
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.func_190916_E() == itemstack.func_190916_E())
              {
                  return ItemStack.field_190927_a;
              }
--- 75,81 ----
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.getCount() == itemstack.getCount())
              {
                  return ItemStack.field_190927_a;
              }
diff -rc ./inventory/ContainerEnchantment.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerEnchantment.java
*** ./inventory/ContainerEnchantment.java	2018-11-18 13:18:55.382104000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerEnchantment.java	2018-11-18 13:37:38.110904600 -0800
***************
*** 263,269 ****
          ItemStack itemstack1 = this.tableInventory.getStackInSlot(1);
          int i = id + 1;
  
!         if ((itemstack1.func_190926_b() || itemstack1.func_190916_E() < i) && !playerIn.capabilities.isCreativeMode)
          {
              return false;
          }
--- 263,269 ----
          ItemStack itemstack1 = this.tableInventory.getStackInSlot(1);
          int i = id + 1;
  
!         if ((itemstack1.func_190926_b() || itemstack1.getCount() < i) && !playerIn.capabilities.isCreativeMode)
          {
              return false;
          }
***************
*** 300,306 ****
  
                      if (!playerIn.capabilities.isCreativeMode)
                      {
!                         itemstack1.func_190918_g(i);
  
                          if (itemstack1.func_190926_b())
                          {
--- 300,306 ----
  
                      if (!playerIn.capabilities.isCreativeMode)
                      {
!                         itemstack1.shrink(i);
  
                          if (itemstack1.func_190926_b())
                          {
***************
*** 346,352 ****
      public int getLapisAmount()
      {
          ItemStack itemstack = this.tableInventory.getStackInSlot(1);
!         return itemstack.func_190926_b() ? 0 : itemstack.func_190916_E();
      }
  
      /**
--- 346,352 ----
      public int getLapisAmount()
      {
          ItemStack itemstack = this.tableInventory.getStackInSlot(1);
!         return itemstack.func_190926_b() ? 0 : itemstack.getCount();
      }
  
      /**
***************
*** 418,432 ****
                      return ItemStack.field_190927_a;
                  }
  
!                 if (itemstack1.hasTagCompound() && itemstack1.func_190916_E() == 1)
                  {
                      ((Slot)this.inventorySlots.get(0)).putStack(itemstack1.copy());
!                     itemstack1.func_190920_e(0);
                  }
                  else if (!itemstack1.func_190926_b())
                  {
                      ((Slot)this.inventorySlots.get(0)).putStack(new ItemStack(itemstack1.getItem(), 1, itemstack1.getMetadata()));
!                     itemstack1.func_190918_g(1);
                  }
              }
  
--- 418,432 ----
                      return ItemStack.field_190927_a;
                  }
  
!                 if (itemstack1.hasTagCompound() && itemstack1.getCount() == 1)
                  {
                      ((Slot)this.inventorySlots.get(0)).putStack(itemstack1.copy());
!                     itemstack1.setCount(0);
                  }
                  else if (!itemstack1.func_190926_b())
                  {
                      ((Slot)this.inventorySlots.get(0)).putStack(new ItemStack(itemstack1.getItem(), 1, itemstack1.getMetadata()));
!                     itemstack1.shrink(1);
                  }
              }
  
***************
*** 439,445 ****
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.func_190916_E() == itemstack.func_190916_E())
              {
                  return ItemStack.field_190927_a;
              }
--- 439,445 ----
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.getCount() == itemstack.getCount())
              {
                  return ItemStack.field_190927_a;
              }
diff -rc ./inventory/ContainerFurnace.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerFurnace.java
*** ./inventory/ContainerFurnace.java	2018-11-18 13:18:55.400095000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerFurnace.java	2018-11-18 13:37:38.139654000 -0800
***************
*** 156,162 ****
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.func_190916_E() == itemstack.func_190916_E())
              {
                  return ItemStack.field_190927_a;
              }
--- 156,162 ----
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.getCount() == itemstack.getCount())
              {
                  return ItemStack.field_190927_a;
              }
diff -rc ./inventory/ContainerMerchant.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerMerchant.java
*** ./inventory/ContainerMerchant.java	2018-11-18 13:18:55.440072000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerMerchant.java	2018-11-18 13:37:38.165640400 -0800
***************
*** 115,121 ****
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.func_190916_E() == itemstack.func_190916_E())
              {
                  return ItemStack.field_190927_a;
              }
--- 115,121 ----
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.getCount() == itemstack.getCount())
              {
                  return ItemStack.field_190927_a;
              }
diff -rc ./inventory/ContainerPlayer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerPlayer.java
*** ./inventory/ContainerPlayer.java	2018-11-18 13:18:55.450066000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerPlayer.java	2018-11-18 13:37:38.185377400 -0800
***************
*** 194,200 ****
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.func_190916_E() == itemstack.func_190916_E())
              {
                  return ItemStack.field_190927_a;
              }
--- 194,200 ----
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.getCount() == itemstack.getCount())
              {
                  return ItemStack.field_190927_a;
              }
diff -rc ./inventory/ContainerRepair.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerRepair.java
*** ./inventory/ContainerRepair.java	2018-11-18 13:18:55.460060000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerRepair.java	2018-11-18 13:37:38.206350400 -0800
***************
*** 85,93 ****
                  {
                      ItemStack itemstack = ContainerRepair.this.inputSlots.getStackInSlot(1);
  
!                     if (!itemstack.func_190926_b() && itemstack.func_190916_E() > ContainerRepair.this.materialCost)
                      {
!                         itemstack.func_190918_g(ContainerRepair.this.materialCost);
                          ContainerRepair.this.inputSlots.setInventorySlotContents(1, itemstack);
                      }
                      else
--- 85,93 ----
                  {
                      ItemStack itemstack = ContainerRepair.this.inputSlots.getStackInSlot(1);
  
!                     if (!itemstack.func_190926_b() && itemstack.getCount() > ContainerRepair.this.materialCost)
                      {
!                         itemstack.shrink(ContainerRepair.this.materialCost);
                          ContainerRepair.this.inputSlots.setInventorySlotContents(1, itemstack);
                      }
                      else
***************
*** 196,202 ****
  
                      int i3;
  
!                     for (i3 = 0; l2 > 0 && i3 < itemstack2.func_190916_E(); ++i3)
                      {
                          int j3 = itemstack1.getItemDamage() - l2;
                          itemstack1.setItemDamage(j3);
--- 196,202 ----
  
                      int i3;
  
!                     for (i3 = 0; l2 > 0 && i3 < itemstack2.getCount(); ++i3)
                      {
                          int j3 = itemstack1.getItemDamage() - l2;
                          itemstack1.setItemDamage(j3);
***************
*** 303,309 ****
  
                                  i += k3 * j2;
  
!                                 if (itemstack.func_190916_E() > 1)
                                  {
                                      i = 40;
                                  }
--- 303,309 ----
  
                                  i += k3 * j2;
  
!                                 if (itemstack.getCount() > 1)
                                  {
                                      i = 40;
                                  }
***************
*** 461,467 ****
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.func_190916_E() == itemstack.func_190916_E())
              {
                  return ItemStack.field_190927_a;
              }
--- 461,467 ----
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.getCount() == itemstack.getCount())
              {
                  return ItemStack.field_190927_a;
              }
diff -rc ./inventory/ContainerWorkbench.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerWorkbench.java
*** ./inventory/ContainerWorkbench.java	2018-11-18 13:18:55.488058000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/ContainerWorkbench.java	2018-11-18 13:37:38.231336200 -0800
***************
*** 135,141 ****
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.func_190916_E() == itemstack.func_190916_E())
              {
                  return ItemStack.field_190927_a;
              }
--- 135,141 ----
                  slot.onSlotChanged();
              }
  
!             if (itemstack1.getCount() == itemstack.getCount())
              {
                  return ItemStack.field_190927_a;
              }
diff -rc ./inventory/InventoryBasic.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/InventoryBasic.java
*** ./inventory/InventoryBasic.java	2018-11-18 13:18:55.535018000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/InventoryBasic.java	2018-11-18 13:37:38.661256800 -0800
***************
*** 92,103 ****
              if (ItemStack.areItemsEqual(itemstack1, itemstack))
              {
                  int j = Math.min(this.getInventoryStackLimit(), itemstack1.getMaxStackSize());
!                 int k = Math.min(itemstack.func_190916_E(), j - itemstack1.func_190916_E());
  
                  if (k > 0)
                  {
!                     itemstack1.func_190917_f(k);
!                     itemstack.func_190918_g(k);
  
                      if (itemstack.func_190926_b())
                      {
--- 92,103 ----
              if (ItemStack.areItemsEqual(itemstack1, itemstack))
              {
                  int j = Math.min(this.getInventoryStackLimit(), itemstack1.getMaxStackSize());
!                 int k = Math.min(itemstack.getCount(), j - itemstack1.getCount());
  
                  if (k > 0)
                  {
!                     itemstack1.grow(k);
!                     itemstack.shrink(k);
  
                      if (itemstack.func_190926_b())
                      {
***************
*** 108,114 ****
              }
          }
  
!         if (itemstack.func_190916_E() != stack.func_190916_E())
          {
              this.markDirty();
          }
--- 108,114 ----
              }
          }
  
!         if (itemstack.getCount() != stack.getCount())
          {
              this.markDirty();
          }
***************
*** 141,149 ****
      {
          this.inventoryContents.set(index, stack);
  
!         if (!stack.func_190926_b() && stack.func_190916_E() > this.getInventoryStackLimit())
          {
!             stack.func_190920_e(this.getInventoryStackLimit());
          }
  
          this.markDirty();
--- 141,149 ----
      {
          this.inventoryContents.set(index, stack);
  
!         if (!stack.func_190926_b() && stack.getCount() > this.getInventoryStackLimit())
          {
!             stack.setCount(this.getInventoryStackLimit());
          }
  
          this.markDirty();
diff -rc ./inventory/InventoryMerchant.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/InventoryMerchant.java
*** ./inventory/InventoryMerchant.java	2018-11-18 13:18:55.606975000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/InventoryMerchant.java	2018-11-18 13:37:38.723210300 -0800
***************
*** 62,68 ****
  
          if (index == 2 && !itemstack.func_190926_b())
          {
!             return ItemStackHelper.getAndSplit(this.theInventory, index, itemstack.func_190916_E());
          }
          else
          {
--- 62,68 ----
  
          if (index == 2 && !itemstack.func_190926_b())
          {
!             return ItemStackHelper.getAndSplit(this.theInventory, index, itemstack.getCount());
          }
          else
          {
***************
*** 100,108 ****
      {
          this.theInventory.set(index, stack);
  
!         if (!stack.func_190926_b() && stack.func_190916_E() > this.getInventoryStackLimit())
          {
!             stack.func_190920_e(this.getInventoryStackLimit());
          }
  
          if (this.inventoryResetNeededOnSlotChange(index))
--- 100,108 ----
      {
          this.theInventory.set(index, stack);
  
!         if (!stack.func_190926_b() && stack.getCount() > this.getInventoryStackLimit())
          {
!             stack.setCount(this.getInventoryStackLimit());
          }
  
          if (this.inventoryResetNeededOnSlotChange(index))
diff -rc ./inventory/Slot.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/Slot.java
*** ./inventory/Slot.java	2018-11-18 13:18:55.644956000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/Slot.java	2018-11-18 13:37:39.564486600 -0800
***************
*** 34,40 ****
       */
      public void onSlotChange(ItemStack p_75220_1_, ItemStack p_75220_2_)
      {
!         int i = p_75220_2_.func_190916_E() - p_75220_1_.func_190916_E();
  
          if (i > 0)
          {
--- 34,40 ----
       */
      public void onSlotChange(ItemStack p_75220_1_, ItemStack p_75220_2_)
      {
!         int i = p_75220_2_.getCount() - p_75220_1_.getCount();
  
          if (i > 0)
          {
diff -rc ./inventory/SlotCrafting.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/SlotCrafting.java
*** ./inventory/SlotCrafting.java	2018-11-18 13:18:55.656961000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/SlotCrafting.java	2018-11-18 13:37:39.583027500 -0800
***************
*** 43,49 ****
      {
          if (this.getHasStack())
          {
!             this.amountCrafted += Math.min(amount, this.getStack().func_190916_E());
          }
  
          return super.decrStackSize(amount);
--- 43,49 ----
      {
          if (this.getHasStack())
          {
!             this.amountCrafted += Math.min(amount, this.getStack().getCount());
          }
  
          return super.decrStackSize(amount);
***************
*** 109,115 ****
                  }
                  else if (ItemStack.areItemsEqual(itemstack, itemstack1) && ItemStack.areItemStackTagsEqual(itemstack, itemstack1))
                  {
!                     itemstack1.func_190917_f(itemstack.func_190916_E());
                      this.craftMatrix.setInventorySlotContents(i, itemstack1);
                  }
                  else if (!this.thePlayer.inventory.addItemStackToInventory(itemstack1))
--- 109,115 ----
                  }
                  else if (ItemStack.areItemsEqual(itemstack, itemstack1) && ItemStack.areItemStackTagsEqual(itemstack, itemstack1))
                  {
!                     itemstack1.grow(itemstack.getCount());
                      this.craftMatrix.setInventorySlotContents(i, itemstack1);
                  }
                  else if (!this.thePlayer.inventory.addItemStackToInventory(itemstack1))
diff -rc ./inventory/SlotFurnaceOutput.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/SlotFurnaceOutput.java
*** ./inventory/SlotFurnaceOutput.java	2018-11-18 13:18:55.675935000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/SlotFurnaceOutput.java	2018-11-18 13:37:39.603015600 -0800
***************
*** 34,40 ****
      {
          if (this.getHasStack())
          {
!             this.removeCount += Math.min(amount, this.getStack().func_190916_E());
          }
  
          return super.decrStackSize(amount);
--- 34,40 ----
      {
          if (this.getHasStack())
          {
!             this.removeCount += Math.min(amount, this.getStack().getCount());
          }
  
          return super.decrStackSize(amount);
diff -rc ./inventory/SlotMerchantResult.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/SlotMerchantResult.java
*** ./inventory/SlotMerchantResult.java	2018-11-18 13:18:55.689932000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/inventory/SlotMerchantResult.java	2018-11-18 13:37:39.621757100 -0800
***************
*** 42,48 ****
      {
          if (this.getHasStack())
          {
!             this.removeCount += Math.min(amount, this.getStack().func_190916_E());
          }
  
          return super.decrStackSize(amount);
--- 42,48 ----
      {
          if (this.getHasStack())
          {
!             this.removeCount += Math.min(amount, this.getStack().getCount());
          }
  
          return super.decrStackSize(amount);
***************
*** 94,111 ****
          ItemStack itemstack = trade.getItemToBuy();
          ItemStack itemstack1 = trade.getSecondItemToBuy();
  
!         if (firstItem.getItem() == itemstack.getItem() && firstItem.func_190916_E() >= itemstack.func_190916_E())
          {
!             if (!itemstack1.func_190926_b() && !secondItem.func_190926_b() && itemstack1.getItem() == secondItem.getItem() && secondItem.func_190916_E() >= itemstack1.func_190916_E())
              {
!                 firstItem.func_190918_g(itemstack.func_190916_E());
!                 secondItem.func_190918_g(itemstack1.func_190916_E());
                  return true;
              }
  
              if (itemstack1.func_190926_b() && secondItem.func_190926_b())
              {
!                 firstItem.func_190918_g(itemstack.func_190916_E());
                  return true;
              }
          }
--- 94,111 ----
          ItemStack itemstack = trade.getItemToBuy();
          ItemStack itemstack1 = trade.getSecondItemToBuy();
  
!         if (firstItem.getItem() == itemstack.getItem() && firstItem.getCount() >= itemstack.getCount())
          {
!             if (!itemstack1.func_190926_b() && !secondItem.func_190926_b() && itemstack1.getItem() == secondItem.getItem() && secondItem.getCount() >= itemstack1.getCount())
              {
!                 firstItem.shrink(itemstack.getCount());
!                 secondItem.shrink(itemstack1.getCount());
                  return true;
              }
  
              if (itemstack1.func_190926_b() && secondItem.func_190926_b())
              {
!                 firstItem.shrink(itemstack.getCount());
                  return true;
              }
          }
diff -rc ./item/crafting/RecipeBookCloning.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipeBookCloning.java
*** ./item/crafting/RecipeBookCloning.java	2018-11-18 13:18:56.806288000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipeBookCloning.java	2018-11-18 13:37:22.651086700 -0800
***************
*** 117,123 ****
              if (itemstack.getItem() instanceof ItemWrittenBook)
              {
                  ItemStack itemstack1 = itemstack.copy();
!                 itemstack1.func_190920_e(1);
                  nonnulllist.set(i, itemstack1);
                  break;
              }
--- 117,123 ----
              if (itemstack.getItem() instanceof ItemWrittenBook)
              {
                  ItemStack itemstack1 = itemstack.copy();
!                 itemstack1.setCount(1);
                  nonnulllist.set(i, itemstack1);
                  break;
              }
diff -rc ./item/crafting/RecipeFireworks.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipeFireworks.java
*** ./item/crafting/RecipeFireworks.java	2018-11-18 13:18:56.817284000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipeFireworks.java	2018-11-18 13:37:22.674075300 -0800
***************
*** 189,195 ****
                          else if (itemstack1.getItem() == Items.FIREWORK_CHARGE)
                          {
                              this.resultItem = itemstack1.copy();
!                             this.resultItem.func_190920_e(1);
                          }
                      }
                  }
--- 189,195 ----
                          else if (itemstack1.getItem() == Items.FIREWORK_CHARGE)
                          {
                              this.resultItem = itemstack1.copy();
!                             this.resultItem.setCount(1);
                          }
                      }
                  }
diff -rc ./item/crafting/RecipeRepairItem.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipeRepairItem.java
*** ./item/crafting/RecipeRepairItem.java	2018-11-18 13:18:56.832270000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipeRepairItem.java	2018-11-18 13:37:39.425649100 -0800
***************
*** 29,35 ****
                  {
                      ItemStack itemstack1 = list.get(0);
  
!                     if (itemstack.getItem() != itemstack1.getItem() || itemstack1.func_190916_E() != 1 || itemstack.func_190916_E() != 1 || !itemstack1.getItem().isDamageable())
                      {
                          return false;
                      }
--- 29,35 ----
                  {
                      ItemStack itemstack1 = list.get(0);
  
!                     if (itemstack.getItem() != itemstack1.getItem() || itemstack1.getCount() != 1 || itemstack.getCount() != 1 || !itemstack1.getItem().isDamageable())
                      {
                          return false;
                      }
***************
*** 59,65 ****
                  {
                      ItemStack itemstack1 = list.get(0);
  
!                     if (itemstack.getItem() != itemstack1.getItem() || itemstack1.func_190916_E() != 1 || itemstack.func_190916_E() != 1 || !itemstack1.getItem().isDamageable())
                      {
                          return ItemStack.field_190927_a;
                      }
--- 59,65 ----
                  {
                      ItemStack itemstack1 = list.get(0);
  
!                     if (itemstack.getItem() != itemstack1.getItem() || itemstack1.getCount() != 1 || itemstack.getCount() != 1 || !itemstack1.getItem().isDamageable())
                      {
                          return ItemStack.field_190927_a;
                      }
***************
*** 72,78 ****
              ItemStack itemstack2 = list.get(0);
              ItemStack itemstack3 = list.get(1);
  
!             if (itemstack2.getItem() == itemstack3.getItem() && itemstack2.func_190916_E() == 1 && itemstack3.func_190916_E() == 1 && itemstack2.getItem().isDamageable())
              {
                  Item item = itemstack2.getItem();
                  int j = item.getMaxDamage() - itemstack2.getItemDamage();
--- 72,78 ----
              ItemStack itemstack2 = list.get(0);
              ItemStack itemstack3 = list.get(1);
  
!             if (itemstack2.getItem() == itemstack3.getItem() && itemstack2.getCount() == 1 && itemstack3.getCount() == 1 && itemstack2.getItem().isDamageable())
              {
                  Item item = itemstack2.getItem();
                  int j = item.getMaxDamage() - itemstack2.getItemDamage();
diff -rc ./item/crafting/RecipesArmorDyes.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipesArmorDyes.java
*** ./item/crafting/RecipesArmorDyes.java	2018-11-18 13:18:56.843265000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipesArmorDyes.java	2018-11-18 13:37:22.696060900 -0800
***************
*** 79,85 ****
                      }
  
                      itemstack = itemstack1.copy();
!                     itemstack.func_190920_e(1);
  
                      if (itemarmor.hasColor(itemstack1))
                      {
--- 79,85 ----
                      }
  
                      itemstack = itemstack1.copy();
!                     itemstack.setCount(1);
  
                      if (itemarmor.hasColor(itemstack1))
                      {
diff -rc ./item/crafting/RecipesBanners.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipesBanners.java
*** ./item/crafting/RecipesBanners.java	2018-11-18 13:18:56.853258000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipesBanners.java	2018-11-18 13:37:22.719511000 -0800
***************
*** 62,68 ****
                  if (!itemstack1.func_190926_b() && itemstack1.getItem() == Items.BANNER)
                  {
                      itemstack = itemstack1.copy();
!                     itemstack.func_190920_e(1);
                      break;
                  }
              }
--- 62,68 ----
                  if (!itemstack1.func_190926_b() && itemstack1.getItem() == Items.BANNER)
                  {
                      itemstack = itemstack1.copy();
!                     itemstack.setCount(1);
                      break;
                  }
              }
***************
*** 318,324 ****
                  if (!itemstack.func_190926_b() && TileEntityBanner.getPatterns(itemstack) > 0)
                  {
                      ItemStack itemstack1 = itemstack.copy();
!                     itemstack1.func_190920_e(1);
                      return itemstack1;
                  }
              }
--- 318,324 ----
                  if (!itemstack.func_190926_b() && TileEntityBanner.getPatterns(itemstack) > 0)
                  {
                      ItemStack itemstack1 = itemstack.copy();
!                     itemstack1.setCount(1);
                      return itemstack1;
                  }
              }
***************
*** 348,354 ****
                      else if (itemstack.hasTagCompound() && TileEntityBanner.getPatterns(itemstack) > 0)
                      {
                          ItemStack itemstack1 = itemstack.copy();
!                         itemstack1.func_190920_e(1);
                          nonnulllist.set(i, itemstack1);
                      }
                  }
--- 348,354 ----
                      else if (itemstack.hasTagCompound() && TileEntityBanner.getPatterns(itemstack) > 0)
                      {
                          ItemStack itemstack1 = itemstack.copy();
!                         itemstack1.setCount(1);
                          nonnulllist.set(i, itemstack1);
                      }
                  }
diff -rc ./item/crafting/RecipesMapExtending.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipesMapExtending.java
*** ./item/crafting/RecipesMapExtending.java	2018-11-18 13:18:56.881242000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/crafting/RecipesMapExtending.java	2018-11-18 13:37:22.749270100 -0800
***************
*** 97,103 ****
          }
  
          itemstack = itemstack.copy();
!         itemstack.func_190920_e(1);
  
          if (itemstack.getTagCompound() == null)
          {
--- 97,103 ----
          }
  
          itemstack = itemstack.copy();
!         itemstack.setCount(1);
  
          if (itemstack.getTagCompound() == null)
          {
diff -rc ./item/Item.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/Item.java
*** ./item/Item.java	2018-11-18 13:18:55.760886000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/Item.java	2018-11-18 13:32:33.335938000 -0800
***************
*** 59,65 ****
  public class Item
  {
      public static final RegistryNamespaced<ResourceLocation, Item> REGISTRY = new RegistryNamespaced<ResourceLocation, Item>();
!     private static final Map<Block, Item> BLOCK_TO_ITEM = Maps.<Block, Item>newHashMap();
      private static final IItemPropertyGetter DAMAGED_GETTER = new IItemPropertyGetter()
      {
          public float apply(ItemStack stack, @Nullable World worldIn, @Nullable EntityLivingBase entityIn)
--- 59,65 ----
  public class Item
  {
      public static final RegistryNamespaced<ResourceLocation, Item> REGISTRY = new RegistryNamespaced<ResourceLocation, Item>();
!     public static final Map<Block, Item> BLOCK_TO_ITEM = Maps.<Block, Item>newHashMap();
      private static final IItemPropertyGetter DAMAGED_GETTER = new IItemPropertyGetter()
      {
          public float apply(ItemStack stack, @Nullable World worldIn, @Nullable EntityLivingBase entityIn)
diff -rc ./item/ItemArmor.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemArmor.java
*** ./item/ItemArmor.java	2018-11-18 13:18:55.819853000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemArmor.java	2018-11-18 13:37:22.338848900 -0800
***************
*** 234,240 ****
          if (itemstack1.func_190926_b())
          {
              worldIn.setItemStackToSlot(entityequipmentslot, itemstack.copy());
!             itemstack.func_190920_e(0);
              return new ActionResult<ItemStack>(EnumActionResult.SUCCESS, itemstack);
          }
          else
--- 234,240 ----
          if (itemstack1.func_190926_b())
          {
              worldIn.setItemStackToSlot(entityequipmentslot, itemstack.copy());
!             itemstack.setCount(0);
              return new ActionResult<ItemStack>(EnumActionResult.SUCCESS, itemstack);
          }
          else
diff -rc ./item/ItemArmorStand.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemArmorStand.java
*** ./item/ItemArmorStand.java	2018-11-18 13:18:55.835844000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemArmorStand.java	2018-11-18 13:37:01.374813600 -0800
***************
*** 79,85 ****
                              playerIn.playSound((EntityPlayer)null, entityarmorstand.posX, entityarmorstand.posY, entityarmorstand.posZ, SoundEvents.ENTITY_ARMORSTAND_PLACE, SoundCategory.BLOCKS, 0.75F, 0.8F);
                          }
  
!                         itemstack.func_190918_g(1);
                          return EnumActionResult.SUCCESS;
                      }
                  }
--- 79,85 ----
                              playerIn.playSound((EntityPlayer)null, entityarmorstand.posX, entityarmorstand.posY, entityarmorstand.posZ, SoundEvents.ENTITY_ARMORSTAND_PLACE, SoundCategory.BLOCKS, 0.75F, 0.8F);
                          }
  
!                         itemstack.shrink(1);
                          return EnumActionResult.SUCCESS;
                      }
                  }
diff -rc ./item/ItemBanner.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBanner.java
*** ./item/ItemBanner.java	2018-11-18 13:18:55.867825000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBanner.java	2018-11-18 13:37:01.395801600 -0800
***************
*** 82,88 ****
                          CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn, itemstack);
                      }
  
!                     itemstack.func_190918_g(1);
                      return EnumActionResult.SUCCESS;
                  }
              }
--- 82,88 ----
                          CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn, itemstack);
                      }
  
!                     itemstack.shrink(1);
                      return EnumActionResult.SUCCESS;
                  }
              }
diff -rc ./item/ItemBed.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBed.java
*** ./item/ItemBed.java	2018-11-18 13:18:55.876820000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBed.java	2018-11-18 13:37:01.415789700 -0800
***************
*** 94,100 ****
                          CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn, itemstack);
                      }
  
!                     itemstack.func_190918_g(1);
                      return EnumActionResult.SUCCESS;
                  }
                  else
--- 94,100 ----
                          CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn, itemstack);
                      }
  
!                     itemstack.shrink(1);
                      return EnumActionResult.SUCCESS;
                  }
                  else
diff -rc ./item/ItemBlock.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBlock.java
*** ./item/ItemBlock.java	2018-11-18 13:18:55.886814000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBlock.java	2018-11-18 13:37:01.438776800 -0800
***************
*** 69,75 ****
  
                  SoundType soundtype = this.block.getSoundType();
                  playerIn.playSound(stack, worldIn, soundtype.getPlaceSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
!                 itemstack.func_190918_g(1);
              }
  
              return EnumActionResult.SUCCESS;
--- 69,75 ----
  
                  SoundType soundtype = this.block.getSoundType();
                  playerIn.playSound(stack, worldIn, soundtype.getPlaceSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
!                 itemstack.shrink(1);
              }
  
              return EnumActionResult.SUCCESS;
diff -rc ./item/ItemBlockSpecial.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBlockSpecial.java
*** ./item/ItemBlockSpecial.java	2018-11-18 13:18:55.898808000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBlockSpecial.java	2018-11-18 13:37:01.467272300 -0800
***************
*** 69,75 ****
  
                  SoundType soundtype = this.block.getSoundType();
                  playerIn.playSound(stack, worldIn, soundtype.getPlaceSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
!                 itemstack.func_190918_g(1);
                  return EnumActionResult.SUCCESS;
              }
          }
--- 69,75 ----
  
                  SoundType soundtype = this.block.getSoundType();
                  playerIn.playSound(stack, worldIn, soundtype.getPlaceSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
!                 itemstack.shrink(1);
                  return EnumActionResult.SUCCESS;
              }
          }
diff -rc ./item/ItemBoat.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBoat.java
*** ./item/ItemBoat.java	2018-11-18 13:18:55.907802000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBoat.java	2018-11-18 13:37:01.488261500 -0800
***************
*** 103,109 ****
  
                      if (!worldIn.capabilities.isCreativeMode)
                      {
!                         itemstack.func_190918_g(1);
                      }
  
                      worldIn.addStat(StatList.getObjectUseStats(this));
--- 103,109 ----
  
                      if (!worldIn.capabilities.isCreativeMode)
                      {
!                         itemstack.shrink(1);
                      }
  
                      worldIn.addStat(StatList.getObjectUseStats(this));
diff -rc ./item/ItemBook.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBook.java
*** ./item/ItemBook.java	2018-11-18 13:18:55.921794000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBook.java	2018-11-18 13:37:38.791065000 -0800
***************
*** 7,13 ****
       */
      public boolean isItemTool(ItemStack stack)
      {
!         return stack.func_190916_E() == 1;
      }
  
      /**
--- 7,13 ----
       */
      public boolean isItemTool(ItemStack stack)
      {
!         return stack.getCount() == 1;
      }
  
      /**
diff -rc ./item/ItemBow.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBow.java
*** ./item/ItemBow.java	2018-11-18 13:18:55.933787000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBow.java	2018-11-18 13:37:01.516941700 -0800
***************
*** 147,153 ****
  
                      if (!flag1 && !entityplayer.capabilities.isCreativeMode)
                      {
!                         itemstack.func_190918_g(1);
  
                          if (itemstack.func_190926_b())
                          {
--- 147,153 ----
  
                      if (!flag1 && !entityplayer.capabilities.isCreativeMode)
                      {
!                         itemstack.shrink(1);
  
                          if (itemstack.func_190926_b())
                          {
diff -rc ./item/ItemBucket.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBucket.java
*** ./item/ItemBucket.java	2018-11-18 13:18:55.943783000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBucket.java	2018-11-18 13:37:01.540925500 -0800
***************
*** 124,130 ****
          }
          else
          {
!             emptyBuckets.func_190918_g(1);
  
              if (emptyBuckets.func_190926_b())
              {
--- 124,130 ----
          }
          else
          {
!             emptyBuckets.shrink(1);
  
              if (emptyBuckets.func_190926_b())
              {
diff -rc ./item/ItemBucketMilk.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBucketMilk.java
*** ./item/ItemBucketMilk.java	2018-11-18 13:18:55.958773000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemBucketMilk.java	2018-11-18 13:37:01.566920300 -0800
***************
*** 35,41 ****
  
          if (entityLiving instanceof EntityPlayer && !((EntityPlayer)entityLiving).capabilities.isCreativeMode)
          {
!             stack.func_190918_g(1);
          }
  
          if (!worldIn.isRemote)
--- 35,41 ----
  
          if (entityLiving instanceof EntityPlayer && !((EntityPlayer)entityLiving).capabilities.isCreativeMode)
          {
!             stack.shrink(1);
          }
  
          if (!worldIn.isRemote)
diff -rc ./item/ItemDoor.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemDoor.java
*** ./item/ItemDoor.java	2018-11-18 13:18:56.040726000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemDoor.java	2018-11-18 13:37:01.583908200 -0800
***************
*** 53,59 ****
                  placeDoor(playerIn, worldIn, enumfacing, this.block, flag);
                  SoundType soundtype = this.block.getSoundType();
                  playerIn.playSound(stack, worldIn, soundtype.getPlaceSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
!                 itemstack.func_190918_g(1);
                  return EnumActionResult.SUCCESS;
              }
              else
--- 53,59 ----
                  placeDoor(playerIn, worldIn, enumfacing, this.block, flag);
                  SoundType soundtype = this.block.getSoundType();
                  playerIn.playSound(stack, worldIn, soundtype.getPlaceSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
!                 itemstack.shrink(1);
                  return EnumActionResult.SUCCESS;
              }
              else
diff -rc ./item/ItemDye.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemDye.java
*** ./item/ItemDye.java	2018-11-18 13:18:56.050720000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemDye.java	2018-11-18 13:37:01.604897800 -0800
***************
*** 88,94 ****
  
                          if (!stack.capabilities.isCreativeMode)
                          {
!                             itemstack.func_190918_g(1);
                          }
  
                          return EnumActionResult.SUCCESS;
--- 88,94 ----
  
                          if (!stack.capabilities.isCreativeMode)
                          {
!                             itemstack.shrink(1);
                          }
  
                          return EnumActionResult.SUCCESS;
***************
*** 119,125 ****
                          igrowable.grow(worldIn, worldIn.rand, target, iblockstate);
                      }
  
!                     stack.func_190918_g(1);
                  }
  
                  return true;
--- 119,125 ----
                          igrowable.grow(worldIn, worldIn.rand, target, iblockstate);
                      }
  
!                     stack.shrink(1);
                  }
  
                  return true;
***************
*** 163,169 ****
              if (!entitysheep.getSheared() && entitysheep.getFleeceColor() != enumdyecolor)
              {
                  entitysheep.setFleeceColor(enumdyecolor);
!                 stack.func_190918_g(1);
              }
  
              return true;
--- 163,169 ----
              if (!entitysheep.getSheared() && entitysheep.getFleeceColor() != enumdyecolor)
              {
                  entitysheep.setFleeceColor(enumdyecolor);
!                 stack.shrink(1);
              }
  
              return true;
diff -rc ./item/ItemEgg.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemEgg.java
*** ./item/ItemEgg.java	2018-11-18 13:18:56.061713000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemEgg.java	2018-11-18 13:37:01.623886000 -0800
***************
*** 25,31 ****
  
          if (!worldIn.capabilities.isCreativeMode)
          {
!             itemstack.func_190918_g(1);
          }
  
          itemStackIn.playSound((EntityPlayer)null, worldIn.posX, worldIn.posY, worldIn.posZ, SoundEvents.ENTITY_EGG_THROW, SoundCategory.PLAYERS, 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
--- 25,31 ----
  
          if (!worldIn.capabilities.isCreativeMode)
          {
!             itemstack.shrink(1);
          }
  
          itemStackIn.playSound((EntityPlayer)null, worldIn.posX, worldIn.posY, worldIn.posZ, SoundEvents.ENTITY_EGG_THROW, SoundCategory.PLAYERS, 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
diff -rc ./item/ItemElytra.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemElytra.java
*** ./item/ItemElytra.java	2018-11-18 13:18:56.073707000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemElytra.java	2018-11-18 13:37:22.361845400 -0800
***************
*** 53,59 ****
          if (itemstack1.func_190926_b())
          {
              worldIn.setItemStackToSlot(entityequipmentslot, itemstack.copy());
!             itemstack.func_190920_e(0);
              return new ActionResult<ItemStack>(EnumActionResult.SUCCESS, itemstack);
          }
          else
--- 53,59 ----
          if (itemstack1.func_190926_b())
          {
              worldIn.setItemStackToSlot(entityequipmentslot, itemstack.copy());
!             itemstack.setCount(0);
              return new ActionResult<ItemStack>(EnumActionResult.SUCCESS, itemstack);
          }
          else
diff -rc ./item/ItemEmptyMap.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemEmptyMap.java
*** ./item/ItemEmptyMap.java	2018-11-18 13:18:56.085699000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemEmptyMap.java	2018-11-18 13:37:01.638878800 -0800
***************
*** 19,25 ****
      {
          ItemStack itemstack = ItemMap.func_190906_a(itemStackIn, worldIn.posX, worldIn.posZ, (byte)0, true, false);
          ItemStack itemstack1 = worldIn.getHeldItem(playerIn);
!         itemstack1.func_190918_g(1);
  
          if (itemstack1.func_190926_b())
          {
--- 19,25 ----
      {
          ItemStack itemstack = ItemMap.func_190906_a(itemStackIn, worldIn.posX, worldIn.posZ, (byte)0, true, false);
          ItemStack itemstack1 = worldIn.getHeldItem(playerIn);
!         itemstack1.shrink(1);
  
          if (itemstack1.func_190926_b())
          {
diff -rc ./item/ItemEndCrystal.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemEndCrystal.java
*** ./item/ItemEndCrystal.java	2018-11-18 13:18:56.106688000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemEndCrystal.java	2018-11-18 13:37:01.658865000 -0800
***************
*** 80,86 ****
                              }
                          }
  
!                         itemstack.func_190918_g(1);
                          return EnumActionResult.SUCCESS;
                      }
                  }
--- 80,86 ----
                              }
                          }
  
!                         itemstack.shrink(1);
                          return EnumActionResult.SUCCESS;
                      }
                  }
diff -rc ./item/ItemEnderEye.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemEnderEye.java
*** ./item/ItemEnderEye.java	2018-11-18 13:18:56.116682000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemEnderEye.java	2018-11-18 13:37:01.680172400 -0800
***************
*** 47,53 ****
              {
                  playerIn.setBlockState(worldIn, iblockstate.withProperty(BlockEndPortalFrame.EYE, Boolean.valueOf(true)), 2);
                  playerIn.updateComparatorOutputLevel(worldIn, Blocks.END_PORTAL_FRAME);
!                 itemstack.func_190918_g(1);
  
                  for (int i = 0; i < 16; ++i)
                  {
--- 47,53 ----
              {
                  playerIn.setBlockState(worldIn, iblockstate.withProperty(BlockEndPortalFrame.EYE, Boolean.valueOf(true)), 2);
                  playerIn.updateComparatorOutputLevel(worldIn, Blocks.END_PORTAL_FRAME);
!                 itemstack.shrink(1);
  
                  for (int i = 0; i < 16; ++i)
                  {
***************
*** 120,126 ****
  
                      if (!worldIn.capabilities.isCreativeMode)
                      {
!                         itemstack.func_190918_g(1);
                      }
  
                      worldIn.addStat(StatList.getObjectUseStats(this));
--- 120,126 ----
  
                      if (!worldIn.capabilities.isCreativeMode)
                      {
!                         itemstack.shrink(1);
                      }
  
                      worldIn.addStat(StatList.getObjectUseStats(this));
diff -rc ./item/ItemEnderPearl.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemEnderPearl.java
*** ./item/ItemEnderPearl.java	2018-11-18 13:18:56.127676000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemEnderPearl.java	2018-11-18 13:37:01.703161400 -0800
***************
*** 25,31 ****
  
          if (!worldIn.capabilities.isCreativeMode)
          {
!             itemstack.func_190918_g(1);
          }
  
          itemStackIn.playSound((EntityPlayer)null, worldIn.posX, worldIn.posY, worldIn.posZ, SoundEvents.ENTITY_ENDERPEARL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
--- 25,31 ----
  
          if (!worldIn.capabilities.isCreativeMode)
          {
!             itemstack.shrink(1);
          }
  
          itemStackIn.playSound((EntityPlayer)null, worldIn.posX, worldIn.posY, worldIn.posZ, SoundEvents.ENTITY_ENDERPEARL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
diff -rc ./item/ItemExpBottle.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemExpBottle.java
*** ./item/ItemExpBottle.java	2018-11-18 13:18:56.137669000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemExpBottle.java	2018-11-18 13:37:01.723149900 -0800
***************
*** 29,35 ****
  
          if (!worldIn.capabilities.isCreativeMode)
          {
!             itemstack.func_190918_g(1);
          }
  
          itemStackIn.playSound((EntityPlayer)null, worldIn.posX, worldIn.posY, worldIn.posZ, SoundEvents.ENTITY_EXPERIENCE_BOTTLE_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
--- 29,35 ----
  
          if (!worldIn.capabilities.isCreativeMode)
          {
!             itemstack.shrink(1);
          }
  
          itemStackIn.playSound((EntityPlayer)null, worldIn.posX, worldIn.posY, worldIn.posZ, SoundEvents.ENTITY_EXPERIENCE_BOTTLE_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
diff -rc ./item/ItemFireball.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemFireball.java
*** ./item/ItemFireball.java	2018-11-18 13:18:56.148663000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemFireball.java	2018-11-18 13:37:01.745137400 -0800
***************
*** 47,53 ****
  
                  if (!stack.capabilities.isCreativeMode)
                  {
!                     itemstack.func_190918_g(1);
                  }
  
                  return EnumActionResult.SUCCESS;
--- 47,53 ----
  
                  if (!stack.capabilities.isCreativeMode)
                  {
!                     itemstack.shrink(1);
                  }
  
                  return EnumActionResult.SUCCESS;
diff -rc ./item/ItemFirework.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemFirework.java
*** ./item/ItemFirework.java	2018-11-18 13:18:56.159657000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemFirework.java	2018-11-18 13:37:01.807099200 -0800
***************
*** 31,37 ****
  
              if (!stack.capabilities.isCreativeMode)
              {
!                 itemstack.func_190918_g(1);
              }
          }
  
--- 31,37 ----
  
              if (!stack.capabilities.isCreativeMode)
              {
!                 itemstack.shrink(1);
              }
          }
  
***************
*** 51,57 ****
  
                  if (!worldIn.capabilities.isCreativeMode)
                  {
!                     itemstack.func_190918_g(1);
                  }
              }
  
--- 51,57 ----
  
                  if (!worldIn.capabilities.isCreativeMode)
                  {
!                     itemstack.shrink(1);
                  }
              }
  
diff -rc ./item/ItemFood.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemFood.java
*** ./item/ItemFood.java	2018-11-18 13:18:56.218623000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemFood.java	2018-11-18 13:37:01.832086900 -0800
***************
*** 73,79 ****
              }
          }
  
!         stack.func_190918_g(1);
          return stack;
      }
  
--- 73,79 ----
              }
          }
  
!         stack.shrink(1);
          return stack;
      }
  
diff -rc ./item/ItemGlassBottle.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemGlassBottle.java
*** ./item/ItemGlassBottle.java	2018-11-18 13:18:56.232615000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemGlassBottle.java	2018-11-18 13:37:01.858072500 -0800
***************
*** 79,85 ****
  
      protected ItemStack turnBottleIntoItem(ItemStack p_185061_1_, EntityPlayer player, ItemStack stack)
      {
!         p_185061_1_.func_190918_g(1);
          player.addStat(StatList.getObjectUseStats(this));
  
          if (p_185061_1_.func_190926_b())
--- 79,85 ----
  
      protected ItemStack turnBottleIntoItem(ItemStack p_185061_1_, EntityPlayer player, ItemStack stack)
      {
!         p_185061_1_.shrink(1);
          player.addStat(StatList.getObjectUseStats(this));
  
          if (p_185061_1_.func_190926_b())
diff -rc ./item/ItemHangingEntity.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemHangingEntity.java
*** ./item/ItemHangingEntity.java	2018-11-18 13:18:56.245608000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemHangingEntity.java	2018-11-18 13:37:01.881058800 -0800
***************
*** 42,48 ****
                      playerIn.spawnEntityInWorld(entityhanging);
                  }
  
!                 itemstack.func_190918_g(1);
              }
  
              return EnumActionResult.SUCCESS;
--- 42,48 ----
                      playerIn.spawnEntityInWorld(entityhanging);
                  }
  
!                 itemstack.shrink(1);
              }
  
              return EnumActionResult.SUCCESS;
diff -rc ./item/ItemLilyPad.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemLilyPad.java
*** ./item/ItemLilyPad.java	2018-11-18 13:18:56.308572000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemLilyPad.java	2018-11-18 13:37:01.906043800 -0800
***************
*** 59,65 ****
  
                      if (!worldIn.capabilities.isCreativeMode)
                      {
!                         itemstack.func_190918_g(1);
                      }
  
                      worldIn.addStat(StatList.getObjectUseStats(this));
--- 59,65 ----
  
                      if (!worldIn.capabilities.isCreativeMode)
                      {
!                         itemstack.shrink(1);
                      }
  
                      worldIn.addStat(StatList.getObjectUseStats(this));
diff -rc ./item/ItemMinecart.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemMinecart.java
*** ./item/ItemMinecart.java	2018-11-18 13:18:56.363540000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemMinecart.java	2018-11-18 13:37:01.926033000 -0800
***************
*** 72,78 ****
              }
  
              world.spawnEntityInWorld(entityminecart);
!             stack.func_190918_g(1);
              return stack;
          }
          protected void playDispenseSound(IBlockSource source)
--- 72,78 ----
              }
  
              world.spawnEntityInWorld(entityminecart);
!             stack.shrink(1);
              return stack;
          }
          protected void playDispenseSound(IBlockSource source)
***************
*** 125,131 ****
                  playerIn.spawnEntityInWorld(entityminecart);
              }
  
!             itemstack.func_190918_g(1);
              return EnumActionResult.SUCCESS;
          }
      }
--- 125,131 ----
                  playerIn.spawnEntityInWorld(entityminecart);
              }
  
!             itemstack.shrink(1);
              return EnumActionResult.SUCCESS;
          }
      }
diff -rc ./item/ItemMonsterPlacer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemMonsterPlacer.java
*** ./item/ItemMonsterPlacer.java	2018-11-18 13:18:56.373535000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemMonsterPlacer.java	2018-11-18 13:37:01.950020800 -0800
***************
*** 86,92 ****
  
                      if (!stack.capabilities.isCreativeMode)
                      {
!                         itemstack.func_190918_g(1);
                      }
  
                      return EnumActionResult.SUCCESS;
--- 86,92 ----
  
                      if (!stack.capabilities.isCreativeMode)
                      {
!                         itemstack.shrink(1);
                      }
  
                      return EnumActionResult.SUCCESS;
***************
*** 108,114 ****
  
                  if (!stack.capabilities.isCreativeMode)
                  {
!                     itemstack.func_190918_g(1);
                  }
              }
  
--- 108,114 ----
  
                  if (!stack.capabilities.isCreativeMode)
                  {
!                     itemstack.shrink(1);
                  }
              }
  
***************
*** 204,210 ****
  
                          if (!worldIn.capabilities.isCreativeMode)
                          {
!                             itemstack.func_190918_g(1);
                          }
  
                          worldIn.addStat(StatList.getObjectUseStats(this));
--- 204,210 ----
  
                          if (!worldIn.capabilities.isCreativeMode)
                          {
!                             itemstack.shrink(1);
                          }
  
                          worldIn.addStat(StatList.getObjectUseStats(this));
diff -rc ./item/ItemNameTag.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemNameTag.java
*** ./item/ItemNameTag.java	2018-11-18 13:18:56.398519000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemNameTag.java	2018-11-18 13:37:01.973004300 -0800
***************
*** 27,33 ****
                  ((EntityLiving)target).enablePersistence();
              }
  
!             stack.func_190918_g(1);
              return true;
          }
          else
--- 27,33 ----
                  ((EntityLiving)target).enablePersistence();
              }
  
!             stack.shrink(1);
              return true;
          }
          else
diff -rc ./item/ItemPotion.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemPotion.java
*** ./item/ItemPotion.java	2018-11-18 13:18:56.440495000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemPotion.java	2018-11-18 13:37:01.993992300 -0800
***************
*** 44,50 ****
  
          if (entityplayer == null || !entityplayer.capabilities.isCreativeMode)
          {
!             stack.func_190918_g(1);
          }
  
          if (entityplayer instanceof EntityPlayerMP)
--- 44,50 ----
  
          if (entityplayer == null || !entityplayer.capabilities.isCreativeMode)
          {
!             stack.shrink(1);
          }
  
          if (entityplayer instanceof EntityPlayerMP)
diff -rc ./item/ItemRecord.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemRecord.java
*** ./item/ItemRecord.java	2018-11-18 13:18:56.452489000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemRecord.java	2018-11-18 13:37:02.017988000 -0800
***************
*** 48,54 ****
                  ItemStack itemstack = stack.getHeldItem(pos);
                  ((BlockJukebox)Blocks.JUKEBOX).insertRecord(playerIn, worldIn, iblockstate, itemstack);
                  playerIn.playEvent((EntityPlayer)null, 1010, worldIn, Item.getIdFromItem(this));
!                 itemstack.func_190918_g(1);
                  stack.addStat(StatList.RECORD_PLAYED);
              }
  
--- 48,54 ----
                  ItemStack itemstack = stack.getHeldItem(pos);
                  ((BlockJukebox)Blocks.JUKEBOX).insertRecord(playerIn, worldIn, iblockstate, itemstack);
                  playerIn.playEvent((EntityPlayer)null, 1010, worldIn, Item.getIdFromItem(this));
!                 itemstack.shrink(1);
                  stack.addStat(StatList.RECORD_PLAYED);
              }
  
diff -rc ./item/ItemRedstone.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemRedstone.java
*** ./item/ItemRedstone.java	2018-11-18 13:18:56.463484000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemRedstone.java	2018-11-18 13:37:02.034977500 -0800
***************
*** 37,43 ****
                  CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, blockpos, itemstack);
              }
  
!             itemstack.func_190918_g(1);
              return EnumActionResult.SUCCESS;
          }
          else
--- 37,43 ----
                  CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, blockpos, itemstack);
              }
  
!             itemstack.shrink(1);
              return EnumActionResult.SUCCESS;
          }
          else
diff -rc ./item/ItemSaddle.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSaddle.java
*** ./item/ItemSaddle.java	2018-11-18 13:18:56.474477000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSaddle.java	2018-11-18 13:37:02.056965100 -0800
***************
*** 29,35 ****
              {
                  entitypig.setSaddled(true);
                  entitypig.world.playSound(playerIn, entitypig.posX, entitypig.posY, entitypig.posZ, SoundEvents.ENTITY_PIG_SADDLE, SoundCategory.NEUTRAL, 0.5F, 1.0F);
!                 stack.func_190918_g(1);
              }
  
              return true;
--- 29,35 ----
              {
                  entitypig.setSaddled(true);
                  entitypig.world.playSound(playerIn, entitypig.posX, entitypig.posY, entitypig.posZ, SoundEvents.ENTITY_PIG_SADDLE, SoundCategory.NEUTRAL, 0.5F, 1.0F);
!                 stack.shrink(1);
              }
  
              return true;
diff -rc ./item/ItemSeedFood.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSeedFood.java
*** ./item/ItemSeedFood.java	2018-11-18 13:18:56.485469000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSeedFood.java	2018-11-18 13:37:02.071956800 -0800
***************
*** 32,38 ****
          if (hand == EnumFacing.UP && stack.canPlayerEdit(worldIn.offset(hand), hand, itemstack) && playerIn.getBlockState(worldIn).getBlock() == this.soilId && playerIn.isAirBlock(worldIn.up()))
          {
              playerIn.setBlockState(worldIn.up(), this.crops.getDefaultState(), 11);
!             itemstack.func_190918_g(1);
              return EnumActionResult.SUCCESS;
          }
          else
--- 32,38 ----
          if (hand == EnumFacing.UP && stack.canPlayerEdit(worldIn.offset(hand), hand, itemstack) && playerIn.getBlockState(worldIn).getBlock() == this.soilId && playerIn.isAirBlock(worldIn.up()))
          {
              playerIn.setBlockState(worldIn.up(), this.crops.getDefaultState(), 11);
!             itemstack.shrink(1);
              return EnumActionResult.SUCCESS;
          }
          else
diff -rc ./item/ItemSeeds.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSeeds.java
*** ./item/ItemSeeds.java	2018-11-18 13:18:56.496463000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSeeds.java	2018-11-18 13:37:02.097941200 -0800
***************
*** 41,47 ****
                  CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn.up(), itemstack);
              }
  
!             itemstack.func_190918_g(1);
              return EnumActionResult.SUCCESS;
          }
          else
--- 41,47 ----
                  CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn.up(), itemstack);
              }
  
!             itemstack.shrink(1);
              return EnumActionResult.SUCCESS;
          }
          else
diff -rc ./item/ItemSign.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSign.java
*** ./item/ItemSign.java	2018-11-18 13:18:56.537439000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSign.java	2018-11-18 13:37:02.115929900 -0800
***************
*** 70,76 ****
                          CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn, itemstack);
                      }
  
!                     itemstack.func_190918_g(1);
                      return EnumActionResult.SUCCESS;
                  }
              }
--- 70,76 ----
                          CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn, itemstack);
                      }
  
!                     itemstack.shrink(1);
                      return EnumActionResult.SUCCESS;
                  }
              }
diff -rc ./item/ItemSkull.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSkull.java
*** ./item/ItemSkull.java	2018-11-18 13:18:56.556443000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSkull.java	2018-11-18 13:37:02.136919900 -0800
***************
*** 118,124 ****
                          CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn, itemstack);
                      }
  
!                     itemstack.func_190918_g(1);
                      return EnumActionResult.SUCCESS;
                  }
              }
--- 118,124 ----
                          CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn, itemstack);
                      }
  
!                     itemstack.shrink(1);
                      return EnumActionResult.SUCCESS;
                  }
              }
diff -rc ./item/ItemSlab.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSlab.java
*** ./item/ItemSlab.java	2018-11-18 13:18:56.568422000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSlab.java	2018-11-18 13:37:02.162903900 -0800
***************
*** 75,81 ****
                      {
                          SoundType soundtype = this.doubleSlab.getSoundType();
                          playerIn.playSound(stack, worldIn, soundtype.getPlaceSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
!                         itemstack.func_190918_g(1);
  
                          if (stack instanceof EntityPlayerMP)
                          {
--- 75,81 ----
                      {
                          SoundType soundtype = this.doubleSlab.getSoundType();
                          playerIn.playSound(stack, worldIn, soundtype.getPlaceSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
!                         itemstack.shrink(1);
  
                          if (stack instanceof EntityPlayerMP)
                          {
***************
*** 134,140 ****
                  {
                      SoundType soundtype = this.doubleSlab.getSoundType();
                      worldIn.playSound(player, pos, soundtype.getPlaceSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
!                     stack.func_190918_g(1);
                  }
  
                  return true;
--- 134,140 ----
                  {
                      SoundType soundtype = this.doubleSlab.getSoundType();
                      worldIn.playSound(player, pos, soundtype.getPlaceSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
!                     stack.shrink(1);
                  }
  
                  return true;
diff -rc ./item/ItemSnow.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSnow.java
*** ./item/ItemSnow.java	2018-11-18 13:18:56.577416000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSnow.java	2018-11-18 13:37:02.181892900 -0800
***************
*** 62,68 ****
                              CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn, itemstack);
                          }
  
!                         itemstack.func_190918_g(1);
                          return EnumActionResult.SUCCESS;
                      }
                  }
--- 62,68 ----
                              CriteriaTriggers.field_193137_x.func_193173_a((EntityPlayerMP)stack, worldIn, itemstack);
                          }
  
!                         itemstack.shrink(1);
                          return EnumActionResult.SUCCESS;
                      }
                  }
diff -rc ./item/ItemSnowball.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSnowball.java
*** ./item/ItemSnowball.java	2018-11-18 13:18:56.588410000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemSnowball.java	2018-11-18 13:37:02.203879700 -0800
***************
*** 25,31 ****
  
          if (!worldIn.capabilities.isCreativeMode)
          {
!             itemstack.func_190918_g(1);
          }
  
          itemStackIn.playSound((EntityPlayer)null, worldIn.posX, worldIn.posY, worldIn.posZ, SoundEvents.ENTITY_SNOWBALL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
--- 25,31 ----
  
          if (!worldIn.capabilities.isCreativeMode)
          {
!             itemstack.shrink(1);
          }
  
          itemStackIn.playSound((EntityPlayer)null, worldIn.posX, worldIn.posY, worldIn.posZ, SoundEvents.ENTITY_SNOWBALL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
diff -rc ./item/ItemStack.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemStack.java
*** ./item/ItemStack.java	2018-11-18 13:18:56.643393000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/item/ItemStack.java	2018-11-18 13:37:38.884735200 -0800
***************
*** 175,182 ****
      {
          int i = Math.min(amount, this.stackSize);
          ItemStack itemstack = this.copy();
!         itemstack.func_190920_e(i);
!         this.func_190918_g(i);
          return itemstack;
      }
  
--- 175,182 ----
      {
          int i = Math.min(amount, this.stackSize);
          ItemStack itemstack = this.copy();
!         itemstack.setCount(i);
!         this.shrink(i);
          return itemstack;
      }
  
***************
*** 373,379 ****
                  if (this.attemptDamageItem(amount, entityIn.getRNG(), entityIn instanceof EntityPlayerMP ? (EntityPlayerMP)entityIn : null))
                  {
                      entityIn.renderBrokenItemStack(this);
!                     this.func_190918_g(1);
  
                      if (entityIn instanceof EntityPlayer)
                      {
--- 373,379 ----
                  if (this.attemptDamageItem(amount, entityIn.getRNG(), entityIn instanceof EntityPlayerMP ? (EntityPlayerMP)entityIn : null))
                  {
                      entityIn.renderBrokenItemStack(this);
!                     this.shrink(1);
  
                      if (entityIn instanceof EntityPlayer)
                      {
***************
*** 1242,1265 ****
          this.animationsToGo = p_190915_1_;
      }
  
!     public int func_190916_E()
      {
          return this.field_190928_g ? 0 : this.stackSize;
      }
  
!     public void func_190920_e(int p_190920_1_)
      {
          this.stackSize = p_190920_1_;
          this.func_190923_F();
      }
  
!     public void func_190917_f(int p_190917_1_)
      {
!         this.func_190920_e(this.stackSize + p_190917_1_);
      }
  
!     public void func_190918_g(int p_190918_1_)
      {
!         this.func_190917_f(-p_190918_1_);
      }
  }
--- 1242,1265 ----
          this.animationsToGo = p_190915_1_;
      }
  
!     public int getCount()
      {
          return this.field_190928_g ? 0 : this.stackSize;
      }
  
!     public void setCount(int p_190920_1_)
      {
          this.stackSize = p_190920_1_;
          this.func_190923_F();
      }
  
!     public void grow(int p_190917_1_)
      {
!         this.setCount(this.stackSize + p_190917_1_);
      }
  
!     public void shrink(int p_190918_1_)
      {
!         this.grow(-p_190918_1_);
      }
  }
diff -rc ./network/EnumConnectionState.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/EnumConnectionState.java
*** ./network/EnumConnectionState.java	2018-11-18 13:18:57.203057000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/EnumConnectionState.java	2018-12-08 15:17:55.607809200 -0800
***************
*** 26,38 ****
  import net.minecraft.network.play.client.CPacketHeldItemChange;
  import net.minecraft.network.play.client.CPacketInput;
  import net.minecraft.network.play.client.CPacketKeepAlive;
  import net.minecraft.network.play.client.CPacketPlayer;
  import net.minecraft.network.play.client.CPacketPlayerAbilities;
  import net.minecraft.network.play.client.CPacketPlayerDigging;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
  import net.minecraft.network.play.client.CPacketRecipeInfo;
- import net.minecraft.network.play.client.CPacketRecipePlacement;
  import net.minecraft.network.play.client.CPacketResourcePackStatus;
  import net.minecraft.network.play.client.CPacketSeenAdvancements;
  import net.minecraft.network.play.client.CPacketSpectate;
--- 26,38 ----
  import net.minecraft.network.play.client.CPacketHeldItemChange;
  import net.minecraft.network.play.client.CPacketInput;
  import net.minecraft.network.play.client.CPacketKeepAlive;
+ import net.minecraft.network.play.client.CPacketPlaceRecipe;
  import net.minecraft.network.play.client.CPacketPlayer;
  import net.minecraft.network.play.client.CPacketPlayerAbilities;
  import net.minecraft.network.play.client.CPacketPlayerDigging;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
  import net.minecraft.network.play.client.CPacketRecipeInfo;
  import net.minecraft.network.play.client.CPacketResourcePackStatus;
  import net.minecraft.network.play.client.CPacketSeenAdvancements;
  import net.minecraft.network.play.client.CPacketSpectate;
***************
*** 80,85 ****
--- 80,86 ----
  import net.minecraft.network.play.server.SPacketMultiBlockChange;
  import net.minecraft.network.play.server.SPacketOpenWindow;
  import net.minecraft.network.play.server.SPacketParticles;
+ import net.minecraft.network.play.server.SPacketPlaceGhostRecipe;
  import net.minecraft.network.play.server.SPacketPlayerAbilities;
  import net.minecraft.network.play.server.SPacketPlayerListHeaderFooter;
  import net.minecraft.network.play.server.SPacketPlayerListItem;
***************
*** 122,366 ****
  import net.minecraft.network.status.server.SPacketPong;
  import net.minecraft.network.status.server.SPacketServerInfo;
  import org.apache.logging.log4j.LogManager;
  
  public enum EnumConnectionState
  {
!     HANDSHAKING(-1)
!     {
!         {
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, C00Handshake.class);
!         }
!     },
!     PLAY(0)
!     {
!         {
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnObject.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnExperienceOrb.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnGlobalEntity.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnMob.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnPainting.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnPlayer.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketAnimation.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketStatistics.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketBlockBreakAnim.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUpdateTileEntity.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketBlockAction.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketBlockChange.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUpdateBossInfo.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketServerDifficulty.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketTabComplete.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketChat.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketMultiBlockChange.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketConfirmTransaction.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCloseWindow.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketOpenWindow.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketWindowItems.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketWindowProperty.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSetSlot.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCooldown.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCustomPayload.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCustomSound.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketDisconnect.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityStatus.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketExplosion.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUnloadChunk.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketChangeGameState.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketKeepAlive.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketChunkData.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEffect.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketParticles.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketJoinGame.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketMaps.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntity.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntity.S15PacketEntityRelMove.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntity.S17PacketEntityLookMove.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntity.S16PacketEntityLook.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketMoveVehicle.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSignEditorOpen.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPlayerAbilities.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCombatEvent.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPlayerListItem.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPlayerPosLook.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUseBed.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketRecipeBook.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketDestroyEntities.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketRemoveEntityEffect.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketResourcePackSend.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketRespawn.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityHeadLook.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSelectAdvancementsTab.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketWorldBorder.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCamera.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketHeldItemChange.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketDisplayObjective.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityMetadata.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityAttach.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityVelocity.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityEquipment.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSetExperience.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUpdateHealth.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketScoreboardObjective.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSetPassengers.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketTeams.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUpdateScore.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnPosition.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketTimeUpdate.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketTitle.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSoundEffect.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPlayerListHeaderFooter.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCollectItem.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityTeleport.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketAdvancementInfo.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityProperties.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityEffect.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketConfirmTeleport.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketRecipePlacement.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketTabComplete.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketChatMessage.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketClientStatus.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketClientSettings.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketConfirmTransaction.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketEnchantItem.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketClickWindow.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketCloseWindow.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketCustomPayload.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketUseEntity.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketKeepAlive.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayer.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayer.Position.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayer.PositionRotation.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayer.Rotation.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketVehicleMove.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketSteerBoat.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayerAbilities.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayerDigging.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketEntityAction.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketInput.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketRecipeInfo.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketResourcePackStatus.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketSeenAdvancements.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketHeldItemChange.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketCreativeInventoryAction.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketUpdateSign.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketAnimation.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketSpectate.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayerTryUseItemOnBlock.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayerTryUseItem.class);
!         }
!     },
!     STATUS(1)
!     {
!         {
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketServerQuery.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketServerInfo.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPing.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPong.class);
!         }
!     },
!     LOGIN(2)
!     {
!         {
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, net.minecraft.network.login.server.SPacketDisconnect.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEncryptionRequest.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketLoginSuccess.class);
!             this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEnableCompression.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketLoginStart.class);
!             this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketEncryptionResponse.class);
!         }
!     };
! 
!     private static final EnumConnectionState[] STATES_BY_ID = new EnumConnectionState[4];
!     private static final Map < Class <? extends Packet<? >> , EnumConnectionState > STATES_BY_CLASS = Maps. < Class <? extends Packet<? >> , EnumConnectionState > newHashMap();
!     private final int id;
!     private final Map < EnumPacketDirection, BiMap < Integer, Class <? extends Packet<? >>> > directionMaps;
! 
!     private EnumConnectionState(int protocolId)
!     {
!         this.directionMaps = Maps.newEnumMap(EnumPacketDirection.class);
!         this.id = protocolId;
!     }
! 
!     protected EnumConnectionState registerPacket(EnumPacketDirection direction, Class <? extends Packet<? >> packetClass)
!     {
!         BiMap < Integer, Class <? extends Packet<? >>> bimap = (BiMap)this.directionMaps.get(direction);
! 
!         if (bimap == null)
!         {
!             bimap = HashBiMap. < Integer, Class <? extends Packet<? >>> create();
!             this.directionMaps.put(direction, bimap);
!         }
! 
!         if (bimap.containsValue(packetClass))
!         {
!             String s = direction + " packet " + packetClass + " is already known to ID " + bimap.inverse().get(packetClass);
!             LogManager.getLogger().fatal(s);
!             throw new IllegalArgumentException(s);
!         }
!         else
!         {
!             bimap.put(Integer.valueOf(bimap.size()), packetClass);
!             return this;
!         }
!     }
! 
!     public Integer getPacketId(EnumPacketDirection direction, Packet<?> packetIn) throws Exception {
!         return (Integer)((BiMap)this.directionMaps.get(direction)).inverse().get(packetIn.getClass());
!     }
! 
!     @Nullable
!     public Packet<?> getPacket(EnumPacketDirection direction, int packetId) throws InstantiationException, IllegalAccessException {
!         Class <? extends Packet<? >> oclass = (Class)((BiMap)this.directionMaps.get(direction)).get(Integer.valueOf(packetId));
!         return oclass == null ? null : (Packet)oclass.newInstance();
!     }
! 
!     public int getId()
!     {
!         return this.id;
!     }
! 
!     public static EnumConnectionState getById(int stateId)
!     {
!         return stateId >= -1 && stateId <= 2 ? STATES_BY_ID[stateId - -1] : null;
!     }
! 
!     public static EnumConnectionState getFromPacket(Packet<?> packetIn)
!     {
!         return STATES_BY_CLASS.get(packetIn.getClass());
!     }
! 
!     static {
!         for (EnumConnectionState enumconnectionstate : values())
!         {
!             int i = enumconnectionstate.getId();
! 
!             if (i < -1 || i > 2)
!             {
!                 throw new Error("Invalid protocol ID " + Integer.toString(i));
!             }
! 
!             STATES_BY_ID[i - -1] = enumconnectionstate;
! 
!             for (EnumPacketDirection enumpacketdirection : enumconnectionstate.directionMaps.keySet())
!             {
!                 for (Class <? extends Packet<? >> oclass : (enumconnectionstate.directionMaps.get(enumpacketdirection)).values())
!                 {
!                     if (STATES_BY_CLASS.containsKey(oclass) && STATES_BY_CLASS.get(oclass) != enumconnectionstate)
!                     {
!                         throw new Error("Packet " + oclass + " is already assigned to protocol " + STATES_BY_CLASS.get(oclass) + " - can't reassign to " + enumconnectionstate);
!                     }
! 
!                     try
!                     {
!                         oclass.newInstance();
!                     }
!                     catch (Throwable var10)
!                     {
!                         throw new Error("Packet " + oclass + " fails instantiation checks! " + oclass);
!                     }
! 
!                     STATES_BY_CLASS.put(oclass, enumconnectionstate);
!                 }
!             }
!         }
!     }
  }
--- 123,392 ----
  import net.minecraft.network.status.server.SPacketPong;
  import net.minecraft.network.status.server.SPacketServerInfo;
  import org.apache.logging.log4j.LogManager;
+ import org.golde.snowball.Snowball;
+ import org.golde.snowball.packets.client.CPacketKeyPress;
+ import org.golde.snowball.packets.server.SPacketAddBlock;
+ import org.golde.snowball.packets.server.SPacketAddEnchantment;
+ import org.golde.snowball.packets.server.SPacketAddItem;
+ import org.golde.snowball.packets.server.SPacketInfo;
+ import org.golde.snowball.packets.server.SPacketRefreshResources;
+ import org.golde.snowball.packets.server.SPacketShowToast;
+ import org.golde.snowball.packets.server.SPacketUpdatePlayerLooks;
  
  public enum EnumConnectionState
  {
! 	HANDSHAKING(-1)
! 	{
! 		{
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, C00Handshake.class);
! 		}
! 	},
! 	PLAY(0)
! 	{
! 		{
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnObject.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnExperienceOrb.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnGlobalEntity.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnMob.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnPainting.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnPlayer.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketAnimation.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketStatistics.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketBlockBreakAnim.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUpdateTileEntity.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketBlockAction.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketBlockChange.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUpdateBossInfo.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketServerDifficulty.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketTabComplete.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketChat.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketMultiBlockChange.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketConfirmTransaction.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCloseWindow.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketOpenWindow.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketWindowItems.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketWindowProperty.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSetSlot.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCooldown.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCustomPayload.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCustomSound.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketDisconnect.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityStatus.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketExplosion.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUnloadChunk.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketChangeGameState.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketKeepAlive.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketChunkData.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEffect.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketParticles.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketJoinGame.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketMaps.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntity.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntity.S15PacketEntityRelMove.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntity.S17PacketEntityLookMove.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntity.S16PacketEntityLook.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketMoveVehicle.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSignEditorOpen.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPlaceGhostRecipe.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPlayerAbilities.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCombatEvent.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPlayerListItem.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPlayerPosLook.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUseBed.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketRecipeBook.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketDestroyEntities.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketRemoveEntityEffect.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketResourcePackSend.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketRespawn.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityHeadLook.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSelectAdvancementsTab.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketWorldBorder.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCamera.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketHeldItemChange.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketDisplayObjective.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityMetadata.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityAttach.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityVelocity.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityEquipment.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSetExperience.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUpdateHealth.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketScoreboardObjective.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSetPassengers.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketTeams.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUpdateScore.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSpawnPosition.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketTimeUpdate.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketTitle.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketSoundEffect.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPlayerListHeaderFooter.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketCollectItem.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityTeleport.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketAdvancementInfo.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityProperties.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEntityEffect.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketConfirmTeleport.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketTabComplete.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketChatMessage.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketClientStatus.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketClientSettings.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketConfirmTransaction.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketEnchantItem.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketClickWindow.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketCloseWindow.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketCustomPayload.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketUseEntity.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketKeepAlive.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayer.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayer.Position.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayer.PositionRotation.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayer.Rotation.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketVehicleMove.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketSteerBoat.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlaceRecipe.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayerAbilities.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayerDigging.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketEntityAction.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketInput.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketRecipeInfo.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketResourcePackStatus.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketSeenAdvancements.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketHeldItemChange.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketCreativeInventoryAction.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketUpdateSign.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketAnimation.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketSpectate.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayerTryUseItemOnBlock.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPlayerTryUseItem.class);
! 
! 			//Snowball
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketAddBlock.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketAddItem.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketRefreshResources.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketInfo.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketUpdatePlayerLooks.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketShowToast.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketAddEnchantment.class);
! 			
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketKeyPress.class);
! 		}
! 	},
! 	STATUS(1)
! 	{
! 		{
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketServerQuery.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketServerInfo.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketPing.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketPong.class);
! 		}
! 	},
! 	LOGIN(2)
! 	{
! 		{
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, net.minecraft.network.login.server.SPacketDisconnect.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEncryptionRequest.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketLoginSuccess.class);
! 			this.registerPacket(EnumPacketDirection.CLIENTBOUND, SPacketEnableCompression.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketLoginStart.class);
! 			this.registerPacket(EnumPacketDirection.SERVERBOUND, CPacketEncryptionResponse.class);
! 		}
! 	};
! 
! 	private static final EnumConnectionState[] STATES_BY_ID = new EnumConnectionState[4];
! 	private static final Map < Class <? extends Packet<? >> , EnumConnectionState > STATES_BY_CLASS = Maps. < Class <? extends Packet<? >> , EnumConnectionState > newHashMap();
! 	private final int id;
! 	private final Map < EnumPacketDirection, BiMap < Integer, Class <? extends Packet<? >>> > directionMaps;
! 
! 	private EnumConnectionState(int protocolId)
! 	{
! 		this.directionMaps = Maps.newEnumMap(EnumPacketDirection.class);
! 		this.id = protocolId;
! 	}
! 
! 	protected EnumConnectionState registerPacket(EnumPacketDirection direction, Class <? extends Packet<? >> packetClass)
! 	{
! 		BiMap < Integer, Class <? extends Packet<? >>> bimap = (BiMap)this.directionMaps.get(direction);
! 
! 		if (bimap == null)
! 		{
! 			bimap = HashBiMap. < Integer, Class <? extends Packet<? >>> create();
! 			this.directionMaps.put(direction, bimap);
! 		}
! 
! 		if (bimap.containsValue(packetClass))
! 		{
! 			String s = direction + " packet " + packetClass + " is already known to ID " + bimap.inverse().get(packetClass);
! 			LogManager.getLogger().fatal(s);
! 			throw new IllegalArgumentException(s);
! 		}
! 		else
! 		{
! 			int loc = Integer.valueOf(bimap.size());
! 			bimap.put(loc, packetClass);
! 			if(packetClass.getCanonicalName().contains("snowball")) {
! 				Snowball.instance.getLogger().info("Registered SnowballPacket " + packetClass.getSimpleName() + " with id " + loc);
! 			}
! 			return this;
! 		}
! 	}
! 
! 	public Integer getPacketId(EnumPacketDirection direction, Packet<?> packetIn) throws Exception {
! 		return (Integer)((BiMap)this.directionMaps.get(direction)).inverse().get(packetIn.getClass());
! 	}
! 
! 	@Nullable
! 	public Packet<?> getPacket(EnumPacketDirection direction, int packetId) throws InstantiationException, IllegalAccessException {
! 		Class <? extends Packet<? >> oclass = (Class)((BiMap)this.directionMaps.get(direction)).get(Integer.valueOf(packetId));
! 		return oclass == null ? null : (Packet)oclass.newInstance();
! 	}
! 
! 	public int getId()
! 	{
! 		return this.id;
! 	}
! 
! 	public static EnumConnectionState getById(int stateId)
! 	{
! 		return stateId >= -1 && stateId <= 2 ? STATES_BY_ID[stateId - -1] : null;
! 	}
! 
! 	public static EnumConnectionState getFromPacket(Packet<?> packetIn)
! 	{
! 		return STATES_BY_CLASS.get(packetIn.getClass());
! 	}
! 
! 	static {
! 		for (EnumConnectionState enumconnectionstate : values())
! 		{
! 			int i = enumconnectionstate.getId();
! 
! 			if (i < -1 || i > 2)
! 			{
! 				throw new Error("Invalid protocol ID " + Integer.toString(i));
! 			}
! 
! 			STATES_BY_ID[i - -1] = enumconnectionstate;
! 
! 			for (EnumPacketDirection enumpacketdirection : enumconnectionstate.directionMaps.keySet())
! 			{
! 				for (Class <? extends Packet<? >> oclass : (enumconnectionstate.directionMaps.get(enumpacketdirection)).values())
! 				{
! 					if (STATES_BY_CLASS.containsKey(oclass) && STATES_BY_CLASS.get(oclass) != enumconnectionstate)
! 					{
! 						throw new Error("Packet " + oclass + " is already assigned to protocol " + STATES_BY_CLASS.get(oclass) + " - can't reassign to " + enumconnectionstate);
! 					}
! 
! 					try
! 					{
! 						oclass.newInstance();
! 					}
! 					catch (Throwable var10)
! 					{
! 						throw new Error("Packet " + oclass + " fails instantiation checks! " + oclass);
! 					}
! 
! 					STATES_BY_CLASS.put(oclass, enumconnectionstate);
! 				}
! 			}
! 		}
! 	}
  }
diff -rc ./network/handshake/client/C00Handshake.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/handshake/client/C00Handshake.java
*** ./network/handshake/client/C00Handshake.java	2018-11-18 13:18:57.566848000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/handshake/client/C00Handshake.java	2018-11-18 19:30:36.506595100 -0800
***************
*** 17,28 ****
      {
      }
  
!     public C00Handshake(int version, String ip, int port, EnumConnectionState requestedState)
      {
!         this.protocolVersion = version;
!         this.ip = ip;
!         this.port = port;
!         this.requestedState = requestedState;
      }
  
      /**
--- 17,28 ----
      {
      }
  
!     public C00Handshake(String p_i47613_1_, int p_i47613_2_, EnumConnectionState p_i47613_3_)
      {
!         this.protocolVersion = 340;
!         this.ip = p_i47613_1_;
!         this.port = p_i47613_2_;
!         this.requestedState = p_i47613_3_;
      }
  
      /**
diff -rc ./network/NetHandlerPlayServer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/NetHandlerPlayServer.java
*** ./network/NetHandlerPlayServer.java	2018-11-18 13:18:57.250030000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/NetHandlerPlayServer.java	2018-11-18 13:37:39.237742700 -0800
***************
*** 63,75 ****
  import net.minecraft.network.play.client.CPacketHeldItemChange;
  import net.minecraft.network.play.client.CPacketInput;
  import net.minecraft.network.play.client.CPacketKeepAlive;
  import net.minecraft.network.play.client.CPacketPlayer;
  import net.minecraft.network.play.client.CPacketPlayerAbilities;
  import net.minecraft.network.play.client.CPacketPlayerDigging;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
  import net.minecraft.network.play.client.CPacketRecipeInfo;
- import net.minecraft.network.play.client.CPacketRecipePlacement;
  import net.minecraft.network.play.client.CPacketResourcePackStatus;
  import net.minecraft.network.play.client.CPacketSeenAdvancements;
  import net.minecraft.network.play.client.CPacketSpectate;
--- 63,75 ----
  import net.minecraft.network.play.client.CPacketHeldItemChange;
  import net.minecraft.network.play.client.CPacketInput;
  import net.minecraft.network.play.client.CPacketKeepAlive;
+ import net.minecraft.network.play.client.CPacketPlaceRecipe;
  import net.minecraft.network.play.client.CPacketPlayer;
  import net.minecraft.network.play.client.CPacketPlayerAbilities;
  import net.minecraft.network.play.client.CPacketPlayerDigging;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
  import net.minecraft.network.play.client.CPacketRecipeInfo;
  import net.minecraft.network.play.client.CPacketResourcePackStatus;
  import net.minecraft.network.play.client.CPacketSeenAdvancements;
  import net.minecraft.network.play.client.CPacketSpectate;
***************
*** 105,110 ****
--- 105,111 ----
  import net.minecraft.util.ReportedException;
  import net.minecraft.util.ResourceLocation;
  import net.minecraft.util.Rotation;
+ import net.minecraft.util.ServerRecipeBookHelper;
  import net.minecraft.util.math.BlockPos;
  import net.minecraft.util.math.MathHelper;
  import net.minecraft.util.math.Vec3d;
***************
*** 127,135 ****
      private final MinecraftServer serverController;
      public EntityPlayerMP playerEntity;
      private int networkTickCount;
!     private int keepAliveId;
!     private long lastPingTime;
!     private long lastSentPingPacket;
  
      /**
       * Incremented by 20 each time a user sends a chat message, decreased by one every tick. Non-ops kicked when over
--- 128,136 ----
      private final MinecraftServer serverController;
      public EntityPlayerMP playerEntity;
      private int networkTickCount;
!     private long field_194402_f;
!     private boolean field_194403_g;
!     private long field_194404_h;
  
      /**
       * Incremented by 20 each time a user sends a chat message, decreased by one every tick. Non-ops kicked when over
***************
*** 169,174 ****
--- 170,176 ----
      private int vehicleFloatingTickCount;
      private int movePacketCounter;
      private int lastMovePacketCounter;
+     private ServerRecipeBookHelper field_194309_H = new ServerRecipeBookHelper();
  
      public NetHandlerPlayServer(MinecraftServer server, NetworkManager networkManagerIn, EntityPlayerMP playerIn)
      {
***************
*** 239,251 ****
          }
  
          this.serverController.theProfiler.startSection("keepAlive");
  
!         if ((long)this.networkTickCount - this.lastSentPingPacket > 40L)
          {
!             this.lastSentPingPacket = (long)this.networkTickCount;
!             this.lastPingTime = this.currentTimeMillis();
!             this.keepAliveId = (int)this.lastPingTime;
!             this.sendPacket(new SPacketKeepAlive(this.keepAliveId));
          }
  
          this.serverController.theProfiler.endSection();
--- 241,261 ----
          }
  
          this.serverController.theProfiler.startSection("keepAlive");
+         long i = this.currentTimeMillis();
  
!         if (i - this.field_194402_f >= 15000L)
          {
!             if (this.field_194403_g)
!             {
!                 this.func_194028_b(new TextComponentTranslation("disconnect.timeout", new Object[0]));
!             }
!             else
!             {
!                 this.field_194403_g = true;
!                 this.field_194402_f = i;
!                 this.field_194404_h = i;
!                 this.sendPacket(new SPacketKeepAlive(this.field_194404_h));
!             }
          }
  
          this.serverController.theProfiler.endSection();
***************
*** 1236,1330 ****
          }
      }
  
!     public void func_191985_a(CPacketRecipePlacement p_191985_1_)
      {
!         PacketThreadUtil.checkThreadAndEnqueue(p_191985_1_, this, this.playerEntity.getServerWorld());
          this.playerEntity.markPlayerActive();
  
!         if (this.playerEntity.openContainer.windowId == p_191985_1_.func_192613_a() && this.playerEntity.openContainer.getCanCraft(this.playerEntity))
!         {
!             this.playerEntity.connection.sendPacket(new SPacketConfirmTransaction(p_191985_1_.func_192613_a(), p_191985_1_.func_192614_b(), true));
! 
!             if (!p_191985_1_.func_192610_d().isEmpty())
!             {
!                 for (CPacketRecipePlacement.ItemMove cpacketrecipeplacement$itemmove : p_191985_1_.func_192610_d())
!                 {
!                     ItemStack itemstack = this.playerEntity.openContainer.getSlot(cpacketrecipeplacement$itemmove.field_192674_b).getStack();
! 
!                     if (this.func_193074_a(cpacketrecipeplacement$itemmove.field_192673_a, itemstack))
!                     {
!                         int i = cpacketrecipeplacement$itemmove.field_192673_a.func_190916_E();
! 
!                         if (cpacketrecipeplacement$itemmove.field_192675_c == -1)
!                         {
!                             this.playerEntity.dropItem(cpacketrecipeplacement$itemmove.field_192673_a, true);
!                         }
!                         else
!                         {
!                             ItemStack itemstack1 = this.playerEntity.inventory.getStackInSlot(cpacketrecipeplacement$itemmove.field_192675_c);
! 
!                             if (itemstack1.func_190926_b())
!                             {
!                                 this.playerEntity.inventory.setInventorySlotContents(cpacketrecipeplacement$itemmove.field_192675_c, cpacketrecipeplacement$itemmove.field_192673_a);
!                             }
!                             else
!                             {
!                                 itemstack1.func_190917_f(i);
!                             }
!                         }
! 
!                         if (itemstack.func_190916_E() == i)
!                         {
!                             this.playerEntity.openContainer.putStackInSlot(cpacketrecipeplacement$itemmove.field_192674_b, ItemStack.field_190927_a);
!                         }
!                         else
!                         {
!                             itemstack.func_190918_g(i);
!                         }
!                     }
!                 }
!             }
! 
!             if (!p_191985_1_.func_192615_c().isEmpty())
!             {
!                 for (CPacketRecipePlacement.ItemMove cpacketrecipeplacement$itemmove1 : p_191985_1_.func_192615_c())
!                 {
!                     ItemStack itemstack2 = this.playerEntity.inventory.getStackInSlot(cpacketrecipeplacement$itemmove1.field_192675_c);
! 
!                     if (this.func_193074_a(cpacketrecipeplacement$itemmove1.field_192673_a, itemstack2))
!                     {
!                         int j = cpacketrecipeplacement$itemmove1.field_192673_a.func_190916_E();
! 
!                         if (itemstack2.func_190916_E() == j)
!                         {
!                             this.playerEntity.inventory.removeStackFromSlot(cpacketrecipeplacement$itemmove1.field_192675_c);
!                         }
!                         else
!                         {
!                             itemstack2.func_190918_g(j);
!                         }
! 
!                         this.playerEntity.openContainer.func_192388_b(cpacketrecipeplacement$itemmove1.field_192674_b, cpacketrecipeplacement$itemmove1.field_192673_a);
!                     }
!                 }
!             }
! 
!             this.playerEntity.openContainer.detectAndSendChanges();
!         }
!     }
! 
!     private boolean func_193074_a(ItemStack p_193074_1_, ItemStack p_193074_2_)
!     {
!         ItemStack itemstack = p_193074_2_.copy();
! 
!         if (itemstack.func_190916_E() < p_193074_1_.func_190916_E())
          {
!             return false;
!         }
!         else
!         {
!             itemstack.func_190920_e(p_193074_1_.func_190916_E());
!             return ItemStack.areItemStacksEqual(p_193074_1_, itemstack);
          }
      }
  
--- 1246,1259 ----
          }
      }
  
!     public void func_194308_a(CPacketPlaceRecipe p_194308_1_)
      {
!         PacketThreadUtil.checkThreadAndEnqueue(p_194308_1_, this, this.playerEntity.getServerWorld());
          this.playerEntity.markPlayerActive();
  
!         if (!this.playerEntity.isSpectator() && this.playerEntity.openContainer.windowId == p_194308_1_.func_194318_a() && this.playerEntity.openContainer.getCanCraft(this.playerEntity))
          {
!             this.field_194309_H.func_194327_a(this.playerEntity, p_194308_1_.func_194317_b(), p_194308_1_.func_194319_c());
          }
      }
  
***************
*** 1377,1383 ****
              }
  
              boolean flag1 = packetIn.getSlotId() >= 1 && packetIn.getSlotId() <= 45;
!             boolean flag2 = itemstack.func_190926_b() || itemstack.getMetadata() >= 0 && itemstack.func_190916_E() <= 64 && !itemstack.func_190926_b();
  
              if (flag1 && flag2)
              {
--- 1306,1312 ----
              }
  
              boolean flag1 = packetIn.getSlotId() >= 1 && packetIn.getSlotId() <= 45;
!             boolean flag2 = itemstack.func_190926_b() || itemstack.getMetadata() >= 0 && itemstack.getCount() <= 64 && !itemstack.func_190926_b();
  
              if (flag1 && flag2)
              {
***************
*** 1463,1472 ****
       */
      public void processKeepAlive(CPacketKeepAlive packetIn)
      {
!         if (packetIn.getKey() == this.keepAliveId)
          {
!             int i = (int)(this.currentTimeMillis() - this.lastPingTime);
              this.playerEntity.ping = (this.playerEntity.ping * 3 + i) / 4;
          }
      }
  
--- 1392,1406 ----
       */
      public void processKeepAlive(CPacketKeepAlive packetIn)
      {
!         if (this.field_194403_g && packetIn.getKey() == this.field_194404_h)
          {
!             int i = (int)(this.currentTimeMillis() - this.field_194402_f);
              this.playerEntity.ping = (this.playerEntity.ping * 3 + i) / 4;
+             this.field_194403_g = false;
+         }
+         else if (!this.playerEntity.getName().equals(this.serverController.getServerOwner()))
+         {
+             this.func_194028_b(new TextComponentTranslation("disconnect.timeout", new Object[0]));
          }
      }
  
diff -rc ./network/PacketBuffer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/PacketBuffer.java
*** ./network/PacketBuffer.java	2018-11-18 13:18:57.419933000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/PacketBuffer.java	2018-11-18 13:37:39.293720300 -0800
***************
*** 359,365 ****
          else
          {
              this.writeShort(Item.getIdFromItem(stack.getItem()));
!             this.writeByte(stack.func_190916_E());
              this.writeShort(stack.getMetadata());
              NBTTagCompound nbttagcompound = null;
  
--- 359,365 ----
          else
          {
              this.writeShort(Item.getIdFromItem(stack.getItem()));
!             this.writeByte(stack.getCount());
              this.writeShort(stack.getMetadata());
              NBTTagCompound nbttagcompound = null;
  
diff -rc ./network/play/client/CPacketKeepAlive.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/play/client/CPacketKeepAlive.java
*** ./network/play/client/CPacketKeepAlive.java	2018-11-18 13:18:57.940001000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/play/client/CPacketKeepAlive.java	2017-10-20 21:01:28.642013000 -0700
***************
*** 7,19 ****
  
  public class CPacketKeepAlive implements Packet<INetHandlerPlayServer>
  {
!     private int key;
  
      public CPacketKeepAlive()
      {
      }
  
!     public CPacketKeepAlive(int idIn)
      {
          this.key = idIn;
      }
--- 7,19 ----
  
  public class CPacketKeepAlive implements Packet<INetHandlerPlayServer>
  {
!     private long key;
  
      public CPacketKeepAlive()
      {
      }
  
!     public CPacketKeepAlive(long idIn)
      {
          this.key = idIn;
      }
***************
*** 31,37 ****
       */
      public void readPacketData(PacketBuffer buf) throws IOException
      {
!         this.key = buf.readVarIntFromBuffer();
      }
  
      /**
--- 31,37 ----
       */
      public void readPacketData(PacketBuffer buf) throws IOException
      {
!         this.key = buf.readLong();
      }
  
      /**
***************
*** 39,48 ****
       */
      public void writePacketData(PacketBuffer buf) throws IOException
      {
!         buf.writeVarIntToBuffer(this.key);
      }
  
!     public int getKey()
      {
          return this.key;
      }
--- 39,48 ----
       */
      public void writePacketData(PacketBuffer buf) throws IOException
      {
!         buf.writeLong(this.key);
      }
  
!     public long getKey()
      {
          return this.key;
      }
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/play/client: CPacketPlaceRecipe.java
Only in ./network/play/client: CPacketRecipePlacement.java
diff -rc ./network/play/INetHandlerPlayClient.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/play/INetHandlerPlayClient.java
*** ./network/play/INetHandlerPlayClient.java	2018-11-18 13:18:57.694776000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/play/INetHandlerPlayClient.java	2017-10-20 21:01:28.520036000 -0700
***************
*** 40,45 ****
--- 40,46 ----
  import net.minecraft.network.play.server.SPacketMultiBlockChange;
  import net.minecraft.network.play.server.SPacketOpenWindow;
  import net.minecraft.network.play.server.SPacketParticles;
+ import net.minecraft.network.play.server.SPacketPlaceGhostRecipe;
  import net.minecraft.network.play.server.SPacketPlayerAbilities;
  import net.minecraft.network.play.server.SPacketPlayerListHeaderFooter;
  import net.minecraft.network.play.server.SPacketPlayerListItem;
***************
*** 389,392 ****
--- 390,395 ----
      void func_191981_a(SPacketAdvancementInfo p_191981_1_);
  
      void func_194022_a(SPacketSelectAdvancementsTab p_194022_1_);
+ 
+     void func_194307_a(SPacketPlaceGhostRecipe p_194307_1_);
  }
diff -rc ./network/play/INetHandlerPlayServer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/play/INetHandlerPlayServer.java
*** ./network/play/INetHandlerPlayServer.java	2018-11-18 13:18:57.709768000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/play/INetHandlerPlayServer.java	2017-10-20 21:01:28.527540000 -0700
***************
*** 16,28 ****
  import net.minecraft.network.play.client.CPacketHeldItemChange;
  import net.minecraft.network.play.client.CPacketInput;
  import net.minecraft.network.play.client.CPacketKeepAlive;
  import net.minecraft.network.play.client.CPacketPlayer;
  import net.minecraft.network.play.client.CPacketPlayerAbilities;
  import net.minecraft.network.play.client.CPacketPlayerDigging;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
  import net.minecraft.network.play.client.CPacketRecipeInfo;
- import net.minecraft.network.play.client.CPacketRecipePlacement;
  import net.minecraft.network.play.client.CPacketResourcePackStatus;
  import net.minecraft.network.play.client.CPacketSeenAdvancements;
  import net.minecraft.network.play.client.CPacketSpectate;
--- 16,28 ----
  import net.minecraft.network.play.client.CPacketHeldItemChange;
  import net.minecraft.network.play.client.CPacketInput;
  import net.minecraft.network.play.client.CPacketKeepAlive;
+ import net.minecraft.network.play.client.CPacketPlaceRecipe;
  import net.minecraft.network.play.client.CPacketPlayer;
  import net.minecraft.network.play.client.CPacketPlayerAbilities;
  import net.minecraft.network.play.client.CPacketPlayerDigging;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
  import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
  import net.minecraft.network.play.client.CPacketRecipeInfo;
  import net.minecraft.network.play.client.CPacketResourcePackStatus;
  import net.minecraft.network.play.client.CPacketSeenAdvancements;
  import net.minecraft.network.play.client.CPacketSpectate;
***************
*** 78,84 ****
       */
      void processClickWindow(CPacketClickWindow packetIn);
  
!     void func_191985_a(CPacketRecipePlacement p_191985_1_);
  
      /**
       * Processes the client closing windows (container)
--- 78,84 ----
       */
      void processClickWindow(CPacketClickWindow packetIn);
  
!     void func_194308_a(CPacketPlaceRecipe p_194308_1_);
  
      /**
       * Processes the client closing windows (container)
diff -rc ./network/play/server/SPacketKeepAlive.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/play/server/SPacketKeepAlive.java
*** ./network/play/server/SPacketKeepAlive.java	2018-11-18 13:18:58.637600000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/play/server/SPacketKeepAlive.java	2017-10-20 21:01:29.090013000 -0700
***************
*** 7,19 ****
  
  public class SPacketKeepAlive implements Packet<INetHandlerPlayClient>
  {
!     private int id;
  
      public SPacketKeepAlive()
      {
      }
  
!     public SPacketKeepAlive(int idIn)
      {
          this.id = idIn;
      }
--- 7,19 ----
  
  public class SPacketKeepAlive implements Packet<INetHandlerPlayClient>
  {
!     private long id;
  
      public SPacketKeepAlive()
      {
      }
  
!     public SPacketKeepAlive(long idIn)
      {
          this.id = idIn;
      }
***************
*** 31,37 ****
       */
      public void readPacketData(PacketBuffer buf) throws IOException
      {
!         this.id = buf.readVarIntFromBuffer();
      }
  
      /**
--- 31,37 ----
       */
      public void readPacketData(PacketBuffer buf) throws IOException
      {
!         this.id = buf.readLong();
      }
  
      /**
***************
*** 39,48 ****
       */
      public void writePacketData(PacketBuffer buf) throws IOException
      {
!         buf.writeVarIntToBuffer(this.id);
      }
  
!     public int getId()
      {
          return this.id;
      }
--- 39,48 ----
       */
      public void writePacketData(PacketBuffer buf) throws IOException
      {
!         buf.writeLong(this.id);
      }
  
!     public long getId()
      {
          return this.id;
      }
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/network/play/server: SPacketPlaceGhostRecipe.java
diff -rc ./potion/PotionUtils.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/potion/PotionUtils.java
*** ./potion/PotionUtils.java	2018-11-18 13:18:59.821918000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/potion/PotionUtils.java	2017-10-20 21:35:40.619482000 -0700
***************
*** 17,22 ****
--- 17,24 ----
  import net.minecraft.util.Tuple;
  import net.minecraft.util.text.TextFormatting;
  import net.minecraft.util.text.translation.I18n;
+ import optifine.Config;
+ import optifine.CustomColors;
  
  public class PotionUtils
  {
***************
*** 97,103 ****
  
          if (effects.isEmpty())
          {
!             return 3694022;
          }
          else
          {
--- 99,105 ----
  
          if (effects.isEmpty())
          {
!             return Config.isCustomColors() ? CustomColors.getPotionColor((Potion)null, i) : 3694022;
          }
          else
          {
***************
*** 111,116 ****
--- 113,124 ----
                  if (potioneffect.doesShowParticles())
                  {
                      int k = potioneffect.getPotion().getLiquidColor();
+ 
+                     if (Config.isCustomColors())
+                     {
+                         k = CustomColors.getPotionColor(potioneffect.getPotion(), k);
+                     }
+ 
                      int l = potioneffect.getAmplifier() + 1;
                      f += (float)(l * (k >> 16 & 255)) / 255.0F;
                      f1 += (float)(l * (k >> 8 & 255)) / 255.0F;
diff -rc ./profiler/Profiler.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/profiler/Profiler.java
*** ./profiler/Profiler.java	2018-11-18 13:18:59.861895000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/profiler/Profiler.java	2017-10-20 21:35:40.635952600 -0700
***************
*** 5,10 ****
--- 5,15 ----
  import java.util.Collections;
  import java.util.List;
  import java.util.Map;
+ import java.util.function.Supplier;
+ import net.minecraft.client.renderer.GlStateManager;
+ import optifine.Config;
+ import optifine.Lagometer;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  
***************
*** 20,25 ****
--- 25,47 ----
      /** Current profiling section */
      private String profilingSection = "";
      private final Map<String, Long> profilingMap = Maps.<String, Long>newHashMap();
+     public boolean profilerGlobalEnabled = true;
+     private boolean profilerLocalEnabled;
+     private static final String SCHEDULED_EXECUTABLES = "scheduledExecutables";
+     private static final String TICK = "tick";
+     private static final String PRE_RENDER_ERRORS = "preRenderErrors";
+     private static final String RENDER = "render";
+     private static final String DISPLAY = "display";
+     private static final int HASH_SCHEDULED_EXECUTABLES = "scheduledExecutables".hashCode();
+     private static final int HASH_TICK = "tick".hashCode();
+     private static final int HASH_PRE_RENDER_ERRORS = "preRenderErrors".hashCode();
+     private static final int HASH_RENDER = "render".hashCode();
+     private static final int HASH_DISPLAY = "display".hashCode();
+ 
+     public Profiler()
+     {
+         this.profilerLocalEnabled = this.profilerGlobalEnabled;
+     }
  
      /**
       * Clear profiling.
***************
*** 29,34 ****
--- 51,57 ----
          this.profilingMap.clear();
          this.profilingSection = "";
          this.sectionList.clear();
+         this.profilerLocalEnabled = this.profilerGlobalEnabled;
      }
  
      /**
***************
*** 36,51 ****
       */
      public void startSection(String name)
      {
!         if (this.profilingEnabled)
          {
!             if (!this.profilingSection.isEmpty())
              {
!                 this.profilingSection = this.profilingSection + ".";
              }
  
!             this.profilingSection = this.profilingSection + name;
!             this.sectionList.add(this.profilingSection);
!             this.timestampList.add(Long.valueOf(System.nanoTime()));
          }
      }
  
--- 59,121 ----
       */
      public void startSection(String name)
      {
!         if (Lagometer.isActive())
          {
!             int i = name.hashCode();
! 
!             if (i == HASH_SCHEDULED_EXECUTABLES && name.equals("scheduledExecutables"))
!             {
!                 Lagometer.timerScheduledExecutables.start();
!             }
!             else if (i == HASH_TICK && name.equals("tick") && Config.isMinecraftThread())
              {
!                 Lagometer.timerScheduledExecutables.end();
!                 Lagometer.timerTick.start();
              }
+             else if (i == HASH_PRE_RENDER_ERRORS && name.equals("preRenderErrors"))
+             {
+                 Lagometer.timerTick.end();
+             }
+         }
+ 
+         if (Config.isFastRender())
+         {
+             int j = name.hashCode();
  
!             if (j == HASH_RENDER && name.equals("render"))
!             {
!                 GlStateManager.clearEnabled = false;
!             }
!             else if (j == HASH_DISPLAY && name.equals("display"))
!             {
!                 GlStateManager.clearEnabled = true;
!             }
!         }
! 
!         if (this.profilerLocalEnabled)
!         {
!             if (this.profilingEnabled)
!             {
!                 if (!this.profilingSection.isEmpty())
!                 {
!                     this.profilingSection = this.profilingSection + ".";
!                 }
! 
!                 this.profilingSection = this.profilingSection + name;
!                 this.sectionList.add(this.profilingSection);
!                 this.timestampList.add(Long.valueOf(System.nanoTime()));
!             }
!         }
!     }
! 
!     public void func_194340_a(Supplier<String> p_194340_1_)
!     {
!         if (this.profilerLocalEnabled)
!         {
!             if (this.profilingEnabled)
!             {
!                 this.startSection(p_194340_1_.get());
!             }
          }
      }
  
***************
*** 54,81 ****
       */
      public void endSection()
      {
!         if (this.profilingEnabled)
          {
!             long i = System.nanoTime();
!             long j = ((Long)this.timestampList.remove(this.timestampList.size() - 1)).longValue();
!             this.sectionList.remove(this.sectionList.size() - 1);
!             long k = i - j;
! 
!             if (this.profilingMap.containsKey(this.profilingSection))
!             {
!                 this.profilingMap.put(this.profilingSection, Long.valueOf(((Long)this.profilingMap.get(this.profilingSection)).longValue() + k));
!             }
!             else
              {
!                 this.profilingMap.put(this.profilingSection, Long.valueOf(k));
!             }
  
!             if (k > 100000000L)
!             {
!                 LOGGER.warn("Something's taking too long! '{}' took aprox {} ms", this.profilingSection, Double.valueOf((double)k / 1000000.0D));
!             }
  
!             this.profilingSection = this.sectionList.isEmpty() ? "" : (String)this.sectionList.get(this.sectionList.size() - 1);
          }
      }
  
--- 124,154 ----
       */
      public void endSection()
      {
!         if (this.profilerLocalEnabled)
          {
!             if (this.profilingEnabled)
              {
!                 long i = System.nanoTime();
!                 long j = ((Long)this.timestampList.remove(this.timestampList.size() - 1)).longValue();
!                 this.sectionList.remove(this.sectionList.size() - 1);
!                 long k = i - j;
  
!                 if (this.profilingMap.containsKey(this.profilingSection))
!                 {
!                     this.profilingMap.put(this.profilingSection, Long.valueOf(((Long)this.profilingMap.get(this.profilingSection)).longValue() + k));
!                 }
!                 else
!                 {
!                     this.profilingMap.put(this.profilingSection, Long.valueOf(k));
!                 }
! 
!                 if (k > 100000000L)
!                 {
!                     LOGGER.warn("Something's taking too long! '{}' took aprox {} ms", this.profilingSection, Double.valueOf((double)k / 1000000.0D));
!                 }
  
!                 this.profilingSection = this.sectionList.isEmpty() ? "" : (String)this.sectionList.get(this.sectionList.size() - 1);
!             }
          }
      }
  
***************
*** 132,138 ****
  
              for (String s3 : this.profilingMap.keySet())
              {
!                 this.profilingMap.put(s3, Long.valueOf(((Long)this.profilingMap.get(s3)).longValue() * 999L / 1000L));
              }
  
              if ((float)k > f)
--- 205,211 ----
  
              for (String s3 : this.profilingMap.keySet())
              {
!                 this.profilingMap.put(s3, Long.valueOf(((Long)this.profilingMap.get(s3)).longValue() * 950L / 1000L));
              }
  
              if ((float)k > f)
***************
*** 151,158 ****
       */
      public void endStartSection(String name)
      {
!         this.endSection();
!         this.startSection(name);
      }
  
      public String getNameOfLastSection()
--- 224,243 ----
       */
      public void endStartSection(String name)
      {
!         if (this.profilerLocalEnabled)
!         {
!             this.endSection();
!             this.startSection(name);
!         }
!     }
! 
!     public void func_194339_b(Supplier<String> p_194339_1_)
!     {
!         if (this.profilerLocalEnabled)
!         {
!             this.endSection();
!             this.func_194340_a(p_194339_1_);
!         }
      }
  
      public String getNameOfLastSection()
***************
*** 160,165 ****
--- 245,258 ----
          return this.sectionList.isEmpty() ? "[UNKNOWN]" : (String)this.sectionList.get(this.sectionList.size() - 1);
      }
  
+     public void startSection(Class<?> p_startSection_1_)
+     {
+         if (this.profilingEnabled)
+         {
+             this.startSection(p_startSection_1_.getSimpleName());
+         }
+     }
+ 
      public static final class Result implements Comparable<Profiler.Result>
      {
          public double usePercentage;
diff -rc ./profiler/Snooper.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/profiler/Snooper.java
*** ./profiler/Snooper.java	2018-11-18 13:18:59.875887000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/profiler/Snooper.java	2017-10-20 21:01:29.737685000 -0700
***************
*** 98,104 ****
          this.addStatToSnooper("os_version", System.getProperty("os.version"));
          this.addStatToSnooper("os_architecture", System.getProperty("os.arch"));
          this.addStatToSnooper("java_version", System.getProperty("java.version"));
!         this.addClientStat("version", "1.12");
          this.playerStatsCollector.addServerTypeToSnooper(this);
      }
  
--- 98,104 ----
          this.addStatToSnooper("os_version", System.getProperty("os.version"));
          this.addStatToSnooper("os_architecture", System.getProperty("os.arch"));
          this.addStatToSnooper("java_version", System.getProperty("java.version"));
!         this.addClientStat("version", "1.12.2");
          this.playerStatsCollector.addServerTypeToSnooper(this);
      }
  
diff -rc ./realms/RealmsButton.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/realms/RealmsButton.java
*** ./realms/RealmsButton.java	2018-11-18 13:18:59.992820000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/realms/RealmsButton.java	2018-11-29 17:21:07.726938400 -0800
***************
*** 62,68 ****
  
      public void render(int p_render_1_, int p_render_2_, float p_render_3_)
      {
!         this.proxy.func_191745_a(Minecraft.getMinecraft(), p_render_1_, p_render_2_, p_render_3_);
      }
  
      public void clicked(int p_clicked_1_, int p_clicked_2_)
--- 62,68 ----
  
      public void render(int p_render_1_, int p_render_2_, float p_render_3_)
      {
!         this.proxy.draw(Minecraft.getMinecraft(), p_render_1_, p_render_2_, p_render_3_);
      }
  
      public void clicked(int p_clicked_1_, int p_clicked_2_)
diff -rc ./realms/RealmsConnect.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/realms/RealmsConnect.java
*** ./realms/RealmsConnect.java	2018-11-18 13:19:00.028800000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/realms/RealmsConnect.java	2018-11-21 10:36:38.130579700 -0800
***************
*** 11,16 ****
--- 11,17 ----
  import net.minecraft.util.text.TextComponentTranslation;
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
+ import org.golde.snowball.Snowball;
  
  public class RealmsConnect
  {
***************
*** 56,62 ****
                          return;
                      }
  
!                     RealmsConnect.this.connection.sendPacket(new C00Handshake(335, p_connect_1_, p_connect_2_, EnumConnectionState.LOGIN));
  
                      if (RealmsConnect.this.aborted)
                      {
--- 57,63 ----
                          return;
                      }
  
!                     RealmsConnect.this.connection.sendPacket(new C00Handshake(p_connect_1_, p_connect_2_, EnumConnectionState.LOGIN));
  
                      if (RealmsConnect.this.aborted)
                      {
***************
*** 64,69 ****
--- 65,71 ----
                      }
  
                      RealmsConnect.this.connection.sendPacket(new CPacketLoginStart(Minecraft.getMinecraft().getSession().getProfile()));
+                     Snowball.instance.startConnectingToServer();
                  }
                  catch (UnknownHostException unknownhostexception)
                  {
diff -rc ./realms/RealmsSharedConstants.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/realms/RealmsSharedConstants.java
*** ./realms/RealmsSharedConstants.java	2018-11-18 13:19:00.158724000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/realms/RealmsSharedConstants.java	2017-10-20 21:01:29.865159000 -0700
***************
*** 4,11 ****
  
  public class RealmsSharedConstants
  {
!     public static int NETWORK_PROTOCOL_VERSION = 335;
      public static int TICKS_PER_SECOND = 20;
!     public static String VERSION_STRING = "1.12";
      public static char[] ILLEGAL_FILE_CHARACTERS = ChatAllowedCharacters.ILLEGAL_FILE_CHARACTERS;
  }
--- 4,11 ----
  
  public class RealmsSharedConstants
  {
!     public static int NETWORK_PROTOCOL_VERSION = 340;
      public static int TICKS_PER_SECOND = 20;
!     public static String VERSION_STRING = "1.12.2";
      public static char[] ILLEGAL_FILE_CHARACTERS = ChatAllowedCharacters.ILLEGAL_FILE_CHARACTERS;
  }
diff -rc ./server/integrated/IntegratedServer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/server/integrated/IntegratedServer.java
*** ./server/integrated/IntegratedServer.java	2018-11-18 13:19:00.614465000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/server/integrated/IntegratedServer.java	2017-10-20 21:35:40.232456200 -0700
***************
*** 31,36 ****
--- 31,39 ----
  import net.minecraft.world.WorldType;
  import net.minecraft.world.storage.ISaveHandler;
  import net.minecraft.world.storage.WorldInfo;
+ import optifine.Reflector;
+ import optifine.WorldServerOF;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  
***************
*** 67,127 ****
      public void loadAllWorlds(String saveName, String worldNameIn, long seed, WorldType type, String generatorOptions)
      {
          this.convertMapIfNeeded(saveName);
-         this.worldServers = new WorldServer[3];
-         this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
          ISaveHandler isavehandler = this.getActiveAnvilConverter().getSaveLoader(saveName, true);
          this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
          WorldInfo worldinfo = isavehandler.loadWorldInfo();
  
!         if (worldinfo == null)
          {
!             worldinfo = new WorldInfo(this.theWorldSettings, worldNameIn);
          }
          else
          {
!             worldinfo.setWorldName(worldNameIn);
!         }
! 
!         for (int i = 0; i < this.worldServers.length; ++i)
!         {
!             int j = 0;
  
!             if (i == 1)
              {
!                 j = -1;
              }
! 
!             if (i == 2)
              {
!                 j = 1;
              }
  
!             if (i == 0)
              {
!                 if (this.isDemo())
                  {
!                     this.worldServers[i] = (WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, j, this.theProfiler)).init();
                  }
                  else
                  {
!                     this.worldServers[i] = (WorldServer)(new WorldServer(this, isavehandler, worldinfo, j, this.theProfiler)).init();
                  }
  
!                 this.worldServers[i].initialize(this.theWorldSettings);
!             }
!             else
!             {
!                 this.worldServers[i] = (WorldServer)(new WorldServerMulti(this, isavehandler, j, this.worldServers[0], this.theProfiler)).init();
              }
  
!             this.worldServers[i].addEventListener(new ServerWorldEventHandler(this, this.worldServers[i]));
!         }
! 
!         this.getPlayerList().setPlayerManager(this.worldServers);
  
!         if (this.worldServers[0].getWorldInfo().getDifficulty() == null)
!         {
!             this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
          }
  
          this.initialWorldChunkLoad();
--- 70,167 ----
      public void loadAllWorlds(String saveName, String worldNameIn, long seed, WorldType type, String generatorOptions)
      {
          this.convertMapIfNeeded(saveName);
          ISaveHandler isavehandler = this.getActiveAnvilConverter().getSaveLoader(saveName, true);
          this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
          WorldInfo worldinfo = isavehandler.loadWorldInfo();
  
!         if (Reflector.DimensionManager.exists())
          {
!             WorldServer worldserver = this.isDemo() ? (WorldServer)((WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, 0, this.theProfiler)).init()) : (WorldServer)(new WorldServerOF(this, isavehandler, worldinfo, 0, this.theProfiler)).init();
!             worldserver.initialize(this.theWorldSettings);
!             Integer[] ainteger = (Integer[])Reflector.call(Reflector.DimensionManager_getStaticDimensionIDs);
!             Integer[] ainteger1 = ainteger;
!             int i1 = ainteger.length;
! 
!             for (int j1 = 0; j1 < i1; ++j1)
!             {
!                 int k = ainteger1[j1].intValue();
!                 WorldServer worldserver1 = k == 0 ? worldserver : (WorldServer)((WorldServer)(new WorldServerMulti(this, isavehandler, k, worldserver, this.theProfiler)).init());
!                 worldserver1.addEventListener(new ServerWorldEventHandler(this, worldserver1));
! 
!                 if (!this.isSinglePlayer())
!                 {
!                     worldserver1.getWorldInfo().setGameType(this.getGameType());
!                 }
! 
!                 if (Reflector.EventBus.exists())
!                 {
!                     Reflector.postForgeBusEvent(Reflector.WorldEvent_Load_Constructor, worldserver1);
!                 }
!             }
! 
!             this.getPlayerList().setPlayerManager(new WorldServer[] {worldserver});
! 
!             if (worldserver.getWorldInfo().getDifficulty() == null)
!             {
!                 this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
!             }
          }
          else
          {
!             this.worldServers = new WorldServer[3];
!             this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
!             this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
  
!             if (worldinfo == null)
              {
!                 worldinfo = new WorldInfo(this.theWorldSettings, worldNameIn);
              }
!             else
              {
!                 worldinfo.setWorldName(worldNameIn);
              }
  
!             for (int l = 0; l < this.worldServers.length; ++l)
              {
!                 int i1 = 0;
! 
!                 if (l == 1)
!                 {
!                     i1 = -1;
!                 }
! 
!                 if (l == 2)
                  {
!                     i1 = 1;
!                 }
! 
!                 if (l == 0)
!                 {
!                     if (this.isDemo())
!                     {
!                         this.worldServers[l] = (WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, i1, this.theProfiler)).init();
!                     }
!                     else
!                     {
!                         this.worldServers[l] = (WorldServer)(new WorldServerOF(this, isavehandler, worldinfo, i1, this.theProfiler)).init();
!                     }
! 
!                     this.worldServers[l].initialize(this.theWorldSettings);
                  }
                  else
                  {
!                     this.worldServers[l] = (WorldServer)(new WorldServerMulti(this, isavehandler, i1, this.worldServers[0], this.theProfiler)).init();
                  }
  
!                 this.worldServers[l].addEventListener(new ServerWorldEventHandler(this, this.worldServers[l]));
              }
  
!             this.getPlayerList().setPlayerManager(this.worldServers);
  
!             if (this.worldServers[0].getWorldInfo().getDifficulty() == null)
!             {
!                 this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
!             }
          }
  
          this.initialWorldChunkLoad();
***************
*** 132,138 ****
       */
      public boolean startServer() throws IOException
      {
!         LOGGER.info("Starting integrated minecraft server version 1.12");
          this.setOnlineMode(true);
          this.setCanSpawnAnimals(true);
          this.setCanSpawnNPCs(true);
--- 172,178 ----
       */
      public boolean startServer() throws IOException
      {
!         LOGGER.info("Starting integrated minecraft server version 1.12.2");
          this.setOnlineMode(true);
          this.setCanSpawnAnimals(true);
          this.setCanSpawnNPCs(true);
***************
*** 140,147 ****
--- 180,211 ----
          this.setAllowFlight(true);
          LOGGER.info("Generating keypair");
          this.setKeyPair(CryptManager.generateKeyPair());
+ 
+         if (Reflector.FMLCommonHandler_handleServerAboutToStart.exists())
+         {
+             Object object = Reflector.call(Reflector.FMLCommonHandler_instance);
+ 
+             if (!Reflector.callBoolean(object, Reflector.FMLCommonHandler_handleServerAboutToStart, this))
+             {
+                 return false;
+             }
+         }
+ 
          this.loadAllWorlds(this.getFolderName(), this.getWorldName(), this.theWorldSettings.getSeed(), this.theWorldSettings.getTerrainType(), this.theWorldSettings.getGeneratorOptions());
          this.setMOTD(this.getServerOwner() + " - " + this.worldServers[0].getWorldInfo().getWorldName());
+ 
+         if (Reflector.FMLCommonHandler_handleServerStarting.exists())
+         {
+             Object object1 = Reflector.call(Reflector.FMLCommonHandler_instance);
+ 
+             if (Reflector.FMLCommonHandler_handleServerStarting.getReturnType() == Boolean.TYPE)
+             {
+                 return Reflector.callBoolean(object1, Reflector.FMLCommonHandler_handleServerStarting, this);
+             }
+ 
+             Reflector.callVoid(object1, Reflector.FMLCommonHandler_handleServerStarting, this);
+         }
+ 
          return true;
      }
  
***************
*** 221,227 ****
       */
      public EnumDifficulty getDifficulty()
      {
!         return this.mc.world.getWorldInfo().getDifficulty();
      }
  
      /**
--- 285,291 ----
       */
      public EnumDifficulty getDifficulty()
      {
!         return this.mc.world == null ? this.mc.gameSettings.difficulty : this.mc.world.getWorldInfo().getDifficulty();
      }
  
      /**
***************
*** 381,387 ****
              this.mc.player.setPermissionLevel(allowCheats ? 4 : 0);
              return i + "";
          }
!         catch (IOException var6)
          {
              return null;
          }
--- 445,451 ----
              this.mc.player.setPermissionLevel(allowCheats ? 4 : 0);
              return i + "";
          }
!         catch (IOException var61)
          {
              return null;
          }
***************
*** 406,424 ****
       */
      public void initiateShutdown()
      {
!         Futures.getUnchecked(this.addScheduledTask(new Runnable()
          {
!             public void run()
              {
!                 for (EntityPlayerMP entityplayermp : Lists.newArrayList(IntegratedServer.this.getPlayerList().getPlayerList()))
                  {
!                     if (!entityplayermp.getUniqueID().equals(IntegratedServer.this.mc.player.getUniqueID()))
                      {
!                         IntegratedServer.this.getPlayerList().playerLoggedOut(entityplayermp);
                      }
                  }
!             }
!         }));
          super.initiateShutdown();
  
          if (this.lanServerPing != null)
--- 470,492 ----
       */
      public void initiateShutdown()
      {
!         if (!Reflector.MinecraftForge.exists() || this.isServerRunning())
          {
!             Futures.getUnchecked(this.addScheduledTask(new Runnable()
              {
!                 public void run()
                  {
!                     for (EntityPlayerMP entityplayermp : Lists.newArrayList(IntegratedServer.this.getPlayerList().getPlayerList()))
                      {
!                         if (!entityplayermp.getUniqueID().equals(IntegratedServer.this.mc.player.getUniqueID()))
!                         {
!                             IntegratedServer.this.getPlayerList().playerLoggedOut(entityplayermp);
!                         }
                      }
                  }
!             }));
!         }
! 
          super.initiateShutdown();
  
          if (this.lanServerPing != null)
diff -rc ./server/management/PlayerInteractionManager.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/server/management/PlayerInteractionManager.java
*** ./server/management/PlayerInteractionManager.java	2018-11-18 13:19:00.727397000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/server/management/PlayerInteractionManager.java	2018-11-28 11:55:02.073404400 -0800
***************
*** 212,217 ****
--- 212,218 ----
                  this.destroyPos = pos;
                  int i = (int)(f * 10.0F);
                  this.theWorld.sendBlockBreakProgress(this.thisPlayerMP.getEntityId(), pos, i);
+                 //this.theWorld.notifyBlockUpdate(pos, iblockstate, iblockstate, 0); //https://bugs.mojang.com/secure/attachment/143424/fix_miningGhostBlocks.PNG
                  this.durabilityRemainingOnBlock = i;
              }
          }
***************
*** 357,368 ****
          }
          else
          {
!             int i = stack.func_190916_E();
              int j = stack.getMetadata();
              ActionResult<ItemStack> actionresult = stack.useItemRightClick(worldIn, player, hand);
              ItemStack itemstack = actionresult.getResult();
  
!             if (itemstack == stack && itemstack.func_190916_E() == i && itemstack.getMaxItemUseDuration() <= 0 && itemstack.getMetadata() == j)
              {
                  return actionresult.getType();
              }
--- 358,369 ----
          }
          else
          {
!             int i = stack.getCount();
              int j = stack.getMetadata();
              ActionResult<ItemStack> actionresult = stack.useItemRightClick(worldIn, player, hand);
              ItemStack itemstack = actionresult.getResult();
  
!             if (itemstack == stack && itemstack.getCount() == i && itemstack.getMaxItemUseDuration() <= 0 && itemstack.getMetadata() == j)
              {
                  return actionresult.getType();
              }
***************
*** 376,382 ****
  
                  if (this.isCreative())
                  {
!                     itemstack.func_190920_e(i);
  
                      if (itemstack.isItemStackDamageable())
                      {
--- 377,383 ----
  
                  if (this.isCreative())
                  {
!                     itemstack.setCount(i);
  
                      if (itemstack.isItemStackDamageable())
                      {
***************
*** 464,473 ****
                  if (this.isCreative())
                  {
                      int j = stack.getMetadata();
!                     int i = stack.func_190916_E();
                      EnumActionResult enumactionresult = stack.onItemUse(player, worldIn, pos, hand, facing, hitX, hitY, hitZ);
                      stack.setItemDamage(j);
!                     stack.func_190920_e(i);
                      return enumactionresult;
                  }
                  else
--- 465,474 ----
                  if (this.isCreative())
                  {
                      int j = stack.getMetadata();
!                     int i = stack.getCount();
                      EnumActionResult enumactionresult = stack.onItemUse(player, worldIn, pos, hand, facing, hitX, hitY, hitZ);
                      stack.setItemDamage(j);
!                     stack.setCount(i);
                      return enumactionresult;
                  }
                  else
diff -rc ./server/MinecraftServer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/server/MinecraftServer.java
*** ./server/MinecraftServer.java	2018-11-18 13:19:00.537506000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/server/MinecraftServer.java	2017-10-20 21:01:30.083156000 -0700
***************
*** 33,38 ****
--- 33,39 ----
  import java.util.concurrent.Callable;
  import java.util.concurrent.Executors;
  import java.util.concurrent.FutureTask;
+ import java.util.function.Supplier;
  import javax.annotation.Nullable;
  import javax.imageio.ImageIO;
  import net.minecraft.advancements.AdvancementManager;
***************
*** 528,534 ****
                  this.currentTime = getCurrentTimeMillis();
                  long i = 0L;
                  this.statusResponse.setServerDescription(new TextComponentString(this.motd));
!                 this.statusResponse.setVersion(new ServerStatusResponse.Version("1.12", 335));
                  this.applyServerIconToResponse(this.statusResponse);
  
                  while (this.serverRunning)
--- 529,535 ----
                  this.currentTime = getCurrentTimeMillis();
                  long i = 0L;
                  this.statusResponse.setServerDescription(new TextComponentString(this.motd));
!                 this.statusResponse.setVersion(new ServerStatusResponse.Version("1.12.2", 340));
                  this.applyServerIconToResponse(this.statusResponse);
  
                  while (this.serverRunning)
***************
*** 765,771 ****
              if (j == 0 || this.getAllowNether())
              {
                  WorldServer worldserver = this.worldServers[j];
!                 this.theProfiler.startSection(worldserver.getWorldInfo().getWorldName());
  
                  if (this.tickCounter % 20 == 0)
                  {
--- 766,775 ----
              if (j == 0 || this.getAllowNether())
              {
                  WorldServer worldserver = this.worldServers[j];
!                 this.theProfiler.func_194340_a(() ->
!                 {
!                     return worldserver.getWorldInfo().getWorldName();
!                 });
  
                  if (this.tickCounter % 20 == 0)
                  {
***************
*** 871,877 ****
       */
      public String getMinecraftVersion()
      {
!         return "1.12";
      }
  
      /**
--- 875,881 ----
       */
      public String getMinecraftVersion()
      {
!         return "1.12.2";
      }
  
      /**
***************
*** 1077,1100 ****
  
      public void setDifficultyForAllWorlds(EnumDifficulty difficulty)
      {
!         for (WorldServer worldserver : this.worldServers)
          {
!             if (worldserver != null)
              {
!                 if (worldserver.getWorldInfo().isHardcoreModeEnabled())
                  {
!                     worldserver.getWorldInfo().setDifficulty(EnumDifficulty.HARD);
!                     worldserver.setAllowedSpawnTypes(true, true);
                  }
                  else if (this.isSinglePlayer())
                  {
!                     worldserver.getWorldInfo().setDifficulty(difficulty);
!                     worldserver.setAllowedSpawnTypes(worldserver.getDifficulty() != EnumDifficulty.PEACEFUL, true);
                  }
                  else
                  {
!                     worldserver.getWorldInfo().setDifficulty(difficulty);
!                     worldserver.setAllowedSpawnTypes(this.allowSpawnMonsters(), this.canSpawnAnimals);
                  }
              }
          }
--- 1081,1104 ----
  
      public void setDifficultyForAllWorlds(EnumDifficulty difficulty)
      {
!         for (WorldServer worldserver1 : this.worldServers)
          {
!             if (worldserver1 != null)
              {
!                 if (worldserver1.getWorldInfo().isHardcoreModeEnabled())
                  {
!                     worldserver1.getWorldInfo().setDifficulty(EnumDifficulty.HARD);
!                     worldserver1.setAllowedSpawnTypes(true, true);
                  }
                  else if (this.isSinglePlayer())
                  {
!                     worldserver1.getWorldInfo().setDifficulty(difficulty);
!                     worldserver1.setAllowedSpawnTypes(worldserver1.getDifficulty() != EnumDifficulty.PEACEFUL, true);
                  }
                  else
                  {
!                     worldserver1.getWorldInfo().setDifficulty(difficulty);
!                     worldserver1.setAllowedSpawnTypes(this.allowSpawnMonsters(), this.canSpawnAnimals);
                  }
              }
          }
***************
*** 1163,1191 ****
          playerSnooper.addClientStat("gui_state", this.getGuiEnabled() ? "enabled" : "disabled");
          playerSnooper.addClientStat("run_time", Long.valueOf((getCurrentTimeMillis() - playerSnooper.getMinecraftStartTimeMillis()) / 60L * 1000L));
          playerSnooper.addClientStat("avg_tick_ms", Integer.valueOf((int)(MathHelper.average(this.tickTimeArray) * 1.0E-6D)));
!         int i = 0;
  
          if (this.worldServers != null)
          {
!             for (WorldServer worldserver : this.worldServers)
              {
!                 if (worldserver != null)
                  {
!                     WorldInfo worldinfo = worldserver.getWorldInfo();
!                     playerSnooper.addClientStat("world[" + i + "][dimension]", Integer.valueOf(worldserver.provider.getDimensionType().getId()));
!                     playerSnooper.addClientStat("world[" + i + "][mode]", worldinfo.getGameType());
!                     playerSnooper.addClientStat("world[" + i + "][difficulty]", worldserver.getDifficulty());
!                     playerSnooper.addClientStat("world[" + i + "][hardcore]", Boolean.valueOf(worldinfo.isHardcoreModeEnabled()));
!                     playerSnooper.addClientStat("world[" + i + "][generator_name]", worldinfo.getTerrainType().getWorldTypeName());
!                     playerSnooper.addClientStat("world[" + i + "][generator_version]", Integer.valueOf(worldinfo.getTerrainType().getGeneratorVersion()));
!                     playerSnooper.addClientStat("world[" + i + "][height]", Integer.valueOf(this.buildLimit));
!                     playerSnooper.addClientStat("world[" + i + "][chunks_loaded]", Integer.valueOf(worldserver.getChunkProvider().getLoadedChunkCount()));
!                     ++i;
                  }
              }
          }
  
!         playerSnooper.addClientStat("worlds", Integer.valueOf(i));
      }
  
      public void addServerTypeToSnooper(Snooper playerSnooper)
--- 1167,1195 ----
          playerSnooper.addClientStat("gui_state", this.getGuiEnabled() ? "enabled" : "disabled");
          playerSnooper.addClientStat("run_time", Long.valueOf((getCurrentTimeMillis() - playerSnooper.getMinecraftStartTimeMillis()) / 60L * 1000L));
          playerSnooper.addClientStat("avg_tick_ms", Integer.valueOf((int)(MathHelper.average(this.tickTimeArray) * 1.0E-6D)));
!         int l = 0;
  
          if (this.worldServers != null)
          {
!             for (WorldServer worldserver1 : this.worldServers)
              {
!                 if (worldserver1 != null)
                  {
!                     WorldInfo worldinfo = worldserver1.getWorldInfo();
!                     playerSnooper.addClientStat("world[" + l + "][dimension]", Integer.valueOf(worldserver1.provider.getDimensionType().getId()));
!                     playerSnooper.addClientStat("world[" + l + "][mode]", worldinfo.getGameType());
!                     playerSnooper.addClientStat("world[" + l + "][difficulty]", worldserver1.getDifficulty());
!                     playerSnooper.addClientStat("world[" + l + "][hardcore]", Boolean.valueOf(worldinfo.isHardcoreModeEnabled()));
!                     playerSnooper.addClientStat("world[" + l + "][generator_name]", worldinfo.getTerrainType().getWorldTypeName());
!                     playerSnooper.addClientStat("world[" + l + "][generator_version]", Integer.valueOf(worldinfo.getTerrainType().getGeneratorVersion()));
!                     playerSnooper.addClientStat("world[" + l + "][height]", Integer.valueOf(this.buildLimit));
!                     playerSnooper.addClientStat("world[" + l + "][chunks_loaded]", Integer.valueOf(worldserver1.getChunkProvider().getLoadedChunkCount()));
!                     ++l;
                  }
              }
          }
  
!         playerSnooper.addClientStat("worlds", Integer.valueOf(l));
      }
  
      public void addServerTypeToSnooper(Snooper playerSnooper)
***************
*** 1312,1320 ****
       */
      public void setGameType(GameType gameMode)
      {
!         for (WorldServer worldserver : this.worldServers)
          {
!             worldserver.getWorldInfo().setGameType(gameMode);
          }
      }
  
--- 1316,1324 ----
       */
      public void setGameType(GameType gameMode)
      {
!         for (WorldServer worldserver1 : this.worldServers)
          {
!             worldserver1.getWorldInfo().setGameType(gameMode);
          }
      }
  
***************
*** 1423,1433 ****
      @Nullable
      public Entity getEntityFromUuid(UUID uuid)
      {
!         for (WorldServer worldserver : this.worldServers)
          {
!             if (worldserver != null)
              {
!                 Entity entity = worldserver.getEntityFromUuid(uuid);
  
                  if (entity != null)
                  {
--- 1427,1437 ----
      @Nullable
      public Entity getEntityFromUuid(UUID uuid)
      {
!         for (WorldServer worldserver1 : this.worldServers)
          {
!             if (worldserver1 != null)
              {
!                 Entity entity = worldserver1.getEntityFromUuid(uuid);
  
                  if (entity != null)
                  {
diff -rc ./server/network/NetHandlerHandshakeTCP.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/server/network/NetHandlerHandshakeTCP.java
*** ./server/network/NetHandlerHandshakeTCP.java	2018-11-18 13:19:00.988247000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/server/network/NetHandlerHandshakeTCP.java	2018-11-18 19:30:36.504609500 -0800
***************
*** 32,46 ****
              case LOGIN:
                  this.networkManager.setConnectionState(EnumConnectionState.LOGIN);
  
!                 if (packetIn.getProtocolVersion() > 335)
                  {
!                     ITextComponent itextcomponent = new TextComponentTranslation("multiplayer.disconnect.outdated_server", new Object[] {"1.12"});
                      this.networkManager.sendPacket(new SPacketDisconnect(itextcomponent));
                      this.networkManager.closeChannel(itextcomponent);
                  }
!                 else if (packetIn.getProtocolVersion() < 335)
                  {
!                     ITextComponent itextcomponent1 = new TextComponentTranslation("multiplayer.disconnect.outdated_client", new Object[] {"1.12"});
                      this.networkManager.sendPacket(new SPacketDisconnect(itextcomponent1));
                      this.networkManager.closeChannel(itextcomponent1);
                  }
--- 32,46 ----
              case LOGIN:
                  this.networkManager.setConnectionState(EnumConnectionState.LOGIN);
  
!                 if (packetIn.getProtocolVersion() > 340)
                  {
!                     ITextComponent itextcomponent = new TextComponentTranslation("multiplayer.disconnect.outdated_server", new Object[] {"1.12.2"});
                      this.networkManager.sendPacket(new SPacketDisconnect(itextcomponent));
                      this.networkManager.closeChannel(itextcomponent);
                  }
!                 else if (packetIn.getProtocolVersion() < 340)
                  {
!                     ITextComponent itextcomponent1 = new TextComponentTranslation("multiplayer.disconnect.outdated_client", new Object[] {"1.12.2"});
                      this.networkManager.sendPacket(new SPacketDisconnect(itextcomponent1));
                      this.networkManager.closeChannel(itextcomponent1);
                  }
diff -rc ./stats/RecipeBook.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/stats/RecipeBook.java
*** ./stats/RecipeBook.java	2018-11-18 13:19:01.072199000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/stats/RecipeBook.java	2017-10-20 21:01:31.297011000 -0700
***************
*** 1,6 ****
--- 1,7 ----
  package net.minecraft.stats;
  
  import java.util.BitSet;
+ import javax.annotation.Nullable;
  import net.minecraft.item.crafting.CraftingManager;
  import net.minecraft.item.crafting.IRecipe;
  
***************
*** 27,33 ****
          }
      }
  
!     public boolean func_193830_f(IRecipe p_193830_1_)
      {
          return this.field_194077_a.get(func_194075_d(p_193830_1_));
      }
--- 28,34 ----
          }
      }
  
!     public boolean func_193830_f(@Nullable IRecipe p_193830_1_)
      {
          return this.field_194077_a.get(func_194075_d(p_193830_1_));
      }
***************
*** 39,45 ****
          this.field_194078_b.clear(i);
      }
  
!     protected static int func_194075_d(IRecipe p_194075_0_)
      {
          return CraftingManager.field_193380_a.getIDForObject(p_194075_0_);
      }
--- 40,46 ----
          this.field_194078_b.clear(i);
      }
  
!     protected static int func_194075_d(@Nullable IRecipe p_194075_0_)
      {
          return CraftingManager.field_193380_a.getIDForObject(p_194075_0_);
      }
diff -rc ./tileentity/TileEntityBeacon.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/tileentity/TileEntityBeacon.java
*** ./tileentity/TileEntityBeacon.java	2018-11-18 13:19:01.324059000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/tileentity/TileEntityBeacon.java	2018-11-18 13:37:39.687222300 -0800
***************
*** 328,334 ****
      {
          if (index == 0 && !this.payment.func_190926_b())
          {
!             if (count >= this.payment.func_190916_E())
              {
                  ItemStack itemstack = this.payment;
                  this.payment = ItemStack.field_190927_a;
--- 328,334 ----
      {
          if (index == 0 && !this.payment.func_190926_b())
          {
!             if (count >= this.payment.getCount())
              {
                  ItemStack itemstack = this.payment;
                  this.payment = ItemStack.field_190927_a;
diff -rc ./tileentity/TileEntityBrewingStand.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/tileentity/TileEntityBrewingStand.java
*** ./tileentity/TileEntityBrewingStand.java	2018-11-18 13:19:01.363032000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/tileentity/TileEntityBrewingStand.java	2018-11-18 13:37:02.334803400 -0800
***************
*** 98,104 ****
          if (this.fuel <= 0 && itemstack.getItem() == Items.BLAZE_POWDER)
          {
              this.fuel = 20;
!             itemstack.func_190918_g(1);
              this.markDirty();
          }
  
--- 98,104 ----
          if (this.fuel <= 0 && itemstack.getItem() == Items.BLAZE_POWDER)
          {
              this.fuel = 20;
!             itemstack.shrink(1);
              this.markDirty();
          }
  
***************
*** 215,221 ****
              this.brewingItemStacks.set(i, PotionHelper.doReaction(itemstack, this.brewingItemStacks.get(i)));
          }
  
!         itemstack.func_190918_g(1);
          BlockPos blockpos = this.getPos();
  
          if (itemstack.getItem().hasContainerItem())
--- 215,221 ----
              this.brewingItemStacks.set(i, PotionHelper.doReaction(itemstack, this.brewingItemStacks.get(i)));
          }
  
!         itemstack.shrink(1);
          BlockPos blockpos = this.getPos();
  
          if (itemstack.getItem().hasContainerItem())
diff -rc ./tileentity/TileEntityFurnace.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/tileentity/TileEntityFurnace.java
*** ./tileentity/TileEntityFurnace.java	2018-11-18 13:19:01.563915000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/tileentity/TileEntityFurnace.java	2018-11-18 13:37:39.719466400 -0800
***************
*** 102,110 ****
          boolean flag = !stack.func_190926_b() && stack.isItemEqual(itemstack) && ItemStack.areItemStackTagsEqual(stack, itemstack);
          this.furnaceItemStacks.set(index, stack);
  
!         if (stack.func_190916_E() > this.getInventoryStackLimit())
          {
!             stack.func_190920_e(this.getInventoryStackLimit());
          }
  
          if (index == 0 && !flag)
--- 102,110 ----
          boolean flag = !stack.func_190926_b() && stack.isItemEqual(itemstack) && ItemStack.areItemStackTagsEqual(stack, itemstack);
          this.furnaceItemStacks.set(index, stack);
  
!         if (stack.getCount() > this.getInventoryStackLimit())
          {
!             stack.setCount(this.getInventoryStackLimit());
          }
  
          if (index == 0 && !flag)
***************
*** 225,231 ****
                          if (!itemstack.func_190926_b())
                          {
                              Item item = itemstack.getItem();
!                             itemstack.func_190918_g(1);
  
                              if (itemstack.func_190926_b())
                              {
--- 225,231 ----
                          if (!itemstack.func_190926_b())
                          {
                              Item item = itemstack.getItem();
!                             itemstack.shrink(1);
  
                              if (itemstack.func_190926_b())
                              {
***************
*** 305,317 ****
                  {
                      return false;
                  }
!                 else if (itemstack1.func_190916_E() < this.getInventoryStackLimit() && itemstack1.func_190916_E() < itemstack1.getMaxStackSize())
                  {
                      return true;
                  }
                  else
                  {
!                     return itemstack1.func_190916_E() < itemstack.getMaxStackSize();
                  }
              }
          }
--- 305,317 ----
                  {
                      return false;
                  }
!                 else if (itemstack1.getCount() < this.getInventoryStackLimit() && itemstack1.getCount() < itemstack1.getMaxStackSize())
                  {
                      return true;
                  }
                  else
                  {
!                     return itemstack1.getCount() < itemstack.getMaxStackSize();
                  }
              }
          }
***************
*** 334,340 ****
              }
              else if (itemstack2.getItem() == itemstack1.getItem())
              {
!                 itemstack2.func_190917_f(1);
              }
  
              if (itemstack.getItem() == Item.getItemFromBlock(Blocks.SPONGE) && itemstack.getMetadata() == 1 && !((ItemStack)this.furnaceItemStacks.get(1)).func_190926_b() && ((ItemStack)this.furnaceItemStacks.get(1)).getItem() == Items.BUCKET)
--- 334,340 ----
              }
              else if (itemstack2.getItem() == itemstack1.getItem())
              {
!                 itemstack2.grow(1);
              }
  
              if (itemstack.getItem() == Item.getItemFromBlock(Blocks.SPONGE) && itemstack.getMetadata() == 1 && !((ItemStack)this.furnaceItemStacks.get(1)).func_190926_b() && ((ItemStack)this.furnaceItemStacks.get(1)).getItem() == Items.BUCKET)
***************
*** 342,348 ****
                  this.furnaceItemStacks.set(1, new ItemStack(Items.WATER_BUCKET));
              }
  
!             itemstack.func_190918_g(1);
          }
      }
  
--- 342,348 ----
                  this.furnaceItemStacks.set(1, new ItemStack(Items.WATER_BUCKET));
              }
  
!             itemstack.shrink(1);
          }
      }
  
diff -rc ./tileentity/TileEntityHopper.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/tileentity/TileEntityHopper.java
*** ./tileentity/TileEntityHopper.java	2018-11-18 13:19:01.589900000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/tileentity/TileEntityHopper.java	2018-11-18 13:37:39.743452600 -0800
***************
*** 102,110 ****
          this.fillWithLoot((EntityPlayer)null);
          this.func_190576_q().set(index, stack);
  
!         if (stack.func_190916_E() > this.getInventoryStackLimit())
          {
!             stack.func_190920_e(this.getInventoryStackLimit());
          }
      }
  
--- 102,110 ----
          this.fillWithLoot((EntityPlayer)null);
          this.func_190576_q().set(index, stack);
  
!         if (stack.getCount() > this.getInventoryStackLimit())
          {
!             stack.setCount(this.getInventoryStackLimit());
          }
      }
  
***************
*** 198,204 ****
      {
          for (ItemStack itemstack : this.inventory)
          {
!             if (itemstack.func_190926_b() || itemstack.func_190916_E() != itemstack.getMaxStackSize())
              {
                  return false;
              }
--- 198,204 ----
      {
          for (ItemStack itemstack : this.inventory)
          {
!             if (itemstack.func_190926_b() || itemstack.getCount() != itemstack.getMaxStackSize())
              {
                  return false;
              }
***************
*** 261,267 ****
              {
                  ItemStack itemstack1 = isidedinventory.getStackInSlot(k);
  
!                 if (itemstack1.func_190926_b() || itemstack1.func_190916_E() != itemstack1.getMaxStackSize())
                  {
                      return false;
                  }
--- 261,267 ----
              {
                  ItemStack itemstack1 = isidedinventory.getStackInSlot(k);
  
!                 if (itemstack1.func_190926_b() || itemstack1.getCount() != itemstack1.getMaxStackSize())
                  {
                      return false;
                  }
***************
*** 275,281 ****
              {
                  ItemStack itemstack = inventoryIn.getStackInSlot(j);
  
!                 if (itemstack.func_190926_b() || itemstack.func_190916_E() != itemstack.getMaxStackSize())
                  {
                      return false;
                  }
--- 275,281 ----
              {
                  ItemStack itemstack = inventoryIn.getStackInSlot(j);
  
!                 if (itemstack.func_190926_b() || itemstack.getCount() != itemstack.getMaxStackSize())
                  {
                      return false;
                  }
***************
*** 499,508 ****
              }
              else if (canCombine(itemstack, index))
              {
!                 int i = index.getMaxStackSize() - itemstack.func_190916_E();
!                 int j = Math.min(index.func_190916_E(), i);
!                 index.func_190918_g(j);
!                 itemstack.func_190917_f(j);
                  flag = j > 0;
              }
  
--- 499,508 ----
              }
              else if (canCombine(itemstack, index))
              {
!                 int i = index.getMaxStackSize() - itemstack.getCount();
!                 int j = Math.min(index.getCount(), i);
!                 index.shrink(j);
!                 itemstack.grow(j);
                  flag = j > 0;
              }
  
***************
*** 609,615 ****
          {
              return false;
          }
!         else if (stack1.func_190916_E() > stack1.getMaxStackSize())
          {
              return false;
          }
--- 609,615 ----
          {
              return false;
          }
!         else if (stack1.getCount() > stack1.getMaxStackSize())
          {
              return false;
          }
diff -rc ./tileentity/TileEntityLockableLoot.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/tileentity/TileEntityLockableLoot.java
*** ./tileentity/TileEntityLockableLoot.java	2018-11-18 13:19:01.626879000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/tileentity/TileEntityLockableLoot.java	2018-11-18 13:37:39.755450500 -0800
***************
*** 146,154 ****
          this.fillWithLoot((EntityPlayer)null);
          this.func_190576_q().set(index, stack);
  
!         if (stack.func_190916_E() > this.getInventoryStackLimit())
          {
!             stack.func_190920_e(this.getInventoryStackLimit());
          }
  
          this.markDirty();
--- 146,154 ----
          this.fillWithLoot((EntityPlayer)null);
          this.func_190576_q().set(index, stack);
  
!         if (stack.getCount() > this.getInventoryStackLimit())
          {
!             stack.setCount(this.getInventoryStackLimit());
          }
  
          this.markDirty();
diff -rc ./util/datafix/DataFixer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/datafix/DataFixer.java
*** ./util/datafix/DataFixer.java	2018-11-18 13:19:02.852710000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/datafix/DataFixer.java	2017-10-20 21:01:32.279510000 -0700
***************
*** 24,30 ****
      public NBTTagCompound process(IFixType type, NBTTagCompound compound)
      {
          int i = compound.hasKey("DataVersion", 99) ? compound.getInteger("DataVersion") : -1;
!         return i >= 1139 ? compound : this.process(type, compound, i);
      }
  
      public NBTTagCompound process(IFixType type, NBTTagCompound compound, int versionIn)
--- 24,30 ----
      public NBTTagCompound process(IFixType type, NBTTagCompound compound)
      {
          int i = compound.hasKey("DataVersion", 99) ? compound.getInteger("DataVersion") : -1;
!         return i >= 1343 ? compound : this.process(type, compound, i);
      }
  
      public NBTTagCompound process(IFixType type, NBTTagCompound compound, int versionIn)
diff -rc ./util/datafix/DataFixesManager.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/datafix/DataFixesManager.java
*** ./util/datafix/DataFixesManager.java	2018-11-18 13:19:02.869699000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/datafix/DataFixesManager.java	2017-10-20 21:01:32.287009000 -0700
***************
*** 164,170 ****
  
      public static DataFixer createFixer()
      {
!         DataFixer datafixer = new DataFixer(1139);
          WorldInfo.registerFixes(datafixer);
          EntityPlayerMP.func_191522_a(datafixer);
          EntityPlayer.registerFixesPlayer(datafixer);
--- 164,170 ----
  
      public static DataFixer createFixer()
      {
!         DataFixer datafixer = new DataFixer(1343);
          WorldInfo.registerFixes(datafixer);
          EntityPlayerMP.func_191522_a(datafixer);
          EntityPlayer.registerFixesPlayer(datafixer);
diff -rc ./util/EnumFacing.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/EnumFacing.java
*** ./util/EnumFacing.java	2018-11-18 13:19:02.019653000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/EnumFacing.java	2017-10-20 21:01:31.929536000 -0700
***************
*** 38,44 ****
      private final Vec3i directionVec;
  
      /** All facings in D-U-N-S-W-E order */
!     private static final EnumFacing[] VALUES = new EnumFacing[6];
  
      /** All Facings with horizontal axis in order S-W-N-E */
      private static final EnumFacing[] HORIZONTALS = new EnumFacing[4];
--- 38,44 ----
      private final Vec3i directionVec;
  
      /** All facings in D-U-N-S-W-E order */
!     public static final EnumFacing[] VALUES = new EnumFacing[6];
  
      /** All Facings with horizontal axis in order S-W-N-E */
      private static final EnumFacing[] HORIZONTALS = new EnumFacing[4];
***************
*** 84,90 ****
       */
      public EnumFacing getOpposite()
      {
!         return getFront(this.opposite);
      }
  
      /**
--- 84,90 ----
       */
      public EnumFacing getOpposite()
      {
!         return VALUES[this.opposite];
      }
  
      /**
diff -rc ./util/IntegerCache.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/IntegerCache.java
*** ./util/IntegerCache.java	2018-11-18 13:19:02.132589000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/IntegerCache.java	2017-10-20 21:01:32.012511000 -0700
***************
*** 9,15 ****
       */
      public static Integer getInteger(int value)
      {
!         return value > 0 && value < CACHE.length ? CACHE[value] : value;
      }
  
      static
--- 9,15 ----
       */
      public static Integer getInteger(int value)
      {
!         return value > 0 && value < CACHE.length ? CACHE[value].intValue() : value;
      }
  
      static
diff -rc ./util/math/ChunkPos.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/math/ChunkPos.java
*** ./util/math/ChunkPos.java	2018-11-18 13:19:03.629752000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/math/ChunkPos.java	2017-10-20 21:01:32.601862000 -0700
***************
*** 9,14 ****
--- 9,15 ----
  
      /** The Z position of this Chunk Coordinate Pair */
      public final int chunkZPos;
+     private int cachedHashCode = 0;
  
      public ChunkPos(int x, int z)
      {
***************
*** 32,40 ****
  
      public int hashCode()
      {
!         int i = 1664525 * this.chunkXPos + 1013904223;
!         int j = 1664525 * (this.chunkZPos ^ -559038737) + 1013904223;
!         return i ^ j;
      }
  
      public boolean equals(Object p_equals_1_)
--- 33,49 ----
  
      public int hashCode()
      {
!         if (this.cachedHashCode != 0)
!         {
!             return this.cachedHashCode;
!         }
!         else
!         {
!             int i = 1664525 * this.chunkXPos + 1013904223;
!             int j = 1664525 * (this.chunkZPos ^ -559038737) + 1013904223;
!             this.cachedHashCode = i ^ j;
!             return this.cachedHashCode;
!         }
      }
  
      public boolean equals(Object p_equals_1_)
diff -rc ./util/math/MathHelper.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/math/MathHelper.java
*** ./util/math/MathHelper.java	2018-11-18 13:19:03.640745000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/math/MathHelper.java	2017-10-20 21:01:32.606868000 -0700
***************
*** 6,11 ****
--- 6,24 ----
  public class MathHelper
  {
      public static final float SQRT_2 = sqrt(2.0F);
+     private static final int SIN_BITS = 12;
+     private static final int SIN_MASK = 4095;
+     private static final int SIN_COUNT = 4096;
+     public static final float PI = (float)Math.PI;
+     public static final float PI2 = ((float)Math.PI * 2F);
+     public static final float PId2 = ((float)Math.PI / 2F);
+     private static final float radFull = ((float)Math.PI * 2F);
+     private static final float degFull = 360.0F;
+     private static final float radToIndex = 651.8986F;
+     private static final float degToIndex = 11.377778F;
+     public static final float deg2Rad = 0.017453292F;
+     private static final float[] SIN_TABLE_FAST = new float[4096];
+     public static boolean fastMath = false;
  
      /**
       * A table of sin values computed from 0 (inclusive) to 2*pi (exclusive), with steps of 2*PI / 65536.
***************
*** 30,36 ****
       */
      public static float sin(float value)
      {
!         return SIN_TABLE[(int)(value * 10430.378F) & 65535];
      }
  
      /**
--- 43,49 ----
       */
      public static float sin(float value)
      {
!         return fastMath ? SIN_TABLE_FAST[(int)(value * 651.8986F) & 4095] : SIN_TABLE[(int)(value * 10430.378F) & 65535];
      }
  
      /**
***************
*** 38,44 ****
       */
      public static float cos(float value)
      {
!         return SIN_TABLE[(int)(value * 10430.378F + 16384.0F) & 65535];
      }
  
      public static float sqrt(float value)
--- 51,57 ----
       */
      public static float cos(float value)
      {
!         return fastMath ? SIN_TABLE_FAST[(int)((value + ((float)Math.PI / 2F)) * 651.8986F) & 4095] : SIN_TABLE[(int)(value * 10430.378F + 16384.0F) & 65535];
      }
  
      public static float sqrt(float value)
***************
*** 431,439 ****
       */
      public static int rgb(int rIn, int gIn, int bIn)
      {
!         int lvt_3_1_ = (rIn << 8) + gIn;
!         lvt_3_1_ = (lvt_3_1_ << 8) + bIn;
!         return lvt_3_1_;
      }
  
      public static int multiplyColor(int p_180188_0_, int p_180188_1_)
--- 444,452 ----
       */
      public static int rgb(int rIn, int gIn, int bIn)
      {
!         int i = (rIn << 8) + gIn;
!         i = (i << 8) + bIn;
!         return i;
      }
  
      public static int multiplyColor(int p_180188_0_, int p_180188_1_)
***************
*** 640,656 ****
              SIN_TABLE[i] = (float)Math.sin((double)i * Math.PI * 2.0D / 65536.0D);
          }
  
          MULTIPLY_DE_BRUIJN_BIT_POSITION = new int[] {0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
          FRAC_BIAS = Double.longBitsToDouble(4805340802404319232L);
          ASINE_TAB = new double[257];
          COS_TAB = new double[257];
  
!         for (int j = 0; j < 257; ++j)
          {
!             double d0 = (double)j / 256.0D;
              double d1 = Math.asin(d0);
!             COS_TAB[j] = Math.cos(d1);
!             ASINE_TAB[j] = d1;
          }
      }
  }
--- 653,679 ----
              SIN_TABLE[i] = (float)Math.sin((double)i * Math.PI * 2.0D / 65536.0D);
          }
  
+         for (int j = 0; j < 4096; ++j)
+         {
+             SIN_TABLE_FAST[j] = (float)Math.sin((double)(((float)j + 0.5F) / 4096.0F * ((float)Math.PI * 2F)));
+         }
+ 
+         for (int k = 0; k < 360; k += 90)
+         {
+             SIN_TABLE_FAST[(int)((float)k * 11.377778F) & 4095] = (float)Math.sin((double)((float)k * 0.017453292F));
+         }
+ 
          MULTIPLY_DE_BRUIJN_BIT_POSITION = new int[] {0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
          FRAC_BIAS = Double.longBitsToDouble(4805340802404319232L);
          ASINE_TAB = new double[257];
          COS_TAB = new double[257];
  
!         for (int l = 0; l < 257; ++l)
          {
!             double d0 = (double)l / 256.0D;
              double d1 = Math.asin(d0);
!             COS_TAB[l] = Math.cos(d1);
!             ASINE_TAB[l] = d1;
          }
      }
  }
diff -rc ./util/ScreenShotHelper.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/ScreenShotHelper.java
*** ./util/ScreenShotHelper.java	2018-11-18 13:19:02.634834000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/ScreenShotHelper.java	2017-10-20 21:35:40.830452800 -0700
***************
*** 8,13 ****
--- 8,15 ----
  import java.util.Date;
  import javax.annotation.Nullable;
  import javax.imageio.ImageIO;
+ import net.minecraft.client.Minecraft;
+ import net.minecraft.client.gui.ScaledResolution;
  import net.minecraft.client.renderer.GlStateManager;
  import net.minecraft.client.renderer.OpenGlHelper;
  import net.minecraft.client.renderer.texture.TextureUtil;
***************
*** 16,21 ****
--- 18,26 ----
  import net.minecraft.util.text.TextComponentString;
  import net.minecraft.util.text.TextComponentTranslation;
  import net.minecraft.util.text.event.ClickEvent;
+ import optifine.Config;
+ import optifine.Reflector;
+ 
  import org.apache.logging.log4j.LogManager;
  import org.apache.logging.log4j.Logger;
  import org.lwjgl.BufferUtils;
***************
*** 52,58 ****
--- 57,89 ----
          {
              File file1 = new File(gameDirectory, "screenshots");
              file1.mkdir();
+             Minecraft minecraft = Minecraft.getMinecraft();
+             int i = Config.getGameSettings().guiScale;
+             ScaledResolution scaledresolution = new ScaledResolution(minecraft);
+             int j = scaledresolution.getScaleFactor();
+             int k = Config.getScreenshotSize();
+             boolean flag = OpenGlHelper.isFramebufferEnabled() && k > 1;
+ 
+             if (flag)
+             {
+                 Config.getGameSettings().guiScale = j * k;
+                 resize(width * k, height * k);
+                 GlStateManager.pushMatrix();
+                 GlStateManager.clear(16640);
+                 minecraft.getFramebuffer().bindFramebuffer(true);
+                 minecraft.entityRenderer.updateCameraAndRender(minecraft.getRenderPartialTicks(), System.nanoTime());
+             }
+ 
              BufferedImage bufferedimage = createScreenshot(width, height, buffer);
+ 
+             if (flag)
+             {
+                 minecraft.getFramebuffer().unbindFramebuffer();
+                 GlStateManager.popMatrix();
+                 Config.getGameSettings().guiScale = i;
+                 resize(width, height);
+             }
+ 
              File file2;
  
              if (screenshotName == null)
***************
*** 64,79 ****
                  file2 = new File(file1, screenshotName);
              }
  
              ImageIO.write(bufferedimage, "png", file2);
              ITextComponent itextcomponent = new TextComponentString(file2.getName());
              itextcomponent.getStyle().setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, file2.getAbsolutePath()));
              itextcomponent.getStyle().setUnderlined(Boolean.valueOf(true));
              return new TextComponentTranslation("screenshot.success", new Object[] {itextcomponent});
          }
!         catch (Exception exception)
          {
!             LOGGER.warn("Couldn't save screenshot", (Throwable)exception);
!             return new TextComponentTranslation("screenshot.failure", new Object[] {exception.getMessage()});
          }
      }
  
--- 95,136 ----
                  file2 = new File(file1, screenshotName);
              }
  
+             file2 = file2.getCanonicalFile();
+             Object object = null;
+ 
+             if (Reflector.ForgeHooksClient_onScreenshot.exists())
+             {
+                 object = Reflector.call(Reflector.ForgeHooksClient_onScreenshot, bufferedimage, file2);
+ 
+                 if (Reflector.callBoolean(object, Reflector.Event_isCanceled))
+                 {
+                     return (ITextComponent)Reflector.call(object, Reflector.ScreenshotEvent_getCancelMessage);
+                 }
+ 
+                 file2 = (File)Reflector.call(object, Reflector.ScreenshotEvent_getScreenshotFile);
+             }
+ 
              ImageIO.write(bufferedimage, "png", file2);
              ITextComponent itextcomponent = new TextComponentString(file2.getName());
              itextcomponent.getStyle().setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, file2.getAbsolutePath()));
              itextcomponent.getStyle().setUnderlined(Boolean.valueOf(true));
+ 
+             if (object != null)
+             {
+                 ITextComponent itextcomponent1 = (ITextComponent)Reflector.call(object, Reflector.ScreenshotEvent_getResultMessage);
+ 
+                 if (itextcomponent1 != null)
+                 {
+                     return itextcomponent1;
+                 }
+             }
+ 
              return new TextComponentTranslation("screenshot.success", new Object[] {itextcomponent});
          }
!         catch (Exception exception1)
          {
!             LOGGER.warn("Couldn't save screenshot", (Throwable)exception1);
!             return new TextComponentTranslation("screenshot.failure", new Object[] {exception1.getMessage()});
          }
      }
  
***************
*** 137,140 ****
--- 194,223 ----
              ++i;
          }
      }
+ 
+     private static void resize(int p_resize_0_, int p_resize_1_)
+     {
+         Minecraft minecraft = Minecraft.getMinecraft();
+         minecraft.displayWidth = Math.max(1, p_resize_0_);
+         minecraft.displayHeight = Math.max(1, p_resize_1_);
+ 
+         if (minecraft.currentScreen != null)
+         {
+             ScaledResolution scaledresolution = new ScaledResolution(minecraft);
+             minecraft.currentScreen.onResize(minecraft, scaledresolution.getScaledWidth(), scaledresolution.getScaledHeight());
+         }
+ 
+         updateFramebufferSize();
+     }
+ 
+     private static void updateFramebufferSize()
+     {
+         Minecraft minecraft = Minecraft.getMinecraft();
+         minecraft.getFramebuffer().createBindFramebuffer(minecraft.displayWidth, minecraft.displayHeight);
+ 
+         if (minecraft.entityRenderer != null)
+         {
+             minecraft.entityRenderer.updateShaderGroupSize(minecraft.displayWidth, minecraft.displayHeight);
+         }
+     }
  }
Only in C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util: ServerRecipeBookHelper.java
diff -rc ./util/text/translation/I18n.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/text/translation/I18n.java
*** ./util/text/translation/I18n.java	2018-11-18 13:19:04.114473000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/text/translation/I18n.java	2018-11-18 13:33:52.259174400 -0800
***************
*** 3,15 ****
  @Deprecated
  public class I18n
  {
!     private static final LanguageMap localizedName = LanguageMap.getInstance();
  
      /**
       * A StringTranslate instance using the hardcoded default locale (en_US).  Used as a fallback in case the shared
       * StringTranslate singleton instance fails to translate a key.
       */
!     private static final LanguageMap fallbackTranslator = new LanguageMap();
  
      @Deprecated
  
--- 3,15 ----
  @Deprecated
  public class I18n
  {
!     public static final LanguageMap localizedName = LanguageMap.getInstance();
  
      /**
       * A StringTranslate instance using the hardcoded default locale (en_US).  Used as a fallback in case the shared
       * StringTranslate singleton instance fails to translate a key.
       */
!     public static final LanguageMap fallbackTranslator = new LanguageMap();
  
      @Deprecated
  
diff -rc ./util/text/translation/LanguageMap.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/text/translation/LanguageMap.java
*** ./util/text/translation/LanguageMap.java	2018-11-18 13:19:04.134463000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/util/text/translation/LanguageMap.java	2018-11-18 13:33:57.278312200 -0800
***************
*** 25,31 ****
  
      /** Is the private singleton instance of StringTranslate. */
      private static final LanguageMap instance = new LanguageMap();
!     private final Map<String, String> languageList = Maps.<String, String>newHashMap();
  
      /**
       * The time, in milliseconds since epoch, that this instance was last updated
--- 25,31 ----
  
      /** Is the private singleton instance of StringTranslate. */
      private static final LanguageMap instance = new LanguageMap();
!     public final Map<String, String> languageList = Maps.<String, String>newHashMap();
  
      /**
       * The time, in milliseconds since epoch, that this instance was last updated
diff -rc ./village/MerchantRecipeList.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/village/MerchantRecipeList.java
*** ./village/MerchantRecipeList.java	2018-11-18 13:19:04.172439000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/village/MerchantRecipeList.java	2018-11-18 13:37:38.999179400 -0800
***************
*** 30,36 ****
          if (p_77203_3_ > 0 && p_77203_3_ < this.size())
          {
              MerchantRecipe merchantrecipe1 = (MerchantRecipe)this.get(p_77203_3_);
!             return !this.areItemStacksExactlyEqual(p_77203_1_, merchantrecipe1.getItemToBuy()) || (!p_77203_2_.func_190926_b() || merchantrecipe1.hasSecondItemToBuy()) && (!merchantrecipe1.hasSecondItemToBuy() || !this.areItemStacksExactlyEqual(p_77203_2_, merchantrecipe1.getSecondItemToBuy())) || p_77203_1_.func_190916_E() < merchantrecipe1.getItemToBuy().func_190916_E() || merchantrecipe1.hasSecondItemToBuy() && p_77203_2_.func_190916_E() < merchantrecipe1.getSecondItemToBuy().func_190916_E() ? null : merchantrecipe1;
          }
          else
          {
--- 30,36 ----
          if (p_77203_3_ > 0 && p_77203_3_ < this.size())
          {
              MerchantRecipe merchantrecipe1 = (MerchantRecipe)this.get(p_77203_3_);
!             return !this.areItemStacksExactlyEqual(p_77203_1_, merchantrecipe1.getItemToBuy()) || (!p_77203_2_.func_190926_b() || merchantrecipe1.hasSecondItemToBuy()) && (!merchantrecipe1.hasSecondItemToBuy() || !this.areItemStacksExactlyEqual(p_77203_2_, merchantrecipe1.getSecondItemToBuy())) || p_77203_1_.getCount() < merchantrecipe1.getItemToBuy().getCount() || merchantrecipe1.hasSecondItemToBuy() && p_77203_2_.getCount() < merchantrecipe1.getSecondItemToBuy().getCount() ? null : merchantrecipe1;
          }
          else
          {
***************
*** 38,44 ****
              {
                  MerchantRecipe merchantrecipe = (MerchantRecipe)this.get(i);
  
!                 if (this.areItemStacksExactlyEqual(p_77203_1_, merchantrecipe.getItemToBuy()) && p_77203_1_.func_190916_E() >= merchantrecipe.getItemToBuy().func_190916_E() && (!merchantrecipe.hasSecondItemToBuy() && p_77203_2_.func_190926_b() || merchantrecipe.hasSecondItemToBuy() && this.areItemStacksExactlyEqual(p_77203_2_, merchantrecipe.getSecondItemToBuy()) && p_77203_2_.func_190916_E() >= merchantrecipe.getSecondItemToBuy().func_190916_E()))
                  {
                      return merchantrecipe;
                  }
--- 38,44 ----
              {
                  MerchantRecipe merchantrecipe = (MerchantRecipe)this.get(i);
  
!                 if (this.areItemStacksExactlyEqual(p_77203_1_, merchantrecipe.getItemToBuy()) && p_77203_1_.getCount() >= merchantrecipe.getItemToBuy().getCount() && (!merchantrecipe.hasSecondItemToBuy() && p_77203_2_.func_190926_b() || merchantrecipe.hasSecondItemToBuy() && this.areItemStacksExactlyEqual(p_77203_2_, merchantrecipe.getSecondItemToBuy()) && p_77203_2_.getCount() >= merchantrecipe.getSecondItemToBuy().getCount()))
                  {
                      return merchantrecipe;
                  }
diff -rc ./world/chunk/storage/AnvilChunkLoader.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/chunk/storage/AnvilChunkLoader.java
*** ./world/chunk/storage/AnvilChunkLoader.java	2018-11-18 13:19:05.289797000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/chunk/storage/AnvilChunkLoader.java	2017-10-20 21:01:33.521637000 -0700
***************
*** 130,136 ****
              NBTTagCompound nbttagcompound = new NBTTagCompound();
              NBTTagCompound nbttagcompound1 = new NBTTagCompound();
              nbttagcompound.setTag("Level", nbttagcompound1);
!             nbttagcompound.setInteger("DataVersion", 1139);
              this.writeChunkToNBT(chunkIn, worldIn, nbttagcompound1);
              this.addChunkToPending(chunkIn.getChunkCoordIntPair(), nbttagcompound);
          }
--- 130,136 ----
              NBTTagCompound nbttagcompound = new NBTTagCompound();
              NBTTagCompound nbttagcompound1 = new NBTTagCompound();
              nbttagcompound.setTag("Level", nbttagcompound1);
!             nbttagcompound.setInteger("DataVersion", 1343);
              this.writeChunkToNBT(chunkIn, worldIn, nbttagcompound1);
              this.addChunkToPending(chunkIn.getChunkCoordIntPair(), nbttagcompound);
          }
diff -rc ./world/chunk/storage/ExtendedBlockStorage.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/chunk/storage/ExtendedBlockStorage.java
*** ./world/chunk/storage/ExtendedBlockStorage.java	2018-11-18 13:19:05.355759000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/chunk/storage/ExtendedBlockStorage.java	2017-10-20 21:35:40.044349800 -0700
***************
*** 5,10 ****
--- 5,11 ----
  import net.minecraft.init.Blocks;
  import net.minecraft.world.chunk.BlockStateContainer;
  import net.minecraft.world.chunk.NibbleArray;
+ import optifine.Reflector;
  
  public class ExtendedBlockStorage
  {
***************
*** 50,55 ****
--- 51,61 ----
  
      public void set(int x, int y, int z, IBlockState state)
      {
+         if (Reflector.IExtendedBlockState.isInstance(state))
+         {
+             state = (IBlockState)Reflector.call(state, Reflector.IExtendedBlockState_getClean);
+         }
+ 
          IBlockState iblockstate = this.get(x, y, z);
          Block block = iblockstate.getBlock();
          Block block1 = state.getBlock();
***************
*** 136,164 ****
  
      public void removeInvalidBlocks()
      {
!         this.blockRefCount = 0;
!         this.tickRefCount = 0;
  
!         for (int i = 0; i < 16; ++i)
          {
!             for (int j = 0; j < 16; ++j)
              {
!                 for (int k = 0; k < 16; ++k)
                  {
!                     Block block = this.get(i, j, k).getBlock();
  
!                     if (block != Blocks.AIR)
                      {
!                         ++this.blockRefCount;
  
                          if (block.getTickRandomly())
                          {
!                             ++this.tickRefCount;
                          }
                      }
                  }
              }
          }
      }
  
      public BlockStateContainer getData()
--- 142,175 ----
  
      public void removeInvalidBlocks()
      {
!         IBlockState iblockstate = Blocks.AIR.getDefaultState();
!         int i = 0;
!         int j = 0;
  
!         for (int k = 0; k < 16; ++k)
          {
!             for (int l = 0; l < 16; ++l)
              {
!                 for (int i1 = 0; i1 < 16; ++i1)
                  {
!                     IBlockState iblockstate1 = this.data.get(i1, k, l);
  
!                     if (iblockstate1 != iblockstate)
                      {
!                         ++i;
!                         Block block = iblockstate1.getBlock();
  
                          if (block.getTickRandomly())
                          {
!                             ++j;
                          }
                      }
                  }
              }
          }
+ 
+         this.blockRefCount = i;
+         this.tickRefCount = j;
      }
  
      public BlockStateContainer getData()
diff -rc ./world/GameRules.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/GameRules.java
*** ./world/GameRules.java	2018-11-18 13:19:04.383319000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/GameRules.java	2017-10-20 21:01:32.985136000 -0700
***************
*** 146,151 ****
--- 146,167 ----
          public void setValue(String value)
          {
              this.valueString = value;
+ 
+             if (value != null)
+             {
+                 if (value.equals("false"))
+                 {
+                     this.valueBoolean = false;
+                     return;
+                 }
+ 
+                 if (value.equals("true"))
+                 {
+                     this.valueBoolean = true;
+                     return;
+                 }
+             }
+ 
              this.valueBoolean = Boolean.parseBoolean(value);
              this.valueInteger = this.valueBoolean ? 1 : 0;
  
diff -rc ./world/gen/structure/template/Template.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/gen/structure/template/Template.java
*** ./world/gen/structure/template/Template.java	2018-11-18 13:19:07.435562000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/gen/structure/template/Template.java	2017-10-20 21:01:34.542540000 -0700
***************
*** 551,557 ****
          nbt.setTag("entities", nbttaglist1);
          nbt.setTag("size", this.writeInts(this.size.getX(), this.size.getY(), this.size.getZ()));
          nbt.setString("author", this.author);
!         nbt.setInteger("DataVersion", 1139);
          return nbt;
      }
  
--- 551,557 ----
          nbt.setTag("entities", nbttaglist1);
          nbt.setTag("size", this.writeInts(this.size.getX(), this.size.getY(), this.size.getZ()));
          nbt.setString("author", this.author);
!         nbt.setInteger("DataVersion", 1343);
          return nbt;
      }
  
diff -rc ./world/storage/loot/functions/LootingEnchantBonus.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/loot/functions/LootingEnchantBonus.java
*** ./world/storage/loot/functions/LootingEnchantBonus.java	2018-11-18 13:19:08.175136000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/loot/functions/LootingEnchantBonus.java	2018-11-18 13:37:38.970196400 -0800
***************
*** 40,50 ****
              }
  
              float f = (float)i * this.count.generateFloat(rand);
!             stack.func_190917_f(Math.round(f));
  
!             if (this.limit != 0 && stack.func_190916_E() > this.limit)
              {
!                 stack.func_190920_e(this.limit);
              }
          }
  
--- 40,50 ----
              }
  
              float f = (float)i * this.count.generateFloat(rand);
!             stack.grow(Math.round(f));
  
!             if (this.limit != 0 && stack.getCount() > this.limit)
              {
!                 stack.setCount(this.limit);
              }
          }
  
diff -rc ./world/storage/loot/functions/SetCount.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/loot/functions/SetCount.java
*** ./world/storage/loot/functions/SetCount.java	2018-11-18 13:19:08.213115000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/loot/functions/SetCount.java	2018-11-18 13:37:22.813921400 -0800
***************
*** 23,29 ****
  
      public ItemStack apply(ItemStack stack, Random rand, LootContext context)
      {
!         stack.func_190920_e(this.countRange.generateInt(rand));
          return stack;
      }
  
--- 23,29 ----
  
      public ItemStack apply(ItemStack stack, Random rand, LootContext context)
      {
!         stack.setCount(this.countRange.generateInt(rand));
          return stack;
      }
  
diff -rc ./world/storage/loot/functions/Smelt.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/loot/functions/Smelt.java
*** ./world/storage/loot/functions/Smelt.java	2018-11-18 13:19:08.270081000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/loot/functions/Smelt.java	2018-11-18 13:37:39.652724500 -0800
***************
*** 39,45 ****
              else
              {
                  ItemStack itemstack1 = itemstack.copy();
!                 itemstack1.func_190920_e(stack.func_190916_E());
                  return itemstack1;
              }
          }
--- 39,45 ----
              else
              {
                  ItemStack itemstack1 = itemstack.copy();
!                 itemstack1.setCount(stack.getCount());
                  return itemstack1;
              }
          }
diff -rc ./world/storage/loot/LootEntryItem.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/loot/LootEntryItem.java
*** ./world/storage/loot/LootEntryItem.java	2018-11-18 13:19:07.839329000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/loot/LootEntryItem.java	2018-11-18 13:37:38.925711300 -0800
***************
*** 39,57 ****
  
          if (!itemstack.func_190926_b())
          {
!             if (itemstack.func_190916_E() < this.item.getItemStackLimit())
              {
                  stacks.add(itemstack);
              }
              else
              {
!                 int i = itemstack.func_190916_E();
  
                  while (i > 0)
                  {
                      ItemStack itemstack1 = itemstack.copy();
!                     itemstack1.func_190920_e(Math.min(itemstack.getMaxStackSize(), i));
!                     i -= itemstack1.func_190916_E();
                      stacks.add(itemstack1);
                  }
              }
--- 39,57 ----
  
          if (!itemstack.func_190926_b())
          {
!             if (itemstack.getCount() < this.item.getItemStackLimit())
              {
                  stacks.add(itemstack);
              }
              else
              {
!                 int i = itemstack.getCount();
  
                  while (i > 0)
                  {
                      ItemStack itemstack1 = itemstack.copy();
!                     itemstack1.setCount(Math.min(itemstack.getMaxStackSize(), i));
!                     i -= itemstack1.getCount();
                      stacks.add(itemstack1);
                  }
              }
diff -rc ./world/storage/loot/LootTable.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/loot/LootTable.java
*** ./world/storage/loot/LootTable.java	2018-11-18 13:19:07.883304000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/loot/LootTable.java	2018-11-18 13:37:38.945701400 -0800
***************
*** 93,99 ****
              {
                  iterator.remove();
              }
!             else if (itemstack.func_190916_E() > 1)
              {
                  list.add(itemstack);
                  iterator.remove();
--- 93,99 ----
              {
                  iterator.remove();
              }
!             else if (itemstack.getCount() > 1)
              {
                  list.add(itemstack);
                  iterator.remove();
***************
*** 105,114 ****
          while (p_186463_2_ > 0 && !list.isEmpty())
          {
              ItemStack itemstack2 = list.remove(MathHelper.getInt(rand, 0, list.size() - 1));
!             int i = MathHelper.getInt(rand, 1, itemstack2.func_190916_E() / 2);
              ItemStack itemstack1 = itemstack2.splitStack(i);
  
!             if (itemstack2.func_190916_E() > 1 && rand.nextBoolean())
              {
                  list.add(itemstack2);
              }
--- 105,114 ----
          while (p_186463_2_ > 0 && !list.isEmpty())
          {
              ItemStack itemstack2 = list.remove(MathHelper.getInt(rand, 0, list.size() - 1));
!             int i = MathHelper.getInt(rand, 1, itemstack2.getCount() / 2);
              ItemStack itemstack1 = itemstack2.splitStack(i);
  
!             if (itemstack2.getCount() > 1 && rand.nextBoolean())
              {
                  list.add(itemstack2);
              }
***************
*** 117,123 ****
                  stacks.add(itemstack2);
              }
  
!             if (itemstack1.func_190916_E() > 1 && rand.nextBoolean())
              {
                  list.add(itemstack1);
              }
--- 117,123 ----
                  stacks.add(itemstack2);
              }
  
!             if (itemstack1.getCount() > 1 && rand.nextBoolean())
              {
                  list.add(itemstack1);
              }
diff -rc ./world/storage/WorldInfo.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/WorldInfo.java
*** ./world/storage/WorldInfo.java	2018-11-18 13:19:07.707405000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/WorldInfo.java	2017-10-20 21:01:34.674048000 -0700
***************
*** 366,376 ****
      private void updateTagCompound(NBTTagCompound nbt, NBTTagCompound playerNbt)
      {
          NBTTagCompound nbttagcompound = new NBTTagCompound();
!         nbttagcompound.setString("Name", "1.12");
!         nbttagcompound.setInteger("Id", 1139);
          nbttagcompound.setBoolean("Snapshot", false);
          nbt.setTag("Version", nbttagcompound);
!         nbt.setInteger("DataVersion", 1139);
          nbt.setLong("RandomSeed", this.randomSeed);
          nbt.setString("generatorName", this.terrainType.getWorldTypeName());
          nbt.setInteger("generatorVersion", this.terrainType.getGeneratorVersion());
--- 366,376 ----
      private void updateTagCompound(NBTTagCompound nbt, NBTTagCompound playerNbt)
      {
          NBTTagCompound nbttagcompound = new NBTTagCompound();
!         nbttagcompound.setString("Name", "1.12.2");
!         nbttagcompound.setInteger("Id", 1343);
          nbttagcompound.setBoolean("Snapshot", false);
          nbt.setTag("Version", nbttagcompound);
!         nbt.setInteger("DataVersion", 1343);
          nbt.setLong("RandomSeed", this.randomSeed);
          nbt.setString("generatorName", this.terrainType.getWorldTypeName());
          nbt.setInteger("generatorVersion", this.terrainType.getGeneratorVersion());
diff -rc ./world/storage/WorldSummary.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/WorldSummary.java
*** ./world/storage/WorldSummary.java	2018-11-18 13:19:07.756377000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/storage/WorldSummary.java	2017-10-20 21:01:34.697554000 -0700
***************
*** 114,119 ****
  
      public boolean askToOpenWorld()
      {
!         return this.versionId > 1139;
      }
  }
--- 114,119 ----
  
      public boolean askToOpenWorld()
      {
!         return this.versionId > 1343;
      }
  }
diff -rc ./world/World.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/World.java
*** ./world/World.java	2018-11-18 13:19:04.553221000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/World.java	2017-10-20 21:01:33.087136000 -0700
***************
*** 10,15 ****
--- 10,16 ----
  import java.util.List;
  import java.util.Random;
  import java.util.UUID;
+ import java.util.function.Supplier;
  import javax.annotation.Nullable;
  import net.minecraft.advancements.AdvancementManager;
  import net.minecraft.advancements.FunctionManager;
***************
*** 1823,1828 ****
--- 1824,1837 ----
          }
  
          this.theProfiler.endStartSection("blockEntities");
+ 
+         if (!this.tileEntitiesToBeRemoved.isEmpty())
+         {
+             this.tickableTileEntities.removeAll(this.tileEntitiesToBeRemoved);
+             this.loadedTileEntityList.removeAll(this.tileEntitiesToBeRemoved);
+             this.tileEntitiesToBeRemoved.clear();
+         }
+ 
          this.processingLoadedTiles = true;
          Iterator<TileEntity> iterator = this.tickableTileEntities.iterator();
  
***************
*** 1838,1844 ****
                  {
                      try
                      {
!                         this.theProfiler.startSection(tileentity.getClass().getSimpleName());
                          ((ITickable)tileentity).update();
                          this.theProfiler.endSection();
                      }
--- 1847,1856 ----
                  {
                      try
                      {
!                         this.theProfiler.func_194340_a(() ->
!                         {
!                             return String.valueOf((Object)TileEntity.func_190559_a(tileentity.getClass()));
!                         });
                          ((ITickable)tileentity).update();
                          this.theProfiler.endSection();
                      }
***************
*** 1865,1878 ****
          }
  
          this.processingLoadedTiles = false;
- 
-         if (!this.tileEntitiesToBeRemoved.isEmpty())
-         {
-             this.tickableTileEntities.removeAll(this.tileEntitiesToBeRemoved);
-             this.loadedTileEntityList.removeAll(this.tileEntitiesToBeRemoved);
-             this.tileEntitiesToBeRemoved.clear();
-         }
- 
          this.theProfiler.endStartSection("pendingBlockEntities");
  
          if (!this.addedTileEntityList.isEmpty())
--- 1877,1882 ----
***************
*** 1920,1928 ****
  
          if (this.isRemote)
          {
!             BlockPos blockpos = tile.getPos();
!             IBlockState iblockstate = this.getBlockState(blockpos);
!             this.notifyBlockUpdate(blockpos, iblockstate, iblockstate, 2);
          }
  
          return flag;
--- 1924,1932 ----
  
          if (this.isRemote)
          {
!             BlockPos blockpos1 = tile.getPos();
!             IBlockState iblockstate1 = this.getBlockState(blockpos1);
!             this.notifyBlockUpdate(blockpos1, iblockstate1, iblockstate1, 2);
          }
  
          return flag;
***************
*** 1936,1944 ****
          }
          else
          {
!             for (TileEntity tileentity : tileEntityCollection)
              {
!                 this.addTileEntity(tileentity);
              }
          }
      }
--- 1940,1948 ----
          }
          else
          {
!             for (TileEntity tileentity2 : tileEntityCollection)
              {
!                 this.addTileEntity(tileentity2);
              }
          }
      }
***************
*** 1958,1968 ****
      {
          if (!(entityIn instanceof EntityPlayer))
          {
!             int i = MathHelper.floor(entityIn.posX);
!             int j = MathHelper.floor(entityIn.posZ);
!             int k = 32;
  
!             if (forceUpdate && !this.isAreaLoaded(i - 32, 0, j - 32, i + 32, 0, j + 32, true))
              {
                  return;
              }
--- 1962,1972 ----
      {
          if (!(entityIn instanceof EntityPlayer))
          {
!             int j2 = MathHelper.floor(entityIn.posX);
!             int k2 = MathHelper.floor(entityIn.posZ);
!             int l2 = 32;
  
!             if (forceUpdate && !this.isAreaLoaded(j2 - 32, 0, k2 - 32, j2 + 32, 0, k2 + 32, true))
              {
                  return;
              }
***************
*** 2015,2038 ****
              entityIn.rotationYaw = entityIn.prevRotationYaw;
          }
  
!         int l = MathHelper.floor(entityIn.posX / 16.0D);
!         int i1 = MathHelper.floor(entityIn.posY / 16.0D);
!         int j1 = MathHelper.floor(entityIn.posZ / 16.0D);
  
!         if (!entityIn.addedToChunk || entityIn.chunkCoordX != l || entityIn.chunkCoordY != i1 || entityIn.chunkCoordZ != j1)
          {
              if (entityIn.addedToChunk && this.isChunkLoaded(entityIn.chunkCoordX, entityIn.chunkCoordZ, true))
              {
                  this.getChunkFromChunkCoords(entityIn.chunkCoordX, entityIn.chunkCoordZ).removeEntityAtIndex(entityIn, entityIn.chunkCoordY);
              }
  
!             if (!entityIn.setPositionNonDirty() && !this.isChunkLoaded(l, j1, true))
              {
                  entityIn.addedToChunk = false;
              }
              else
              {
!                 this.getChunkFromChunkCoords(l, j1).addEntity(entityIn);
              }
          }
  
--- 2019,2042 ----
              entityIn.rotationYaw = entityIn.prevRotationYaw;
          }
  
!         int i3 = MathHelper.floor(entityIn.posX / 16.0D);
!         int j3 = MathHelper.floor(entityIn.posY / 16.0D);
!         int k3 = MathHelper.floor(entityIn.posZ / 16.0D);
  
!         if (!entityIn.addedToChunk || entityIn.chunkCoordX != i3 || entityIn.chunkCoordY != j3 || entityIn.chunkCoordZ != k3)
          {
              if (entityIn.addedToChunk && this.isChunkLoaded(entityIn.chunkCoordX, entityIn.chunkCoordZ, true))
              {
                  this.getChunkFromChunkCoords(entityIn.chunkCoordX, entityIn.chunkCoordZ).removeEntityAtIndex(entityIn, entityIn.chunkCoordY);
              }
  
!             if (!entityIn.setPositionNonDirty() && !this.isChunkLoaded(i3, k3, true))
              {
                  entityIn.addedToChunk = false;
              }
              else
              {
!                 this.getChunkFromChunkCoords(i3, k3).addEntity(entityIn);
              }
          }
  
***************
*** 2040,2054 ****
  
          if (forceUpdate && entityIn.addedToChunk)
          {
!             for (Entity entity : entityIn.getPassengers())
              {
!                 if (!entity.isDead && entity.getRidingEntity() == entityIn)
                  {
!                     this.updateEntity(entity);
                  }
                  else
                  {
!                     entity.dismountRidingEntity();
                  }
              }
          }
--- 2044,2058 ----
  
          if (forceUpdate && entityIn.addedToChunk)
          {
!             for (Entity entity4 : entityIn.getPassengers())
              {
!                 if (!entity4.isDead && entity4.getRidingEntity() == entityIn)
                  {
!                     this.updateEntity(entity4);
                  }
                  else
                  {
!                     entity4.dismountRidingEntity();
                  }
              }
          }
***************
*** 2069,2079 ****
      {
          List<Entity> list = this.getEntitiesWithinAABBExcludingEntity((Entity)null, bb);
  
!         for (int i = 0; i < list.size(); ++i)
          {
!             Entity entity = list.get(i);
  
!             if (!entity.isDead && entity.preventEntitySpawning && entity != entityIn && (entityIn == null || entity.isRidingSameEntity(entityIn)))
              {
                  return false;
              }
--- 2073,2083 ----
      {
          List<Entity> list = this.getEntitiesWithinAABBExcludingEntity((Entity)null, bb);
  
!         for (int j2 = 0; j2 < list.size(); ++j2)
          {
!             Entity entity4 = list.get(j2);
  
!             if (!entity4.isDead && entity4.preventEntitySpawning && entity4 != entityIn && (entityIn == null || entity4.isRidingSameEntity(entityIn)))
              {
                  return false;
              }
***************
*** 2087,2109 ****
       */
      public boolean checkBlockCollision(AxisAlignedBB bb)
      {
!         int i = MathHelper.floor(bb.minX);
!         int j = MathHelper.ceil(bb.maxX);
!         int k = MathHelper.floor(bb.minY);
!         int l = MathHelper.ceil(bb.maxY);
!         int i1 = MathHelper.floor(bb.minZ);
!         int j1 = MathHelper.ceil(bb.maxZ);
          BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!         for (int k1 = i; k1 < j; ++k1)
          {
!             for (int l1 = k; l1 < l; ++l1)
              {
!                 for (int i2 = i1; i2 < j1; ++i2)
                  {
!                     IBlockState iblockstate = this.getBlockState(blockpos$pooledmutableblockpos.setPos(k1, l1, i2));
  
!                     if (iblockstate.getMaterial() != Material.AIR)
                      {
                          blockpos$pooledmutableblockpos.release();
                          return true;
--- 2091,2113 ----
       */
      public boolean checkBlockCollision(AxisAlignedBB bb)
      {
!         int j2 = MathHelper.floor(bb.minX);
!         int k2 = MathHelper.ceil(bb.maxX);
!         int l2 = MathHelper.floor(bb.minY);
!         int i3 = MathHelper.ceil(bb.maxY);
!         int j3 = MathHelper.floor(bb.minZ);
!         int k3 = MathHelper.ceil(bb.maxZ);
          BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!         for (int l3 = j2; l3 < k2; ++l3)
          {
!             for (int i4 = l2; i4 < i3; ++i4)
              {
!                 for (int j4 = j3; j4 < k3; ++j4)
                  {
!                     IBlockState iblockstate1 = this.getBlockState(blockpos$pooledmutableblockpos.setPos(l3, i4, j4));
  
!                     if (iblockstate1.getMaterial() != Material.AIR)
                      {
                          blockpos$pooledmutableblockpos.release();
                          return true;
***************
*** 2121,2143 ****
       */
      public boolean containsAnyLiquid(AxisAlignedBB bb)
      {
!         int i = MathHelper.floor(bb.minX);
!         int j = MathHelper.ceil(bb.maxX);
!         int k = MathHelper.floor(bb.minY);
!         int l = MathHelper.ceil(bb.maxY);
!         int i1 = MathHelper.floor(bb.minZ);
!         int j1 = MathHelper.ceil(bb.maxZ);
          BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!         for (int k1 = i; k1 < j; ++k1)
          {
!             for (int l1 = k; l1 < l; ++l1)
              {
!                 for (int i2 = i1; i2 < j1; ++i2)
                  {
!                     IBlockState iblockstate = this.getBlockState(blockpos$pooledmutableblockpos.setPos(k1, l1, i2));
  
!                     if (iblockstate.getMaterial().isLiquid())
                      {
                          blockpos$pooledmutableblockpos.release();
                          return true;
--- 2125,2147 ----
       */
      public boolean containsAnyLiquid(AxisAlignedBB bb)
      {
!         int j2 = MathHelper.floor(bb.minX);
!         int k2 = MathHelper.ceil(bb.maxX);
!         int l2 = MathHelper.floor(bb.minY);
!         int i3 = MathHelper.ceil(bb.maxY);
!         int j3 = MathHelper.floor(bb.minZ);
!         int k3 = MathHelper.ceil(bb.maxZ);
          BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!         for (int l3 = j2; l3 < k2; ++l3)
          {
!             for (int i4 = l2; i4 < i3; ++i4)
              {
!                 for (int j4 = j3; j4 < k3; ++j4)
                  {
!                     IBlockState iblockstate1 = this.getBlockState(blockpos$pooledmutableblockpos.setPos(l3, i4, j4));
  
!                     if (iblockstate1.getMaterial().isLiquid())
                      {
                          blockpos$pooledmutableblockpos.release();
                          return true;
***************
*** 2152,2175 ****
  
      public boolean isFlammableWithin(AxisAlignedBB bb)
      {
!         int i = MathHelper.floor(bb.minX);
!         int j = MathHelper.ceil(bb.maxX);
!         int k = MathHelper.floor(bb.minY);
!         int l = MathHelper.ceil(bb.maxY);
!         int i1 = MathHelper.floor(bb.minZ);
!         int j1 = MathHelper.ceil(bb.maxZ);
  
!         if (this.isAreaLoaded(i, k, i1, j, l, j1, true))
          {
              BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!             for (int k1 = i; k1 < j; ++k1)
              {
!                 for (int l1 = k; l1 < l; ++l1)
                  {
!                     for (int i2 = i1; i2 < j1; ++i2)
                      {
!                         Block block = this.getBlockState(blockpos$pooledmutableblockpos.setPos(k1, l1, i2)).getBlock();
  
                          if (block == Blocks.FIRE || block == Blocks.FLOWING_LAVA || block == Blocks.LAVA)
                          {
--- 2156,2179 ----
  
      public boolean isFlammableWithin(AxisAlignedBB bb)
      {
!         int j2 = MathHelper.floor(bb.minX);
!         int k2 = MathHelper.ceil(bb.maxX);
!         int l2 = MathHelper.floor(bb.minY);
!         int i3 = MathHelper.ceil(bb.maxY);
!         int j3 = MathHelper.floor(bb.minZ);
!         int k3 = MathHelper.ceil(bb.maxZ);
  
!         if (this.isAreaLoaded(j2, l2, j3, k2, i3, k3, true))
          {
              BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!             for (int l3 = j2; l3 < k2; ++l3)
              {
!                 for (int i4 = l2; i4 < i3; ++i4)
                  {
!                     for (int j4 = j3; j4 < k3; ++j4)
                      {
!                         Block block = this.getBlockState(blockpos$pooledmutableblockpos.setPos(l3, i4, j4)).getBlock();
  
                          if (block == Blocks.FIRE || block == Blocks.FLOWING_LAVA || block == Blocks.LAVA)
                          {
***************
*** 2191,2204 ****
       */
      public boolean handleMaterialAcceleration(AxisAlignedBB bb, Material materialIn, Entity entityIn)
      {
!         int i = MathHelper.floor(bb.minX);
!         int j = MathHelper.ceil(bb.maxX);
!         int k = MathHelper.floor(bb.minY);
!         int l = MathHelper.ceil(bb.maxY);
!         int i1 = MathHelper.floor(bb.minZ);
!         int j1 = MathHelper.ceil(bb.maxZ);
  
!         if (!this.isAreaLoaded(i, k, i1, j, l, j1, true))
          {
              return false;
          }
--- 2195,2208 ----
       */
      public boolean handleMaterialAcceleration(AxisAlignedBB bb, Material materialIn, Entity entityIn)
      {
!         int j2 = MathHelper.floor(bb.minX);
!         int k2 = MathHelper.ceil(bb.maxX);
!         int l2 = MathHelper.floor(bb.minY);
!         int i3 = MathHelper.ceil(bb.maxY);
!         int j3 = MathHelper.floor(bb.minZ);
!         int k3 = MathHelper.ceil(bb.maxZ);
  
!         if (!this.isAreaLoaded(j2, l2, j3, k2, i3, k3, true))
          {
              return false;
          }
***************
*** 2208,2228 ****
              Vec3d vec3d = Vec3d.ZERO;
              BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!             for (int k1 = i; k1 < j; ++k1)
              {
!                 for (int l1 = k; l1 < l; ++l1)
                  {
!                     for (int i2 = i1; i2 < j1; ++i2)
                      {
!                         blockpos$pooledmutableblockpos.setPos(k1, l1, i2);
!                         IBlockState iblockstate = this.getBlockState(blockpos$pooledmutableblockpos);
!                         Block block = iblockstate.getBlock();
  
!                         if (iblockstate.getMaterial() == materialIn)
                          {
!                             double d0 = (double)((float)(l1 + 1) - BlockLiquid.getLiquidHeightPercent(((Integer)iblockstate.getValue(BlockLiquid.LEVEL)).intValue()));
  
!                             if ((double)l >= d0)
                              {
                                  flag = true;
                                  vec3d = block.modifyAcceleration(this, blockpos$pooledmutableblockpos, entityIn, vec3d);
--- 2212,2232 ----
              Vec3d vec3d = Vec3d.ZERO;
              BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!             for (int l3 = j2; l3 < k2; ++l3)
              {
!                 for (int i4 = l2; i4 < i3; ++i4)
                  {
!                     for (int j4 = j3; j4 < k3; ++j4)
                      {
!                         blockpos$pooledmutableblockpos.setPos(l3, i4, j4);
!                         IBlockState iblockstate1 = this.getBlockState(blockpos$pooledmutableblockpos);
!                         Block block = iblockstate1.getBlock();
  
!                         if (iblockstate1.getMaterial() == materialIn)
                          {
!                             double d0 = (double)((float)(i4 + 1) - BlockLiquid.getLiquidHeightPercent(((Integer)iblockstate1.getValue(BlockLiquid.LEVEL)).intValue()));
  
!                             if ((double)i3 >= d0)
                              {
                                  flag = true;
                                  vec3d = block.modifyAcceleration(this, blockpos$pooledmutableblockpos, entityIn, vec3d);
***************
*** 2252,2272 ****
       */
      public boolean isMaterialInBB(AxisAlignedBB bb, Material materialIn)
      {
!         int i = MathHelper.floor(bb.minX);
!         int j = MathHelper.ceil(bb.maxX);
!         int k = MathHelper.floor(bb.minY);
!         int l = MathHelper.ceil(bb.maxY);
!         int i1 = MathHelper.floor(bb.minZ);
!         int j1 = MathHelper.ceil(bb.maxZ);
          BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!         for (int k1 = i; k1 < j; ++k1)
          {
!             for (int l1 = k; l1 < l; ++l1)
              {
!                 for (int i2 = i1; i2 < j1; ++i2)
                  {
!                     if (this.getBlockState(blockpos$pooledmutableblockpos.setPos(k1, l1, i2)).getMaterial() == materialIn)
                      {
                          blockpos$pooledmutableblockpos.release();
                          return true;
--- 2256,2276 ----
       */
      public boolean isMaterialInBB(AxisAlignedBB bb, Material materialIn)
      {
!         int j2 = MathHelper.floor(bb.minX);
!         int k2 = MathHelper.ceil(bb.maxX);
!         int l2 = MathHelper.floor(bb.minY);
!         int i3 = MathHelper.ceil(bb.maxY);
!         int j3 = MathHelper.floor(bb.minZ);
!         int k3 = MathHelper.ceil(bb.maxZ);
          BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
!         for (int l3 = j2; l3 < k2; ++l3)
          {
!             for (int i4 = l2; i4 < i3; ++i4)
              {
!                 for (int j4 = j3; j4 < k3; ++j4)
                  {
!                     if (this.getBlockState(blockpos$pooledmutableblockpos.setPos(l3, i4, j4)).getMaterial() == materialIn)
                      {
                          blockpos$pooledmutableblockpos.release();
                          return true;
***************
*** 2311,2318 ****
  
          if (d0 >= 0.0D && d1 >= 0.0D && d2 >= 0.0D)
          {
!             int i = 0;
!             int j = 0;
  
              for (float f = 0.0F; f <= 1.0F; f = (float)((double)f + d0))
              {
--- 2315,2322 ----
  
          if (d0 >= 0.0D && d1 >= 0.0D && d2 >= 0.0D)
          {
!             int j2 = 0;
!             int k2 = 0;
  
              for (float f = 0.0F; f <= 1.0F; f = (float)((double)f + d0))
              {
***************
*** 2326,2340 ****
  
                          if (this.rayTraceBlocks(new Vec3d(d5 + d3, d6, d7 + d4), vec) == null)
                          {
!                             ++i;
                          }
  
!                         ++j;
                      }
                  }
              }
  
!             return (float)i / (float)j;
          }
          else
          {
--- 2330,2344 ----
  
                          if (this.rayTraceBlocks(new Vec3d(d5 + d3, d6, d7 + d4), vec) == null)
                          {
!                             ++j2;
                          }
  
!                         ++k2;
                      }
                  }
              }
  
!             return (float)j2 / (float)k2;
          }
          else
          {
***************
*** 2386,2422 ****
          }
          else
          {
!             TileEntity tileentity = null;
  
              if (this.processingLoadedTiles)
              {
!                 tileentity = this.getPendingTileEntityAt(pos);
              }
  
!             if (tileentity == null)
              {
!                 tileentity = this.getChunkFromBlockCoords(pos).getTileEntity(pos, Chunk.EnumCreateEntityType.IMMEDIATE);
              }
  
!             if (tileentity == null)
              {
!                 tileentity = this.getPendingTileEntityAt(pos);
              }
  
!             return tileentity;
          }
      }
  
      @Nullable
      private TileEntity getPendingTileEntityAt(BlockPos p_189508_1_)
      {
!         for (int i = 0; i < this.addedTileEntityList.size(); ++i)
          {
!             TileEntity tileentity = this.addedTileEntityList.get(i);
  
!             if (!tileentity.isInvalid() && tileentity.getPos().equals(p_189508_1_))
              {
!                 return tileentity;
              }
          }
  
--- 2390,2426 ----
          }
          else
          {
!             TileEntity tileentity2 = null;
  
              if (this.processingLoadedTiles)
              {
!                 tileentity2 = this.getPendingTileEntityAt(pos);
              }
  
!             if (tileentity2 == null)
              {
!                 tileentity2 = this.getChunkFromBlockCoords(pos).getTileEntity(pos, Chunk.EnumCreateEntityType.IMMEDIATE);
              }
  
!             if (tileentity2 == null)
              {
!                 tileentity2 = this.getPendingTileEntityAt(pos);
              }
  
!             return tileentity2;
          }
      }
  
      @Nullable
      private TileEntity getPendingTileEntityAt(BlockPos p_189508_1_)
      {
!         for (int j2 = 0; j2 < this.addedTileEntityList.size(); ++j2)
          {
!             TileEntity tileentity2 = this.addedTileEntityList.get(j2);
  
!             if (!tileentity2.isInvalid() && tileentity2.getPos().equals(p_189508_1_))
              {
!                 return tileentity2;
              }
          }
  
***************
*** 2432,2447 ****
                  if (this.processingLoadedTiles)
                  {
                      tileEntityIn.setPos(pos);
!                     Iterator<TileEntity> iterator = this.addedTileEntityList.iterator();
  
!                     while (iterator.hasNext())
                      {
!                         TileEntity tileentity = iterator.next();
  
!                         if (tileentity.getPos().equals(pos))
                          {
!                             tileentity.invalidate();
!                             iterator.remove();
                          }
                      }
  
--- 2436,2451 ----
                  if (this.processingLoadedTiles)
                  {
                      tileEntityIn.setPos(pos);
!                     Iterator<TileEntity> iterator1 = this.addedTileEntityList.iterator();
  
!                     while (iterator1.hasNext())
                      {
!                         TileEntity tileentity2 = iterator1.next();
  
!                         if (tileentity2.getPos().equals(pos))
                          {
!                             tileentity2.invalidate();
!                             iterator1.remove();
                          }
                      }
  
***************
*** 2458,2477 ****
  
      public void removeTileEntity(BlockPos pos)
      {
!         TileEntity tileentity = this.getTileEntity(pos);
  
!         if (tileentity != null && this.processingLoadedTiles)
          {
!             tileentity.invalidate();
!             this.addedTileEntityList.remove(tileentity);
          }
          else
          {
!             if (tileentity != null)
              {
!                 this.addedTileEntityList.remove(tileentity);
!                 this.loadedTileEntityList.remove(tileentity);
!                 this.tickableTileEntities.remove(tileentity);
              }
  
              this.getChunkFromBlockCoords(pos).removeTileEntity(pos);
--- 2462,2481 ----
  
      public void removeTileEntity(BlockPos pos)
      {
!         TileEntity tileentity2 = this.getTileEntity(pos);
  
!         if (tileentity2 != null && this.processingLoadedTiles)
          {
!             tileentity2.invalidate();
!             this.addedTileEntityList.remove(tileentity2);
          }
          else
          {
!             if (tileentity2 != null)
              {
!                 this.addedTileEntityList.remove(tileentity2);
!                 this.loadedTileEntityList.remove(tileentity2);
!                 this.tickableTileEntities.remove(tileentity2);
              }
  
              this.getChunkFromBlockCoords(pos).removeTileEntity(pos);
***************
*** 2503,2514 ****
          }
          else
          {
!             Chunk chunk = this.chunkProvider.getLoadedChunk(pos.getX() >> 4, pos.getZ() >> 4);
  
!             if (chunk != null && !chunk.isEmpty())
              {
!                 IBlockState iblockstate = this.getBlockState(pos);
!                 return iblockstate.getMaterial().isOpaque() && iblockstate.isFullCube();
              }
              else
              {
--- 2507,2518 ----
          }
          else
          {
!             Chunk chunk1 = this.chunkProvider.getLoadedChunk(pos.getX() >> 4, pos.getZ() >> 4);
  
!             if (chunk1 != null && !chunk1.isEmpty())
              {
!                 IBlockState iblockstate1 = this.getBlockState(pos);
!                 return iblockstate1.getMaterial().isOpaque() && iblockstate1.isFullCube();
              }
              else
              {
***************
*** 2522,2532 ****
       */
      public void calculateInitialSkylight()
      {
!         int i = this.calculateSkylightSubtracted(1.0F);
  
!         if (i != this.skylightSubtracted)
          {
!             this.skylightSubtracted = i;
          }
      }
  
--- 2526,2536 ----
       */
      public void calculateInitialSkylight()
      {
!         int j2 = this.calculateSkylightSubtracted(1.0F);
  
!         if (j2 != this.skylightSubtracted)
          {
!             this.skylightSubtracted = j2;
          }
      }
  
***************
*** 2576,2594 ****
  
                  if (flag)
                  {
!                     int i = this.worldInfo.getCleanWeatherTime();
  
!                     if (i > 0)
                      {
!                         --i;
!                         this.worldInfo.setCleanWeatherTime(i);
                          this.worldInfo.setThunderTime(this.worldInfo.isThundering() ? 1 : 2);
                          this.worldInfo.setRainTime(this.worldInfo.isRaining() ? 1 : 2);
                      }
  
!                     int j = this.worldInfo.getThunderTime();
  
!                     if (j <= 0)
                      {
                          if (this.worldInfo.isThundering())
                          {
--- 2580,2598 ----
  
                  if (flag)
                  {
!                     int j2 = this.worldInfo.getCleanWeatherTime();
  
!                     if (j2 > 0)
                      {
!                         --j2;
!                         this.worldInfo.setCleanWeatherTime(j2);
                          this.worldInfo.setThunderTime(this.worldInfo.isThundering() ? 1 : 2);
                          this.worldInfo.setRainTime(this.worldInfo.isRaining() ? 1 : 2);
                      }
  
!                     int k2 = this.worldInfo.getThunderTime();
  
!                     if (k2 <= 0)
                      {
                          if (this.worldInfo.isThundering())
                          {
***************
*** 2601,2618 ****
                      }
                      else
                      {
!                         --j;
!                         this.worldInfo.setThunderTime(j);
  
!                         if (j <= 0)
                          {
                              this.worldInfo.setThundering(!this.worldInfo.isThundering());
                          }
                      }
  
!                     int k = this.worldInfo.getRainTime();
  
!                     if (k <= 0)
                      {
                          if (this.worldInfo.isRaining())
                          {
--- 2605,2622 ----
                      }
                      else
                      {
!                         --k2;
!                         this.worldInfo.setThunderTime(k2);
  
!                         if (k2 <= 0)
                          {
                              this.worldInfo.setThundering(!this.worldInfo.isThundering());
                          }
                      }
  
!                     int l2 = this.worldInfo.getRainTime();
  
!                     if (l2 <= 0)
                      {
                          if (this.worldInfo.isRaining())
                          {
***************
*** 2625,2634 ****
                      }
                      else
                      {
!                         --k;
!                         this.worldInfo.setRainTime(k);
  
!                         if (k <= 0)
                          {
                              this.worldInfo.setRaining(!this.worldInfo.isRaining());
                          }
--- 2629,2638 ----
                      }
                      else
                      {
!                         --l2;
!                         this.worldInfo.setRainTime(l2);
  
!                         if (l2 <= 0)
                          {
                              this.worldInfo.setRaining(!this.worldInfo.isRaining());
                          }
***************
*** 2705,2714 ****
          {
              if (pos.getY() >= 0 && pos.getY() < 256 && this.getLightFor(EnumSkyBlock.BLOCK, pos) < 10)
              {
!                 IBlockState iblockstate = this.getBlockState(pos);
!                 Block block = iblockstate.getBlock();
  
!                 if ((block == Blocks.WATER || block == Blocks.FLOWING_WATER) && ((Integer)iblockstate.getValue(BlockLiquid.LEVEL)).intValue() == 0)
                  {
                      if (!noWaterAdj)
                      {
--- 2709,2718 ----
          {
              if (pos.getY() >= 0 && pos.getY() < 256 && this.getLightFor(EnumSkyBlock.BLOCK, pos) < 10)
              {
!                 IBlockState iblockstate1 = this.getBlockState(pos);
!                 Block block = iblockstate1.getBlock();
  
!                 if ((block == Blocks.WATER || block == Blocks.FLOWING_WATER) && ((Integer)iblockstate1.getValue(BlockLiquid.LEVEL)).intValue() == 0)
                  {
                      if (!noWaterAdj)
                      {
***************
*** 2753,2761 ****
          {
              if (pos.getY() >= 0 && pos.getY() < 256 && this.getLightFor(EnumSkyBlock.BLOCK, pos) < 10)
              {
!                 IBlockState iblockstate = this.getBlockState(pos);
  
!                 if (iblockstate.getMaterial() == Material.AIR && Blocks.SNOW_LAYER.canPlaceBlockAt(this, pos))
                  {
                      return true;
                  }
--- 2757,2765 ----
          {
              if (pos.getY() >= 0 && pos.getY() < 256 && this.getLightFor(EnumSkyBlock.BLOCK, pos) < 10)
              {
!                 IBlockState iblockstate1 = this.getBlockState(pos);
  
!                 if (iblockstate1.getMaterial() == Material.AIR && Blocks.SNOW_LAYER.canPlaceBlockAt(this, pos))
                  {
                      return true;
                  }
***************
*** 2789,2815 ****
          }
          else
          {
!             IBlockState iblockstate = this.getBlockState(pos);
!             int i = lightType == EnumSkyBlock.SKY ? 0 : iblockstate.getLightValue();
!             int j = iblockstate.getLightOpacity();
  
!             if (j >= 15 && iblockstate.getLightValue() > 0)
              {
!                 j = 1;
              }
  
!             if (j < 1)
              {
!                 j = 1;
              }
  
!             if (j >= 15)
              {
                  return 0;
              }
!             else if (i >= 14)
              {
!                 return i;
              }
              else
              {
--- 2793,2819 ----
          }
          else
          {
!             IBlockState iblockstate1 = this.getBlockState(pos);
!             int j2 = lightType == EnumSkyBlock.SKY ? 0 : iblockstate1.getLightValue();
!             int k2 = iblockstate1.getLightOpacity();
  
!             if (k2 >= 15 && iblockstate1.getLightValue() > 0)
              {
!                 k2 = 1;
              }
  
!             if (k2 < 1)
              {
!                 k2 = 1;
              }
  
!             if (k2 >= 15)
              {
                  return 0;
              }
!             else if (j2 >= 14)
              {
!                 return j2;
              }
              else
              {
***************
*** 2820,2840 ****
                      for (EnumFacing enumfacing : EnumFacing.values())
                      {
                          blockpos$pooledmutableblockpos.setPos(pos).move(enumfacing);
!                         int k = this.getLightFor(lightType, blockpos$pooledmutableblockpos) - j;
  
!                         if (k > i)
                          {
!                             i = k;
                          }
  
!                         if (i >= 14)
                          {
!                             int l = i;
!                             return l;
                          }
                      }
  
!                     return i;
                  }
                  finally
                  {
--- 2824,2844 ----
                      for (EnumFacing enumfacing : EnumFacing.values())
                      {
                          blockpos$pooledmutableblockpos.setPos(pos).move(enumfacing);
!                         int l2 = this.getLightFor(lightType, blockpos$pooledmutableblockpos) - k2;
  
!                         if (l2 > j2)
                          {
!                             j2 = l2;
                          }
  
!                         if (j2 >= 14)
                          {
!                             int i3 = j2;
!                             return i3;
                          }
                      }
  
!                     return j2;
                  }
                  finally
                  {
***************
*** 2852,2910 ****
          }
          else
          {
!             int i = 0;
!             int j = 0;
              this.theProfiler.startSection("getBrightness");
!             int k = this.getLightFor(lightType, pos);
!             int l = this.getRawLight(pos, lightType);
!             int i1 = pos.getX();
!             int j1 = pos.getY();
!             int k1 = pos.getZ();
  
!             if (l > k)
              {
!                 this.lightUpdateBlockList[j++] = 133152;
              }
!             else if (l < k)
              {
!                 this.lightUpdateBlockList[j++] = 133152 | k << 18;
  
!                 while (i < j)
                  {
!                     int l1 = this.lightUpdateBlockList[i++];
!                     int i2 = (l1 & 63) - 32 + i1;
!                     int j2 = (l1 >> 6 & 63) - 32 + j1;
!                     int k2 = (l1 >> 12 & 63) - 32 + k1;
!                     int l2 = l1 >> 18 & 15;
!                     BlockPos blockpos = new BlockPos(i2, j2, k2);
!                     int i3 = this.getLightFor(lightType, blockpos);
  
!                     if (i3 == l2)
                      {
!                         this.setLightFor(lightType, blockpos, 0);
  
!                         if (l2 > 0)
                          {
!                             int j3 = MathHelper.abs(i2 - i1);
!                             int k3 = MathHelper.abs(j2 - j1);
!                             int l3 = MathHelper.abs(k2 - k1);
  
!                             if (j3 + k3 + l3 < 17)
                              {
                                  BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
                                  for (EnumFacing enumfacing : EnumFacing.values())
                                  {
!                                     int i4 = i2 + enumfacing.getFrontOffsetX();
!                                     int j4 = j2 + enumfacing.getFrontOffsetY();
!                                     int k4 = k2 + enumfacing.getFrontOffsetZ();
!                                     blockpos$pooledmutableblockpos.setPos(i4, j4, k4);
!                                     int l4 = Math.max(1, this.getBlockState(blockpos$pooledmutableblockpos).getLightOpacity());
!                                     i3 = this.getLightFor(lightType, blockpos$pooledmutableblockpos);
  
!                                     if (i3 == l2 - l4 && j < this.lightUpdateBlockList.length)
                                      {
!                                         this.lightUpdateBlockList[j++] = i4 - i1 + 32 | j4 - j1 + 32 << 6 | k4 - k1 + 32 << 12 | l2 - l4 << 18;
                                      }
                                  }
  
--- 2856,2914 ----
          }
          else
          {
!             int j2 = 0;
!             int k2 = 0;
              this.theProfiler.startSection("getBrightness");
!             int l2 = this.getLightFor(lightType, pos);
!             int i3 = this.getRawLight(pos, lightType);
!             int j3 = pos.getX();
!             int k3 = pos.getY();
!             int l3 = pos.getZ();
  
!             if (i3 > l2)
              {
!                 this.lightUpdateBlockList[k2++] = 133152;
              }
!             else if (i3 < l2)
              {
!                 this.lightUpdateBlockList[k2++] = 133152 | l2 << 18;
  
!                 while (j2 < k2)
                  {
!                     int i4 = this.lightUpdateBlockList[j2++];
!                     int j4 = (i4 & 63) - 32 + j3;
!                     int k4 = (i4 >> 6 & 63) - 32 + k3;
!                     int l4 = (i4 >> 12 & 63) - 32 + l3;
!                     int i5 = i4 >> 18 & 15;
!                     BlockPos blockpos1 = new BlockPos(j4, k4, l4);
!                     int j5 = this.getLightFor(lightType, blockpos1);
  
!                     if (j5 == i5)
                      {
!                         this.setLightFor(lightType, blockpos1, 0);
  
!                         if (i5 > 0)
                          {
!                             int k5 = MathHelper.abs(j4 - j3);
!                             int l5 = MathHelper.abs(k4 - k3);
!                             int i6 = MathHelper.abs(l4 - l3);
  
!                             if (k5 + l5 + i6 < 17)
                              {
                                  BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
  
                                  for (EnumFacing enumfacing : EnumFacing.values())
                                  {
!                                     int j6 = j4 + enumfacing.getFrontOffsetX();
!                                     int k6 = k4 + enumfacing.getFrontOffsetY();
!                                     int l6 = l4 + enumfacing.getFrontOffsetZ();
!                                     blockpos$pooledmutableblockpos.setPos(j6, k6, l6);
!                                     int i7 = Math.max(1, this.getBlockState(blockpos$pooledmutableblockpos).getLightOpacity());
!                                     j5 = this.getLightFor(lightType, blockpos$pooledmutableblockpos);
  
!                                     if (j5 == i5 - i7 && k2 < this.lightUpdateBlockList.length)
                                      {
!                                         this.lightUpdateBlockList[k2++] = j6 - j3 + 32 | k6 - k3 + 32 << 6 | l6 - l3 + 32 << 12 | i5 - i7 << 18;
                                      }
                                  }
  
***************
*** 2914,2976 ****
                      }
                  }
  
!                 i = 0;
              }
  
              this.theProfiler.endSection();
              this.theProfiler.startSection("checkedPosition < toCheckCount");
  
!             while (i < j)
              {
!                 int i5 = this.lightUpdateBlockList[i++];
!                 int j5 = (i5 & 63) - 32 + i1;
!                 int k5 = (i5 >> 6 & 63) - 32 + j1;
!                 int l5 = (i5 >> 12 & 63) - 32 + k1;
!                 BlockPos blockpos1 = new BlockPos(j5, k5, l5);
!                 int i6 = this.getLightFor(lightType, blockpos1);
!                 int j6 = this.getRawLight(blockpos1, lightType);
  
!                 if (j6 != i6)
                  {
!                     this.setLightFor(lightType, blockpos1, j6);
  
!                     if (j6 > i6)
                      {
!                         int k6 = Math.abs(j5 - i1);
!                         int l6 = Math.abs(k5 - j1);
!                         int i7 = Math.abs(l5 - k1);
!                         boolean flag = j < this.lightUpdateBlockList.length - 6;
  
!                         if (k6 + l6 + i7 < 17 && flag)
                          {
!                             if (this.getLightFor(lightType, blockpos1.west()) < j6)
                              {
!                                 this.lightUpdateBlockList[j++] = j5 - 1 - i1 + 32 + (k5 - j1 + 32 << 6) + (l5 - k1 + 32 << 12);
                              }
  
!                             if (this.getLightFor(lightType, blockpos1.east()) < j6)
                              {
!                                 this.lightUpdateBlockList[j++] = j5 + 1 - i1 + 32 + (k5 - j1 + 32 << 6) + (l5 - k1 + 32 << 12);
                              }
  
!                             if (this.getLightFor(lightType, blockpos1.down()) < j6)
                              {
!                                 this.lightUpdateBlockList[j++] = j5 - i1 + 32 + (k5 - 1 - j1 + 32 << 6) + (l5 - k1 + 32 << 12);
                              }
  
!                             if (this.getLightFor(lightType, blockpos1.up()) < j6)
                              {
!                                 this.lightUpdateBlockList[j++] = j5 - i1 + 32 + (k5 + 1 - j1 + 32 << 6) + (l5 - k1 + 32 << 12);
                              }
  
!                             if (this.getLightFor(lightType, blockpos1.north()) < j6)
                              {
!                                 this.lightUpdateBlockList[j++] = j5 - i1 + 32 + (k5 - j1 + 32 << 6) + (l5 - 1 - k1 + 32 << 12);
                              }
  
!                             if (this.getLightFor(lightType, blockpos1.south()) < j6)
                              {
!                                 this.lightUpdateBlockList[j++] = j5 - i1 + 32 + (k5 - j1 + 32 << 6) + (l5 + 1 - k1 + 32 << 12);
                              }
                          }
                      }
--- 2918,2980 ----
                      }
                  }
  
!                 j2 = 0;
              }
  
              this.theProfiler.endSection();
              this.theProfiler.startSection("checkedPosition < toCheckCount");
  
!             while (j2 < k2)
              {
!                 int j7 = this.lightUpdateBlockList[j2++];
!                 int k7 = (j7 & 63) - 32 + j3;
!                 int l7 = (j7 >> 6 & 63) - 32 + k3;
!                 int i8 = (j7 >> 12 & 63) - 32 + l3;
!                 BlockPos blockpos2 = new BlockPos(k7, l7, i8);
!                 int j8 = this.getLightFor(lightType, blockpos2);
!                 int k8 = this.getRawLight(blockpos2, lightType);
  
!                 if (k8 != j8)
                  {
!                     this.setLightFor(lightType, blockpos2, k8);
  
!                     if (k8 > j8)
                      {
!                         int l8 = Math.abs(k7 - j3);
!                         int i9 = Math.abs(l7 - k3);
!                         int j9 = Math.abs(i8 - l3);
!                         boolean flag = k2 < this.lightUpdateBlockList.length - 6;
  
!                         if (l8 + i9 + j9 < 17 && flag)
                          {
!                             if (this.getLightFor(lightType, blockpos2.west()) < k8)
                              {
!                                 this.lightUpdateBlockList[k2++] = k7 - 1 - j3 + 32 + (l7 - k3 + 32 << 6) + (i8 - l3 + 32 << 12);
                              }
  
!                             if (this.getLightFor(lightType, blockpos2.east()) < k8)
                              {
!                                 this.lightUpdateBlockList[k2++] = k7 + 1 - j3 + 32 + (l7 - k3 + 32 << 6) + (i8 - l3 + 32 << 12);
                              }
  
!                             if (this.getLightFor(lightType, blockpos2.down()) < k8)
                              {
!                                 this.lightUpdateBlockList[k2++] = k7 - j3 + 32 + (l7 - 1 - k3 + 32 << 6) + (i8 - l3 + 32 << 12);
                              }
  
!                             if (this.getLightFor(lightType, blockpos2.up()) < k8)
                              {
!                                 this.lightUpdateBlockList[k2++] = k7 - j3 + 32 + (l7 + 1 - k3 + 32 << 6) + (i8 - l3 + 32 << 12);
                              }
  
!                             if (this.getLightFor(lightType, blockpos2.north()) < k8)
                              {
!                                 this.lightUpdateBlockList[k2++] = k7 - j3 + 32 + (l7 - k3 + 32 << 6) + (i8 - 1 - l3 + 32 << 12);
                              }
  
!                             if (this.getLightFor(lightType, blockpos2.south()) < k8)
                              {
!                                 this.lightUpdateBlockList[k2++] = k7 - j3 + 32 + (l7 - k3 + 32 << 6) + (i8 + 1 - l3 + 32 << 12);
                              }
                          }
                      }
***************
*** 3010,3027 ****
      public List<Entity> getEntitiesInAABBexcluding(@Nullable Entity entityIn, AxisAlignedBB boundingBox, @Nullable Predicate <? super Entity > predicate)
      {
          List<Entity> list = Lists.<Entity>newArrayList();
!         int i = MathHelper.floor((boundingBox.minX - 2.0D) / 16.0D);
!         int j = MathHelper.floor((boundingBox.maxX + 2.0D) / 16.0D);
!         int k = MathHelper.floor((boundingBox.minZ - 2.0D) / 16.0D);
!         int l = MathHelper.floor((boundingBox.maxZ + 2.0D) / 16.0D);
  
!         for (int i1 = i; i1 <= j; ++i1)
          {
!             for (int j1 = k; j1 <= l; ++j1)
              {
!                 if (this.isChunkLoaded(i1, j1, true))
                  {
!                     this.getChunkFromChunkCoords(i1, j1).getEntitiesWithinAABBForEntity(entityIn, boundingBox, list, predicate);
                  }
              }
          }
--- 3014,3031 ----
      public List<Entity> getEntitiesInAABBexcluding(@Nullable Entity entityIn, AxisAlignedBB boundingBox, @Nullable Predicate <? super Entity > predicate)
      {
          List<Entity> list = Lists.<Entity>newArrayList();
!         int j2 = MathHelper.floor((boundingBox.minX - 2.0D) / 16.0D);
!         int k2 = MathHelper.floor((boundingBox.maxX + 2.0D) / 16.0D);
!         int l2 = MathHelper.floor((boundingBox.minZ - 2.0D) / 16.0D);
!         int i3 = MathHelper.floor((boundingBox.maxZ + 2.0D) / 16.0D);
  
!         for (int j3 = j2; j3 <= k2; ++j3)
          {
!             for (int k3 = l2; k3 <= i3; ++k3)
              {
!                 if (this.isChunkLoaded(j3, k3, true))
                  {
!                     this.getChunkFromChunkCoords(j3, k3).getEntitiesWithinAABBForEntity(entityIn, boundingBox, list, predicate);
                  }
              }
          }
***************
*** 3033,3043 ****
      {
          List<T> list = Lists.<T>newArrayList();
  
!         for (Entity entity : this.loadedEntityList)
          {
!             if (entityType.isAssignableFrom(entity.getClass()) && filter.apply((T)entity))
              {
!                 list.add((T)entity);
              }
          }
  
--- 3037,3047 ----
      {
          List<T> list = Lists.<T>newArrayList();
  
!         for (Entity entity4 : this.loadedEntityList)
          {
!             if (entityType.isAssignableFrom(entity4.getClass()) && filter.apply((T)entity4))
              {
!                 list.add((T)entity4);
              }
          }
  
***************
*** 3048,3058 ****
      {
          List<T> list = Lists.<T>newArrayList();
  
!         for (Entity entity : this.playerEntities)
          {
!             if (playerType.isAssignableFrom(entity.getClass()) && filter.apply((T)entity))
              {
!                 list.add((T)entity);
              }
          }
  
--- 3052,3062 ----
      {
          List<T> list = Lists.<T>newArrayList();
  
!         for (Entity entity4 : this.playerEntities)
          {
!             if (playerType.isAssignableFrom(entity4.getClass()) && filter.apply((T)entity4))
              {
!                 list.add((T)entity4);
              }
          }
  
***************
*** 3066,3084 ****
  
      public <T extends Entity> List<T> getEntitiesWithinAABB(Class <? extends T > clazz, AxisAlignedBB aabb, @Nullable Predicate <? super T > filter)
      {
!         int i = MathHelper.floor((aabb.minX - 2.0D) / 16.0D);
!         int j = MathHelper.ceil((aabb.maxX + 2.0D) / 16.0D);
!         int k = MathHelper.floor((aabb.minZ - 2.0D) / 16.0D);
!         int l = MathHelper.ceil((aabb.maxZ + 2.0D) / 16.0D);
          List<T> list = Lists.<T>newArrayList();
  
!         for (int i1 = i; i1 < j; ++i1)
          {
!             for (int j1 = k; j1 < l; ++j1)
              {
!                 if (this.isChunkLoaded(i1, j1, true))
                  {
!                     this.getChunkFromChunkCoords(i1, j1).getEntitiesOfTypeWithinAAAB(clazz, aabb, list, filter);
                  }
              }
          }
--- 3070,3088 ----
  
      public <T extends Entity> List<T> getEntitiesWithinAABB(Class <? extends T > clazz, AxisAlignedBB aabb, @Nullable Predicate <? super T > filter)
      {
!         int j2 = MathHelper.floor((aabb.minX - 2.0D) / 16.0D);
!         int k2 = MathHelper.ceil((aabb.maxX + 2.0D) / 16.0D);
!         int l2 = MathHelper.floor((aabb.minZ - 2.0D) / 16.0D);
!         int i3 = MathHelper.ceil((aabb.maxZ + 2.0D) / 16.0D);
          List<T> list = Lists.<T>newArrayList();
  
!         for (int j3 = j2; j3 < k2; ++j3)
          {
!             for (int k3 = l2; k3 < i3; ++k3)
              {
!                 if (this.isChunkLoaded(j3, k3, true))
                  {
!                     this.getChunkFromChunkCoords(j3, k3).getEntitiesOfTypeWithinAAAB(clazz, aabb, list, filter);
                  }
              }
          }
***************
*** 3093,3101 ****
          T t = null;
          double d0 = Double.MAX_VALUE;
  
!         for (int i = 0; i < list.size(); ++i)
          {
!             T t1 = list.get(i);
  
              if (t1 != closestTo && EntitySelectors.NOT_SPECTATING.apply(t1))
              {
--- 3097,3105 ----
          T t = null;
          double d0 = Double.MAX_VALUE;
  
!         for (int j2 = 0; j2 < list.size(); ++j2)
          {
!             T t1 = list.get(j2);
  
              if (t1 != closestTo && EntitySelectors.NOT_SPECTATING.apply(t1))
              {
***************
*** 3140,3165 ****
       */
      public int countEntities(Class<?> entityType)
      {
!         int i = 0;
  
!         for (Entity entity : this.loadedEntityList)
          {
!             if ((!(entity instanceof EntityLiving) || !((EntityLiving)entity).isNoDespawnRequired()) && entityType.isAssignableFrom(entity.getClass()))
              {
!                 ++i;
              }
          }
  
!         return i;
      }
  
      public void loadEntities(Collection<Entity> entityCollection)
      {
          this.loadedEntityList.addAll(entityCollection);
  
!         for (Entity entity : entityCollection)
          {
!             this.onEntityAdded(entity);
          }
      }
  
--- 3144,3169 ----
       */
      public int countEntities(Class<?> entityType)
      {
!         int j2 = 0;
  
!         for (Entity entity4 : this.loadedEntityList)
          {
!             if ((!(entity4 instanceof EntityLiving) || !((EntityLiving)entity4).isNoDespawnRequired()) && entityType.isAssignableFrom(entity4.getClass()))
              {
!                 ++j2;
              }
          }
  
!         return j2;
      }
  
      public void loadEntities(Collection<Entity> entityCollection)
      {
          this.loadedEntityList.addAll(entityCollection);
  
!         for (Entity entity4 : entityCollection)
          {
!             this.onEntityAdded(entity4);
          }
      }
  
***************
*** 3170,3189 ****
  
      public boolean func_190527_a(Block p_190527_1_, BlockPos p_190527_2_, boolean p_190527_3_, EnumFacing p_190527_4_, @Nullable Entity p_190527_5_)
      {
!         IBlockState iblockstate = this.getBlockState(p_190527_2_);
          AxisAlignedBB axisalignedbb = p_190527_3_ ? null : p_190527_1_.getDefaultState().getCollisionBoundingBox(this, p_190527_2_);
  
          if (axisalignedbb != Block.NULL_AABB && !this.checkNoEntityCollision(axisalignedbb.offset(p_190527_2_), p_190527_5_))
          {
              return false;
          }
!         else if (iblockstate.getMaterial() == Material.CIRCUITS && p_190527_1_ == Blocks.ANVIL)
          {
              return true;
          }
          else
          {
!             return iblockstate.getMaterial().isReplaceable() && p_190527_1_.canPlaceBlockOnSide(this, p_190527_2_, p_190527_4_);
          }
      }
  
--- 3174,3193 ----
  
      public boolean func_190527_a(Block p_190527_1_, BlockPos p_190527_2_, boolean p_190527_3_, EnumFacing p_190527_4_, @Nullable Entity p_190527_5_)
      {
!         IBlockState iblockstate1 = this.getBlockState(p_190527_2_);
          AxisAlignedBB axisalignedbb = p_190527_3_ ? null : p_190527_1_.getDefaultState().getCollisionBoundingBox(this, p_190527_2_);
  
          if (axisalignedbb != Block.NULL_AABB && !this.checkNoEntityCollision(axisalignedbb.offset(p_190527_2_), p_190527_5_))
          {
              return false;
          }
!         else if (iblockstate1.getMaterial() == Material.CIRCUITS && p_190527_1_ == Blocks.ANVIL)
          {
              return true;
          }
          else
          {
!             return iblockstate1.getMaterial().isReplaceable() && p_190527_1_.canPlaceBlockOnSide(this, p_190527_2_, p_190527_4_);
          }
      }
  
***************
*** 3215,3263 ****
       */
      public int getStrongPower(BlockPos pos)
      {
!         int i = 0;
!         i = Math.max(i, this.getStrongPower(pos.down(), EnumFacing.DOWN));
  
!         if (i >= 15)
          {
!             return i;
          }
          else
          {
!             i = Math.max(i, this.getStrongPower(pos.up(), EnumFacing.UP));
  
!             if (i >= 15)
              {
!                 return i;
              }
              else
              {
!                 i = Math.max(i, this.getStrongPower(pos.north(), EnumFacing.NORTH));
  
!                 if (i >= 15)
                  {
!                     return i;
                  }
                  else
                  {
!                     i = Math.max(i, this.getStrongPower(pos.south(), EnumFacing.SOUTH));
  
!                     if (i >= 15)
                      {
!                         return i;
                      }
                      else
                      {
!                         i = Math.max(i, this.getStrongPower(pos.west(), EnumFacing.WEST));
  
!                         if (i >= 15)
                          {
!                             return i;
                          }
                          else
                          {
!                             i = Math.max(i, this.getStrongPower(pos.east(), EnumFacing.EAST));
!                             return i >= 15 ? i : i;
                          }
                      }
                  }
--- 3219,3267 ----
       */
      public int getStrongPower(BlockPos pos)
      {
!         int j2 = 0;
!         j2 = Math.max(j2, this.getStrongPower(pos.down(), EnumFacing.DOWN));
  
!         if (j2 >= 15)
          {
!             return j2;
          }
          else
          {
!             j2 = Math.max(j2, this.getStrongPower(pos.up(), EnumFacing.UP));
  
!             if (j2 >= 15)
              {
!                 return j2;
              }
              else
              {
!                 j2 = Math.max(j2, this.getStrongPower(pos.north(), EnumFacing.NORTH));
  
!                 if (j2 >= 15)
                  {
!                     return j2;
                  }
                  else
                  {
!                     j2 = Math.max(j2, this.getStrongPower(pos.south(), EnumFacing.SOUTH));
  
!                     if (j2 >= 15)
                      {
!                         return j2;
                      }
                      else
                      {
!                         j2 = Math.max(j2, this.getStrongPower(pos.west(), EnumFacing.WEST));
  
!                         if (j2 >= 15)
                          {
!                             return j2;
                          }
                          else
                          {
!                             j2 = Math.max(j2, this.getStrongPower(pos.east(), EnumFacing.EAST));
!                             return j2 >= 15 ? j2 : j2;
                          }
                      }
                  }
***************
*** 3272,3279 ****
  
      public int getRedstonePower(BlockPos pos, EnumFacing facing)
      {
!         IBlockState iblockstate = this.getBlockState(pos);
!         return iblockstate.isNormalCube() ? this.getStrongPower(pos) : iblockstate.getWeakPower(this, pos, facing);
      }
  
      public boolean isBlockPowered(BlockPos pos)
--- 3276,3283 ----
  
      public int getRedstonePower(BlockPos pos, EnumFacing facing)
      {
!         IBlockState iblockstate1 = this.getBlockState(pos);
!         return iblockstate1.isNormalCube() ? this.getStrongPower(pos) : iblockstate1.getWeakPower(this, pos, facing);
      }
  
      public boolean isBlockPowered(BlockPos pos)
***************
*** 3310,3333 ****
       */
      public int isBlockIndirectlyGettingPowered(BlockPos pos)
      {
!         int i = 0;
  
          for (EnumFacing enumfacing : EnumFacing.values())
          {
!             int j = this.getRedstonePower(pos.offset(enumfacing), enumfacing);
  
!             if (j >= 15)
              {
                  return 15;
              }
  
!             if (j > i)
              {
!                 i = j;
              }
          }
  
!         return i;
      }
  
      @Nullable
--- 3314,3337 ----
       */
      public int isBlockIndirectlyGettingPowered(BlockPos pos)
      {
!         int j2 = 0;
  
          for (EnumFacing enumfacing : EnumFacing.values())
          {
!             int k2 = this.getRedstonePower(pos.offset(enumfacing), enumfacing);
  
!             if (k2 >= 15)
              {
                  return 15;
              }
  
!             if (k2 > j2)
              {
!                 j2 = k2;
              }
          }
  
!         return j2;
      }
  
      @Nullable
***************
*** 3359,3367 ****
          double d0 = -1.0D;
          EntityPlayer entityplayer = null;
  
!         for (int i = 0; i < this.playerEntities.size(); ++i)
          {
!             EntityPlayer entityplayer1 = this.playerEntities.get(i);
  
              if (p_190525_9_.apply(entityplayer1))
              {
--- 3363,3371 ----
          double d0 = -1.0D;
          EntityPlayer entityplayer = null;
  
!         for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
          {
!             EntityPlayer entityplayer1 = this.playerEntities.get(j2);
  
              if (p_190525_9_.apply(entityplayer1))
              {
***************
*** 3380,3388 ****
  
      public boolean isAnyPlayerWithinRangeAt(double x, double y, double z, double range)
      {
!         for (int i = 0; i < this.playerEntities.size(); ++i)
          {
!             EntityPlayer entityplayer = this.playerEntities.get(i);
  
              if (EntitySelectors.NOT_SPECTATING.apply(entityplayer))
              {
--- 3384,3392 ----
  
      public boolean isAnyPlayerWithinRangeAt(double x, double y, double z, double range)
      {
!         for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
          {
!             EntityPlayer entityplayer = this.playerEntities.get(j2);
  
              if (EntitySelectors.NOT_SPECTATING.apply(entityplayer))
              {
***************
*** 3416,3424 ****
          double d0 = -1.0D;
          EntityPlayer entityplayer = null;
  
!         for (int i = 0; i < this.playerEntities.size(); ++i)
          {
!             EntityPlayer entityplayer1 = this.playerEntities.get(i);
  
              if (!entityplayer1.capabilities.disableDamage && entityplayer1.isEntityAlive() && !entityplayer1.isSpectator() && (p_184150_12_ == null || p_184150_12_.apply(entityplayer1)))
              {
--- 3420,3428 ----
          double d0 = -1.0D;
          EntityPlayer entityplayer = null;
  
!         for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
          {
!             EntityPlayer entityplayer1 = this.playerEntities.get(j2);
  
              if (!entityplayer1.capabilities.disableDamage && entityplayer1.isEntityAlive() && !entityplayer1.isSpectator() && (p_184150_12_ == null || p_184150_12_.apply(entityplayer1)))
              {
***************
*** 3465,3473 ****
       */
      public EntityPlayer getPlayerEntityByName(String name)
      {
!         for (int i = 0; i < this.playerEntities.size(); ++i)
          {
!             EntityPlayer entityplayer = this.playerEntities.get(i);
  
              if (name.equals(entityplayer.getName()))
              {
--- 3469,3477 ----
       */
      public EntityPlayer getPlayerEntityByName(String name)
      {
!         for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
          {
!             EntityPlayer entityplayer = this.playerEntities.get(j2);
  
              if (name.equals(entityplayer.getName()))
              {
***************
*** 3481,3489 ****
      @Nullable
      public EntityPlayer getPlayerEntityByUUID(UUID uuid)
      {
!         for (int i = 0; i < this.playerEntities.size(); ++i)
          {
!             EntityPlayer entityplayer = this.playerEntities.get(i);
  
              if (uuid.equals(entityplayer.getUniqueID()))
              {
--- 3485,3493 ----
      @Nullable
      public EntityPlayer getPlayerEntityByUUID(UUID uuid)
      {
!         for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
          {
!             EntityPlayer entityplayer = this.playerEntities.get(j2);
  
              if (uuid.equals(entityplayer.getUniqueID()))
              {
***************
*** 3545,3558 ****
       */
      public BlockPos getSpawnPoint()
      {
!         BlockPos blockpos = new BlockPos(this.worldInfo.getSpawnX(), this.worldInfo.getSpawnY(), this.worldInfo.getSpawnZ());
  
!         if (!this.getWorldBorder().contains(blockpos))
          {
!             blockpos = this.getHeight(new BlockPos(this.getWorldBorder().getCenterX(), 0.0D, this.getWorldBorder().getCenterZ()));
          }
  
!         return blockpos;
      }
  
      public void setSpawnPoint(BlockPos pos)
--- 3549,3562 ----
       */
      public BlockPos getSpawnPoint()
      {
!         BlockPos blockpos1 = new BlockPos(this.worldInfo.getSpawnX(), this.worldInfo.getSpawnY(), this.worldInfo.getSpawnZ());
  
!         if (!this.getWorldBorder().contains(blockpos1))
          {
!             blockpos1 = this.getHeight(new BlockPos(this.getWorldBorder().getCenterX(), 0.0D, this.getWorldBorder().getCenterZ()));
          }
  
!         return blockpos1;
      }
  
      public void setSpawnPoint(BlockPos pos)
***************
*** 3565,3579 ****
       */
      public void joinEntityInSurroundings(Entity entityIn)
      {
!         int i = MathHelper.floor(entityIn.posX / 16.0D);
!         int j = MathHelper.floor(entityIn.posZ / 16.0D);
!         int k = 2;
  
!         for (int l = -2; l <= 2; ++l)
          {
!             for (int i1 = -2; i1 <= 2; ++i1)
              {
!                 this.getChunkFromChunkCoords(i + l, j + i1);
              }
          }
  
--- 3569,3583 ----
       */
      public void joinEntityInSurroundings(Entity entityIn)
      {
!         int j2 = MathHelper.floor(entityIn.posX / 16.0D);
!         int k2 = MathHelper.floor(entityIn.posZ / 16.0D);
!         int l2 = 2;
  
!         for (int i3 = -2; i3 <= 2; ++i3)
          {
!             for (int j3 = -2; j3 <= 2; ++j3)
              {
!                 this.getChunkFromChunkCoords(j2 + i3, k2 + j3);
              }
          }
  
***************
*** 3761,3769 ****
  
      public void playBroadcastSound(int id, BlockPos pos, int data)
      {
!         for (int i = 0; i < this.eventListeners.size(); ++i)
          {
!             ((IWorldEventListener)this.eventListeners.get(i)).broadcastSound(id, pos, data);
          }
      }
  
--- 3765,3773 ----
  
      public void playBroadcastSound(int id, BlockPos pos, int data)
      {
!         for (int j2 = 0; j2 < this.eventListeners.size(); ++j2)
          {
!             ((IWorldEventListener)this.eventListeners.get(j2)).broadcastSound(id, pos, data);
          }
      }
  
***************
*** 3776,3795 ****
      {
          try
          {
!             for (int i = 0; i < this.eventListeners.size(); ++i)
              {
!                 ((IWorldEventListener)this.eventListeners.get(i)).playEvent(player, type, pos, data);
              }
          }
!         catch (Throwable throwable)
          {
!             CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Playing level event");
!             CrashReportCategory crashreportcategory = crashreport.makeCategory("Level event being played");
!             crashreportcategory.addCrashSection("Block coordinates", CrashReportCategory.getCoordinateInfo(pos));
!             crashreportcategory.addCrashSection("Event source", player);
!             crashreportcategory.addCrashSection("Event type", Integer.valueOf(type));
!             crashreportcategory.addCrashSection("Event data", Integer.valueOf(data));
!             throw new ReportedException(crashreport);
          }
      }
  
--- 3780,3799 ----
      {
          try
          {
!             for (int j2 = 0; j2 < this.eventListeners.size(); ++j2)
              {
!                 ((IWorldEventListener)this.eventListeners.get(j2)).playEvent(player, type, pos, data);
              }
          }
!         catch (Throwable throwable3)
          {
!             CrashReport crashreport3 = CrashReport.makeCrashReport(throwable3, "Playing level event");
!             CrashReportCategory crashreportcategory3 = crashreport3.makeCategory("Level event being played");
!             crashreportcategory3.addCrashSection("Block coordinates", CrashReportCategory.getCoordinateInfo(pos));
!             crashreportcategory3.addCrashSection("Event source", player);
!             crashreportcategory3.addCrashSection("Event type", Integer.valueOf(type));
!             crashreportcategory3.addCrashSection("Event data", Integer.valueOf(data));
!             throw new ReportedException(crashreport3);
          }
      }
  
***************
*** 3814,3821 ****
       */
      public Random setRandomSeed(int p_72843_1_, int p_72843_2_, int p_72843_3_)
      {
!         long i = (long)p_72843_1_ * 341873128712L + (long)p_72843_2_ * 132897987541L + this.getWorldInfo().getSeed() + (long)p_72843_3_;
!         this.rand.setSeed(i);
          return this.rand;
      }
  
--- 3818,3825 ----
       */
      public Random setRandomSeed(int p_72843_1_, int p_72843_2_, int p_72843_3_)
      {
!         long j2 = (long)p_72843_1_ * 341873128712L + (long)p_72843_2_ * 132897987541L + this.getWorldInfo().getSeed() + (long)p_72843_3_;
!         this.rand.setSeed(j2);
          return this.rand;
      }
  
***************
*** 3832,3847 ****
       */
      public CrashReportCategory addWorldInfoToCrashReport(CrashReport report)
      {
!         CrashReportCategory crashreportcategory = report.makeCategoryDepth("Affected level", 1);
!         crashreportcategory.addCrashSection("Level name", this.worldInfo == null ? "????" : this.worldInfo.getWorldName());
!         crashreportcategory.setDetail("All players", new ICrashReportDetail<String>()
          {
              public String call()
              {
                  return World.this.playerEntities.size() + " total; " + World.this.playerEntities;
              }
          });
!         crashreportcategory.setDetail("Chunk stats", new ICrashReportDetail<String>()
          {
              public String call()
              {
--- 3836,3851 ----
       */
      public CrashReportCategory addWorldInfoToCrashReport(CrashReport report)
      {
!         CrashReportCategory crashreportcategory3 = report.makeCategoryDepth("Affected level", 1);
!         crashreportcategory3.addCrashSection("Level name", this.worldInfo == null ? "????" : this.worldInfo.getWorldName());
!         crashreportcategory3.setDetail("All players", new ICrashReportDetail<String>()
          {
              public String call()
              {
                  return World.this.playerEntities.size() + " total; " + World.this.playerEntities;
              }
          });
!         crashreportcategory3.setDetail("Chunk stats", new ICrashReportDetail<String>()
          {
              public String call()
              {
***************
*** 3851,3871 ****
  
          try
          {
!             this.worldInfo.addToCrashReport(crashreportcategory);
          }
!         catch (Throwable throwable)
          {
!             crashreportcategory.addCrashSectionThrowable("Level Data Unobtainable", throwable);
          }
  
!         return crashreportcategory;
      }
  
      public void sendBlockBreakProgress(int breakerId, BlockPos pos, int progress)
      {
!         for (int i = 0; i < this.eventListeners.size(); ++i)
          {
!             IWorldEventListener iworldeventlistener = this.eventListeners.get(i);
              iworldeventlistener.sendBlockBreakProgress(breakerId, pos, progress);
          }
      }
--- 3855,3875 ----
  
          try
          {
!             this.worldInfo.addToCrashReport(crashreportcategory3);
          }
!         catch (Throwable throwable3)
          {
!             crashreportcategory3.addCrashSectionThrowable("Level Data Unobtainable", throwable3);
          }
  
!         return crashreportcategory3;
      }
  
      public void sendBlockBreakProgress(int breakerId, BlockPos pos, int progress)
      {
!         for (int j2 = 0; j2 < this.eventListeners.size(); ++j2)
          {
!             IWorldEventListener iworldeventlistener = this.eventListeners.get(j2);
              iworldeventlistener.sendBlockBreakProgress(breakerId, pos, progress);
          }
      }
***************
*** 3896,3919 ****
      {
          for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos = pos.offset(enumfacing);
  
!             if (this.isBlockLoaded(blockpos))
              {
!                 IBlockState iblockstate = this.getBlockState(blockpos);
  
!                 if (Blocks.UNPOWERED_COMPARATOR.isSameDiode(iblockstate))
                  {
!                     iblockstate.neighborChanged(this, blockpos, blockIn, pos);
                  }
!                 else if (iblockstate.isNormalCube())
                  {
!                     blockpos = blockpos.offset(enumfacing);
!                     iblockstate = this.getBlockState(blockpos);
  
!                     if (Blocks.UNPOWERED_COMPARATOR.isSameDiode(iblockstate))
                      {
!                         iblockstate.neighborChanged(this, blockpos, blockIn, pos);
                      }
                  }
              }
--- 3900,3923 ----
      {
          for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
          {
!             BlockPos blockpos1 = pos.offset(enumfacing);
  
!             if (this.isBlockLoaded(blockpos1))
              {
!                 IBlockState iblockstate1 = this.getBlockState(blockpos1);
  
!                 if (Blocks.UNPOWERED_COMPARATOR.isSameDiode(iblockstate1))
                  {
!                     iblockstate1.neighborChanged(this, blockpos1, blockIn, pos);
                  }
!                 else if (iblockstate1.isNormalCube())
                  {
!                     blockpos1 = blockpos1.offset(enumfacing);
!                     iblockstate1 = this.getBlockState(blockpos1);
  
!                     if (Blocks.UNPOWERED_COMPARATOR.isSameDiode(iblockstate1))
                      {
!                         iblockstate1.neighborChanged(this, blockpos1, blockIn, pos);
                      }
                  }
              }
***************
*** 3922,3937 ****
  
      public DifficultyInstance getDifficultyForLocation(BlockPos pos)
      {
!         long i = 0L;
          float f = 0.0F;
  
          if (this.isBlockLoaded(pos))
          {
              f = this.getCurrentMoonPhaseFactor();
!             i = this.getChunkFromBlockCoords(pos).getInhabitedTime();
          }
  
!         return new DifficultyInstance(this.getDifficulty(), this.getWorldTime(), i, f);
      }
  
      public EnumDifficulty getDifficulty()
--- 3926,3941 ----
  
      public DifficultyInstance getDifficultyForLocation(BlockPos pos)
      {
!         long j2 = 0L;
          float f = 0.0F;
  
          if (this.isBlockLoaded(pos))
          {
              f = this.getCurrentMoonPhaseFactor();
!             j2 = this.getChunkFromBlockCoords(pos).getInhabitedTime();
          }
  
!         return new DifficultyInstance(this.getDifficulty(), this.getWorldTime(), j2, f);
      }
  
      public EnumDifficulty getDifficulty()
***************
*** 3974,3984 ****
       */
      public boolean isSpawnChunk(int x, int z)
      {
!         BlockPos blockpos = this.getSpawnPoint();
!         int i = x * 16 + 8 - blockpos.getX();
!         int j = z * 16 + 8 - blockpos.getZ();
!         int k = 128;
!         return i >= -128 && i <= 128 && j >= -128 && j <= 128;
      }
  
      public void sendPacketToServer(Packet<?> packetIn)
--- 3978,3988 ----
       */
      public boolean isSpawnChunk(int x, int z)
      {
!         BlockPos blockpos1 = this.getSpawnPoint();
!         int j2 = x * 16 + 8 - blockpos1.getX();
!         int k2 = z * 16 + 8 - blockpos1.getZ();
!         int l2 = 128;
!         return j2 >= -128 && j2 <= 128 && k2 >= -128 && k2 <= 128;
      }
  
      public void sendPacketToServer(Packet<?> packetIn)
diff -rc ./world/WorldServer.java C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/WorldServer.java
*** ./world/WorldServer.java	2018-11-18 13:19:04.658159000 -0800
--- C:\Users\Eric\Documents\Games\Minecraft\SnowballClient\ClientGithub\src\net\minecraft/world/WorldServer.java	2017-10-20 21:01:33.144138000 -0700
***************
*** 1,6 ****
  package net.minecraft.world;
  
- import com.google.common.base.Predicate;
  import com.google.common.collect.Lists;
  import com.google.common.collect.Maps;
  import com.google.common.collect.Sets;
--- 1,5 ----
***************
*** 15,20 ****
--- 14,21 ----
  import java.util.Set;
  import java.util.TreeSet;
  import java.util.UUID;
+ import java.util.function.Predicate;
+ import java.util.stream.Collectors;
  import javax.annotation.Nullable;
  import net.minecraft.advancements.AdvancementManager;
  import net.minecraft.advancements.FunctionManager;
***************
*** 281,292 ****
      {
          this.allPlayersSleeping = false;
  
!         for (EntityPlayer entityplayer : this.playerEntities)
          {
!             if (entityplayer.isPlayerSleeping())
!             {
!                 entityplayer.wakeUpPlayer(false, false, true);
!             }
          }
  
          if (this.getGameRules().getBoolean("doWeatherCycle"))
--- 282,290 ----
      {
          this.allPlayersSleeping = false;
  
!         for (EntityPlayer entityplayer : this.playerEntities.stream().filter(EntityPlayer::isPlayerSleeping).collect(Collectors.toList()))
          {
!             entityplayer.wakeUpPlayer(false, false, true);
          }
  
          if (this.getGameRules().getBoolean("doWeatherCycle"))
***************
*** 503,509 ****
      {
          BlockPos blockpos = this.getPrecipitationHeight(pos);
          AxisAlignedBB axisalignedbb = (new AxisAlignedBB(blockpos, new BlockPos(blockpos.getX(), this.getHeight(), blockpos.getZ()))).expandXyz(3.0D);
!         List<EntityLivingBase> list = this.getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb, new Predicate<EntityLivingBase>()
          {
              public boolean apply(@Nullable EntityLivingBase p_apply_1_)
              {
--- 501,507 ----
      {
          BlockPos blockpos = this.getPrecipitationHeight(pos);
          AxisAlignedBB axisalignedbb = (new AxisAlignedBB(blockpos, new BlockPos(blockpos.getX(), this.getHeight(), blockpos.getZ()))).expandXyz(3.0D);
!         List<EntityLivingBase> list = this.getEntitiesWithinAABB(EntityLivingBase.class, axisalignedbb, new com.google.common.base.Predicate<EntityLivingBase>()
          {
              public boolean apply(@Nullable EntityLivingBase p_apply_1_)
              {
